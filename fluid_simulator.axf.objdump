
C:/Users/henvill1/project/fluid_simulator.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 80 08 00 00 84 08 00 00 88 08 00 00     @...............
  30:	8c 08 00 00 a4 a3 00 00 f0 4b 00 00 90 08 00 00     .........K......

Disassembly of section .text:

00000040 <__cs3_reset>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb002899 	bl	a340 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	0000a6f8 	.word	0x0000a6f8

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	0000b7f8 	.word	0x0000b7f8

00000124 <__cs3_heap_start_ptr>:
     124:	00130290 	.word	0x00130290

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	0000b800 	.word	0x0000b800
     170:	0000b803 	.word	0x0000b803
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	0000b800 	.word	0x0000b800
     1bc:	0000b800 	.word	0x0000b800
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	0000b800 	.word	0x0000b800
     200:	00000000 	.word	0x00000000
     204:	0000a430 	.word	0x0000a430

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	0000a430 	.word	0x0000a430
     250:	0000b804 	.word	0x0000b804
     254:	0000a6f8 	.word	0x0000a6f8
     258:	00000000 	.word	0x00000000

0000025c <hueToRGB565>:
	return 0;
	
}

// Function to convert a hue to an R(5)G(6)B(5) bit scheme
short int hueToRGB565(float hue) {
     25c:	e92d4070 	push	{r4, r5, r6, lr}
     260:	e1a04000 	mov	r4, r0

    if (hue<0.0) hue = 0.0;
     264:	e3a01000 	mov	r1, #0
     268:	eb002718 	bl	9ed0 <__aeabi_fcmplt>
     26c:	e3500000 	cmp	r0, #0
     270:	1a000046 	bne	390 <hueToRGB565+0x134>
    if (hue>1.0) hue = 1.0;
     274:	e1a00004 	mov	r0, r4
     278:	e3a015fe 	mov	r1, #1065353216	; 0x3f800000
     27c:	eb002725 	bl	9f18 <__aeabi_fcmpgt>
     280:	e3500000 	cmp	r0, #0
    int sector = floor(hue * 6);

    // Calculate the fractional part to transition
    float f = hue * 6 - sector;
    // Invert the fractional part in some cases
    float nf = 1 - f;
     284:	13a005fe 	movne	r0, #1065353216	; 0x3f800000

// Function to convert a hue to an R(5)G(6)B(5) bit scheme
short int hueToRGB565(float hue) {

    if (hue<0.0) hue = 0.0;
    if (hue>1.0) hue = 1.0;
     288:	1a000027 	bne	32c <hueToRGB565+0xd0>
    // Declare variables to store red, green, and blue components (initially floats for calculations)
    float r, g, b;

    // Calculate the sector of the color wheel (shown in the case statement below)
    int sector = floor(hue * 6);
     28c:	e1a00004 	mov	r0, r4
     290:	e3a01000 	mov	r1, #0
     294:	e34410c0 	movt	r1, #16576	; 0x40c0
     298:	eb002621 	bl	9b24 <__aeabi_fmul>
     29c:	e1a05000 	mov	r5, r0
     2a0:	eb002390 	bl	90e8 <__aeabi_f2d>
     2a4:	eb001329 	bl	4f50 <floor>
     2a8:	eb002533 	bl	977c <__aeabi_d2iz>
     2ac:	e1a04000 	mov	r4, r0

    // Calculate the fractional part to transition
    float f = hue * 6 - sector;
     2b0:	eb0025e4 	bl	9a48 <__aeabi_i2f>
     2b4:	e1a01000 	mov	r1, r0
     2b8:	e1a00005 	mov	r0, r5
     2bc:	eb00256f 	bl	9880 <__aeabi_fsub>
     2c0:	e1a05000 	mov	r5, r0
    // Invert the fractional part in some cases
    float nf = 1 - f;
     2c4:	e3a005fe 	mov	r0, #1065353216	; 0x3f800000
     2c8:	e1a01005 	mov	r1, r5
     2cc:	eb00256b 	bl	9880 <__aeabi_fsub>

    // Determine the RGB values based on the sector
    switch (sector) {
     2d0:	e3540004 	cmp	r4, #4
     2d4:	979ff104 	ldrls	pc, [pc, r4, lsl #2]
     2d8:	ea000013 	b	32c <hueToRGB565+0xd0>
     2dc:	000002f0 	.word	0x000002f0
     2e0:	0000033c 	.word	0x0000033c
     2e4:	00000300 	.word	0x00000300
     2e8:	0000030c 	.word	0x0000030c
     2ec:	0000031c 	.word	0x0000031c
    int sector = floor(hue * 6);

    // Calculate the fractional part to transition
    float f = hue * 6 - sector;
    // Invert the fractional part in some cases
    float nf = 1 - f;
     2f0:	e1a06005 	mov	r6, r5

    // Determine the RGB values based on the sector
    switch (sector) {
        case 0:  // Red
            r = 1.0; g = f; b = 0.0; break;
     2f4:	e3a05000 	mov	r5, #0
     2f8:	e3a005fe 	mov	r0, #1065353216	; 0x3f800000
     2fc:	ea000010 	b	344 <hueToRGB565+0xe8>
        case 1:  // Red -> Green
            r = nf; g = 1.0; b = 0.0; break;
        case 2:  // Green
            r = 0.0; g = 1.0; b = f; break;
     300:	e3a065fe 	mov	r6, #1065353216	; 0x3f800000
     304:	e3a00000 	mov	r0, #0
     308:	ea00000d 	b	344 <hueToRGB565+0xe8>
    int sector = floor(hue * 6);

    // Calculate the fractional part to transition
    float f = hue * 6 - sector;
    // Invert the fractional part in some cases
    float nf = 1 - f;
     30c:	e1a06000 	mov	r6, r0
        case 1:  // Red -> Green
            r = nf; g = 1.0; b = 0.0; break;
        case 2:  // Green
            r = 0.0; g = 1.0; b = f; break;
        case 3:  // Green -> Blue
            r = 0.0; g = nf; b = 1.0; break;
     310:	e3a055fe 	mov	r5, #1065353216	; 0x3f800000
     314:	e3a00000 	mov	r0, #0
     318:	ea000009 	b	344 <hueToRGB565+0xe8>

    // Calculate the sector of the color wheel (shown in the case statement below)
    int sector = floor(hue * 6);

    // Calculate the fractional part to transition
    float f = hue * 6 - sector;
     31c:	e1a00005 	mov	r0, r5
        case 2:  // Green
            r = 0.0; g = 1.0; b = f; break;
        case 3:  // Green -> Blue
            r = 0.0; g = nf; b = 1.0; break;
        case 4:  // Blue
            r = f; g = 0.0; b = 1.0; break;
     320:	e3a055fe 	mov	r5, #1065353216	; 0x3f800000
     324:	e3a06000 	mov	r6, #0
     328:	ea000005 	b	344 <hueToRGB565+0xe8>
        default: // Blue -> Red
            r = 1.0; g = 0.0; b = nf; break;
     32c:	e1a05000 	mov	r5, r0
     330:	e3a06000 	mov	r6, #0
     334:	e3a005fe 	mov	r0, #1065353216	; 0x3f800000
     338:	ea000001 	b	344 <hueToRGB565+0xe8>
    // Determine the RGB values based on the sector
    switch (sector) {
        case 0:  // Red
            r = 1.0; g = f; b = 0.0; break;
        case 1:  // Red -> Green
            r = nf; g = 1.0; b = 0.0; break;
     33c:	e3a05000 	mov	r5, #0
     340:	e3a065fe 	mov	r6, #1065353216	; 0x3f800000
        default: // Blue -> Red
            r = 1.0; g = 0.0; b = nf; break;
    }

    // Scale the RGB values to fit 5, 6, 5 bit col channels
    r *= 31;
     344:	e3a01000 	mov	r1, #0
     348:	e34411f8 	movt	r1, #16888	; 0x41f8
     34c:	eb0025f4 	bl	9b24 <__aeabi_fmul>
    g *= 63;
    b *= 31;

    // Combine the RGB values into a single RGB565 value
    return ((int)r << 11) | ((int)g << 5) | (int)b;
     350:	eb0026f6 	bl	9f30 <__aeabi_f2iz>
     354:	e1a04580 	lsl	r4, r0, #11
            r = 1.0; g = 0.0; b = nf; break;
    }

    // Scale the RGB values to fit 5, 6, 5 bit col channels
    r *= 31;
    g *= 63;
     358:	e1a00006 	mov	r0, r6
     35c:	e3a01000 	mov	r1, #0
     360:	e344127c 	movt	r1, #17020	; 0x427c
     364:	eb0025ee 	bl	9b24 <__aeabi_fmul>
    b *= 31;

    // Combine the RGB values into a single RGB565 value
    return ((int)r << 11) | ((int)g << 5) | (int)b;
     368:	eb0026f0 	bl	9f30 <__aeabi_f2iz>
     36c:	e1844280 	orr	r4, r4, r0, lsl #5
    }

    // Scale the RGB values to fit 5, 6, 5 bit col channels
    r *= 31;
    g *= 63;
    b *= 31;
     370:	e1a00005 	mov	r0, r5
     374:	e3a01000 	mov	r1, #0
     378:	e34411f8 	movt	r1, #16888	; 0x41f8
     37c:	eb0025e8 	bl	9b24 <__aeabi_fmul>

    // Combine the RGB values into a single RGB565 value
    return ((int)r << 11) | ((int)g << 5) | (int)b;
     380:	eb0026ea 	bl	9f30 <__aeabi_f2iz>
     384:	e1840000 	orr	r0, r4, r0
     388:	e6bf0070 	sxth	r0, r0
     38c:	e8bd8070 	pop	{r4, r5, r6, pc}
    if (hue>1.0) hue = 1.0;
    // Declare variables to store red, green, and blue components (initially floats for calculations)
    float r, g, b;

    // Calculate the sector of the color wheel (shown in the case statement below)
    int sector = floor(hue * 6);
     390:	e3a00000 	mov	r0, #0
     394:	e3a01000 	mov	r1, #0
     398:	eb0024f7 	bl	977c <__aeabi_d2iz>

    // Calculate the fractional part to transition
    float f = hue * 6 - sector;
     39c:	eb0025a9 	bl	9a48 <__aeabi_i2f>
     3a0:	e1a05000 	mov	r5, r0
     3a4:	eaffffd1 	b	2f0 <hueToRGB565+0x94>

000003a8 <abs>:

// Finds the absolue value of an int
int abs(int in){
	if (in>0) return in;
	return (0-in);
}
     3a8:	e3500000 	cmp	r0, #0
     3ac:	b2600000 	rsblt	r0, r0, #0
     3b0:	e12fff1e 	bx	lr

000003b4 <swap>:

// Swaps two ints
void swap(int *a, int*b){
	int temp = *a;
     3b4:	e5903000 	ldr	r3, [r0]
	*a = *b;
     3b8:	e5912000 	ldr	r2, [r1]
     3bc:	e5802000 	str	r2, [r0]
	*b = temp;
     3c0:	e5813000 	str	r3, [r1]
     3c4:	e12fff1e 	bx	lr

000003c8 <waitForVsync>:
}

void waitForVsync(){

	volatile int *vgaCtlPtr = (volatile int*)VGA_CONTROLLER_BASE;
	*vgaCtlPtr = 1; // 1->Front Buffer Address. Kickstarts our swap/rendering process
     3c8:	e3033fff 	movw	r3, #16383	; 0x3fff
     3cc:	e34f3f20 	movt	r3, #65312	; 0xff20
     3d0:	e3a02001 	mov	r2, #1
     3d4:	e5032fdf 	str	r2, [r3, #-4063]	; 0xfffff021
	
	// Poll status bit for a 0
	while ((*(vgaCtlPtr + 3) & 0x01)!=0);
     3d8:	e3032fff 	movw	r2, #16383	; 0x3fff
     3dc:	e34f2f20 	movt	r2, #65312	; 0xff20
     3e0:	e5123fd3 	ldr	r3, [r2, #-4051]	; 0xfffff02d
     3e4:	e3130001 	tst	r3, #1
     3e8:	1afffffc 	bne	3e0 <waitForVsync+0x18>
		
}
     3ec:	e12fff1e 	bx	lr

000003f0 <drawIndividualPixel>:

// Draws just one pixel to the appropriate frame buffer.
void drawIndividualPixel(int x, int y, short int colour){
	volatile short int *pixelAddress;
	pixelAddress = (volatile short int *) (CURRENT_BACK_BUFFER_ADDRESS + (y << 10) + (x << 1)); 
     3f0:	e30b381c 	movw	r3, #47132	; 0xb81c
     3f4:	e3403000 	movt	r3, #0
     3f8:	e5933000 	ldr	r3, [r3]
     3fc:	e0831501 	add	r1, r3, r1, lsl #10
     400:	e1a00080 	lsl	r0, r0, #1
	*pixelAddress = colour;
     404:	e18120b0 	strh	r2, [r1, r0]
     408:	e12fff1e 	bx	lr

0000040c <clearWholeScreen>:
}

// Writes black to every pixel in the pixel buffer
void clearWholeScreen(){
     40c:	e92d4070 	push	{r4, r5, r6, lr}
	
	for(int x = 0; x < MAX_X; x++){ // 320px
     410:	e3a05000 	mov	r5, #0
	pixelAddress = (volatile short int *) (CURRENT_BACK_BUFFER_ADDRESS + (y << 10) + (x << 1)); 
	*pixelAddress = colour;
}

// Writes black to every pixel in the pixel buffer
void clearWholeScreen(){
     414:	e1a06005 	mov	r6, r5
     418:	ea000009 	b	444 <clearWholeScreen+0x38>
	
	for(int x = 0; x < MAX_X; x++){ // 320px
		for(int y = 0; y < MAX_Y; y++) { // by 240px
			drawIndividualPixel(x, y, 0); // draw a black pixel
     41c:	e1a00005 	mov	r0, r5
     420:	e1a01004 	mov	r1, r4
     424:	e1a02006 	mov	r2, r6
     428:	ebfffff0 	bl	3f0 <drawIndividualPixel>

// Writes black to every pixel in the pixel buffer
void clearWholeScreen(){
	
	for(int x = 0; x < MAX_X; x++){ // 320px
		for(int y = 0; y < MAX_Y; y++) { // by 240px
     42c:	e2844001 	add	r4, r4, #1
     430:	e35400f0 	cmp	r4, #240	; 0xf0
     434:	1afffff8 	bne	41c <clearWholeScreen+0x10>
}

// Writes black to every pixel in the pixel buffer
void clearWholeScreen(){
	
	for(int x = 0; x < MAX_X; x++){ // 320px
     438:	e2855001 	add	r5, r5, #1
     43c:	e3550d05 	cmp	r5, #320	; 0x140
     440:	08bd8070 	popeq	{r4, r5, r6, pc}
	pixelAddress = (volatile short int *) (CURRENT_BACK_BUFFER_ADDRESS + (y << 10) + (x << 1)); 
	*pixelAddress = colour;
}

// Writes black to every pixel in the pixel buffer
void clearWholeScreen(){
     444:	e1a04006 	mov	r4, r6
     448:	eafffff3 	b	41c <clearWholeScreen+0x10>

0000044c <vgaSetup>:

// Global telling us the starting address of the Pixel Buffer
int CURRENT_BACK_BUFFER_ADDRESS;

// Setup the vga Display for drawing to the back buffer.
int vgaSetup(void) {
     44c:	e92d4008 	push	{r3, lr}
	
	waitForVsync();
     450:	ebffffdc 	bl	3c8 <waitForVsync>

	volatile int *vgaCtlPtr = (volatile int *)VGA_CONTROLLER_BASE;
	CURRENT_BACK_BUFFER_ADDRESS = *vgaCtlPtr;
     454:	e3033fff 	movw	r3, #16383	; 0x3fff
     458:	e34f3f20 	movt	r3, #65312	; 0xff20
     45c:	e5132fdf 	ldr	r2, [r3, #-4063]	; 0xfffff021
     460:	e30b381c 	movw	r3, #47132	; 0xb81c
     464:	e3403000 	movt	r3, #0
     468:	e5832000 	str	r2, [r3]
	
	clearWholeScreen();
     46c:	ebffffe6 	bl	40c <clearWholeScreen>
	
	return 0;
	
}
     470:	e3a00000 	mov	r0, #0
     474:	e8bd8008 	pop	{r3, pc}

00000478 <drawBox>:
	}

}

// Draws a nxn box centered at the pixel x,y
void drawBox(int x, int y, short int colour){
     478:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
     47c:	e1a08002 	mov	r8, r2
     480:	e3a05003 	mov	r5, #3
     484:	e3a09000 	mov	r9, #0
     488:	e280a002 	add	r10, r0, #2
     48c:	e2417001 	sub	r7, r1, #1
     490:	ea000008 	b	4b8 <drawBox+0x40>
	int n = 3;
	int shift = floor(n/2);
	for(int i = 0; i < n; i++){
		for(int j = 0; j < n; j++){
			drawIndividualPixel(x+(i-shift), y+(j-shift), colour);
     494:	e1a00006 	mov	r0, r6
     498:	e0871004 	add	r1, r7, r4
     49c:	e1a02008 	mov	r2, r8
     4a0:	ebffffd2 	bl	3f0 <drawIndividualPixel>
// Draws a nxn box centered at the pixel x,y
void drawBox(int x, int y, short int colour){
	int n = 3;
	int shift = floor(n/2);
	for(int i = 0; i < n; i++){
		for(int j = 0; j < n; j++){
     4a4:	e2844001 	add	r4, r4, #1
     4a8:	e3540003 	cmp	r4, #3
     4ac:	1afffff8 	bne	494 <drawBox+0x1c>

// Draws a nxn box centered at the pixel x,y
void drawBox(int x, int y, short int colour){
	int n = 3;
	int shift = floor(n/2);
	for(int i = 0; i < n; i++){
     4b0:	e2555001 	subs	r5, r5, #1
     4b4:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, r10, pc}
	}

}

// Draws a nxn box centered at the pixel x,y
void drawBox(int x, int y, short int colour){
     4b8:	e1a04009 	mov	r4, r9
     4bc:	e065600a 	rsb	r6, r5, r10
     4c0:	eafffff3 	b	494 <drawBox+0x1c>

000004c4 <drawBresenhamLine>:
			drawIndividualPixel(x+(i-shift), y+(j-shift), colour);
		}
	}
}
// Draws a line between the two points specified on screen. 
void drawBresenhamLine(int x0, int y0, int x1, int y1, short int colour){
     4c4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     4c8:	e24dd014 	sub	sp, sp, #20
     4cc:	e58d000c 	str	r0, [sp, #12]
     4d0:	e58d1008 	str	r1, [sp, #8]
     4d4:	e58d2004 	str	r2, [sp, #4]
     4d8:	e58d3000 	str	r3, [sp]
     4dc:	e1dda3f8 	ldrsh	r10, [sp, #56]	; 0x38
	
	bool isSteep = abs(x0-x1) < abs(y0-y1);
     4e0:	e0622000 	rsb	r2, r2, r0
     4e4:	e3520000 	cmp	r2, #0
     4e8:	b2622000 	rsblt	r2, r2, #0
     4ec:	e0633001 	rsb	r3, r3, r1
     4f0:	e0237fc3 	eor	r7, r3, r3, asr #31
     4f4:	e0477fc3 	sub	r7, r7, r3, asr #31
     4f8:	e1520007 	cmp	r2, r7
     4fc:	a3a07000 	movge	r7, #0
     500:	b3a07001 	movlt	r7, #1
	
	if(isSteep){
     504:	e3570000 	cmp	r7, #0
     508:	0a000005 	beq	524 <drawBresenhamLine+0x60>
		swap(&x0, &y0);
     50c:	e28d000c 	add	r0, sp, #12
     510:	e28d1008 	add	r1, sp, #8
     514:	ebffffa6 	bl	3b4 <swap>
		swap(&x1, &y1);
     518:	e28d0004 	add	r0, sp, #4
     51c:	e1a0100d 	mov	r1, sp
     520:	ebffffa3 	bl	3b4 <swap>
	}
	if(x0>x1){
     524:	e59d3004 	ldr	r3, [sp, #4]
     528:	e59d200c 	ldr	r2, [sp, #12]
     52c:	e1520003 	cmp	r2, r3
     530:	da000005 	ble	54c <drawBresenhamLine+0x88>
		swap(&x0, &x1);
     534:	e28d000c 	add	r0, sp, #12
     538:	e28d1004 	add	r1, sp, #4
     53c:	ebffff9c 	bl	3b4 <swap>
		swap(&y0, &y1);
     540:	e28d0008 	add	r0, sp, #8
     544:	e1a0100d 	mov	r1, sp
     548:	ebffff99 	bl	3b4 <swap>
	}
	
	int dx = x1 - x0;
     54c:	e59d3004 	ldr	r3, [sp, #4]
     550:	e59d500c 	ldr	r5, [sp, #12]
     554:	e0659003 	rsb	r9, r5, r3
	int dy = abs(y1 - y0);
     558:	e59d2000 	ldr	r2, [sp]
     55c:	e59d6008 	ldr	r6, [sp, #8]
     560:	e0668002 	rsb	r8, r6, r2
     564:	e3580000 	cmp	r8, #0
     568:	b2688000 	rsblt	r8, r8, #0
	int error = -dx/2;
     56c:	e2694000 	rsb	r4, r9, #0
     570:	e0844fa4 	add	r4, r4, r4, lsr #31
     574:	e1a040c4 	asr	r4, r4, #1
	
	int moveY = y1>y0 ? 1 : -1;
     578:	e1520006 	cmp	r2, r6
     57c:	d3e0b000 	mvnle	r11, #0
     580:	c3a0b001 	movgt	r11, #1
	
	int y = y0;
	int x = x0;
	
	while(x<=x1) {
     584:	e1530005 	cmp	r3, r5
     588:	ba00000e 	blt	5c8 <drawBresenhamLine+0x104>
		
		if (isSteep) drawIndividualPixel(y,x, colour);
     58c:	e3570000 	cmp	r7, #0
     590:	11a00006 	movne	r0, r6
     594:	11a01005 	movne	r1, r5
		else drawIndividualPixel(x,y,colour);
     598:	01a00005 	moveq	r0, r5
     59c:	01a01006 	moveq	r1, r6
     5a0:	e1a0200a 	mov	r2, r10
     5a4:	ebffff91 	bl	3f0 <drawIndividualPixel>
		
		error = error + dy;
     5a8:	e0844008 	add	r4, r4, r8
		if (error > 0){
     5ac:	e3540000 	cmp	r4, #0
			y = y + moveY;
     5b0:	c086600b 	addgt	r6, r6, r11
			error = error - dx;
     5b4:	c0694004 	rsbgt	r4, r9, r4
		}
		
		x++;
     5b8:	e2855001 	add	r5, r5, #1
	int moveY = y1>y0 ? 1 : -1;
	
	int y = y0;
	int x = x0;
	
	while(x<=x1) {
     5bc:	e59d3004 	ldr	r3, [sp, #4]
     5c0:	e1530005 	cmp	r3, r5
     5c4:	aafffff0 	bge	58c <drawBresenhamLine+0xc8>
		
		x++;
		
	}

}
     5c8:	e28dd014 	add	sp, sp, #20
     5cc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

000005d0 <updateMouse>:
} mouseData;

mouseData mData;
mouseData prevmData;

void updateMouse() {
     5d0:	e24dd008 	sub	sp, sp, #8
  int PS2_data, RVALID;
  signed char inputData[3];

  int i = 0;
  while(!i){
    PS2_data = *(PS2_ptr);
     5d4:	e3a03000 	mov	r3, #0
     5d8:	e34f3f20 	movt	r3, #65312	; 0xff20
     5dc:	e5933100 	ldr	r3, [r3, #256]	; 0x100
    RVALID = PS2_data & 0x8000;
    if(RVALID){
     5e0:	e3130902 	tst	r3, #32768	; 0x8000
     5e4:	1a000004 	bne	5fc <updateMouse+0x2c>
  int PS2_data, RVALID;
  signed char inputData[3];

  int i = 0;
  while(!i){
    PS2_data = *(PS2_ptr);
     5e8:	e3a02000 	mov	r2, #0
     5ec:	e34f2f20 	movt	r2, #65312	; 0xff20
     5f0:	e5923100 	ldr	r3, [r2, #256]	; 0x100
    RVALID = PS2_data & 0x8000;
    if(RVALID){
     5f4:	e3130902 	tst	r3, #32768	; 0x8000
     5f8:	0afffffc 	beq	5f0 <updateMouse+0x20>
      inputData[0] = PS2_data & 0xFF;
     5fc:	e28d2008 	add	r2, sp, #8
     600:	e5623004 	strb	r3, [r2, #-4]!
} mouseData;

mouseData mData;
mouseData prevmData;

void updateMouse() {
     604:	e28d0006 	add	r0, sp, #6
      i++;
    }
  }

  while(i < 3){
    PS2_data = *(PS2_ptr);
     608:	e3a03000 	mov	r3, #0
     60c:	e34f3f20 	movt	r3, #65312	; 0xff20
     610:	ea000003 	b	624 <updateMouse+0x54>
     614:	e5931100 	ldr	r1, [r3, #256]	; 0x100
    RVALID = PS2_data & 0x8000;
    if(RVALID){
     618:	e3110902 	tst	r1, #32768	; 0x8000
     61c:	0afffffc 	beq	614 <updateMouse+0x44>
      inputData[i] = PS2_data & 0xFF;
     620:	e5e21001 	strb	r1, [r2, #1]!
      inputData[0] = PS2_data & 0xFF;
      i++;
    }
  }

  while(i < 3){
     624:	e1520000 	cmp	r2, r0
     628:	0a000003 	beq	63c <updateMouse+0x6c>
    PS2_data = *(PS2_ptr);
     62c:	e5931100 	ldr	r1, [r3, #256]	; 0x100
    RVALID = PS2_data & 0x8000;
    if(RVALID){
     630:	e3110902 	tst	r1, #32768	; 0x8000
     634:	0afffff6 	beq	614 <updateMouse+0x44>
     638:	eafffff8 	b	620 <updateMouse+0x50>
      inputData[i] = PS2_data & 0xFF;
      i++;
    }
  }

  mData.left = inputData[0] & 1;
     63c:	e5dd2004 	ldrb	r2, [sp, #4]
     640:	e30b381c 	movw	r3, #47132	; 0xb81c
     644:	e3403000 	movt	r3, #0
     648:	e2021001 	and	r1, r2, #1
     64c:	e5c31014 	strb	r1, [r3, #20]
  mData.middle = inputData[0] & 4;
     650:	e6ef2072 	uxtb	r2, r2
     654:	e7e01152 	ubfx	r1, r2, #2, #1
     658:	e5c31016 	strb	r1, [r3, #22]
  mData.right = inputData[0] & 2;
     65c:	e7e020d2 	ubfx	r2, r2, #1, #1
     660:	e5c32015 	strb	r2, [r3, #21]

  mData.x += inputData[1];
     664:	e1ddc0d5 	ldrsb	r12, [sp, #5]
     668:	e5931004 	ldr	r1, [r3, #4]
     66c:	e08c1001 	add	r1, r12, r1
     670:	e5831004 	str	r1, [r3, #4]
  mData.y -= inputData[2];
     674:	e1dd00d6 	ldrsb	r0, [sp, #6]
     678:	e5932008 	ldr	r2, [r3, #8]
     67c:	e0602002 	rsb	r2, r0, r2
     680:	e5832008 	str	r2, [r3, #8]

  mData.vx = inputData[1];
     684:	e583c00c 	str	r12, [r3, #12]
  mData.vy = -inputData[2];
     688:	e2600000 	rsb	r0, r0, #0
     68c:	e5830010 	str	r0, [r3, #16]

  if (mData.x >= MAX_X) mData.x = MAX_X - 1;
     690:	e3510d05 	cmp	r1, #320	; 0x140
     694:	a30b381c 	movwge	r3, #47132	; 0xb81c
     698:	a3403000 	movtge	r3, #0
     69c:	a300113f 	movwge	r1, #319	; 0x13f
     6a0:	a5831004 	strge	r1, [r3, #4]
  if (mData.y >= MAX_Y) mData.y = MAX_Y - 1;
     6a4:	e35200ef 	cmp	r2, #239	; 0xef
     6a8:	c30b381c 	movwgt	r3, #47132	; 0xb81c
     6ac:	c3403000 	movtgt	r3, #0
     6b0:	c3a020ef 	movgt	r2, #239	; 0xef
     6b4:	c5832008 	strgt	r2, [r3, #8]

  if (mData.x < 0) mData.x = 0;
     6b8:	e30b381c 	movw	r3, #47132	; 0xb81c
     6bc:	e3403000 	movt	r3, #0
     6c0:	e5933004 	ldr	r3, [r3, #4]
     6c4:	e3530000 	cmp	r3, #0
     6c8:	b30b381c 	movwlt	r3, #47132	; 0xb81c
     6cc:	b3403000 	movtlt	r3, #0
     6d0:	b3a02000 	movlt	r2, #0
     6d4:	b5832004 	strlt	r2, [r3, #4]
  if (mData.y < 0) mData.y = 0;
     6d8:	e30b381c 	movw	r3, #47132	; 0xb81c
     6dc:	e3403000 	movt	r3, #0
     6e0:	e5933008 	ldr	r3, [r3, #8]
     6e4:	e3530000 	cmp	r3, #0
     6e8:	b30b381c 	movwlt	r3, #47132	; 0xb81c
     6ec:	b3403000 	movtlt	r3, #0
     6f0:	b3a02000 	movlt	r2, #0
     6f4:	b5832008 	strlt	r2, [r3, #8]
  
}
     6f8:	e28dd008 	add	sp, sp, #8
     6fc:	e12fff1e 	bx	lr

00000700 <drawMouse>:

void drawMouse(mouseData *data, short int colour) {
     700:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     704:	e24dd01c 	sub	sp, sp, #28
     708:	e58d0010 	str	r0, [sp, #16]
     70c:	e1a05001 	mov	r5, r1
    
    int x = data -> x;
     710:	e5903000 	ldr	r3, [r0]
    int y = data -> y;
     714:	e5908004 	ldr	r8, [r0, #4]

    if(x<MOUSE_RADIUS) x=MOUSE_RADIUS;
     718:	e3530001 	cmp	r3, #1
     71c:	d3a03002 	movle	r3, #2
     720:	da000003 	ble	734 <drawMouse+0x34>
     724:	e300213d 	movw	r2, #317	; 0x13d
     728:	e1530002 	cmp	r3, r2
     72c:	a1a03002 	movge	r3, r2
     730:	eaffffff 	b	734 <drawMouse+0x34>
    else if (x>MAX_X-1-MOUSE_RADIUS) x = MAX_X-1-MOUSE_RADIUS;
    if(y<MOUSE_RADIUS) y=MOUSE_RADIUS;
     734:	e3580001 	cmp	r8, #1
     738:	d3a08002 	movle	r8, #2
     73c:	da000002 	ble	74c <drawMouse+0x4c>
     740:	e35800ed 	cmp	r8, #237	; 0xed
     744:	a3a080ed 	movge	r8, #237	; 0xed
     748:	eaffffff 	b	74c <drawMouse+0x4c>
  if (mData.x < 0) mData.x = 0;
  if (mData.y < 0) mData.y = 0;
  
}

void drawMouse(mouseData *data, short int colour) {
     74c:	e2434001 	sub	r4, r3, #1
     750:	e58d3014 	str	r3, [sp, #20]
     754:	e283b002 	add	r11, r3, #2
    else if (x>MAX_X-1-MOUSE_RADIUS) x = MAX_X-1-MOUSE_RADIUS;
    if(y<MOUSE_RADIUS) y=MOUSE_RADIUS;
    else if (y>MAX_Y-1-MOUSE_RADIUS) y = MAX_Y-1-MOUSE_RADIUS;

    for(int i = -1; i<2; i++) {
        drawIndividualPixel(x + i, y + MOUSE_RADIUS, colour);
     758:	e2889002 	add	r9, r8, #2
        drawIndividualPixel(x + i, y - MOUSE_RADIUS, colour);
     75c:	e2482002 	sub	r2, r8, #2
     760:	e58d2004 	str	r2, [sp, #4]
  if (mData.x < 0) mData.x = 0;
  if (mData.y < 0) mData.y = 0;
  
}

void drawMouse(mouseData *data, short int colour) {
     764:	e063a008 	rsb	r10, r3, r8
    else if (y>MAX_Y-1-MOUSE_RADIUS) y = MAX_Y-1-MOUSE_RADIUS;

    for(int i = -1; i<2; i++) {
        drawIndividualPixel(x + i, y + MOUSE_RADIUS, colour);
        drawIndividualPixel(x + i, y - MOUSE_RADIUS, colour);
        drawIndividualPixel(x + MOUSE_RADIUS, y + i, colour);
     768:	e58db008 	str	r11, [sp, #8]
        drawIndividualPixel(x - MOUSE_RADIUS, y + i, colour);
     76c:	e2433002 	sub	r3, r3, #2
     770:	e58d300c 	str	r3, [sp, #12]
    else if (x>MAX_X-1-MOUSE_RADIUS) x = MAX_X-1-MOUSE_RADIUS;
    if(y<MOUSE_RADIUS) y=MOUSE_RADIUS;
    else if (y>MAX_Y-1-MOUSE_RADIUS) y = MAX_Y-1-MOUSE_RADIUS;

    for(int i = -1; i<2; i++) {
        drawIndividualPixel(x + i, y + MOUSE_RADIUS, colour);
     774:	e1a00004 	mov	r0, r4
     778:	e1a01009 	mov	r1, r9
     77c:	e1a02005 	mov	r2, r5
     780:	ebffff1a 	bl	3f0 <drawIndividualPixel>
        drawIndividualPixel(x + i, y - MOUSE_RADIUS, colour);
     784:	e1a00004 	mov	r0, r4
     788:	e59d1004 	ldr	r1, [sp, #4]
     78c:	e1a02005 	mov	r2, r5
     790:	ebffff16 	bl	3f0 <drawIndividualPixel>
  if (mData.x < 0) mData.x = 0;
  if (mData.y < 0) mData.y = 0;
  
}

void drawMouse(mouseData *data, short int colour) {
     794:	e1a07008 	mov	r7, r8
     798:	e08a6004 	add	r6, r10, r4
    else if (y>MAX_Y-1-MOUSE_RADIUS) y = MAX_Y-1-MOUSE_RADIUS;

    for(int i = -1; i<2; i++) {
        drawIndividualPixel(x + i, y + MOUSE_RADIUS, colour);
        drawIndividualPixel(x + i, y - MOUSE_RADIUS, colour);
        drawIndividualPixel(x + MOUSE_RADIUS, y + i, colour);
     79c:	e59d0008 	ldr	r0, [sp, #8]
     7a0:	e1a01006 	mov	r1, r6
     7a4:	e1a02005 	mov	r2, r5
     7a8:	ebffff10 	bl	3f0 <drawIndividualPixel>
        drawIndividualPixel(x - MOUSE_RADIUS, y + i, colour);
     7ac:	e59d000c 	ldr	r0, [sp, #12]
     7b0:	e1a01006 	mov	r1, r6
     7b4:	e1a02005 	mov	r2, r5
     7b8:	ebffff0c 	bl	3f0 <drawIndividualPixel>
     7bc:	e2844001 	add	r4, r4, #1
    if(x<MOUSE_RADIUS) x=MOUSE_RADIUS;
    else if (x>MAX_X-1-MOUSE_RADIUS) x = MAX_X-1-MOUSE_RADIUS;
    if(y<MOUSE_RADIUS) y=MOUSE_RADIUS;
    else if (y>MAX_Y-1-MOUSE_RADIUS) y = MAX_Y-1-MOUSE_RADIUS;

    for(int i = -1; i<2; i++) {
     7c0:	e154000b 	cmp	r4, r11
     7c4:	1affffea 	bne	774 <drawMouse+0x74>
        drawIndividualPixel(x + i, y + MOUSE_RADIUS, colour);
        drawIndividualPixel(x + i, y - MOUSE_RADIUS, colour);
        drawIndividualPixel(x + MOUSE_RADIUS, y + i, colour);
        drawIndividualPixel(x - MOUSE_RADIUS, y + i, colour);
    }
    if(data -> left){
     7c8:	e59d2010 	ldr	r2, [sp, #16]
     7cc:	e5d23010 	ldrb	r3, [r2, #16]
     7d0:	e3530000 	cmp	r3, #0
     7d4:	1a00000b 	bne	808 <drawMouse+0x108>
     7d8:	ea000010 	b	820 <drawMouse+0x120>
      for(int i = -1; i < 2; i++) {
        for(int j = -1; j < 2; j++){
          drawIndividualPixel(x + i, y+j, colour);
     7dc:	e1a00008 	mov	r0, r8
     7e0:	e0841007 	add	r1, r4, r7
     7e4:	e1a02005 	mov	r2, r5
     7e8:	ebffff00 	bl	3f0 <drawIndividualPixel>
        drawIndividualPixel(x + MOUSE_RADIUS, y + i, colour);
        drawIndividualPixel(x - MOUSE_RADIUS, y + i, colour);
    }
    if(data -> left){
      for(int i = -1; i < 2; i++) {
        for(int j = -1; j < 2; j++){
     7ec:	e2844001 	add	r4, r4, #1
     7f0:	e3540002 	cmp	r4, #2
     7f4:	1afffff8 	bne	7dc <drawMouse+0xdc>
        drawIndividualPixel(x + i, y - MOUSE_RADIUS, colour);
        drawIndividualPixel(x + MOUSE_RADIUS, y + i, colour);
        drawIndividualPixel(x - MOUSE_RADIUS, y + i, colour);
    }
    if(data -> left){
      for(int i = -1; i < 2; i++) {
     7f8:	e2866001 	add	r6, r6, #1
     7fc:	e3560002 	cmp	r6, #2
     800:	1a000003 	bne	814 <drawMouse+0x114>
     804:	ea000005 	b	820 <drawMouse+0x120>
        drawIndividualPixel(x + i, y + MOUSE_RADIUS, colour);
        drawIndividualPixel(x + i, y - MOUSE_RADIUS, colour);
        drawIndividualPixel(x + MOUSE_RADIUS, y + i, colour);
        drawIndividualPixel(x - MOUSE_RADIUS, y + i, colour);
    }
    if(data -> left){
     808:	e3e06000 	mvn	r6, #0
    int x = data -> x;
    int y = data -> y;

    if(x<MOUSE_RADIUS) x=MOUSE_RADIUS;
    else if (x>MAX_X-1-MOUSE_RADIUS) x = MAX_X-1-MOUSE_RADIUS;
    if(y<MOUSE_RADIUS) y=MOUSE_RADIUS;
     80c:	e1a0a006 	mov	r10, r6
     810:	e59d9014 	ldr	r9, [sp, #20]
     814:	e1a0400a 	mov	r4, r10
  if (mData.x < 0) mData.x = 0;
  if (mData.y < 0) mData.y = 0;
  
}

void drawMouse(mouseData *data, short int colour) {
     818:	e0868009 	add	r8, r6, r9
     81c:	eaffffee 	b	7dc <drawMouse+0xdc>
          drawIndividualPixel(x + i, y+j, colour);
        }
      }
    }
    
}
     820:	e28dd01c 	add	sp, sp, #28
     824:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00000828 <setA9stack>:

void setA9stack(){
  int stack,mode;
  stack = 0xFFFFFFFF - 7;
  mode = 0b11010010;
  __asm__ volatile ("msr cpsr, %0":: "r"(mode));
     828:	e3a030d2 	mov	r3, #210	; 0xd2
     82c:	e129f003 	msr	CPSR_fc, r3
  __asm__ volatile ("mov sp, %0":: "r"(stack));
     830:	e3e03007 	mvn	r3, #7
     834:	e1a0d003 	mov	sp, r3

  mode = 0b11010011;
  __asm__ volatile("msr cpsr, %0":: "r"(mode));
     838:	e3a030d3 	mov	r3, #211	; 0xd3
     83c:	e129f003 	msr	CPSR_fc, r3
     840:	e12fff1e 	bx	lr

00000844 <enableInterrupt>:
}

void enableInterrupt(){
  int status = 0b01010011;
  __asm__ volatile("msr cpsr, %0":: "r"(status));
     844:	e3a03053 	mov	r3, #83	; 0x53
     848:	e129f003 	msr	CPSR_fc, r3
     84c:	e12fff1e 	bx	lr

00000850 <configGIC>:
}

void configGIC(){
  *((volatile int*) 0xFFFED84C) = 0x01000000;
     850:	e3e03a12 	mvn	r3, #73728	; 0x12000
     854:	e3a02401 	mov	r2, #16777216	; 0x1000000
     858:	e50327b3 	str	r2, [r3, #-1971]	; 0xfffff84d
  *((volatile int*) 0xFFFED108) = 0x00008000;
     85c:	e3a02902 	mov	r2, #32768	; 0x8000
     860:	e5032ef7 	str	r2, [r3, #-3831]	; 0xfffff109

// all priority interupts enbaled
  *((volatile int*) 0xFFFEC104) = 0xFFFF;
     864:	e3e01a13 	mvn	r1, #77824	; 0x13000
     868:	e30f2fff 	movw	r2, #65535	; 0xffff
     86c:	e5012efb 	str	r2, [r1, #-3835]	; 0xfffff105

  *((volatile int*) 0xFFFEC100) = 1;
     870:	e3a02001 	mov	r2, #1
     874:	e5012eff 	str	r2, [r1, #-3839]	; 0xfffff101

  *((volatile int*) 0xFFFED000) = 1;
     878:	e5032fff 	str	r2, [r3, #-4095]	; 0xfffff001
     87c:	e12fff1e 	bx	lr

00000880 <__cs3_isr_undef>:

  *((volatile int*) 0xFFFEC110) = interruptID;
  return;
}

void __attribute__ ((interrupt)) __cs3_isr_undef(void){while(1);}
     880:	eafffffe 	b	880 <__cs3_isr_undef>

00000884 <__cs3_isr_swi>:

void __attribute__ ((interrupt)) __cs3_isr_swi(void){while(1);}
     884:	eafffffe 	b	884 <__cs3_isr_swi>

00000888 <__cs3_isr_pabort>:

void __attribute__ ((interrupt)) __cs3_isr_pabort(void){while(1);}
     888:	eafffffe 	b	888 <__cs3_isr_pabort>

0000088c <__cs3_isr_dabort>:

void __attribute__ ((interrupt)) __cs3_isr_dabort(void){while(1);}
     88c:	eafffffe 	b	88c <__cs3_isr_dabort>

00000890 <__cs3_isr_fiq>:

void __attribute__ ((interrupt)) __cs3_isr_fiq(void){while(1);}
     890:	eafffffe 	b	890 <__cs3_isr_fiq>

00000894 <intializeMouse>:

void intializeMouse() {
     894:	e92d4010 	push	{r4, lr}
  volatile int * PS2_ptr = (volatile int *)0xFF200100;
  int PS2_data, RVALID;
  char byte1 = 0, byte2 = 0;

  mData.x = MAX_X / 2;
     898:	e30b381c 	movw	r3, #47132	; 0xb81c
     89c:	e3403000 	movt	r3, #0
     8a0:	e3a020a0 	mov	r2, #160	; 0xa0
     8a4:	e5832004 	str	r2, [r3, #4]
  mData.y = MAX_Y / 2;
     8a8:	e3a02078 	mov	r2, #120	; 0x78
     8ac:	e5832008 	str	r2, [r3, #8]

  mData.vx = 0.0;
     8b0:	e3a04000 	mov	r4, #0
     8b4:	e583400c 	str	r4, [r3, #12]
  mData.vy = 0.0;
     8b8:	e5834010 	str	r4, [r3, #16]

  mData.left = false;
     8bc:	e5c34014 	strb	r4, [r3, #20]
  mData.middle = false;
     8c0:	e5c34016 	strb	r4, [r3, #22]
  mData.right = false;
     8c4:	e5c34015 	strb	r4, [r3, #21]

  setA9stack();
     8c8:	ebffffd6 	bl	828 <setA9stack>

  configGIC();
     8cc:	ebffffdf 	bl	850 <configGIC>

  // PS/2 mouse needs to be reset (must be already plugged in)
  *(PS2_ptr) = 0xFF; // reset
     8d0:	e1a03004 	mov	r3, r4
     8d4:	e34f3f20 	movt	r3, #65312	; 0xff20
     8d8:	e3a020ff 	mov	r2, #255	; 0xff
     8dc:	e5832100 	str	r2, [r3, #256]	; 0x100
void __attribute__ ((interrupt)) __cs3_isr_fiq(void){while(1);}

void intializeMouse() {
  volatile int * PS2_ptr = (volatile int *)0xFF200100;
  int PS2_data, RVALID;
  char byte1 = 0, byte2 = 0;
     8e0:	e1a01004 	mov	r1, r4
     8e4:	e1a02004 	mov	r2, r4
  configGIC();

  // PS/2 mouse needs to be reset (must be already plugged in)
  *(PS2_ptr) = 0xFF; // reset
  while((byte2 != (char) 0xAA) || (byte1 != (char)0x00)){
    PS2_data = *(PS2_ptr);
     8e8:	e1a00004 	mov	r0, r4
     8ec:	e34f0f20 	movt	r0, #65312	; 0xff20

  configGIC();

  // PS/2 mouse needs to be reset (must be already plugged in)
  *(PS2_ptr) = 0xFF; // reset
  while((byte2 != (char) 0xAA) || (byte1 != (char)0x00)){
     8f0:	ea000003 	b	904 <intializeMouse+0x70>
    PS2_data = *(PS2_ptr);
     8f4:	e5903100 	ldr	r3, [r0, #256]	; 0x100
    RVALID = PS2_data & 0x8000;
    if(RVALID){
     8f8:	e3130902 	tst	r3, #32768	; 0x8000
      byte2 = byte1;
     8fc:	11a01002 	movne	r1, r2
      byte1 = PS2_data & 0xFF;
     900:	16ef2073 	uxtbne	r2, r3

  configGIC();

  // PS/2 mouse needs to be reset (must be already plugged in)
  *(PS2_ptr) = 0xFF; // reset
  while((byte2 != (char) 0xAA) || (byte1 != (char)0x00)){
     904:	e35100aa 	cmp	r1, #170	; 0xaa
     908:	03520000 	cmpeq	r2, #0
     90c:	1afffff8 	bne	8f4 <intializeMouse+0x60>
      byte2 = byte1;
      byte1 = PS2_data & 0xFF;
    }
  }

  *(PS2_ptr) = 0xF3;
     910:	e3a03000 	mov	r3, #0
     914:	e34f3f20 	movt	r3, #65312	; 0xff20
     918:	e3a020f3 	mov	r2, #243	; 0xf3
     91c:	e5832100 	str	r2, [r3, #256]	; 0x100
  byte1 = 0;
  while(byte1 != (char)0xFA){
    PS2_data = *(PS2_ptr);
     920:	e3a02000 	mov	r2, #0
     924:	e34f2f20 	movt	r2, #65312	; 0xff20
     928:	ea000005 	b	944 <intializeMouse+0xb0>
     92c:	e5923100 	ldr	r3, [r2, #256]	; 0x100
    RVALID = PS2_data & 0x8000;
    if(RVALID){
     930:	e3130902 	tst	r3, #32768	; 0x8000
     934:	0afffffc 	beq	92c <intializeMouse+0x98>
    }
  }

  *(PS2_ptr) = 0xF3;
  byte1 = 0;
  while(byte1 != (char)0xFA){
     938:	e6ef3073 	uxtb	r3, r3
     93c:	e35300fa 	cmp	r3, #250	; 0xfa
     940:	0a000003 	beq	954 <intializeMouse+0xc0>
    PS2_data = *(PS2_ptr);
     944:	e5923100 	ldr	r3, [r2, #256]	; 0x100
    RVALID = PS2_data & 0x8000;
    if(RVALID){
     948:	e3130902 	tst	r3, #32768	; 0x8000
     94c:	0afffff6 	beq	92c <intializeMouse+0x98>
     950:	eafffff8 	b	938 <intializeMouse+0xa4>
      byte1 = PS2_data & 0xFF;
    }
  }

    //SAMPLE RATE
  *(PS2_ptr) = 40;
     954:	e3a03000 	mov	r3, #0
     958:	e34f3f20 	movt	r3, #65312	; 0xff20
     95c:	e3a02028 	mov	r2, #40	; 0x28
     960:	e5832100 	str	r2, [r3, #256]	; 0x100
  byte1 = 0;
  while(byte1 != (char)0xFA){
    PS2_data = *(PS2_ptr);
     964:	e3a02000 	mov	r2, #0
     968:	e34f2f20 	movt	r2, #65312	; 0xff20
     96c:	ea000005 	b	988 <intializeMouse+0xf4>
     970:	e5923100 	ldr	r3, [r2, #256]	; 0x100
    RVALID = PS2_data & 0x8000;
    if(RVALID)
     974:	e3130902 	tst	r3, #32768	; 0x8000
     978:	0afffffc 	beq	970 <intializeMouse+0xdc>
  }

    //SAMPLE RATE
  *(PS2_ptr) = 40;
  byte1 = 0;
  while(byte1 != (char)0xFA){
     97c:	e6ef3073 	uxtb	r3, r3
     980:	e35300fa 	cmp	r3, #250	; 0xfa
     984:	0a000003 	beq	998 <intializeMouse+0x104>
    PS2_data = *(PS2_ptr);
     988:	e5923100 	ldr	r3, [r2, #256]	; 0x100
    RVALID = PS2_data & 0x8000;
    if(RVALID)
     98c:	e3130902 	tst	r3, #32768	; 0x8000
     990:	0afffff6 	beq	970 <intializeMouse+0xdc>
     994:	eafffff8 	b	97c <intializeMouse+0xe8>
      byte1 = PS2_data & 0xFF;
  }

  *(PS2_ptr) = 0xF4;
     998:	e3a03000 	mov	r3, #0
     99c:	e34f3f20 	movt	r3, #65312	; 0xff20
     9a0:	e3a020f4 	mov	r2, #244	; 0xf4
     9a4:	e5832100 	str	r2, [r3, #256]	; 0x100
  byte1 = 0;
  while(byte1 != (char)0xFA){
    PS2_data = *(PS2_ptr);
     9a8:	e3a02000 	mov	r2, #0
     9ac:	e34f2f20 	movt	r2, #65312	; 0xff20
     9b0:	ea000005 	b	9cc <intializeMouse+0x138>
     9b4:	e5923100 	ldr	r3, [r2, #256]	; 0x100
    RVALID = PS2_data & 0x8000;
    if(RVALID)
     9b8:	e3130902 	tst	r3, #32768	; 0x8000
     9bc:	0afffffc 	beq	9b4 <intializeMouse+0x120>
      byte1 = PS2_data & 0xFF;
  }

  *(PS2_ptr) = 0xF4;
  byte1 = 0;
  while(byte1 != (char)0xFA){
     9c0:	e6ef3073 	uxtb	r3, r3
     9c4:	e35300fa 	cmp	r3, #250	; 0xfa
     9c8:	0a000003 	beq	9dc <intializeMouse+0x148>
    PS2_data = *(PS2_ptr);
     9cc:	e5923100 	ldr	r3, [r2, #256]	; 0x100
    RVALID = PS2_data & 0x8000;
    if(RVALID)
     9d0:	e3130902 	tst	r3, #32768	; 0x8000
     9d4:	0afffff6 	beq	9b4 <intializeMouse+0x120>
     9d8:	eafffff8 	b	9c0 <intializeMouse+0x12c>
      byte1 = PS2_data & 0xFF;
  }

  *(PS2_ptr + 1) = 1;
     9dc:	e3a03000 	mov	r3, #0
     9e0:	e34f3f20 	movt	r3, #65312	; 0xff20
     9e4:	e3a02001 	mov	r2, #1
     9e8:	e5832104 	str	r2, [r3, #260]	; 0x104

  enableInterrupt();
     9ec:	ebffff94 	bl	844 <enableInterrupt>
     9f0:	e8bd8010 	pop	{r4, pc}

000009f4 <drawResetButton>:
                                  0xD6DA, 0xD6DA, 0xD6DA, 0x0000, 0x0000, 0x0000, 0x0000, 0xD6DA, 0x0000, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0x0000, 0xD6DA, 
                                  0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0x0000, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA,
                                  0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA}};


void drawResetButton(){
     9f4:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
     9f8:	e3a06014 	mov	r6, #20
     9fc:	e3e07000 	mvn	r7, #0
     a00:	e30a8700 	movw	r8, #42752	; 0xa700
     a04:	e3408000 	movt	r8, #0
     a08:	e300a12d 	movw	r10, #301	; 0x12d
     a0c:	ea00000a 	b	a3c <drawResetButton+0x48>
  int x = RESET_BUTTON_X;
  int y = RESET_BUTTON_Y;
  
  for(int i = 0; i < 12; i++){
    for(int j = 0; j < 15; j++){
      drawIndividualPixel(x+j,y+i,resetButton[15*i + j]);
     a10:	e1a00004 	mov	r0, r4
     a14:	e1a01006 	mov	r1, r6
     a18:	e1f520f2 	ldrsh	r2, [r5, #2]!
     a1c:	ebfffe73 	bl	3f0 <drawIndividualPixel>
     a20:	e2844001 	add	r4, r4, #1
void drawResetButton(){
  int x = RESET_BUTTON_X;
  int y = RESET_BUTTON_Y;
  
  for(int i = 0; i < 12; i++){
    for(int j = 0; j < 15; j++){
     a24:	e3540f4f 	cmp	r4, #316	; 0x13c
     a28:	1afffff8 	bne	a10 <drawResetButton+0x1c>
     a2c:	e287700f 	add	r7, r7, #15
     a30:	e2866001 	add	r6, r6, #1

void drawResetButton(){
  int x = RESET_BUTTON_X;
  int y = RESET_BUTTON_Y;
  
  for(int i = 0; i < 12; i++){
     a34:	e35700b3 	cmp	r7, #179	; 0xb3
     a38:	08bd85f8 	popeq	{r3, r4, r5, r6, r7, r8, r10, pc}
                                  0xD6DA, 0xD6DA, 0xD6DA, 0x0000, 0x0000, 0x0000, 0x0000, 0xD6DA, 0x0000, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0x0000, 0xD6DA, 
                                  0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0x0000, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA,
                                  0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA}};


void drawResetButton(){
     a3c:	e0885087 	add	r5, r8, r7, lsl #1
     a40:	e1a0400a 	mov	r4, r10
     a44:	eafffff1 	b	a10 <drawResetButton+0x1c>

00000a48 <drawSwitchButton>:
      drawIndividualPixel(x+j,y+i,resetButton[15*i + j]);
    }
  }
}

void drawSwitchButton(){
     a48:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
     a4c:	e3a06004 	mov	r6, #4
     a50:	e3a05000 	mov	r5, #0
     a54:	e300912d 	movw	r9, #301	; 0x12d
  int x = SWITCH_BUTTON_X;
  int y = SWITCH_BUTTON_Y;
  
  for(int i = 0; i < 12; i++){
    for(int j = 0; j < 15; j++){
      drawIndividualPixel(x+j,y+i,switchButton[isFluidSim][15*i + j]);
     a58:	e30a8700 	movw	r8, #42752	; 0xa700
     a5c:	e3408000 	movt	r8, #0
     a60:	e30b781c 	movw	r7, #47132	; 0xb81c
     a64:	e3407000 	movt	r7, #0
     a68:	e3a0a0b4 	mov	r10, #180	; 0xb4
     a6c:	ea00000e 	b	aac <drawSwitchButton+0x64>
     a70:	e5d73018 	ldrb	r3, [r7, #24]
     a74:	e023439a 	mla	r3, r10, r3, r4
     a78:	e0833005 	add	r3, r3, r5
     a7c:	e0883083 	add	r3, r8, r3, lsl #1
     a80:	e1a00004 	mov	r0, r4
     a84:	e1a01006 	mov	r1, r6
     a88:	e1532ff2 	ldrsh	r2, [r3, #-242]	; 0xffffff0e
     a8c:	ebfffe57 	bl	3f0 <drawIndividualPixel>
     a90:	e2844001 	add	r4, r4, #1
void drawSwitchButton(){
  int x = SWITCH_BUTTON_X;
  int y = SWITCH_BUTTON_Y;
  
  for(int i = 0; i < 12; i++){
    for(int j = 0; j < 15; j++){
     a94:	e3540f4f 	cmp	r4, #316	; 0x13c
     a98:	1afffff4 	bne	a70 <drawSwitchButton+0x28>
     a9c:	e285500f 	add	r5, r5, #15
     aa0:	e2866001 	add	r6, r6, #1

void drawSwitchButton(){
  int x = SWITCH_BUTTON_X;
  int y = SWITCH_BUTTON_Y;
  
  for(int i = 0; i < 12; i++){
     aa4:	e35500b4 	cmp	r5, #180	; 0xb4
     aa8:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, r10, pc}
      drawIndividualPixel(x+j,y+i,resetButton[15*i + j]);
    }
  }
}

void drawSwitchButton(){
     aac:	e1a04009 	mov	r4, r9
     ab0:	eaffffee 	b	a70 <drawSwitchButton+0x28>

00000ab4 <drawPlayPause>:
      drawIndividualPixel(x+j,y+i,switchButton[isFluidSim][15*i + j]);
    }
  }
}

void drawPlayPause(){
     ab4:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
     ab8:	e3a06024 	mov	r6, #36	; 0x24
     abc:	e3e07000 	mvn	r7, #0
     ac0:	e59fa03c 	ldr	r10, [pc, #60]	; b04 <drawPlayPause+0x50>
     ac4:	e300812d 	movw	r8, #301	; 0x12d
     ac8:	ea00000a 	b	af8 <drawPlayPause+0x44>
  int x = PLAY_BUTTON_X;
  int y = PLAY_BUTTON_Y;
  
  for(int i = 0; i < 12; i++){
    for(int j = 0; j < 15; j++){
      drawIndividualPixel(x+j,y+i,playButton[15*i + j]);
     acc:	e1a00004 	mov	r0, r4
     ad0:	e1a01006 	mov	r1, r6
     ad4:	e1f520f2 	ldrsh	r2, [r5, #2]!
     ad8:	ebfffe44 	bl	3f0 <drawIndividualPixel>
     adc:	e2844001 	add	r4, r4, #1
void drawPlayPause(){
  int x = PLAY_BUTTON_X;
  int y = PLAY_BUTTON_Y;
  
  for(int i = 0; i < 12; i++){
    for(int j = 0; j < 15; j++){
     ae0:	e3540f4f 	cmp	r4, #316	; 0x13c
     ae4:	1afffff8 	bne	acc <drawPlayPause+0x18>
     ae8:	e287700f 	add	r7, r7, #15
     aec:	e2866001 	add	r6, r6, #1

void drawPlayPause(){
  int x = PLAY_BUTTON_X;
  int y = PLAY_BUTTON_Y;
  
  for(int i = 0; i < 12; i++){
     af0:	e35700b3 	cmp	r7, #179	; 0xb3
     af4:	08bd85f8 	popeq	{r3, r4, r5, r6, r7, r8, r10, pc}
      drawIndividualPixel(x+j,y+i,switchButton[isFluidSim][15*i + j]);
    }
  }
}

void drawPlayPause(){
     af8:	e08a5087 	add	r5, r10, r7, lsl #1
     afc:	e1a04008 	mov	r4, r8
     b00:	eafffff1 	b	acc <drawPlayPause+0x18>
     b04:	0000ab38 	.word	0x0000ab38

00000b08 <drawFFButton>:
      drawIndividualPixel(x+j,y+i,playButton[15*i + j]);
    }
  }
}

void drawFFButton(){
     b08:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
     b0c:	e3a06034 	mov	r6, #52	; 0x34
     b10:	e3a05000 	mov	r5, #0
     b14:	e300912d 	movw	r9, #301	; 0x12d
  int x = FF_BUTTON_X;
  int y = FF_BUTTON_Y;
  
  for(int i = 0; i < 12; i++){
    for(int j = 0; j < 15; j++){
      drawIndividualPixel(x+j,y+i,speedButton[speedMult][15*i + j]);
     b18:	e30a8700 	movw	r8, #42752	; 0xa700
     b1c:	e3408000 	movt	r8, #0
     b20:	e30b781c 	movw	r7, #47132	; 0xb81c
     b24:	e3407000 	movt	r7, #0
     b28:	e3a0a0b4 	mov	r10, #180	; 0xb4
     b2c:	ea00000f 	b	b70 <drawFFButton+0x68>
     b30:	e597301c 	ldr	r3, [r7, #28]
     b34:	e023439a 	mla	r3, r10, r3, r4
     b38:	e0833005 	add	r3, r3, r5
     b3c:	e0883083 	add	r3, r8, r3, lsl #1
     b40:	e2833fd1 	add	r3, r3, #836	; 0x344
     b44:	e1a00004 	mov	r0, r4
     b48:	e1a01006 	mov	r1, r6
     b4c:	e1d320f2 	ldrsh	r2, [r3, #2]
     b50:	ebfffe26 	bl	3f0 <drawIndividualPixel>
     b54:	e2844001 	add	r4, r4, #1
void drawFFButton(){
  int x = FF_BUTTON_X;
  int y = FF_BUTTON_Y;
  
  for(int i = 0; i < 12; i++){
    for(int j = 0; j < 15; j++){
     b58:	e3540f4f 	cmp	r4, #316	; 0x13c
     b5c:	1afffff3 	bne	b30 <drawFFButton+0x28>
     b60:	e285500f 	add	r5, r5, #15
     b64:	e2866001 	add	r6, r6, #1

void drawFFButton(){
  int x = FF_BUTTON_X;
  int y = FF_BUTTON_Y;
  
  for(int i = 0; i < 12; i++){
     b68:	e35500b4 	cmp	r5, #180	; 0xb4
     b6c:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, r10, pc}
      drawIndividualPixel(x+j,y+i,playButton[15*i + j]);
    }
  }
}

void drawFFButton(){
     b70:	e1a04009 	mov	r4, r9
     b74:	eaffffed 	b	b30 <drawFFButton+0x28>

00000b78 <drawButtons>:
      drawIndividualPixel(x+j,y+i,speedButton[speedMult][15*i + j]);
    }
  }
}

void drawButtons(){
     b78:	e92d4008 	push	{r3, lr}
    drawSwitchButton();
     b7c:	ebffffb1 	bl	a48 <drawSwitchButton>
    drawResetButton();
     b80:	ebffff9b 	bl	9f4 <drawResetButton>
    drawPlayPause();
     b84:	ebffffca 	bl	ab4 <drawPlayPause>
    drawFFButton();
     b88:	ebffffde 	bl	b08 <drawFFButton>
     b8c:	e8bd8008 	pop	{r3, pc}

00000b90 <initParticles>:
} Particle;

Particle allParticles[NUM_PARTICLES];
drawParticle allEraseParticles[NUM_PARTICLES];

void initParticles() {
     b90:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
    int stepX = MAX_X/amtColumns;
    int stepY = MAX_Y/amtRows;
    int initX = stepX/2;
    int initY = stepY/2;

    hpx = (stepX + stepY) / 2.0;
     b94:	e30b481c 	movw	r4, #47132	; 0xb81c
     b98:	e3404000 	movt	r4, #0
     b9c:	e3a03011 	mov	r3, #17
     ba0:	e5843020 	str	r3, [r4, #32]
    // h = M_PER_PX * (stepX + stepY) / 2.0;
    h = M_PER_PX * H_H;
     ba4:	e30c3ccd 	movw	r3, #52429	; 0xcccd
     ba8:	e3433dcc 	movt	r3, #15820	; 0x3dcc
     bac:	e5843024 	str	r3, [r4, #36]	; 0x24

    alpha = 5.0/(14.0*3.14159265*h*h);
     bb0:	e30e3430 	movw	r3, #58416	; 0xe430
     bb4:	e3443135 	movt	r3, #16693	; 0x4135
     bb8:	e5843028 	str	r3, [r4, #40]	; 0x28
    inv_rho_naught = 1.0/(float)DENSITY_RESTING;
     bbc:	e30531c3 	movw	r3, #20931	; 0x51c3
     bc0:	e3433921 	movt	r3, #14625	; 0x3921
     bc4:	e584302c 	str	r3, [r4, #44]	; 0x2c
    nu = h*h/100.0;
     bc8:	e30b3718 	movw	r3, #46872	; 0xb718
     bcc:	e34338d1 	movt	r3, #14545	; 0x38d1
     bd0:	e5843030 	str	r3, [r4, #48]	; 0x30
     bd4:	e2844044 	add	r4, r4, #68	; 0x44
     bd8:	e3a07000 	mov	r7, #0
     bdc:	e1a0a007 	mov	r10, r7
    // printf("\ninv density: %f", inv_rho_naught);

    int xStepCount = 0;
    int yStepCount = 0;
	
    for (int i = 0; i < NUM_PARTICLES; i++) {
     be0:	e1a08007 	mov	r8, r7
    // printf("\nh: %f", h);
    // printf("\nalpha: %f", alpha);
    // printf("\ninv density: %f", inv_rho_naught);

    int xStepCount = 0;
    int yStepCount = 0;
     be4:	e1a05007 	mov	r5, r7
    // DEBUG
    // printf("\nh: %f", h);
    // printf("\nalpha: %f", alpha);
    // printf("\ninv density: %f", inv_rho_naught);

    int xStepCount = 0;
     be8:	e1a06007 	mov	r6, r7
     bec:	ea000046 	b	d0c <initParticles+0x17c>
    int yStepCount = 0;
	
    for (int i = 0; i < NUM_PARTICLES; i++) {
		
        for(int j = 0; j < NUM_PARTICLES; j++){
            lastSeen[i][j] = -1;
     bf0:	e7802003 	str	r2, [r0, r3]
            lastSeen2[i][j] = -1;
     bf4:	e7812003 	str	r2, [r1, r3]
     bf8:	e2833004 	add	r3, r3, #4
    int xStepCount = 0;
    int yStepCount = 0;
	
    for (int i = 0; i < NUM_PARTICLES; i++) {
		
        for(int j = 0; j < NUM_PARTICLES; j++){
     bfc:	e3530e32 	cmp	r3, #800	; 0x320
     c00:	1afffffa 	bne	bf0 <initParticles+0x60>
            lastSeen[i][j] = -1;
            lastSeen2[i][j] = -1;
        }
		srand(i);
     c04:	e1a00008 	mov	r0, r8
     c08:	eb0024f8 	bl	9ff0 <srand>
        if(xStepCount >= amtColumns) {
     c0c:	e3560011 	cmp	r6, #17
            xStepCount = 0;
            yStepCount++;
     c10:	c2855001 	addgt	r5, r5, #1
            lastSeen[i][j] = -1;
            lastSeen2[i][j] = -1;
        }
		srand(i);
        if(xStepCount >= amtColumns) {
            xStepCount = 0;
     c14:	c3a06000 	movgt	r6, #0
            yStepCount++;
        }
        if(yStepCount >= amtRows) {
            yStepCount = 0;
     c18:	e355000c 	cmp	r5, #12
     c1c:	c3a05000 	movgt	r5, #0
        }
        allParticles[i].x = initX + xStepCount*stepX + (rand() % INIT_VAR) - (INIT_VAR>>1);
     c20:	eb0024f9 	bl	a00c <rand>
     c24:	e0862206 	add	r2, r6, r6, lsl #4
     c28:	e3089e39 	movw	r9, #36409	; 0x8e39
     c2c:	e34398e3 	movt	r9, #14563	; 0x38e3
     c30:	e0c13099 	smull	r3, r1, r9, r0
     c34:	e1a03fc0 	asr	r3, r0, #31
     c38:	e06330c1 	rsb	r3, r3, r1, asr #1
     c3c:	e0833183 	add	r3, r3, r3, lsl #3
     c40:	e0630000 	rsb	r0, r3, r0
     c44:	e0823000 	add	r3, r2, r0
     c48:	e2833004 	add	r3, r3, #4
     c4c:	e5043010 	str	r3, [r4, #-16]
        allParticles[i].y = initY + yStepCount*stepY + (rand() % INIT_VAR) - (INIT_VAR>>1);
     c50:	eb0024ed 	bl	a00c <rand>
     c54:	e0852185 	add	r2, r5, r5, lsl #3
     c58:	e0c9c099 	smull	r12, r9, r9, r0
     c5c:	e1a03fc0 	asr	r3, r0, #31
     c60:	e06330c9 	rsb	r3, r3, r9, asr #1
     c64:	e0833183 	add	r3, r3, r3, lsl #3
     c68:	e0630000 	rsb	r0, r3, r0
     c6c:	e0803082 	add	r3, r0, r2, lsl #1
     c70:	e2833005 	add	r3, r3, #5
     c74:	e1a0b003 	mov	r11, r3
     c78:	e1a09003 	mov	r9, r3
     c7c:	e504300c 	str	r3, [r4, #-12]
        allParticles[i].vx = 0;
     c80:	e3a03000 	mov	r3, #0
     c84:	e5843000 	str	r3, [r4]
        allParticles[i].vy = 0;
     c88:	e5843004 	str	r3, [r4, #4]
} Particle;

Particle allParticles[NUM_PARTICLES];
drawParticle allEraseParticles[NUM_PARTICLES];

void initParticles() {
     c8c:	e2843ed6 	add	r3, r4, #3424	; 0xd60
        }
        allParticles[i].x = initX + xStepCount*stepX + (rand() % INIT_VAR) - (INIT_VAR>>1);
        allParticles[i].y = initY + yStepCount*stepY + (rand() % INIT_VAR) - (INIT_VAR>>1);
        allParticles[i].vx = 0;
        allParticles[i].vy = 0;
        allParticles[i].colour = WATER_COLOUR;
     c90:	e3062c5f 	movw	r2, #27743	; 0x6c5f
     c94:	e1c320b0 	strh	r2, [r3]

        xStepCount++;
     c98:	e2866001 	add	r6, r6, #1

        allParticles[i].pX = M_PER_PX * allParticles[i].x;
     c9c:	e5140010 	ldr	r0, [r4, #-16]
     ca0:	eb002106 	bl	90c0 <__aeabi_i2d>
     ca4:	e301247b 	movw	r2, #5243	; 0x147b
     ca8:	e34427ae 	movt	r2, #18350	; 0x47ae
     cac:	e3073ae1 	movw	r3, #31457	; 0x7ae1
     cb0:	e3433f94 	movt	r3, #16276	; 0x3f94
     cb4:	eb002138 	bl	919c <__aeabi_dmul>
     cb8:	eb0022c6 	bl	97d8 <__aeabi_d2f>
     cbc:	e5040008 	str	r0, [r4, #-8]
        allParticles[i].pY = M_PER_PX * allParticles[i].y;
     cc0:	e1a0000b 	mov	r0, r11
     cc4:	eb0020fd 	bl	90c0 <__aeabi_i2d>
     cc8:	e301247b 	movw	r2, #5243	; 0x147b
     ccc:	e34427ae 	movt	r2, #18350	; 0x47ae
     cd0:	e3073ae1 	movw	r3, #31457	; 0x7ae1
     cd4:	e3433f94 	movt	r3, #16276	; 0x3f94
     cd8:	eb00212f 	bl	919c <__aeabi_dmul>
     cdc:	eb0022bd 	bl	97d8 <__aeabi_d2f>
     ce0:	e5040004 	str	r0, [r4, #-4]
        allEraseParticles[i].x = allParticles[i].x;
     ce4:	e5142010 	ldr	r2, [r4, #-16]
     ce8:	e59f3038 	ldr	r3, [pc, #56]	; d28 <initParticles+0x198>
     cec:	e7a3200a 	str	r2, [r3, r10]!
        allEraseParticles[i].y = allParticles[i].y;
     cf0:	e583b004 	str	r11, [r3, #4]
    // printf("\ninv density: %f", inv_rho_naught);

    int xStepCount = 0;
    int yStepCount = 0;
	
    for (int i = 0; i < NUM_PARTICLES; i++) {
     cf4:	e2888001 	add	r8, r8, #1
     cf8:	e2844d36 	add	r4, r4, #3456	; 0xd80
     cfc:	e28aa008 	add	r10, r10, #8
     d00:	e2877e32 	add	r7, r7, #800	; 0x320
     d04:	e35800c8 	cmp	r8, #200	; 0xc8
     d08:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
} Particle;

Particle allParticles[NUM_PARTICLES];
drawParticle allEraseParticles[NUM_PARTICLES];

void initParticles() {
     d0c:	e3a03000 	mov	r3, #0
     d10:	e59f2014 	ldr	r2, [pc, #20]	; d2c <initParticles+0x19c>
     d14:	e0870002 	add	r0, r7, r2
    int yStepCount = 0;
	
    for (int i = 0; i < NUM_PARTICLES; i++) {
		
        for(int j = 0; j < NUM_PARTICLES; j++){
            lastSeen[i][j] = -1;
     d18:	e3e02000 	mvn	r2, #0
} Particle;

Particle allParticles[NUM_PARTICLES];
drawParticle allEraseParticles[NUM_PARTICLES];

void initParticles() {
     d1c:	e59fc00c 	ldr	r12, [pc, #12]	; d30 <initParticles+0x1a0>
     d20:	e087100c 	add	r1, r7, r12
     d24:	eaffffb1 	b	bf0 <initParticles+0x60>
     d28:	00102650 	.word	0x00102650
     d2c:	000b4450 	.word	0x000b4450
     d30:	000db550 	.word	0x000db550

00000d34 <draw2b2>:
        allEraseParticles[i].x = allParticles[i].x;
        allEraseParticles[i].y = allParticles[i].y;
    }
}

void draw2b2(int x, int y, short int colour) {
     d34:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
     d38:	e1a05000 	mov	r5, r0
     d3c:	e1a04001 	mov	r4, r1
     d40:	e1a06002 	mov	r6, r2
    drawIndividualPixel(x, y, colour);
     d44:	ebfffda9 	bl	3f0 <drawIndividualPixel>
    if (x < (MAX_X-2) && y > 1) {
     d48:	e300313d 	movw	r3, #317	; 0x13d
     d4c:	e1550003 	cmp	r5, r3
     d50:	c3a03000 	movgt	r3, #0
     d54:	d3a03001 	movle	r3, #1
     d58:	e3540001 	cmp	r4, #1
     d5c:	d3a01000 	movle	r1, #0
     d60:	c3a01001 	movgt	r1, #1
     d64:	e1110003 	tst	r1, r3
     d68:	0a00000e 	beq	da8 <draw2b2+0x74>
        drawIndividualPixel(x + 1, y, colour);
     d6c:	e2857001 	add	r7, r5, #1
     d70:	e1a00007 	mov	r0, r7
     d74:	e1a01004 	mov	r1, r4
     d78:	e1a02006 	mov	r2, r6
     d7c:	ebfffd9b 	bl	3f0 <drawIndividualPixel>
        drawIndividualPixel(x + 1, y - 1, colour);
     d80:	e2444001 	sub	r4, r4, #1
     d84:	e1a00007 	mov	r0, r7
     d88:	e1a01004 	mov	r1, r4
     d8c:	e1a02006 	mov	r2, r6
     d90:	ebfffd96 	bl	3f0 <drawIndividualPixel>
        drawIndividualPixel(x, y - 1, colour);
     d94:	e1a00005 	mov	r0, r5
     d98:	e1a01004 	mov	r1, r4
     d9c:	e1a02006 	mov	r2, r6
     da0:	ebfffd92 	bl	3f0 <drawIndividualPixel>
     da4:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
    } else if (x < (MAX_X-2)) {
     da8:	e3530000 	cmp	r3, #0
     dac:	0a000004 	beq	dc4 <draw2b2+0x90>
        drawIndividualPixel(x + 1, y, colour);
     db0:	e2850001 	add	r0, r5, #1
     db4:	e1a01004 	mov	r1, r4
     db8:	e1a02006 	mov	r2, r6
     dbc:	ebfffd8b 	bl	3f0 <drawIndividualPixel>
     dc0:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
    } else if (y > 1) {
     dc4:	e3510000 	cmp	r1, #0
     dc8:	08bd80f8 	popeq	{r3, r4, r5, r6, r7, pc}
        drawIndividualPixel(x, y - 1, colour);
     dcc:	e1a00005 	mov	r0, r5
     dd0:	e2441001 	sub	r1, r4, #1
     dd4:	e1a02006 	mov	r2, r6
     dd8:	ebfffd84 	bl	3f0 <drawIndividualPixel>
     ddc:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}

00000de0 <eraseParticles>:
    }
}
void eraseParticles() {
     de0:	e92d4070 	push	{r4, r5, r6, lr}
     de4:	e3a04000 	mov	r4, #0
    for (int i = 0; i < NUM_PARTICLES; i++) {
        //drawIndividualPixel(allParticles[i].x, allParticles[i].y, BLACK);
        draw2b2(allEraseParticles[i].x, allEraseParticles[i].y, BLACK);
     de8:	e59f6024 	ldr	r6, [pc, #36]	; e14 <eraseParticles+0x34>
     dec:	e1a05004 	mov	r5, r4
     df0:	e1a03006 	mov	r3, r6
     df4:	e7b30004 	ldr	r0, [r3, r4]!
     df8:	e5931004 	ldr	r1, [r3, #4]
     dfc:	e1a02005 	mov	r2, r5
     e00:	ebffffcb 	bl	d34 <draw2b2>
     e04:	e2844008 	add	r4, r4, #8
    } else if (y > 1) {
        drawIndividualPixel(x, y - 1, colour);
    }
}
void eraseParticles() {
    for (int i = 0; i < NUM_PARTICLES; i++) {
     e08:	e3540d19 	cmp	r4, #1600	; 0x640
     e0c:	1afffff7 	bne	df0 <eraseParticles+0x10>
        //drawIndividualPixel(allParticles[i].x, allParticles[i].y, BLACK);
        draw2b2(allEraseParticles[i].x, allEraseParticles[i].y, BLACK);
    }
}
     e10:	e8bd8070 	pop	{r4, r5, r6, pc}
     e14:	00102650 	.word	0x00102650

00000e18 <drawParticles>:
void drawParticles() {
     e18:	e92d4070 	push	{r4, r5, r6, lr}
     e1c:	e3a04000 	mov	r4, #0
     e20:	e59f502c 	ldr	r5, [pc, #44]	; e54 <drawParticles+0x3c>
    for (int i = 0; i < NUM_PARTICLES; i++) {
     e24:	e3a06b23 	mov	r6, #35840	; 0x8c00
     e28:	e340600a 	movt	r6, #10
    for (int i = 0; i < NUM_PARTICLES; i++) {
        //drawIndividualPixel(allParticles[i].x, allParticles[i].y, BLACK);
        draw2b2(allEraseParticles[i].x, allEraseParticles[i].y, BLACK);
    }
}
void drawParticles() {
     e2c:	e0853004 	add	r3, r5, r4
     e30:	e2832ed7 	add	r2, r3, #3440	; 0xd70
    for (int i = 0; i < NUM_PARTICLES; i++) {
        //drawIndividualPixel(allParticles[i].x, allParticles[i].y, allParticles[i].colour);
        draw2b2(allParticles[i].x, allParticles[i].y, allParticles[i].colour);
     e34:	e7950004 	ldr	r0, [r5, r4]
     e38:	e5931004 	ldr	r1, [r3, #4]
     e3c:	e1d220f0 	ldrsh	r2, [r2]
     e40:	ebffffbb 	bl	d34 <draw2b2>
     e44:	e2844d36 	add	r4, r4, #3456	; 0xd80
        //drawIndividualPixel(allParticles[i].x, allParticles[i].y, BLACK);
        draw2b2(allEraseParticles[i].x, allEraseParticles[i].y, BLACK);
    }
}
void drawParticles() {
    for (int i = 0; i < NUM_PARTICLES; i++) {
     e48:	e1540006 	cmp	r4, r6
     e4c:	1afffff6 	bne	e2c <drawParticles+0x14>
        //drawIndividualPixel(allParticles[i].x, allParticles[i].y, allParticles[i].colour);
        draw2b2(allParticles[i].x, allParticles[i].y, allParticles[i].colour);
    }
}
     e50:	e8bd8070 	pop	{r4, r5, r6, pc}
     e54:	0000b850 	.word	0x0000b850

00000e58 <stepSPHPositions>:

// Reference:
// https://cg.informatik.uni-freiburg.de/course_notes/sim_10_sph.pdf

void stepSPHPositions(int i) {
     e58:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
     e5c:	e1a05000 	mov	r5, r0

    allParticles[i].pX += allParticles[i].vx * SPF;
     e60:	e30a3700 	movw	r3, #42752	; 0xa700
     e64:	e3403000 	movt	r3, #0
     e68:	e5936ca8 	ldr	r6, [r3, #3240]	; 0xca8
     e6c:	e30b381c 	movw	r3, #47132	; 0xb81c
     e70:	e3403000 	movt	r3, #0
     e74:	e3a04d36 	mov	r4, #3456	; 0xd80
     e78:	e0243094 	mla	r4, r4, r0, r3
     e7c:	e1a00006 	mov	r0, r6
     e80:	e5941044 	ldr	r1, [r4, #68]	; 0x44
     e84:	eb002326 	bl	9b24 <__aeabi_fmul>
     e88:	e1a01000 	mov	r1, r0
     e8c:	e594003c 	ldr	r0, [r4, #60]	; 0x3c
     e90:	eb00227b 	bl	9884 <__addsf3>
     e94:	e1a08000 	mov	r8, r0
     e98:	e584003c 	str	r0, [r4, #60]	; 0x3c
    allParticles[i].pY += allParticles[i].vy * SPF;
     e9c:	e1a00006 	mov	r0, r6
     ea0:	e5941048 	ldr	r1, [r4, #72]	; 0x48
     ea4:	eb00231e 	bl	9b24 <__aeabi_fmul>
     ea8:	e1a01000 	mov	r1, r0
     eac:	e5940040 	ldr	r0, [r4, #64]	; 0x40
     eb0:	eb002273 	bl	9884 <__addsf3>
     eb4:	e1a07000 	mov	r7, r0
     eb8:	e5840040 	str	r0, [r4, #64]	; 0x40
    allParticles[i].x = PX_PER_M * allParticles[i].pX;
     ebc:	e1a00008 	mov	r0, r8
     ec0:	eb002088 	bl	90e8 <__aeabi_f2d>
     ec4:	e3a02000 	mov	r2, #0
     ec8:	e3a03000 	mov	r3, #0
     ecc:	e3443049 	movt	r3, #16457	; 0x4049
     ed0:	eb0020b1 	bl	919c <__aeabi_dmul>
     ed4:	eb002228 	bl	977c <__aeabi_d2iz>
     ed8:	e1a06000 	mov	r6, r0
     edc:	e5840034 	str	r0, [r4, #52]	; 0x34
    allParticles[i].y = PX_PER_M * allParticles[i].pY;
     ee0:	e1a00007 	mov	r0, r7
     ee4:	eb00207f 	bl	90e8 <__aeabi_f2d>
     ee8:	e3a02000 	mov	r2, #0
     eec:	e3a03000 	mov	r3, #0
     ef0:	e3443049 	movt	r3, #16457	; 0x4049
     ef4:	eb0020a8 	bl	919c <__aeabi_dmul>
     ef8:	eb00221f 	bl	977c <__aeabi_d2iz>
     efc:	e5840038 	str	r0, [r4, #56]	; 0x38

    // If, for whatever reason, we went out of bounds after velocity application, fix them manually.
	if (allParticles[i].x <= 0){
     f00:	e3560000 	cmp	r6, #0
		allParticles[i].x = 0;
     f04:	d1a03004 	movle	r3, r4
     f08:	d3a02000 	movle	r2, #0
     f0c:	d5832034 	strle	r2, [r3, #52]	; 0x34
    allParticles[i].pY += allParticles[i].vy * SPF;
    allParticles[i].x = PX_PER_M * allParticles[i].pX;
    allParticles[i].y = PX_PER_M * allParticles[i].pY;

    // If, for whatever reason, we went out of bounds after velocity application, fix them manually.
	if (allParticles[i].x <= 0){
     f10:	da000007 	ble	f34 <stepSPHPositions+0xdc>
		allParticles[i].x = 0;
        // allParticles[i].pX = EPSILON;
        
	} else if (allParticles[i].x > (MAX_X - 1)) {
     f14:	e3560d05 	cmp	r6, #320	; 0x140
     f18:	ba000005 	blt	f34 <stepSPHPositions+0xdc>
		allParticles[i].x = MAX_X-1;
     f1c:	e30b381c 	movw	r3, #47132	; 0xb81c
     f20:	e3403000 	movt	r3, #0
     f24:	e3a02d36 	mov	r2, #3456	; 0xd80
     f28:	e0233592 	mla	r3, r2, r5, r3
     f2c:	e300213f 	movw	r2, #319	; 0x13f
     f30:	e5832034 	str	r2, [r3, #52]	; 0x34
        // allParticles[i].pX = M_PER_PX * allParticles[i].x;
	}
	if (allParticles[i].y <= 0){
     f34:	e30b381c 	movw	r3, #47132	; 0xb81c
     f38:	e3403000 	movt	r3, #0
     f3c:	e3a02d36 	mov	r2, #3456	; 0xd80
     f40:	e0233592 	mla	r3, r2, r5, r3
     f44:	e5933038 	ldr	r3, [r3, #56]	; 0x38
     f48:	e3530000 	cmp	r3, #0
     f4c:	ca000005 	bgt	f68 <stepSPHPositions+0x110>
		allParticles[i].y = 0;
     f50:	e30b381c 	movw	r3, #47132	; 0xb81c
     f54:	e3403000 	movt	r3, #0
     f58:	e0253592 	mla	r5, r2, r5, r3
     f5c:	e3a03000 	mov	r3, #0
     f60:	e5853038 	str	r3, [r5, #56]	; 0x38
     f64:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        // allParticles[i].pY = EPSILON;

	} else if (allParticles[i].y > (MAX_Y -1)){
     f68:	e35300ef 	cmp	r3, #239	; 0xef
     f6c:	d8bd81f0 	pople	{r4, r5, r6, r7, r8, pc}
		allParticles[i].y = MAX_Y-1;
     f70:	e30b381c 	movw	r3, #47132	; 0xb81c
     f74:	e3403000 	movt	r3, #0
     f78:	e3a02d36 	mov	r2, #3456	; 0xd80
     f7c:	e0253592 	mla	r5, r2, r5, r3
     f80:	e3a030ef 	mov	r3, #239	; 0xef
     f84:	e5853038 	str	r3, [r5, #56]	; 0x38
        allParticles[i].pY = M_PER_PX * allParticles[i].y;
     f88:	e30f35c3 	movw	r3, #62915	; 0xf5c3
     f8c:	e3443098 	movt	r3, #16536	; 0x4098
     f90:	e5853040 	str	r3, [r5, #64]	; 0x40
     f94:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00000f98 <doVelocityStepCheck>:
	}
    
}

void doVelocityStepCheck(int i) {
     f98:	e92d4070 	push	{r4, r5, r6, lr}
     f9c:	e1a04000 	mov	r4, r0
    // Container collision handling and application of TUG Accelerations.
    if((allParticles[i].x >= (MAX_X-1) && allParticles[i].vx > 0) || (allParticles[i].x <= 0 && allParticles[i].vx < 0)) {
     fa0:	e30b381c 	movw	r3, #47132	; 0xb81c
     fa4:	e3403000 	movt	r3, #0
     fa8:	e3a02d36 	mov	r2, #3456	; 0xd80
     fac:	e0233092 	mla	r3, r2, r0, r3
     fb0:	e5935034 	ldr	r5, [r3, #52]	; 0x34
     fb4:	e300313e 	movw	r3, #318	; 0x13e
     fb8:	e1550003 	cmp	r5, r3
     fbc:	da000007 	ble	fe0 <doVelocityStepCheck+0x48>
     fc0:	e30b381c 	movw	r3, #47132	; 0xb81c
     fc4:	e3403000 	movt	r3, #0
     fc8:	e0233092 	mla	r3, r2, r0, r3
     fcc:	e5930044 	ldr	r0, [r3, #68]	; 0x44
     fd0:	e3a01000 	mov	r1, #0
     fd4:	eb0023cf 	bl	9f18 <__aeabi_fcmpgt>
     fd8:	e3500000 	cmp	r0, #0
     fdc:	1a00000a 	bne	100c <doVelocityStepCheck+0x74>
     fe0:	e3550000 	cmp	r5, #0
     fe4:	ca000017 	bgt	1048 <doVelocityStepCheck+0xb0>
     fe8:	e30b381c 	movw	r3, #47132	; 0xb81c
     fec:	e3403000 	movt	r3, #0
     ff0:	e3a02d36 	mov	r2, #3456	; 0xd80
     ff4:	e0233492 	mla	r3, r2, r4, r3
     ff8:	e5930044 	ldr	r0, [r3, #68]	; 0x44
     ffc:	e3a01000 	mov	r1, #0
    1000:	eb0023b2 	bl	9ed0 <__aeabi_fcmplt>
    1004:	e3500000 	cmp	r0, #0
    1008:	0a00000e 	beq	1048 <doVelocityStepCheck+0xb0>
        allParticles[i].vx = -allParticles[i].vx*ELASTICITY;
    100c:	e30b381c 	movw	r3, #47132	; 0xb81c
    1010:	e3403000 	movt	r3, #0
    1014:	e3a05d36 	mov	r5, #3456	; 0xd80
    1018:	e0253495 	mla	r5, r5, r4, r3
    101c:	e5950044 	ldr	r0, [r5, #68]	; 0x44
    1020:	e2800102 	add	r0, r0, #-2147483648	; 0x80000000
    1024:	eb00202f 	bl	90e8 <__aeabi_f2d>
    1028:	e309299a 	movw	r2, #39322	; 0x999a
    102c:	e3492999 	movt	r2, #39321	; 0x9999
    1030:	e3093999 	movw	r3, #39321	; 0x9999
    1034:	e3433fc9 	movt	r3, #16329	; 0x3fc9
    1038:	eb002057 	bl	919c <__aeabi_dmul>
    103c:	eb0021e5 	bl	97d8 <__aeabi_d2f>
    1040:	e5850044 	str	r0, [r5, #68]	; 0x44
    1044:	ea000035 	b	1120 <doVelocityStepCheck+0x188>
    }
    else if(allParticles[i].x <= hpx && allParticles[i].vx < EPSILON) {
    1048:	e30b381c 	movw	r3, #47132	; 0xb81c
    104c:	e3403000 	movt	r3, #0
    1050:	e5936020 	ldr	r6, [r3, #32]
    1054:	e1550006 	cmp	r5, r6
    1058:	ca000016 	bgt	10b8 <doVelocityStepCheck+0x120>
    105c:	e30b381c 	movw	r3, #47132	; 0xb81c
    1060:	e3403000 	movt	r3, #0
    1064:	e3a02d36 	mov	r2, #3456	; 0xd80
    1068:	e0233492 	mla	r3, r2, r4, r3
    106c:	e5930044 	ldr	r0, [r3, #68]	; 0x44
    1070:	eb00201c 	bl	90e8 <__aeabi_f2d>
    1074:	e30a29fc 	movw	r2, #43516	; 0xa9fc
    1078:	e34d22f1 	movt	r2, #54001	; 0xd2f1
    107c:	e306324d 	movw	r3, #25165	; 0x624d
    1080:	e3433f50 	movt	r3, #16208	; 0x3f50
    1084:	eb0021a4 	bl	971c <__aeabi_dcmplt>
    1088:	e3500000 	cmp	r0, #0
    108c:	0a000009 	beq	10b8 <doVelocityStepCheck+0x120>
        allParticles[i].ax += TUG_ACCELERATION;
    1090:	e30b381c 	movw	r3, #47132	; 0xb81c
    1094:	e3403000 	movt	r3, #0
    1098:	e3a05d36 	mov	r5, #3456	; 0xd80
    109c:	e0253495 	mla	r5, r5, r4, r3
    10a0:	e595004c 	ldr	r0, [r5, #76]	; 0x4c
    10a4:	e3a01000 	mov	r1, #0
    10a8:	e3441120 	movt	r1, #16672	; 0x4120
    10ac:	eb0021f4 	bl	9884 <__addsf3>
    10b0:	e585004c 	str	r0, [r5, #76]	; 0x4c
    10b4:	ea000019 	b	1120 <doVelocityStepCheck+0x188>
    }
    else if(allParticles[i].x >= (MAX_X-1-hpx) && allParticles[i].vx > -EPSILON) {
    10b8:	e2663f4f 	rsb	r3, r6, #316	; 0x13c
    10bc:	e2833003 	add	r3, r3, #3
    10c0:	e1530005 	cmp	r3, r5
    10c4:	ca000015 	bgt	1120 <doVelocityStepCheck+0x188>
    10c8:	e30b381c 	movw	r3, #47132	; 0xb81c
    10cc:	e3403000 	movt	r3, #0
    10d0:	e3a02d36 	mov	r2, #3456	; 0xd80
    10d4:	e0233492 	mla	r3, r2, r4, r3
    10d8:	e5930044 	ldr	r0, [r3, #68]	; 0x44
    10dc:	eb002001 	bl	90e8 <__aeabi_f2d>
    10e0:	e30a29fc 	movw	r2, #43516	; 0xa9fc
    10e4:	e34d22f1 	movt	r2, #54001	; 0xd2f1
    10e8:	e306324d 	movw	r3, #25165	; 0x624d
    10ec:	e34b3f50 	movt	r3, #48976	; 0xbf50
    10f0:	eb00219b 	bl	9764 <__aeabi_dcmpgt>
    10f4:	e3500000 	cmp	r0, #0
    10f8:	0a000008 	beq	1120 <doVelocityStepCheck+0x188>
        allParticles[i].ax -= TUG_ACCELERATION;
    10fc:	e30b381c 	movw	r3, #47132	; 0xb81c
    1100:	e3403000 	movt	r3, #0
    1104:	e3a05d36 	mov	r5, #3456	; 0xd80
    1108:	e0253495 	mla	r5, r5, r4, r3
    110c:	e595004c 	ldr	r0, [r5, #76]	; 0x4c
    1110:	e3a01000 	mov	r1, #0
    1114:	e3441120 	movt	r1, #16672	; 0x4120
    1118:	eb0021d8 	bl	9880 <__aeabi_fsub>
    111c:	e585004c 	str	r0, [r5, #76]	; 0x4c
    }

    if((allParticles[i].y >= (MAX_Y-1) && allParticles[i].vy > 0) || (allParticles[i].y <= 0 && allParticles[i].vy < 0)) {
    1120:	e30b381c 	movw	r3, #47132	; 0xb81c
    1124:	e3403000 	movt	r3, #0
    1128:	e3a02d36 	mov	r2, #3456	; 0xd80
    112c:	e0233492 	mla	r3, r2, r4, r3
    1130:	e5935038 	ldr	r5, [r3, #56]	; 0x38
    1134:	e35500ee 	cmp	r5, #238	; 0xee
    1138:	da000007 	ble	115c <doVelocityStepCheck+0x1c4>
    113c:	e30b381c 	movw	r3, #47132	; 0xb81c
    1140:	e3403000 	movt	r3, #0
    1144:	e0233492 	mla	r3, r2, r4, r3
    1148:	e5930048 	ldr	r0, [r3, #72]	; 0x48
    114c:	e3a01000 	mov	r1, #0
    1150:	eb002370 	bl	9f18 <__aeabi_fcmpgt>
    1154:	e3500000 	cmp	r0, #0
    1158:	1a00000a 	bne	1188 <doVelocityStepCheck+0x1f0>
    115c:	e3550000 	cmp	r5, #0
    1160:	ca000017 	bgt	11c4 <doVelocityStepCheck+0x22c>
    1164:	e30b381c 	movw	r3, #47132	; 0xb81c
    1168:	e3403000 	movt	r3, #0
    116c:	e3a02d36 	mov	r2, #3456	; 0xd80
    1170:	e0233492 	mla	r3, r2, r4, r3
    1174:	e5930048 	ldr	r0, [r3, #72]	; 0x48
    1178:	e3a01000 	mov	r1, #0
    117c:	eb002353 	bl	9ed0 <__aeabi_fcmplt>
    1180:	e3500000 	cmp	r0, #0
    1184:	0a00000e 	beq	11c4 <doVelocityStepCheck+0x22c>
        allParticles[i].vy = -allParticles[i].vy*ELASTICITY;
    1188:	e30b381c 	movw	r3, #47132	; 0xb81c
    118c:	e3403000 	movt	r3, #0
    1190:	e3a02d36 	mov	r2, #3456	; 0xd80
    1194:	e0243492 	mla	r4, r2, r4, r3
    1198:	e5940048 	ldr	r0, [r4, #72]	; 0x48
    119c:	e2800102 	add	r0, r0, #-2147483648	; 0x80000000
    11a0:	eb001fd0 	bl	90e8 <__aeabi_f2d>
    11a4:	e309299a 	movw	r2, #39322	; 0x999a
    11a8:	e3492999 	movt	r2, #39321	; 0x9999
    11ac:	e3093999 	movw	r3, #39321	; 0x9999
    11b0:	e3433fc9 	movt	r3, #16329	; 0x3fc9
    11b4:	eb001ff8 	bl	919c <__aeabi_dmul>
    11b8:	eb002186 	bl	97d8 <__aeabi_d2f>
    11bc:	e5840048 	str	r0, [r4, #72]	; 0x48
    11c0:	e8bd8070 	pop	{r4, r5, r6, pc}
    }
    else if(allParticles[i].y <= hpx && allParticles[i].vy < EPSILON) {
    11c4:	e30b381c 	movw	r3, #47132	; 0xb81c
    11c8:	e3403000 	movt	r3, #0
    11cc:	e5936020 	ldr	r6, [r3, #32]
    11d0:	e1550006 	cmp	r5, r6
    11d4:	ca000016 	bgt	1234 <doVelocityStepCheck+0x29c>
    11d8:	e30b381c 	movw	r3, #47132	; 0xb81c
    11dc:	e3403000 	movt	r3, #0
    11e0:	e3a02d36 	mov	r2, #3456	; 0xd80
    11e4:	e0233492 	mla	r3, r2, r4, r3
    11e8:	e5930048 	ldr	r0, [r3, #72]	; 0x48
    11ec:	eb001fbd 	bl	90e8 <__aeabi_f2d>
    11f0:	e30a29fc 	movw	r2, #43516	; 0xa9fc
    11f4:	e34d22f1 	movt	r2, #54001	; 0xd2f1
    11f8:	e306324d 	movw	r3, #25165	; 0x624d
    11fc:	e3433f50 	movt	r3, #16208	; 0x3f50
    1200:	eb002145 	bl	971c <__aeabi_dcmplt>
    1204:	e3500000 	cmp	r0, #0
    1208:	0a000009 	beq	1234 <doVelocityStepCheck+0x29c>
        allParticles[i].ay += TUG_ACCELERATION;
    120c:	e30b381c 	movw	r3, #47132	; 0xb81c
    1210:	e3403000 	movt	r3, #0
    1214:	e3a02d36 	mov	r2, #3456	; 0xd80
    1218:	e0243492 	mla	r4, r2, r4, r3
    121c:	e5940050 	ldr	r0, [r4, #80]	; 0x50
    1220:	e3a01000 	mov	r1, #0
    1224:	e3441120 	movt	r1, #16672	; 0x4120
    1228:	eb002195 	bl	9884 <__addsf3>
    122c:	e5840050 	str	r0, [r4, #80]	; 0x50
    1230:	e8bd8070 	pop	{r4, r5, r6, pc}
    }
    else if(allParticles[i].y >= (MAX_Y-1-hpx) && allParticles[i].vy > -EPSILON) {
    1234:	e26660ef 	rsb	r6, r6, #239	; 0xef
    1238:	e1550006 	cmp	r5, r6
    123c:	b8bd8070 	poplt	{r4, r5, r6, pc}
    1240:	e30b381c 	movw	r3, #47132	; 0xb81c
    1244:	e3403000 	movt	r3, #0
    1248:	e3a02d36 	mov	r2, #3456	; 0xd80
    124c:	e0233492 	mla	r3, r2, r4, r3
    1250:	e5930048 	ldr	r0, [r3, #72]	; 0x48
    1254:	eb001fa3 	bl	90e8 <__aeabi_f2d>
    1258:	e30a29fc 	movw	r2, #43516	; 0xa9fc
    125c:	e34d22f1 	movt	r2, #54001	; 0xd2f1
    1260:	e306324d 	movw	r3, #25165	; 0x624d
    1264:	e34b3f50 	movt	r3, #48976	; 0xbf50
    1268:	eb00213d 	bl	9764 <__aeabi_dcmpgt>
    126c:	e3500000 	cmp	r0, #0
    1270:	08bd8070 	popeq	{r4, r5, r6, pc}
        allParticles[i].ay -= TUG_ACCELERATION;
    1274:	e30b381c 	movw	r3, #47132	; 0xb81c
    1278:	e3403000 	movt	r3, #0
    127c:	e3a02d36 	mov	r2, #3456	; 0xd80
    1280:	e0243492 	mla	r4, r2, r4, r3
    1284:	e5940050 	ldr	r0, [r4, #80]	; 0x50
    1288:	e3a01000 	mov	r1, #0
    128c:	e3441120 	movt	r1, #16672	; 0x4120
    1290:	eb00217a 	bl	9880 <__aeabi_fsub>
    1294:	e5840050 	str	r0, [r4, #80]	; 0x50
    1298:	e8bd8070 	pop	{r4, r5, r6, pc}

0000129c <floatAbs>:
    }
}

float floatAbs(float in){
    129c:	e92d4010 	push	{r4, lr}
    12a0:	e1a04000 	mov	r4, r0
    return in > 0 ? in : -in;
    12a4:	e3a01000 	mov	r1, #0
    12a8:	eb00231a 	bl	9f18 <__aeabi_fcmpgt>
    12ac:	e3500000 	cmp	r0, #0
    12b0:	02844102 	addeq	r4, r4, #-2147483648	; 0x80000000
}
    12b4:	e1a00004 	mov	r0, r4
    12b8:	e8bd8010 	pop	{r4, pc}

000012bc <stepSPHVelocities>:
void stepSPHVelocities(int i) {
    12bc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    12c0:	e1a04000 	mov	r4, r0
    
    if(floatAbs(allParticles[i].vx) < VELOCITY_COLOUR_SENSITIVITY/2){
    12c4:	e30b381c 	movw	r3, #47132	; 0xb81c
    12c8:	e3403000 	movt	r3, #0
    12cc:	e3a02d36 	mov	r2, #3456	; 0xd80
    12d0:	e0233092 	mla	r3, r2, r0, r3
    12d4:	e5935044 	ldr	r5, [r3, #68]	; 0x44
    12d8:	e1a00005 	mov	r0, r5
    12dc:	ebffffee 	bl	129c <floatAbs>
    12e0:	e3a01000 	mov	r1, #0
    12e4:	e3441120 	movt	r1, #16672	; 0x4120
    12e8:	eb0022f8 	bl	9ed0 <__aeabi_fcmplt>
    12ec:	e3500000 	cmp	r0, #0
    12f0:	0a00000d 	beq	132c <stepSPHVelocities+0x70>
        allParticles[i].vx += allParticles[i].ax*SPF;
    12f4:	e30b381c 	movw	r3, #47132	; 0xb81c
    12f8:	e3403000 	movt	r3, #0
    12fc:	e3a06d36 	mov	r6, #3456	; 0xd80
    1300:	e0263496 	mla	r6, r6, r4, r3
    1304:	e30a3700 	movw	r3, #42752	; 0xa700
    1308:	e3403000 	movt	r3, #0
    130c:	e596004c 	ldr	r0, [r6, #76]	; 0x4c
    1310:	e5931ca8 	ldr	r1, [r3, #3240]	; 0xca8
    1314:	eb002202 	bl	9b24 <__aeabi_fmul>
    1318:	e1a01000 	mov	r1, r0
    131c:	e1a00005 	mov	r0, r5
    1320:	eb002157 	bl	9884 <__addsf3>
    1324:	e5860044 	str	r0, [r6, #68]	; 0x44
    1328:	ea000020 	b	13b0 <stepSPHVelocities+0xf4>
    } else if ((allParticles[i].vx > 0) != (allParticles[i].ax > 0)) {
    132c:	e30b381c 	movw	r3, #47132	; 0xb81c
    1330:	e3403000 	movt	r3, #0
    1334:	e3a02d36 	mov	r2, #3456	; 0xd80
    1338:	e0233492 	mla	r3, r2, r4, r3
    133c:	e593604c 	ldr	r6, [r3, #76]	; 0x4c
    1340:	e3a08001 	mov	r8, #1
    1344:	e1a00006 	mov	r0, r6
    1348:	e3a01000 	mov	r1, #0
    134c:	eb0022f1 	bl	9f18 <__aeabi_fcmpgt>
    1350:	e3500000 	cmp	r0, #0
    1354:	03a08000 	moveq	r8, #0
    1358:	e3a07001 	mov	r7, #1
    135c:	e1a00005 	mov	r0, r5
    1360:	e3a01000 	mov	r1, #0
    1364:	eb0022eb 	bl	9f18 <__aeabi_fcmpgt>
    1368:	e3500000 	cmp	r0, #0
    136c:	03a07000 	moveq	r7, #0
    1370:	e0287007 	eor	r7, r8, r7
    1374:	e3170001 	tst	r7, #1
    1378:	0a00000c 	beq	13b0 <stepSPHVelocities+0xf4>
        allParticles[i].vx += allParticles[i].ax*SPF;
    137c:	e30b381c 	movw	r3, #47132	; 0xb81c
    1380:	e3403000 	movt	r3, #0
    1384:	e3a07d36 	mov	r7, #3456	; 0xd80
    1388:	e0273497 	mla	r7, r7, r4, r3
    138c:	e30a3700 	movw	r3, #42752	; 0xa700
    1390:	e3403000 	movt	r3, #0
    1394:	e1a00006 	mov	r0, r6
    1398:	e5931ca8 	ldr	r1, [r3, #3240]	; 0xca8
    139c:	eb0021e0 	bl	9b24 <__aeabi_fmul>
    13a0:	e1a01000 	mov	r1, r0
    13a4:	e1a00005 	mov	r0, r5
    13a8:	eb002135 	bl	9884 <__addsf3>
    13ac:	e5870044 	str	r0, [r7, #68]	; 0x44
    } if (isnan(allParticles[i].vx)) {
    13b0:	e30b381c 	movw	r3, #47132	; 0xb81c
    13b4:	e3403000 	movt	r3, #0
    13b8:	e3a02d36 	mov	r2, #3456	; 0xd80
    13bc:	e0233492 	mla	r3, r2, r4, r3
    13c0:	e5930044 	ldr	r0, [r3, #68]	; 0x44
    13c4:	eb000f87 	bl	51e8 <__fpclassifyf>
    13c8:	e3500000 	cmp	r0, #0
    13cc:	1a000005 	bne	13e8 <stepSPHVelocities+0x12c>
        allParticles[i].vx = 0.0;
    13d0:	e30b381c 	movw	r3, #47132	; 0xb81c
    13d4:	e3403000 	movt	r3, #0
    13d8:	e3a02d36 	mov	r2, #3456	; 0xd80
    13dc:	e0233492 	mla	r3, r2, r4, r3
    13e0:	e3a02000 	mov	r2, #0
    13e4:	e5832044 	str	r2, [r3, #68]	; 0x44
    }
    if(floatAbs(allParticles[i].vy) < VELOCITY_COLOUR_SENSITIVITY/2){
    13e8:	e30b381c 	movw	r3, #47132	; 0xb81c
    13ec:	e3403000 	movt	r3, #0
    13f0:	e3a02d36 	mov	r2, #3456	; 0xd80
    13f4:	e0233492 	mla	r3, r2, r4, r3
    13f8:	e5935048 	ldr	r5, [r3, #72]	; 0x48
    13fc:	e1a00005 	mov	r0, r5
    1400:	ebffffa5 	bl	129c <floatAbs>
    1404:	e3a01000 	mov	r1, #0
    1408:	e3441120 	movt	r1, #16672	; 0x4120
    140c:	eb0022af 	bl	9ed0 <__aeabi_fcmplt>
    1410:	e3500000 	cmp	r0, #0
    1414:	0a00000d 	beq	1450 <stepSPHVelocities+0x194>
        allParticles[i].vy += allParticles[i].ay*SPF;
    1418:	e30b381c 	movw	r3, #47132	; 0xb81c
    141c:	e3403000 	movt	r3, #0
    1420:	e3a06d36 	mov	r6, #3456	; 0xd80
    1424:	e0263496 	mla	r6, r6, r4, r3
    1428:	e30a3700 	movw	r3, #42752	; 0xa700
    142c:	e3403000 	movt	r3, #0
    1430:	e5960050 	ldr	r0, [r6, #80]	; 0x50
    1434:	e5931ca8 	ldr	r1, [r3, #3240]	; 0xca8
    1438:	eb0021b9 	bl	9b24 <__aeabi_fmul>
    143c:	e1a01000 	mov	r1, r0
    1440:	e1a00005 	mov	r0, r5
    1444:	eb00210e 	bl	9884 <__addsf3>
    1448:	e5860048 	str	r0, [r6, #72]	; 0x48
    144c:	ea000020 	b	14d4 <stepSPHVelocities+0x218>
    } else if ((allParticles[i].vy > 0) != (allParticles[i].ay > 0)) {
    1450:	e30b381c 	movw	r3, #47132	; 0xb81c
    1454:	e3403000 	movt	r3, #0
    1458:	e3a02d36 	mov	r2, #3456	; 0xd80
    145c:	e0233492 	mla	r3, r2, r4, r3
    1460:	e5936050 	ldr	r6, [r3, #80]	; 0x50
    1464:	e3a08001 	mov	r8, #1
    1468:	e1a00006 	mov	r0, r6
    146c:	e3a01000 	mov	r1, #0
    1470:	eb0022a8 	bl	9f18 <__aeabi_fcmpgt>
    1474:	e3500000 	cmp	r0, #0
    1478:	03a08000 	moveq	r8, #0
    147c:	e3a07001 	mov	r7, #1
    1480:	e1a00005 	mov	r0, r5
    1484:	e3a01000 	mov	r1, #0
    1488:	eb0022a2 	bl	9f18 <__aeabi_fcmpgt>
    148c:	e3500000 	cmp	r0, #0
    1490:	03a07000 	moveq	r7, #0
    1494:	e0287007 	eor	r7, r8, r7
    1498:	e3170001 	tst	r7, #1
    149c:	0a00000c 	beq	14d4 <stepSPHVelocities+0x218>
        allParticles[i].vy += allParticles[i].ay*SPF;
    14a0:	e30b381c 	movw	r3, #47132	; 0xb81c
    14a4:	e3403000 	movt	r3, #0
    14a8:	e3a07d36 	mov	r7, #3456	; 0xd80
    14ac:	e0273497 	mla	r7, r7, r4, r3
    14b0:	e30a3700 	movw	r3, #42752	; 0xa700
    14b4:	e3403000 	movt	r3, #0
    14b8:	e1a00006 	mov	r0, r6
    14bc:	e5931ca8 	ldr	r1, [r3, #3240]	; 0xca8
    14c0:	eb002197 	bl	9b24 <__aeabi_fmul>
    14c4:	e1a01000 	mov	r1, r0
    14c8:	e1a00005 	mov	r0, r5
    14cc:	eb0020ec 	bl	9884 <__addsf3>
    14d0:	e5870048 	str	r0, [r7, #72]	; 0x48
    } if (isnan(allParticles[i].vy)) {
    14d4:	e30b381c 	movw	r3, #47132	; 0xb81c
    14d8:	e3403000 	movt	r3, #0
    14dc:	e3a02d36 	mov	r2, #3456	; 0xd80
    14e0:	e0233492 	mla	r3, r2, r4, r3
    14e4:	e5930048 	ldr	r0, [r3, #72]	; 0x48
    14e8:	eb000f3e 	bl	51e8 <__fpclassifyf>
    14ec:	e3500000 	cmp	r0, #0
    14f0:	1a000005 	bne	150c <stepSPHVelocities+0x250>
        allParticles[i].vy = 0.0;
    14f4:	e30b381c 	movw	r3, #47132	; 0xb81c
    14f8:	e3403000 	movt	r3, #0
    14fc:	e3a02d36 	mov	r2, #3456	; 0xd80
    1500:	e0233492 	mla	r3, r2, r4, r3
    1504:	e3a02000 	mov	r2, #0
    1508:	e5832048 	str	r2, [r3, #72]	; 0x48
    }
    allParticles[i].vx *= VELOCITY_DECAY;
    150c:	e30b381c 	movw	r3, #47132	; 0xb81c
    1510:	e3403000 	movt	r3, #0
    1514:	e3a02d36 	mov	r2, #3456	; 0xd80
    1518:	e0243492 	mla	r4, r2, r4, r3
    151c:	e5940044 	ldr	r0, [r4, #68]	; 0x44
    1520:	eb001ef0 	bl	90e8 <__aeabi_f2d>
    1524:	e3032d71 	movw	r2, #15729	; 0x3d71
    1528:	e34d270a 	movt	r2, #55050	; 0xd70a
    152c:	e30730a3 	movw	r3, #28835	; 0x70a3
    1530:	e3433fed 	movt	r3, #16365	; 0x3fed
    1534:	eb001f18 	bl	919c <__aeabi_dmul>
    1538:	eb0020a6 	bl	97d8 <__aeabi_d2f>
    allParticles[i].vx *= VELOCITY_DECAY;
    153c:	eb001ee9 	bl	90e8 <__aeabi_f2d>
    1540:	e3032d71 	movw	r2, #15729	; 0x3d71
    1544:	e34d270a 	movt	r2, #55050	; 0xd70a
    1548:	e30730a3 	movw	r3, #28835	; 0x70a3
    154c:	e3433fed 	movt	r3, #16365	; 0x3fed
    1550:	eb001f11 	bl	919c <__aeabi_dmul>
    1554:	eb00209f 	bl	97d8 <__aeabi_d2f>
    1558:	e1a01000 	mov	r1, r0
    155c:	e5840044 	str	r0, [r4, #68]	; 0x44
    allParticles[i].colour = hueToRGB565(WATER_HUE-sqrt(allParticles[i].vx*allParticles[i].vx + allParticles[i].vy*allParticles[i].vy)/VELOCITY_COLOUR_SENSITIVITY);
    1560:	e5945048 	ldr	r5, [r4, #72]	; 0x48
    1564:	eb00216e 	bl	9b24 <__aeabi_fmul>
    1568:	e1a06000 	mov	r6, r0
    156c:	e1a00005 	mov	r0, r5
    1570:	e1a01005 	mov	r1, r5
    1574:	eb00216a 	bl	9b24 <__aeabi_fmul>
    1578:	e1a01000 	mov	r1, r0
    157c:	e1a00006 	mov	r0, r6
    1580:	eb0020bf 	bl	9884 <__addsf3>
    1584:	eb001ed7 	bl	90e8 <__aeabi_f2d>
    1588:	eb001070 	bl	5750 <sqrt>
    158c:	e3a02000 	mov	r2, #0
    1590:	e3a03000 	mov	r3, #0
    1594:	e3443034 	movt	r3, #16436	; 0x4034
    1598:	eb001fa3 	bl	942c <__aeabi_ddiv>
    159c:	e1a02000 	mov	r2, r0
    15a0:	e1a03001 	mov	r3, r1
    15a4:	e30a03d7 	movw	r0, #41943	; 0xa3d7
    15a8:	e3430d70 	movt	r0, #15728	; 0x3d70
    15ac:	e30d170a 	movw	r1, #55050	; 0xd70a
    15b0:	e3431fe3 	movt	r1, #16355	; 0x3fe3
    15b4:	eb001df3 	bl	8d88 <__aeabi_dsub>
    15b8:	eb002086 	bl	97d8 <__aeabi_d2f>
    15bc:	ebfffb26 	bl	25c <hueToRGB565>
    15c0:	e3003da4 	movw	r3, #3492	; 0xda4
    15c4:	e18400b3 	strh	r0, [r4, r3]
    15c8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000015cc <calculateSPHAccelerations>:

}

void calculateSPHAccelerations(int i) {
    15cc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    15d0:	e24dd05c 	sub	sp, sp, #92	; 0x5c
    15d4:	e1a09000 	mov	r9, r0

	allParticles[i].ax = 0;
    15d8:	e30b381c 	movw	r3, #47132	; 0xb81c
    15dc:	e3403000 	movt	r3, #0
    15e0:	e3a04d36 	mov	r4, #3456	; 0xd80
    15e4:	e0243094 	mla	r4, r4, r0, r3
    15e8:	e3a03000 	mov	r3, #0
    15ec:	e584304c 	str	r3, [r4, #76]	; 0x4c
    allParticles[i].ay = G; // Gravitational Acceleration
    15f0:	e3a03101 	mov	r3, #1073741824	; 0x40000000
    15f4:	e5843050 	str	r3, [r4, #80]	; 0x50
    float x_ij, q;

    // if (-EPSILON < allParticles[i].density < EPSILON) {
    //     allParticles[i].density = EPSILON;
    // }
    float pressureRatio_i = allParticles[i].pressure / (allParticles[i].density * allParticles[i].density);
    15f8:	e5941058 	ldr	r1, [r4, #88]	; 0x58
    15fc:	e1a00001 	mov	r0, r1
    1600:	eb002147 	bl	9b24 <__aeabi_fmul>
    1604:	e1a01000 	mov	r1, r0
    1608:	e5940054 	ldr	r0, [r4, #84]	; 0x54
    160c:	eb0021aa 	bl	9cbc <__aeabi_fdiv>
    1610:	e58d003c 	str	r0, [sp, #60]	; 0x3c
    float inv_rho_j, pressureRatio_j;

    for(int nbIdx = 0; nbIdx < 3; nbIdx++){

        int buck = allParticles[i].bucketIndexes[nbIdx];
    1614:	e5943da8 	ldr	r3, [r4, #3496]	; 0xda8
        if (buck<0 || buck>=NUM_BUCKETS) break;
    1618:	e353001f 	cmp	r3, #31
    161c:	8a0000ef 	bhi	19e0 <calculateSPHAccelerations+0x414>
        for (int pos_j = 0; pos_j < numElementsInBucket_even[buck]; pos_j++) {
        
            int j = buckets_even[buck][pos_j];
            if (i==j) continue;

            if (lastSeen[i][j] == timeStep || lastSeen[j][i] == timeStep) continue;
    1620:	e303243c 	movw	r2, #13372	; 0x343c
    1624:	e3402010 	movt	r2, #16
    1628:	e51287ac 	ldr	r8, [r2, #-1964]	; 0xfffff854
            // if(-EPSILON < x_ij < EPSILON) {
            //     x_ij = EPSILON;
            // }
            x_ij2 = x_ij*x_ij;

            GRADW_ijx = alpha * dx * q / (x_ij * h);
    162c:	e30b281c 	movw	r2, #47132	; 0xb81c
    1630:	e3402000 	movt	r2, #0
    1634:	e5920028 	ldr	r0, [r2, #40]	; 0x28
    1638:	e58d0038 	str	r0, [sp, #56]	; 0x38
    163c:	e5921024 	ldr	r1, [r2, #36]	; 0x24
    1640:	e58d1040 	str	r1, [sp, #64]	; 0x40
            // Viscosity Acceleration

            dvx = allParticles[i].vx - allParticles[j].vx;
            dvy = allParticles[i].vy - allParticles[j].vy;

            viscosScale = VISCOSITY * inv_rho_j * (dx*GRADW_ijx + dy*GRADW_ijy) / (x_ij2+nu);
    1644:	e5920030 	ldr	r0, [r2, #48]	; 0x30
    1648:	e58d0044 	str	r0, [sp, #68]	; 0x44
    allParticles[i].vx *= VELOCITY_DECAY;
    allParticles[i].colour = hueToRGB565(WATER_HUE-sqrt(allParticles[i].vx*allParticles[i].vx + allParticles[i].vy*allParticles[i].vy)/VELOCITY_COLOUR_SENSITIVITY);

}

void calculateSPHAccelerations(int i) {
    164c:	e2822034 	add	r2, r2, #52	; 0x34
    1650:	e3a01d36 	mov	r1, #3456	; 0xd80
    1654:	e0010991 	mul	r1, r1, r9
    1658:	e0820001 	add	r0, r2, r1
    165c:	e2800ed7 	add	r0, r0, #3440	; 0xd70
    1660:	e2800004 	add	r0, r0, #4
    1664:	e58d0048 	str	r0, [sp, #72]	; 0x48
    1668:	e2822ed7 	add	r2, r2, #3440	; 0xd70
    166c:	e282200c 	add	r2, r2, #12
    1670:	e0822001 	add	r2, r2, r1
    1674:	e58d2050 	str	r2, [sp, #80]	; 0x50
    for(int nbIdx = 0; nbIdx < 3; nbIdx++){

        int buck = allParticles[i].bucketIndexes[nbIdx];
        if (buck<0 || buck>=NUM_BUCKETS) break;

        for (int pos_j = 0; pos_j < numElementsInBucket_even[buck]; pos_j++) {
    1678:	e303143c 	movw	r1, #13372	; 0x343c
    167c:	e3401010 	movt	r1, #16
    1680:	e58d104c 	str	r1, [sp, #76]	; 0x4c
    allParticles[i].vx *= VELOCITY_DECAY;
    allParticles[i].colour = hueToRGB565(WATER_HUE-sqrt(allParticles[i].vx*allParticles[i].vx + allParticles[i].vy*allParticles[i].vy)/VELOCITY_COLOUR_SENSITIVITY);

}

void calculateSPHAccelerations(int i) {
    1684:	e2412e72 	sub	r2, r1, #1824	; 0x720
    1688:	e2422008 	sub	r2, r2, #8
    168c:	e58d2054 	str	r2, [sp, #84]	; 0x54
        for (int pos_j = 0; pos_j < numElementsInBucket_even[buck]; pos_j++) {
        
            int j = buckets_even[buck][pos_j];
            if (i==j) continue;

            if (lastSeen[i][j] == timeStep || lastSeen[j][i] == timeStep) continue;
    1690:	e303b57c 	movw	r11, #13692	; 0x357c
    1694:	e340b00b 	movt	r11, #11
    1698:	e3a020c8 	mov	r2, #200	; 0xc8
    169c:	e00a0992 	mul	r10, r2, r9
            lastSeen[i][j] = timeStep;
            lastSeen[j][i] = timeStep;

            if (!allParticles[i].neighbours[j]) continue; // Dont check non-neighbours
    16a0:	e30b081c 	movw	r0, #47132	; 0xb81c
    16a4:	e3400000 	movt	r0, #0
    16a8:	e58d0010 	str	r0, [sp, #16]
    16ac:	e58d4004 	str	r4, [sp, #4]
    16b0:	e1a0200a 	mov	r2, r10
    16b4:	e1a0a009 	mov	r10, r9
    16b8:	e1a09002 	mov	r9, r2
    16bc:	ea000004 	b	16d4 <calculateSPHAccelerations+0x108>
    float pressureRatio_i = allParticles[i].pressure / (allParticles[i].density * allParticles[i].density);
    float inv_rho_j, pressureRatio_j;

    for(int nbIdx = 0; nbIdx < 3; nbIdx++){

        int buck = allParticles[i].bucketIndexes[nbIdx];
    16c0:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
    16c4:	e5b23004 	ldr	r3, [r2, #4]!
    16c8:	e58d2048 	str	r2, [sp, #72]	; 0x48
        if (buck<0 || buck>=NUM_BUCKETS) break;
    16cc:	e353001f 	cmp	r3, #31
    16d0:	8a0000c1 	bhi	19dc <calculateSPHAccelerations+0x410>

        for (int pos_j = 0; pos_j < numElementsInBucket_even[buck]; pos_j++) {
    16d4:	e59d004c 	ldr	r0, [sp, #76]	; 0x4c
    16d8:	e0802103 	add	r2, r0, r3, lsl #2
    16dc:	e51227a8 	ldr	r2, [r2, #-1960]	; 0xfffff858
    16e0:	e58d2000 	str	r2, [sp]
    16e4:	e3520000 	cmp	r2, #0
    16e8:	da0000b5 	ble	19c4 <calculateSPHAccelerations+0x3f8>
    allParticles[i].vx *= VELOCITY_DECAY;
    allParticles[i].colour = hueToRGB565(WATER_HUE-sqrt(allParticles[i].vx*allParticles[i].vx + allParticles[i].vy*allParticles[i].vy)/VELOCITY_COLOUR_SENSITIVITY);

}

void calculateSPHAccelerations(int i) {
    16ec:	e3a02e32 	mov	r2, #800	; 0x320
    16f0:	e59d1054 	ldr	r1, [sp, #84]	; 0x54
    16f4:	e0231392 	mla	r3, r2, r3, r1
    16f8:	e2435004 	sub	r5, r3, #4
    16fc:	e3a04000 	mov	r4, #0
        for (int pos_j = 0; pos_j < numElementsInBucket_even[buck]; pos_j++) {
        
            int j = buckets_even[buck][pos_j];
            if (i==j) continue;

            if (lastSeen[i][j] == timeStep || lastSeen[j][i] == timeStep) continue;
    1700:	e3006ed4 	movw	r6, #3796	; 0xed4
            lastSeen[i][j] = timeStep;
            lastSeen[j][i] = timeStep;

            if (!allParticles[i].neighbours[j]) continue; // Dont check non-neighbours
            if (allParticles[i].neighbourDistances[j] == 0) continue; // Everything goes to zero if no distance
    1704:	e3a03e36 	mov	r3, #864	; 0x360
    1708:	e0030a93 	mul	r3, r3, r10
    170c:	e58d3014 	str	r3, [sp, #20]
        int buck = allParticles[i].bucketIndexes[nbIdx];
        if (buck<0 || buck>=NUM_BUCKETS) break;

        for (int pos_j = 0; pos_j < numElementsInBucket_even[buck]; pos_j++) {
        
            int j = buckets_even[buck][pos_j];
    1710:	e5b57004 	ldr	r7, [r5, #4]!
            if (i==j) continue;
    1714:	e15a0007 	cmp	r10, r7
    1718:	0a0000a5 	beq	19b4 <calculateSPHAccelerations+0x3e8>

            if (lastSeen[i][j] == timeStep || lastSeen[j][i] == timeStep) continue;
    171c:	e0893007 	add	r3, r9, r7
    1720:	e08b3103 	add	r3, r11, r3, lsl #2
    1724:	e7933006 	ldr	r3, [r3, r6]
    1728:	e1530008 	cmp	r3, r8
    172c:	0a0000a0 	beq	19b4 <calculateSPHAccelerations+0x3e8>
    1730:	e3a020c8 	mov	r2, #200	; 0xc8
    1734:	e023a792 	mla	r3, r2, r7, r10
    1738:	e08b3103 	add	r3, r11, r3, lsl #2
    173c:	e7933006 	ldr	r3, [r3, r6]
    1740:	e1580003 	cmp	r8, r3
    1744:	0a00009a 	beq	19b4 <calculateSPHAccelerations+0x3e8>
            lastSeen[i][j] = timeStep;
    1748:	e0893007 	add	r3, r9, r7
    174c:	e08b3103 	add	r3, r11, r3, lsl #2
    1750:	e7838006 	str	r8, [r3, r6]
            lastSeen[j][i] = timeStep;
    1754:	e023a792 	mla	r3, r2, r7, r10
    1758:	e08b3103 	add	r3, r11, r3, lsl #2
    175c:	e7838006 	str	r8, [r3, r6]

            if (!allParticles[i].neighbours[j]) continue; // Dont check non-neighbours
    1760:	e59d0004 	ldr	r0, [sp, #4]
    1764:	e0803007 	add	r3, r0, r7
    1768:	e5d3305c 	ldrb	r3, [r3, #92]	; 0x5c
    176c:	e3530000 	cmp	r3, #0
    1770:	0a00008f 	beq	19b4 <calculateSPHAccelerations+0x3e8>
            if (allParticles[i].neighbourDistances[j] == 0) continue; // Everything goes to zero if no distance
    1774:	e59d1014 	ldr	r1, [sp, #20]
    1778:	e0813007 	add	r3, r1, r7
    177c:	e59d2010 	ldr	r2, [sp, #16]
    1780:	e0823103 	add	r3, r2, r3, lsl #2
    1784:	e5933a84 	ldr	r3, [r3, #2692]	; 0xa84
    1788:	e58d3008 	str	r3, [sp, #8]
    178c:	e1a00003 	mov	r0, r3
    1790:	e3a01000 	mov	r1, #0
    1794:	eb0021c7 	bl	9eb8 <__aeabi_fcmpeq>
    1798:	e3500000 	cmp	r0, #0
    179c:	1a000084 	bne	19b4 <calculateSPHAccelerations+0x3e8>

            q = allParticles[i].gradQ[j];
    17a0:	e59d0014 	ldr	r0, [sp, #20]
    17a4:	e0803007 	add	r3, r0, r7
    17a8:	e59d1010 	ldr	r1, [sp, #16]
    17ac:	e0813103 	add	r3, r1, r3, lsl #2
    17b0:	e5933124 	ldr	r3, [r3, #292]	; 0x124
    17b4:	e58d300c 	str	r3, [sp, #12]
            if(!q) continue;
    17b8:	e1a00003 	mov	r0, r3
    17bc:	e3a01000 	mov	r1, #0
    17c0:	eb0021bc 	bl	9eb8 <__aeabi_fcmpeq>
    17c4:	e3500000 	cmp	r0, #0
    17c8:	1a000079 	bne	19b4 <calculateSPHAccelerations+0x3e8>

            dx = allParticles[i].neighbourDXs[j];
    17cc:	e59d2014 	ldr	r2, [sp, #20]
    17d0:	e0823007 	add	r3, r2, r7
    17d4:	e59d0010 	ldr	r0, [sp, #16]
    17d8:	e0802103 	add	r2, r0, r3, lsl #2
    17dc:	e5922444 	ldr	r2, [r2, #1092]	; 0x444
    17e0:	e58d2018 	str	r2, [sp, #24]
            dy = allParticles[i].neighbourDYs[j];
    17e4:	e0803103 	add	r3, r0, r3, lsl #2
    17e8:	e5933764 	ldr	r3, [r3, #1892]	; 0x764
    17ec:	e58d3028 	str	r3, [sp, #40]	; 0x28
            // if(-EPSILON < x_ij < EPSILON) {
            //     x_ij = EPSILON;
            // }
            x_ij2 = x_ij*x_ij;

            GRADW_ijx = alpha * dx * q / (x_ij * h);
    17f0:	e59d0008 	ldr	r0, [sp, #8]
    17f4:	e59d1040 	ldr	r1, [sp, #64]	; 0x40
    17f8:	eb0020c9 	bl	9b24 <__aeabi_fmul>
    17fc:	e58d0020 	str	r0, [sp, #32]
    1800:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
    1804:	e59d1018 	ldr	r1, [sp, #24]
    1808:	eb0020c5 	bl	9b24 <__aeabi_fmul>
    180c:	e59d100c 	ldr	r1, [sp, #12]
    1810:	eb0020c3 	bl	9b24 <__aeabi_fmul>
    1814:	e59d1020 	ldr	r1, [sp, #32]
    1818:	eb002127 	bl	9cbc <__aeabi_fdiv>
    181c:	e58d002c 	str	r0, [sp, #44]	; 0x2c
            GRADW_ijy = alpha * dy * q / (x_ij * h);
    1820:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
    1824:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
    1828:	eb0020bd 	bl	9b24 <__aeabi_fmul>
    182c:	e59d100c 	ldr	r1, [sp, #12]
    1830:	eb0020bb 	bl	9b24 <__aeabi_fmul>
    1834:	e59d1020 	ldr	r1, [sp, #32]
    1838:	eb00211f 	bl	9cbc <__aeabi_fdiv>
    183c:	e58d0020 	str	r0, [sp, #32]

            // Pressure Acceleration

            // if (-EPSILON < allParticles[j].density < EPSILON) continue;
            inv_rho_j = 1/allParticles[j].density;
    1840:	e3a01d36 	mov	r1, #3456	; 0xd80
    1844:	e59d2010 	ldr	r2, [sp, #16]
    1848:	e0272791 	mla	r7, r1, r7, r2
    184c:	e58d700c 	str	r7, [sp, #12]
    1850:	e3a005fe 	mov	r0, #1065353216	; 0x3f800000
    1854:	e5971058 	ldr	r1, [r7, #88]	; 0x58
    1858:	eb002117 	bl	9cbc <__aeabi_fdiv>
    185c:	e1a07000 	mov	r7, r0
            pressureRatio_j = allParticles[j].pressure * inv_rho_j * inv_rho_j;
    1860:	e59d300c 	ldr	r3, [sp, #12]
    1864:	e5931054 	ldr	r1, [r3, #84]	; 0x54
    1868:	eb0020ad 	bl	9b24 <__aeabi_fmul>
    186c:	e1a01007 	mov	r1, r7
    1870:	eb0020ab 	bl	9b24 <__aeabi_fmul>
    1874:	e1a01000 	mov	r1, r0
            allParticles[i].ax -= (pressureRatio_i + pressureRatio_j) * GRADW_ijx;
    1878:	e59d003c 	ldr	r0, [sp, #60]	; 0x3c
    187c:	eb002000 	bl	9884 <__addsf3>
    1880:	e58d0024 	str	r0, [sp, #36]	; 0x24
    1884:	e59d102c 	ldr	r1, [sp, #44]	; 0x2c
    1888:	eb0020a5 	bl	9b24 <__aeabi_fmul>
    188c:	e1a01000 	mov	r1, r0
    1890:	e59d2004 	ldr	r2, [sp, #4]
    1894:	e592004c 	ldr	r0, [r2, #76]	; 0x4c
    1898:	eb001ff8 	bl	9880 <__aeabi_fsub>
    189c:	e59d3004 	ldr	r3, [sp, #4]
    18a0:	e583004c 	str	r0, [r3, #76]	; 0x4c
            allParticles[i].ay -= (pressureRatio_i + pressureRatio_j) * GRADW_ijy;
    18a4:	e59d0020 	ldr	r0, [sp, #32]
    18a8:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
    18ac:	eb00209c 	bl	9b24 <__aeabi_fmul>
    18b0:	e1a01000 	mov	r1, r0
    18b4:	e59d2004 	ldr	r2, [sp, #4]
    18b8:	e5920050 	ldr	r0, [r2, #80]	; 0x50
    18bc:	eb001fef 	bl	9880 <__aeabi_fsub>
    18c0:	e59d3004 	ldr	r3, [sp, #4]
    18c4:	e5830050 	str	r0, [r3, #80]	; 0x50

            // Viscosity Acceleration

            dvx = allParticles[i].vx - allParticles[j].vx;
            dvy = allParticles[i].vy - allParticles[j].vy;
    18c8:	e5930048 	ldr	r0, [r3, #72]	; 0x48
    18cc:	e59d200c 	ldr	r2, [sp, #12]
    18d0:	e5921048 	ldr	r1, [r2, #72]	; 0x48
    18d4:	eb001fe9 	bl	9880 <__aeabi_fsub>
    18d8:	e58d0024 	str	r0, [sp, #36]	; 0x24

            viscosScale = VISCOSITY * inv_rho_j * (dx*GRADW_ijx + dy*GRADW_ijy) / (x_ij2+nu);
    18dc:	e1a00007 	mov	r0, r7
    18e0:	eb001e00 	bl	90e8 <__aeabi_f2d>
    18e4:	e1cd03f0 	strd	r0, [sp, #48]	; 0x30
    18e8:	e59d0018 	ldr	r0, [sp, #24]
    18ec:	e59d102c 	ldr	r1, [sp, #44]	; 0x2c
    18f0:	eb00208b 	bl	9b24 <__aeabi_fmul>
    18f4:	e1a07000 	mov	r7, r0
    18f8:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
    18fc:	e59d1020 	ldr	r1, [sp, #32]
    1900:	eb002087 	bl	9b24 <__aeabi_fmul>
    1904:	e1a01000 	mov	r1, r0
    1908:	e1a00007 	mov	r0, r7
    190c:	eb001fdc 	bl	9884 <__addsf3>
    1910:	eb001df4 	bl	90e8 <__aeabi_f2d>
    1914:	e1a02000 	mov	r2, r0
    1918:	e1a03001 	mov	r3, r1
    191c:	e1cd03d0 	ldrd	r0, [sp, #48]	; 0x30
    1920:	eb001e1d 	bl	919c <__aeabi_dmul>
    1924:	e1cd01f8 	strd	r0, [sp, #24]

            x_ij = allParticles[i].neighbourDistances[j];
            // if(-EPSILON < x_ij < EPSILON) {
            //     x_ij = EPSILON;
            // }
            x_ij2 = x_ij*x_ij;
    1928:	e59d0008 	ldr	r0, [sp, #8]
    192c:	e1a01000 	mov	r1, r0
    1930:	eb00207b 	bl	9b24 <__aeabi_fmul>
            // Viscosity Acceleration

            dvx = allParticles[i].vx - allParticles[j].vx;
            dvy = allParticles[i].vy - allParticles[j].vy;

            viscosScale = VISCOSITY * inv_rho_j * (dx*GRADW_ijx + dy*GRADW_ijy) / (x_ij2+nu);
    1934:	e59d1044 	ldr	r1, [sp, #68]	; 0x44
    1938:	eb001fd1 	bl	9884 <__addsf3>
    193c:	eb001de9 	bl	90e8 <__aeabi_f2d>
    1940:	e1a02000 	mov	r2, r0
    1944:	e1a03001 	mov	r3, r1
    1948:	e1cd01d8 	ldrd	r0, [sp, #24]
    194c:	eb001eb6 	bl	942c <__aeabi_ddiv>
    1950:	eb001fa0 	bl	97d8 <__aeabi_d2f>
    1954:	e1a07000 	mov	r7, r0
            allParticles[i].ax -= (pressureRatio_i + pressureRatio_j) * GRADW_ijx;
            allParticles[i].ay -= (pressureRatio_i + pressureRatio_j) * GRADW_ijy;

            // Viscosity Acceleration

            dvx = allParticles[i].vx - allParticles[j].vx;
    1958:	e59d3004 	ldr	r3, [sp, #4]
    195c:	e5930044 	ldr	r0, [r3, #68]	; 0x44
    1960:	e59d200c 	ldr	r2, [sp, #12]
    1964:	e5921044 	ldr	r1, [r2, #68]	; 0x44
    1968:	eb001fc4 	bl	9880 <__aeabi_fsub>
    196c:	e1a01000 	mov	r1, r0
            dvy = allParticles[i].vy - allParticles[j].vy;

            viscosScale = VISCOSITY * inv_rho_j * (dx*GRADW_ijx + dy*GRADW_ijy) / (x_ij2+nu);
            allParticles[i].ax += viscosScale * dvx;
    1970:	e1a00007 	mov	r0, r7
    1974:	eb00206a 	bl	9b24 <__aeabi_fmul>
    1978:	e1a01000 	mov	r1, r0
    197c:	e59d3004 	ldr	r3, [sp, #4]
    1980:	e593004c 	ldr	r0, [r3, #76]	; 0x4c
    1984:	eb001fbe 	bl	9884 <__addsf3>
    1988:	e59d1004 	ldr	r1, [sp, #4]
    198c:	e581004c 	str	r0, [r1, #76]	; 0x4c
            allParticles[i].ay += viscosScale * dvy;
    1990:	e1a00007 	mov	r0, r7
    1994:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
    1998:	eb002061 	bl	9b24 <__aeabi_fmul>
    199c:	e1a01000 	mov	r1, r0
    19a0:	e59d2004 	ldr	r2, [sp, #4]
    19a4:	e5920050 	ldr	r0, [r2, #80]	; 0x50
    19a8:	eb001fb5 	bl	9884 <__addsf3>
    19ac:	e59d3004 	ldr	r3, [sp, #4]
    19b0:	e5830050 	str	r0, [r3, #80]	; 0x50
    for(int nbIdx = 0; nbIdx < 3; nbIdx++){

        int buck = allParticles[i].bucketIndexes[nbIdx];
        if (buck<0 || buck>=NUM_BUCKETS) break;

        for (int pos_j = 0; pos_j < numElementsInBucket_even[buck]; pos_j++) {
    19b4:	e2844001 	add	r4, r4, #1
    19b8:	e59d0000 	ldr	r0, [sp]
    19bc:	e1540000 	cmp	r4, r0
    19c0:	baffff52 	blt	1710 <calculateSPHAccelerations+0x144>
    //     allParticles[i].density = EPSILON;
    // }
    float pressureRatio_i = allParticles[i].pressure / (allParticles[i].density * allParticles[i].density);
    float inv_rho_j, pressureRatio_j;

    for(int nbIdx = 0; nbIdx < 3; nbIdx++){
    19c4:	e59d1048 	ldr	r1, [sp, #72]	; 0x48
    19c8:	e59d2050 	ldr	r2, [sp, #80]	; 0x50
    19cc:	e1510002 	cmp	r1, r2
    19d0:	1affff3a 	bne	16c0 <calculateSPHAccelerations+0xf4>
    19d4:	e1a0900a 	mov	r9, r10
    19d8:	ea000000 	b	19e0 <calculateSPHAccelerations+0x414>
    19dc:	e1a0900a 	mov	r9, r10

        }
    }

    // Check for nan
    if(isnan(allParticles[i].ax) || isnan(allParticles[i].ay)) {
    19e0:	e30b381c 	movw	r3, #47132	; 0xb81c
    19e4:	e3403000 	movt	r3, #0
    19e8:	e3a02d36 	mov	r2, #3456	; 0xd80
    19ec:	e0233992 	mla	r3, r2, r9, r3
    19f0:	e593004c 	ldr	r0, [r3, #76]	; 0x4c
    19f4:	eb000dfb 	bl	51e8 <__fpclassifyf>
    19f8:	e3500000 	cmp	r0, #0
    19fc:	0a000007 	beq	1a20 <calculateSPHAccelerations+0x454>
    1a00:	e30b381c 	movw	r3, #47132	; 0xb81c
    1a04:	e3403000 	movt	r3, #0
    1a08:	e3a02d36 	mov	r2, #3456	; 0xd80
    1a0c:	e0233992 	mla	r3, r2, r9, r3
    1a10:	e5930050 	ldr	r0, [r3, #80]	; 0x50
    1a14:	eb000df3 	bl	51e8 <__fpclassifyf>
    1a18:	e3500000 	cmp	r0, #0
    1a1c:	1a000007 	bne	1a40 <calculateSPHAccelerations+0x474>
        allParticles[i].ax = 0;
    1a20:	e30b381c 	movw	r3, #47132	; 0xb81c
    1a24:	e3403000 	movt	r3, #0
    1a28:	e3a02d36 	mov	r2, #3456	; 0xd80
    1a2c:	e0233992 	mla	r3, r2, r9, r3
    1a30:	e3a02000 	mov	r2, #0
    1a34:	e583204c 	str	r2, [r3, #76]	; 0x4c
        allParticles[i].ay = G;
    1a38:	e3a02101 	mov	r2, #1073741824	; 0x40000000
    1a3c:	e5832050 	str	r2, [r3, #80]	; 0x50
    }
    // Mouse Acceleration
    if(!mData.left) return;
    1a40:	e30b381c 	movw	r3, #47132	; 0xb81c
    1a44:	e3403000 	movt	r3, #0
    1a48:	e5d33014 	ldrb	r3, [r3, #20]
    1a4c:	e3530000 	cmp	r3, #0
    1a50:	0a000058 	beq	1bb8 <calculateSPHAccelerations+0x5ec>
    // printf("HERE");
    dx = (float)allParticles[i].x - (float)mData.x;
    1a54:	e30b481c 	movw	r4, #47132	; 0xb81c
    1a58:	e3404000 	movt	r4, #0
    1a5c:	e3a05d36 	mov	r5, #3456	; 0xd80
    1a60:	e0254995 	mla	r5, r5, r9, r4
    1a64:	e5950034 	ldr	r0, [r5, #52]	; 0x34
    1a68:	eb001ff6 	bl	9a48 <__aeabi_i2f>
    1a6c:	e1a06000 	mov	r6, r0
    1a70:	e5940004 	ldr	r0, [r4, #4]
    1a74:	eb001ff3 	bl	9a48 <__aeabi_i2f>
    1a78:	e1a01000 	mov	r1, r0
    1a7c:	e1a00006 	mov	r0, r6
    1a80:	eb001f7e 	bl	9880 <__aeabi_fsub>
    1a84:	e1a0b000 	mov	r11, r0
    dy = (float)allParticles[i].y - (float)mData.y;
    1a88:	e5950038 	ldr	r0, [r5, #56]	; 0x38
    1a8c:	eb001fed 	bl	9a48 <__aeabi_i2f>
    1a90:	e1a05000 	mov	r5, r0
    1a94:	e5940008 	ldr	r0, [r4, #8]
    1a98:	eb001fea 	bl	9a48 <__aeabi_i2f>
    1a9c:	e1a01000 	mov	r1, r0
    1aa0:	e1a00005 	mov	r0, r5
    1aa4:	eb001f75 	bl	9880 <__aeabi_fsub>
    1aa8:	e1a08000 	mov	r8, r0
    float mag = sqrt(dx*dx+dy*dy);
    1aac:	e1a0000b 	mov	r0, r11
    1ab0:	e1a0100b 	mov	r1, r11
    1ab4:	eb00201a 	bl	9b24 <__aeabi_fmul>
    1ab8:	e1a04000 	mov	r4, r0
    1abc:	e1a00008 	mov	r0, r8
    1ac0:	e1a01008 	mov	r1, r8
    1ac4:	eb002016 	bl	9b24 <__aeabi_fmul>
    1ac8:	e1a01000 	mov	r1, r0
    1acc:	e1a00004 	mov	r0, r4
    1ad0:	eb001f6b 	bl	9884 <__addsf3>
    1ad4:	eb001d83 	bl	90e8 <__aeabi_f2d>
    1ad8:	eb000f1c 	bl	5750 <sqrt>
    1adc:	eb001f3d 	bl	97d8 <__aeabi_d2f>
    1ae0:	e1a04000 	mov	r4, r0
    if (mag < MOUSE_ROE) {
    1ae4:	e3a01000 	mov	r1, #0
    1ae8:	e34411f0 	movt	r1, #16880	; 0x41f0
    1aec:	eb0020f7 	bl	9ed0 <__aeabi_fcmplt>
    1af0:	e3500000 	cmp	r0, #0
    1af4:	0a00002f 	beq	1bb8 <calculateSPHAccelerations+0x5ec>
        allParticles[i].ax += MOUSE_A_MAG * dx/(mag);
    1af8:	e1a00004 	mov	r0, r4
    1afc:	eb001d79 	bl	90e8 <__aeabi_f2d>
    1b00:	e1a04000 	mov	r4, r0
    1b04:	e1a05001 	mov	r5, r1
    1b08:	e30b381c 	movw	r3, #47132	; 0xb81c
    1b0c:	e3403000 	movt	r3, #0
    1b10:	e3a0ad36 	mov	r10, #3456	; 0xd80
    1b14:	e02a399a 	mla	r10, r10, r9, r3
    1b18:	e59a004c 	ldr	r0, [r10, #76]	; 0x4c
    1b1c:	eb001d71 	bl	90e8 <__aeabi_f2d>
    1b20:	e1a06000 	mov	r6, r0
    1b24:	e1a07001 	mov	r7, r1
    1b28:	e1a0000b 	mov	r0, r11
    1b2c:	eb001d6d 	bl	90e8 <__aeabi_f2d>
    1b30:	e3a02000 	mov	r2, #0
    1b34:	e3a03903 	mov	r3, #49152	; 0xc000
    1b38:	e3443062 	movt	r3, #16482	; 0x4062
    1b3c:	eb001d96 	bl	919c <__aeabi_dmul>
    1b40:	e1a02004 	mov	r2, r4
    1b44:	e1a03005 	mov	r3, r5
    1b48:	eb001e37 	bl	942c <__aeabi_ddiv>
    1b4c:	e1a02000 	mov	r2, r0
    1b50:	e1a03001 	mov	r3, r1
    1b54:	e1a00006 	mov	r0, r6
    1b58:	e1a01007 	mov	r1, r7
    1b5c:	eb001c8a 	bl	8d8c <__adddf3>
    1b60:	eb001f1c 	bl	97d8 <__aeabi_d2f>
    1b64:	e58a004c 	str	r0, [r10, #76]	; 0x4c
        allParticles[i].ay += MOUSE_A_MAG * dy/(mag);
    1b68:	e59a0050 	ldr	r0, [r10, #80]	; 0x50
    1b6c:	eb001d5d 	bl	90e8 <__aeabi_f2d>
    1b70:	e1a06000 	mov	r6, r0
    1b74:	e1a07001 	mov	r7, r1
    1b78:	e1a00008 	mov	r0, r8
    1b7c:	eb001d59 	bl	90e8 <__aeabi_f2d>
    1b80:	e3a02000 	mov	r2, #0
    1b84:	e3a03903 	mov	r3, #49152	; 0xc000
    1b88:	e3443062 	movt	r3, #16482	; 0x4062
    1b8c:	eb001d82 	bl	919c <__aeabi_dmul>
    1b90:	e1a02004 	mov	r2, r4
    1b94:	e1a03005 	mov	r3, r5
    1b98:	eb001e23 	bl	942c <__aeabi_ddiv>
    1b9c:	e1a02000 	mov	r2, r0
    1ba0:	e1a03001 	mov	r3, r1
    1ba4:	e1a00006 	mov	r0, r6
    1ba8:	e1a01007 	mov	r1, r7
    1bac:	eb001c76 	bl	8d8c <__adddf3>
    1bb0:	eb001f08 	bl	97d8 <__aeabi_d2f>
    1bb4:	e58a0050 	str	r0, [r10, #80]	; 0x50
    }

} 
    1bb8:	e28dd05c 	add	sp, sp, #92	; 0x5c
    1bbc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00001bc0 <timeStepSPHApproximation>:

void timeStepSPHApproximation(int i, int j) {
    1bc0:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1bc4:	e1a06000 	mov	r6, r0
    1bc8:	e1a07001 	mov	r7, r1
    
    if (i==j) return;
    1bcc:	e1500001 	cmp	r0, r1
    1bd0:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}

    float dx, dy;
    float x_ij, q, rho;
    float fp, sp, gradQ;

    dx = allParticles[i].pX - allParticles[j].pX;
    1bd4:	e30b481c 	movw	r4, #47132	; 0xb81c
    1bd8:	e3404000 	movt	r4, #0
    1bdc:	e3a05d36 	mov	r5, #3456	; 0xd80
    1be0:	e0284095 	mla	r8, r5, r0, r4
    1be4:	e0254195 	mla	r5, r5, r1, r4
    1be8:	e598003c 	ldr	r0, [r8, #60]	; 0x3c
    1bec:	e595103c 	ldr	r1, [r5, #60]	; 0x3c
    1bf0:	eb001f22 	bl	9880 <__aeabi_fsub>
    1bf4:	e1a0a000 	mov	r10, r0
    dy = allParticles[i].pY - allParticles[j].pY;
    1bf8:	e5980040 	ldr	r0, [r8, #64]	; 0x40
    1bfc:	e5951040 	ldr	r1, [r5, #64]	; 0x40
    1c00:	eb001f1e 	bl	9880 <__aeabi_fsub>
    1c04:	e1a08000 	mov	r8, r0
    x_ij = sqrt(dx*dx+dy*dy);
    1c08:	e1a0000a 	mov	r0, r10
    1c0c:	e1a0100a 	mov	r1, r10
    1c10:	eb001fc3 	bl	9b24 <__aeabi_fmul>
    1c14:	e1a05000 	mov	r5, r0
    1c18:	e1a00008 	mov	r0, r8
    1c1c:	e1a01008 	mov	r1, r8
    1c20:	eb001fbf 	bl	9b24 <__aeabi_fmul>
    1c24:	e1a01000 	mov	r1, r0
    1c28:	e1a00005 	mov	r0, r5
    1c2c:	eb001f14 	bl	9884 <__addsf3>
    1c30:	eb001d2c 	bl	90e8 <__aeabi_f2d>
    1c34:	eb000ec5 	bl	5750 <sqrt>
    1c38:	eb001ee6 	bl	97d8 <__aeabi_d2f>
    1c3c:	e1a0b000 	mov	r11, r0
    
    if (x_ij<ROOT_TWO_SCALE*h) {
    1c40:	e5949024 	ldr	r9, [r4, #36]	; 0x24
    1c44:	eb001d27 	bl	90e8 <__aeabi_f2d>
    1c48:	e1a04000 	mov	r4, r0
    1c4c:	e1a05001 	mov	r5, r1
    1c50:	e1a00009 	mov	r0, r9
    1c54:	eb001d23 	bl	90e8 <__aeabi_f2d>
    1c58:	e30b2439 	movw	r2, #46137	; 0xb439
    1c5c:	e34726c8 	movt	r2, #30408	; 0x76c8
    1c60:	e3093fbe 	movw	r3, #40894	; 0x9fbe
    1c64:	e3433ff6 	movt	r3, #16374	; 0x3ff6
    1c68:	eb001d4b 	bl	919c <__aeabi_dmul>
    1c6c:	e1a02000 	mov	r2, r0
    1c70:	e1a03001 	mov	r3, r1
    1c74:	e1a00004 	mov	r0, r4
    1c78:	e1a01005 	mov	r1, r5
    1c7c:	eb001ea6 	bl	971c <__aeabi_dcmplt>
    1c80:	e3500000 	cmp	r0, #0
    1c84:	0a000092 	beq	1ed4 <timeStepSPHApproximation+0x314>

        allParticles[i].neighbourDXs[j] = dx;
    1c88:	e30b381c 	movw	r3, #47132	; 0xb81c
    1c8c:	e3403000 	movt	r3, #0
    1c90:	e3a02e36 	mov	r2, #864	; 0x360
    1c94:	e0217692 	mla	r1, r2, r6, r7
    1c98:	e0830101 	add	r0, r3, r1, lsl #2
    1c9c:	e580a444 	str	r10, [r0, #1092]	; 0x444
        allParticles[i].neighbourDYs[j] = dy;
    1ca0:	e5808764 	str	r8, [r0, #1892]	; 0x764
        allParticles[i].neighbourDistances[j] = x_ij;
    1ca4:	e580ba84 	str	r11, [r0, #2692]	; 0xa84

        allParticles[j].neighbourDXs[i] = -dx;
    1ca8:	e0226792 	mla	r2, r2, r7, r6
    1cac:	e0831102 	add	r1, r3, r2, lsl #2
    1cb0:	e28aa102 	add	r10, r10, #-2147483648	; 0x80000000
    1cb4:	e581a444 	str	r10, [r1, #1092]	; 0x444
        allParticles[j].neighbourDYs[i] = -dy;
    1cb8:	e2888102 	add	r8, r8, #-2147483648	; 0x80000000
    1cbc:	e5818764 	str	r8, [r1, #1892]	; 0x764
        allParticles[j].neighbourDistances[i] = x_ij;
    1cc0:	e581ba84 	str	r11, [r1, #2692]	; 0xa84

        allParticles[i].neighbours[j] = true;
    1cc4:	e3a01d36 	mov	r1, #3456	; 0xd80
    1cc8:	e0203691 	mla	r0, r1, r6, r3
    1ccc:	e0800007 	add	r0, r0, r7
    1cd0:	e3a02001 	mov	r2, #1
    1cd4:	e5c0205c 	strb	r2, [r0, #92]	; 0x5c
        allParticles[j].neighbours[i] = true;
    1cd8:	e0233791 	mla	r3, r1, r7, r3
    1cdc:	e0833006 	add	r3, r3, r6
    1ce0:	e5c3205c 	strb	r2, [r3, #92]	; 0x5c

        q = x_ij/h;
    1ce4:	e1a0000b 	mov	r0, r11
    1ce8:	e1a01009 	mov	r1, r9
    1cec:	eb001ff2 	bl	9cbc <__aeabi_fdiv>
    1cf0:	e1a04000 	mov	r4, r0

        if(q < 1){
    1cf4:	e3a015fe 	mov	r1, #1065353216	; 0x3f800000
    1cf8:	eb002074 	bl	9ed0 <__aeabi_fcmplt>
    1cfc:	e3500000 	cmp	r0, #0
    1d00:	0a000038 	beq	1de8 <timeStepSPHApproximation+0x228>
            fp = pow((2-q), 2);
    1d04:	e3a00101 	mov	r0, #1073741824	; 0x40000000
    1d08:	e1a01004 	mov	r1, r4
    1d0c:	eb001edb 	bl	9880 <__aeabi_fsub>
    1d10:	e1a08000 	mov	r8, r0
    1d14:	eb001cf3 	bl	90e8 <__aeabi_f2d>
    1d18:	e1a02000 	mov	r2, r0
    1d1c:	e1a03001 	mov	r3, r1
    1d20:	eb001d1d 	bl	919c <__aeabi_dmul>
    1d24:	eb001eab 	bl	97d8 <__aeabi_d2f>
    1d28:	e1a05000 	mov	r5, r0
            sp = pow((1-q), 2);
    1d2c:	e3a005fe 	mov	r0, #1065353216	; 0x3f800000
    1d30:	e1a01004 	mov	r1, r4
    1d34:	eb001ed1 	bl	9880 <__aeabi_fsub>
    1d38:	e1a0a000 	mov	r10, r0
    1d3c:	eb001ce9 	bl	90e8 <__aeabi_f2d>
    1d40:	e1a02000 	mov	r2, r0
    1d44:	e1a03001 	mov	r3, r1
    1d48:	eb001d13 	bl	919c <__aeabi_dmul>
    1d4c:	eb001ea1 	bl	97d8 <__aeabi_d2f>
    1d50:	e1a04000 	mov	r4, r0

            gradQ = -3 * fp + 12 * sp;
    1d54:	e1a00005 	mov	r0, r5
    1d58:	e3a01000 	mov	r1, #0
    1d5c:	e34c1040 	movt	r1, #49216	; 0xc040
    1d60:	eb001f6f 	bl	9b24 <__aeabi_fmul>
    1d64:	e1a09000 	mov	r9, r0
    1d68:	e1a00004 	mov	r0, r4
    1d6c:	e3a01000 	mov	r1, #0
    1d70:	e3441140 	movt	r1, #16704	; 0x4140
    1d74:	eb001f6a 	bl	9b24 <__aeabi_fmul>
    1d78:	e1a01000 	mov	r1, r0
    1d7c:	e1a00009 	mov	r0, r9
    1d80:	eb001ebf 	bl	9884 <__addsf3>
    1d84:	e1a02000 	mov	r2, r0
            allParticles[i].gradQ[j] = gradQ;
    1d88:	e30b381c 	movw	r3, #47132	; 0xb81c
    1d8c:	e3403000 	movt	r3, #0
    1d90:	e3a01e36 	mov	r1, #864	; 0x360
    1d94:	e0207691 	mla	r0, r1, r6, r7
    1d98:	e0830100 	add	r0, r3, r0, lsl #2
    1d9c:	e5802124 	str	r2, [r0, #292]	; 0x124
            allParticles[j].gradQ[i] = gradQ;
    1da0:	e0216791 	mla	r1, r1, r7, r6
    1da4:	e0833101 	add	r3, r3, r1, lsl #2
    1da8:	e5832124 	str	r2, [r3, #292]	; 0x124

            q = fp*(2-q) - 4 * sp*(1-q);
    1dac:	e1a00008 	mov	r0, r8
    1db0:	e1a01005 	mov	r1, r5
    1db4:	eb001f5a 	bl	9b24 <__aeabi_fmul>
    1db8:	e1a05000 	mov	r5, r0
    1dbc:	e1a00004 	mov	r0, r4
    1dc0:	e3a01000 	mov	r1, #0
    1dc4:	e3441080 	movt	r1, #16512	; 0x4080
    1dc8:	eb001f55 	bl	9b24 <__aeabi_fmul>
    1dcc:	e1a01000 	mov	r1, r0
    1dd0:	e1a0000a 	mov	r0, r10
    1dd4:	eb001f52 	bl	9b24 <__aeabi_fmul>
    1dd8:	e1a01000 	mov	r1, r0
    1ddc:	e1a00005 	mov	r0, r5
    1de0:	eb001ea6 	bl	9880 <__aeabi_fsub>
    1de4:	ea000029 	b	1e90 <timeStepSPHApproximation+0x2d0>
        } else if (q < 2) {
    1de8:	e1a00004 	mov	r0, r4
    1dec:	e3a01101 	mov	r1, #1073741824	; 0x40000000
    1df0:	eb002036 	bl	9ed0 <__aeabi_fcmplt>
    1df4:	e3500000 	cmp	r0, #0
    1df8:	0a000019 	beq	1e64 <timeStepSPHApproximation+0x2a4>
            fp = pow((2-q), 2);
    1dfc:	e3a00101 	mov	r0, #1073741824	; 0x40000000
    1e00:	e1a01004 	mov	r1, r4
    1e04:	eb001e9d 	bl	9880 <__aeabi_fsub>
    1e08:	e1a05000 	mov	r5, r0
    1e0c:	eb001cb5 	bl	90e8 <__aeabi_f2d>
    1e10:	e1a02000 	mov	r2, r0
    1e14:	e1a03001 	mov	r3, r1
    1e18:	eb001cdf 	bl	919c <__aeabi_dmul>
    1e1c:	eb001e6d 	bl	97d8 <__aeabi_d2f>
    1e20:	e1a04000 	mov	r4, r0

            gradQ = -3 * fp;
    1e24:	e3a01000 	mov	r1, #0
    1e28:	e34c1040 	movt	r1, #49216	; 0xc040
    1e2c:	eb001f3c 	bl	9b24 <__aeabi_fmul>
            allParticles[i].gradQ[j] = gradQ;
    1e30:	e30b381c 	movw	r3, #47132	; 0xb81c
    1e34:	e3403000 	movt	r3, #0
    1e38:	e3a0ce36 	mov	r12, #864	; 0x360
    1e3c:	e021769c 	mla	r1, r12, r6, r7
    1e40:	e0831101 	add	r1, r3, r1, lsl #2
    1e44:	e5810124 	str	r0, [r1, #292]	; 0x124
            allParticles[j].gradQ[i] = gradQ;
    1e48:	e02c679c 	mla	r12, r12, r7, r6
    1e4c:	e083310c 	add	r3, r3, r12, lsl #2
    1e50:	e5830124 	str	r0, [r3, #292]	; 0x124

            q = fp*(2-q);
    1e54:	e1a00005 	mov	r0, r5
    1e58:	e1a01004 	mov	r1, r4
    1e5c:	eb001f30 	bl	9b24 <__aeabi_fmul>
    1e60:	ea00000a 	b	1e90 <timeStepSPHApproximation+0x2d0>
        } else {
            allParticles[i].gradQ[j] = 0;
    1e64:	e30b381c 	movw	r3, #47132	; 0xb81c
    1e68:	e3403000 	movt	r3, #0
    1e6c:	e3a01e36 	mov	r1, #864	; 0x360
    1e70:	e0207691 	mla	r0, r1, r6, r7
    1e74:	e0830100 	add	r0, r3, r0, lsl #2
    1e78:	e3a02000 	mov	r2, #0
    1e7c:	e5802124 	str	r2, [r0, #292]	; 0x124
            allParticles[j].gradQ[i] = 0;
    1e80:	e0266791 	mla	r6, r1, r7, r6
    1e84:	e0833106 	add	r3, r3, r6, lsl #2
    1e88:	e5832124 	str	r2, [r3, #292]	; 0x124
            return; // q is zero so save calcs by continuing
    1e8c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
        }

        
        rho = alpha*q;
    1e90:	e30b481c 	movw	r4, #47132	; 0xb81c
    1e94:	e3404000 	movt	r4, #0
    1e98:	e5941028 	ldr	r1, [r4, #40]	; 0x28
    1e9c:	eb001f20 	bl	9b24 <__aeabi_fmul>
    1ea0:	e1a05000 	mov	r5, r0
        allParticles[i].density += rho;
    1ea4:	e3a08d36 	mov	r8, #3456	; 0xd80
    1ea8:	e0264698 	mla	r6, r8, r6, r4
    1eac:	e5960058 	ldr	r0, [r6, #88]	; 0x58
    1eb0:	e1a01005 	mov	r1, r5
    1eb4:	eb001e72 	bl	9884 <__addsf3>
    1eb8:	e5860058 	str	r0, [r6, #88]	; 0x58
        allParticles[j].density += rho;
    1ebc:	e0274798 	mla	r7, r8, r7, r4
    1ec0:	e5970058 	ldr	r0, [r7, #88]	; 0x58
    1ec4:	e1a01005 	mov	r1, r5
    1ec8:	eb001e6d 	bl	9884 <__addsf3>
    1ecc:	e5870058 	str	r0, [r7, #88]	; 0x58
    1ed0:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}

    } else {
        allParticles[i].neighbours[j] = false;
    1ed4:	e30b381c 	movw	r3, #47132	; 0xb81c
    1ed8:	e3403000 	movt	r3, #0
    1edc:	e3a01d36 	mov	r1, #3456	; 0xd80
    1ee0:	e0203691 	mla	r0, r1, r6, r3
    1ee4:	e0800007 	add	r0, r0, r7
    1ee8:	e3a02000 	mov	r2, #0
    1eec:	e5c0205c 	strb	r2, [r0, #92]	; 0x5c
        allParticles[j].neighbours[i] = false;
    1ef0:	e0273791 	mla	r7, r1, r7, r3
    1ef4:	e0876006 	add	r6, r7, r6
    1ef8:	e5c6205c 	strb	r2, [r6, #92]	; 0x5c
    1efc:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}

00001f00 <generalParticleUpdate>:
    }

}

void generalParticleUpdate(int i) {
    1f00:	e92d4038 	push	{r3, r4, r5, lr}
    1f04:	e1a04000 	mov	r4, r0
    
    allParticles[i].pressure = K * pow((allParticles[i].density*inv_rho_naught), 7) - K;
    1f08:	e30b381c 	movw	r3, #47132	; 0xb81c
    1f0c:	e3403000 	movt	r3, #0
    1f10:	e3a05d36 	mov	r5, #3456	; 0xd80
    1f14:	e0253095 	mla	r5, r5, r0, r3
    1f18:	e5950058 	ldr	r0, [r5, #88]	; 0x58
    1f1c:	e593102c 	ldr	r1, [r3, #44]	; 0x2c
    1f20:	eb001eff 	bl	9b24 <__aeabi_fmul>
    1f24:	eb001c6f 	bl	90e8 <__aeabi_f2d>
    1f28:	e3a02000 	mov	r2, #0
    1f2c:	e3a03000 	mov	r3, #0
    1f30:	e344301c 	movt	r3, #16412	; 0x401c
    1f34:	eb000cc5 	bl	5250 <pow>
    1f38:	e3a02000 	mov	r2, #0
    1f3c:	e3a03000 	mov	r3, #0
    1f40:	e3443020 	movt	r3, #16416	; 0x4020
    1f44:	eb001c94 	bl	919c <__aeabi_dmul>
    1f48:	e3a02000 	mov	r2, #0
    1f4c:	e3a03000 	mov	r3, #0
    1f50:	e3443020 	movt	r3, #16416	; 0x4020
    1f54:	eb001b8b 	bl	8d88 <__aeabi_dsub>
    1f58:	eb001e1e 	bl	97d8 <__aeabi_d2f>
    1f5c:	e5850054 	str	r0, [r5, #84]	; 0x54

    // 3. Calculate Accelearations (Approx)
    calculateSPHAccelerations(i);
    1f60:	e1a00004 	mov	r0, r4
    1f64:	ebfffd98 	bl	15cc <calculateSPHAccelerations>

    // 4. Step Velocities and then positions.
    doVelocityStepCheck(i);
    1f68:	e1a00004 	mov	r0, r4
    1f6c:	ebfffc09 	bl	f98 <doVelocityStepCheck>
    stepSPHVelocities(i);
    1f70:	e1a00004 	mov	r0, r4
    1f74:	ebfffcd0 	bl	12bc <stepSPHVelocities>
    stepSPHPositions(i);
    1f78:	e1a00004 	mov	r0, r4
    1f7c:	ebfffbb5 	bl	e58 <stepSPHPositions>
    1f80:	e8bd8038 	pop	{r3, r4, r5, pc}

00001f84 <timeStepBucketwiseParticleUpdate>:

}

void timeStepBucketwiseParticleUpdate() {
    1f84:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1f88:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    1f8c:	e59f2338 	ldr	r2, [pc, #824]	; 22cc <timeStepBucketwiseParticleUpdate+0x348>
    1f90:	e242300c 	sub	r3, r2, #12
    1f94:	e2822074 	add	r2, r2, #116	; 0x74
    
    // clean buckets
    for (int bucket = 0; bucket < NUM_BUCKETS; bucket++) {
        numElementsInBucket_even[bucket] = 0;
    1f98:	e3a01000 	mov	r1, #0
    1f9c:	e5a31004 	str	r1, [r3, #4]!
}

void timeStepBucketwiseParticleUpdate() {
    
    // clean buckets
    for (int bucket = 0; bucket < NUM_BUCKETS; bucket++) {
    1fa0:	e1530002 	cmp	r3, r2
    1fa4:	1afffffc 	bne	1f9c <timeStepBucketwiseParticleUpdate+0x18>
    1fa8:	e3a01000 	mov	r1, #0
    1fac:	e1a08001 	mov	r8, r1
    1fb0:	e1a02001 	mov	r2, r1
    }

    // Populate all buckets with particle indicies appropriately
    for (int i = 0; i < NUM_PARTICLES; i++) {

        allEraseParticles[i].x = allParticles[i].x;
    1fb4:	e59fb314 	ldr	r11, [pc, #788]	; 22d0 <timeStepBucketwiseParticleUpdate+0x34c>
    1fb8:	e303343c 	movw	r3, #13372	; 0x343c
    1fbc:	e3403010 	movt	r3, #16
    1fc0:	e2439ede 	sub	r9, r3, #3552	; 0xde0
    1fc4:	e249900c 	sub	r9, r9, #12
        allEraseParticles[i].y = allParticles[i].y;

        int evenBucket = (allParticles[i].x/BUCKET_WIDTH);
    1fc8:	e3067667 	movw	r7, #26215	; 0x6667
    1fcc:	e3467666 	movt	r7, #26214	; 0x6666
        // assert(evenBucket >= 0 && evenBucket < NUM_BUCKETS);
        buckets_even[evenBucket][numElementsInBucket_even[evenBucket]] = i;
    1fd0:	e30f0858 	movw	r0, #63576	; 0xf858
    1fd4:	e34f0fff 	movt	r0, #65535	; 0xffff
    1fd8:	e3a0a0c8 	mov	r10, #200	; 0xc8
    1fdc:	e30f68d8 	movw	r6, #63704	; 0xf8d8
    1fe0:	e34f6fff 	movt	r6, #65535	; 0xffff
    }

    // Populate all buckets with particle indicies appropriately
    for (int i = 0; i < NUM_PARTICLES; i++) {

        allEraseParticles[i].x = allParticles[i].x;
    1fe4:	e1a0500b 	mov	r5, r11
    1fe8:	e7b5c008 	ldr	r12, [r5, r8]!
    1fec:	e1a04009 	mov	r4, r9
    1ff0:	e7a4c001 	str	r12, [r4, r1]!
        allEraseParticles[i].y = allParticles[i].y;
    1ff4:	e5955004 	ldr	r5, [r5, #4]
    1ff8:	e5845004 	str	r5, [r4, #4]

        int evenBucket = (allParticles[i].x/BUCKET_WIDTH);
    1ffc:	e0c54c97 	smull	r4, r5, r7, r12
    2000:	e1a0cfcc 	asr	r12, r12, #31
    2004:	e06c5145 	rsb	r5, r12, r5, asr #2
        // assert(evenBucket >= 0 && evenBucket < NUM_BUCKETS);
        buckets_even[evenBucket][numElementsInBucket_even[evenBucket]] = i;
    2008:	e083c105 	add	r12, r3, r5, lsl #2
    200c:	e79c4000 	ldr	r4, [r12, r0]
    2010:	e025459a 	mla	r5, r10, r5, r4
    2014:	e0835105 	add	r5, r3, r5, lsl #2
    2018:	e7852006 	str	r2, [r5, r6]
        numElementsInBucket_even[evenBucket]++;
    201c:	e2844001 	add	r4, r4, #1
    2020:	e78c4000 	str	r4, [r12, r0]
    for (int bucket = 0; bucket < NUM_BUCKETS; bucket++) {
        numElementsInBucket_even[bucket] = 0;
    }

    // Populate all buckets with particle indicies appropriately
    for (int i = 0; i < NUM_PARTICLES; i++) {
    2024:	e2822001 	add	r2, r2, #1
    2028:	e2888d36 	add	r8, r8, #3456	; 0xd80
    202c:	e2811008 	add	r1, r1, #8
    2030:	e35200c8 	cmp	r2, #200	; 0xc8
    2034:	1affffea 	bne	1fe4 <timeStepBucketwiseParticleUpdate+0x60>
    2038:	e59f4294 	ldr	r4, [pc, #660]	; 22d4 <timeStepBucketwiseParticleUpdate+0x350>
    203c:	e58d4020 	str	r4, [sp, #32]
    2040:	e3a04000 	mov	r4, #0
    2044:	e58d4014 	str	r4, [sp, #20]
        } else if(bucket == (NUM_BUCKETS - 1)) {
            neighbourBucketIndexes[0] = bucket-1;
            neighbourBucketIndexes[1] = bucket;
            neighbourBucketIndexes[2] = -1;
        } else {
            neighbourBucketIndexes[0] = bucket-1;
    2048:	e3094424 	movw	r4, #37924	; 0x9424
    204c:	e3404010 	movt	r4, #16
    2050:	e58d4008 	str	r4, [sp, #8]
    stepSPHVelocities(i);
    stepSPHPositions(i);

}

void timeStepBucketwiseParticleUpdate() {
    2054:	e303943c 	movw	r9, #13372	; 0x343c
    2058:	e3409010 	movt	r9, #16
    205c:	e2493e72 	sub	r3, r9, #1824	; 0x720
    2060:	e2433008 	sub	r3, r3, #8
    2064:	e58d3010 	str	r3, [sp, #16]
            int i = buckets_even[bucket][pos_i];

            for(int nbIdx = 0; nbIdx < 3; nbIdx++){
                
                int buck = neighbourBucketIndexes[nbIdx];
                allParticles[i].bucketIndexes[nbIdx] = buck;
    2068:	e30b481c 	movw	r4, #47132	; 0xb81c
    206c:	e3404000 	movt	r4, #0
    2070:	e58d401c 	str	r4, [sp, #28]
    stepSPHVelocities(i);
    stepSPHPositions(i);

}

void timeStepBucketwiseParticleUpdate() {
    2074:	e2844034 	add	r4, r4, #52	; 0x34
    2078:	e58d4024 	str	r4, [sp, #36]	; 0x24

    }

    for (int bucket = 0; bucket < NUM_BUCKETS; bucket++) {

        if(bucket == 0){
    207c:	e59d4014 	ldr	r4, [sp, #20]
    2080:	e3540000 	cmp	r4, #0
    2084:	1a00000c 	bne	20bc <timeStepBucketwiseParticleUpdate+0x138>
            neighbourBucketIndexes[0] = bucket;
    2088:	e3a03000 	mov	r3, #0
    208c:	e59d4008 	ldr	r4, [sp, #8]
    2090:	e5043310 	str	r3, [r4, #-784]	; 0xfffffcf0
            neighbourBucketIndexes[1] = bucket+1;
    2094:	e3a03001 	mov	r3, #1
    2098:	e504330c 	str	r3, [r4, #-780]	; 0xfffffcf4
            neighbourBucketIndexes[2] = -1;
    209c:	e3e03000 	mvn	r3, #0
    20a0:	e5043308 	str	r3, [r4, #-776]	; 0xfffffcf8
            neighbourBucketIndexes[0] = bucket-1;
            neighbourBucketIndexes[1] = bucket;
            neighbourBucketIndexes[2] = bucket+1;
        }

        for (int pos_i = 0; pos_i < numElementsInBucket_even[bucket]; pos_i++) {
    20a4:	e59d4020 	ldr	r4, [sp, #32]
    20a8:	e4943004 	ldr	r3, [r4], #4
    20ac:	e58d4020 	str	r4, [sp, #32]
    20b0:	e3530000 	cmp	r3, #0
    20b4:	ca000014 	bgt	210c <timeStepBucketwiseParticleUpdate+0x188>
    20b8:	ea000077 	b	229c <timeStepBucketwiseParticleUpdate+0x318>

        if(bucket == 0){
            neighbourBucketIndexes[0] = bucket;
            neighbourBucketIndexes[1] = bucket+1;
            neighbourBucketIndexes[2] = -1;
        } else if(bucket == (NUM_BUCKETS - 1)) {
    20bc:	e59d4014 	ldr	r4, [sp, #20]
    20c0:	e354001f 	cmp	r4, #31
    20c4:	1a000007 	bne	20e8 <timeStepBucketwiseParticleUpdate+0x164>
            neighbourBucketIndexes[0] = bucket-1;
    20c8:	e3a0301e 	mov	r3, #30
    20cc:	e59d4008 	ldr	r4, [sp, #8]
    20d0:	e5043310 	str	r3, [r4, #-784]	; 0xfffffcf0
            neighbourBucketIndexes[1] = bucket;
    20d4:	e3a0301f 	mov	r3, #31
    20d8:	e504330c 	str	r3, [r4, #-780]	; 0xfffffcf4
            neighbourBucketIndexes[2] = -1;
    20dc:	e3e03000 	mvn	r3, #0
    20e0:	e5043308 	str	r3, [r4, #-776]	; 0xfffffcf8
    20e4:	eaffffee 	b	20a4 <timeStepBucketwiseParticleUpdate+0x120>
    stepSPHVelocities(i);
    stepSPHPositions(i);

}

void timeStepBucketwiseParticleUpdate() {
    20e8:	e59d4014 	ldr	r4, [sp, #20]
    20ec:	e2443001 	sub	r3, r4, #1
        } else if(bucket == (NUM_BUCKETS - 1)) {
            neighbourBucketIndexes[0] = bucket-1;
            neighbourBucketIndexes[1] = bucket;
            neighbourBucketIndexes[2] = -1;
        } else {
            neighbourBucketIndexes[0] = bucket-1;
    20f0:	e59d4008 	ldr	r4, [sp, #8]
    20f4:	e5043310 	str	r3, [r4, #-784]	; 0xfffffcf0
            neighbourBucketIndexes[1] = bucket;
    20f8:	e59d0014 	ldr	r0, [sp, #20]
    20fc:	e504030c 	str	r0, [r4, #-780]	; 0xfffffcf4
    stepSPHVelocities(i);
    stepSPHPositions(i);

}

void timeStepBucketwiseParticleUpdate() {
    2100:	e2803001 	add	r3, r0, #1
            neighbourBucketIndexes[1] = bucket;
            neighbourBucketIndexes[2] = -1;
        } else {
            neighbourBucketIndexes[0] = bucket-1;
            neighbourBucketIndexes[1] = bucket;
            neighbourBucketIndexes[2] = bucket+1;
    2104:	e5043308 	str	r3, [r4, #-776]	; 0xfffffcf8
    2108:	eaffffe5 	b	20a4 <timeStepBucketwiseParticleUpdate+0x120>
    stepSPHVelocities(i);
    stepSPHPositions(i);

}

void timeStepBucketwiseParticleUpdate() {
    210c:	e3a03e32 	mov	r3, #800	; 0x320
    2110:	e59d4014 	ldr	r4, [sp, #20]
    2114:	e59d0010 	ldr	r0, [sp, #16]
    2118:	e0230493 	mla	r3, r3, r4, r0
    211c:	e2433004 	sub	r3, r3, #4
    2120:	e58d3018 	str	r3, [sp, #24]
    2124:	e3a04000 	mov	r4, #0
    2128:	e58d400c 	str	r4, [sp, #12]
            neighbourBucketIndexes[1] = bucket;
            neighbourBucketIndexes[2] = bucket+1;
        }

        for (int pos_i = 0; pos_i < numElementsInBucket_even[bucket]; pos_i++) {
            int i = buckets_even[bucket][pos_i];
    212c:	e59d4018 	ldr	r4, [sp, #24]
    2130:	e5b48004 	ldr	r8, [r4, #4]!
    2134:	e58d4018 	str	r4, [sp, #24]

            for(int nbIdx = 0; nbIdx < 3; nbIdx++){
                
                int buck = neighbourBucketIndexes[nbIdx];
    2138:	e59d4008 	ldr	r4, [sp, #8]
    213c:	e5143310 	ldr	r3, [r4, #-784]	; 0xfffffcf0
                allParticles[i].bucketIndexes[nbIdx] = buck;
    2140:	e3a02d36 	mov	r2, #3456	; 0xd80
    2144:	e59d401c 	ldr	r4, [sp, #28]
    2148:	e0224892 	mla	r2, r2, r8, r4
    214c:	e5823da8 	str	r3, [r2, #3496]	; 0xda8

                if (buck<0 || buck>=NUM_BUCKETS) break;
    2150:	e353001f 	cmp	r3, #31
    2154:	8a000040 	bhi	225c <timeStepBucketwiseParticleUpdate+0x2d8>
    2158:	e59d4008 	ldr	r4, [sp, #8]
    215c:	e2444e31 	sub	r4, r4, #784	; 0x310
    2160:	e58d4000 	str	r4, [sp]
    stepSPHVelocities(i);
    stepSPHPositions(i);

}

void timeStepBucketwiseParticleUpdate() {
    2164:	e3a02d36 	mov	r2, #3456	; 0xd80
    2168:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
    216c:	e0224892 	mla	r2, r2, r8, r4
    2170:	e2822ed7 	add	r2, r2, #3440	; 0xd70
    2174:	e2822004 	add	r2, r2, #4
    2178:	e58d2004 	str	r2, [sp, #4]
                for (int pos_j = 0; pos_j < numElementsInBucket_even[buck]; pos_j++) {

                    int j = buckets_even[buck][pos_j];
                    // if(j<(i+1)) continue;

                    if (lastSeen[i][j] == timeStep || lastSeen[j][i] == timeStep) continue;
    217c:	e303557c 	movw	r5, #13692	; 0x357c
    2180:	e340500b 	movt	r5, #11
    2184:	e3a000c8 	mov	r0, #200	; 0xc8
    2188:	e00a0890 	mul	r10, r0, r8
    218c:	ea000007 	b	21b0 <timeStepBucketwiseParticleUpdate+0x22c>
        for (int pos_i = 0; pos_i < numElementsInBucket_even[bucket]; pos_i++) {
            int i = buckets_even[bucket][pos_i];

            for(int nbIdx = 0; nbIdx < 3; nbIdx++){
                
                int buck = neighbourBucketIndexes[nbIdx];
    2190:	e59d4000 	ldr	r4, [sp]
    2194:	e5b43004 	ldr	r3, [r4, #4]!
    2198:	e58d4000 	str	r4, [sp]
                allParticles[i].bucketIndexes[nbIdx] = buck;
    219c:	e59d4004 	ldr	r4, [sp, #4]
    21a0:	e5a43004 	str	r3, [r4, #4]!
    21a4:	e58d4004 	str	r4, [sp, #4]

                if (buck<0 || buck>=NUM_BUCKETS) break;
    21a8:	e353001f 	cmp	r3, #31
    21ac:	8a00002a 	bhi	225c <timeStepBucketwiseParticleUpdate+0x2d8>

                for (int pos_j = 0; pos_j < numElementsInBucket_even[buck]; pos_j++) {
    21b0:	e0892103 	add	r2, r9, r3, lsl #2
    21b4:	e51227a8 	ldr	r2, [r2, #-1960]	; 0xfffff858
    21b8:	e3520000 	cmp	r2, #0
    21bc:	da000022 	ble	224c <timeStepBucketwiseParticleUpdate+0x2c8>
    stepSPHVelocities(i);
    stepSPHPositions(i);

}

void timeStepBucketwiseParticleUpdate() {
    21c0:	e3a07e32 	mov	r7, #800	; 0x320
    21c4:	e59d4010 	ldr	r4, [sp, #16]
    21c8:	e0274397 	mla	r7, r7, r3, r4
    21cc:	e2477004 	sub	r7, r7, #4
    21d0:	e3a04000 	mov	r4, #0
                for (int pos_j = 0; pos_j < numElementsInBucket_even[buck]; pos_j++) {

                    int j = buckets_even[buck][pos_j];
                    // if(j<(i+1)) continue;

                    if (lastSeen[i][j] == timeStep || lastSeen[j][i] == timeStep) continue;
    21d4:	e3006ed4 	movw	r6, #3796	; 0xed4
                int buck = neighbourBucketIndexes[nbIdx];
                allParticles[i].bucketIndexes[nbIdx] = buck;

                if (buck<0 || buck>=NUM_BUCKETS) break;

                for (int pos_j = 0; pos_j < numElementsInBucket_even[buck]; pos_j++) {
    21d8:	e0893103 	add	r3, r9, r3, lsl #2
    21dc:	e243be7a 	sub	r11, r3, #1952	; 0x7a0
    21e0:	e24bb008 	sub	r11, r11, #8

                    int j = buckets_even[buck][pos_j];
    21e4:	e5b71004 	ldr	r1, [r7, #4]!
                    // if(j<(i+1)) continue;

                    if (lastSeen[i][j] == timeStep || lastSeen[j][i] == timeStep) continue;
    21e8:	e51937ac 	ldr	r3, [r9, #-1964]	; 0xfffff854
    21ec:	e08a2001 	add	r2, r10, r1
    21f0:	e0852102 	add	r2, r5, r2, lsl #2
    21f4:	e7922006 	ldr	r2, [r2, r6]
    21f8:	e1520003 	cmp	r2, r3
    21fc:	0a00000e 	beq	223c <timeStepBucketwiseParticleUpdate+0x2b8>
    2200:	e3a000c8 	mov	r0, #200	; 0xc8
    2204:	e0228190 	mla	r2, r0, r1, r8
    2208:	e0852102 	add	r2, r5, r2, lsl #2
    220c:	e7922006 	ldr	r2, [r2, r6]
    2210:	e1530002 	cmp	r3, r2
    2214:	0a000008 	beq	223c <timeStepBucketwiseParticleUpdate+0x2b8>
                    lastSeen[i][j] = timeStep; 
    2218:	e08a2001 	add	r2, r10, r1
    221c:	e0852102 	add	r2, r5, r2, lsl #2
    2220:	e7823006 	str	r3, [r2, r6]
                    lastSeen[j][i] = timeStep; 
    2224:	e0238190 	mla	r3, r0, r1, r8
    2228:	e0853103 	add	r3, r5, r3, lsl #2
    222c:	e51927ac 	ldr	r2, [r9, #-1964]	; 0xfffff854
    2230:	e7832006 	str	r2, [r3, r6]

                    // Call helper function to actually process i/j collision
                    timeStepSPHApproximation(i,j);
    2234:	e1a00008 	mov	r0, r8
    2238:	ebfffe60 	bl	1bc0 <timeStepSPHApproximation>
                int buck = neighbourBucketIndexes[nbIdx];
                allParticles[i].bucketIndexes[nbIdx] = buck;

                if (buck<0 || buck>=NUM_BUCKETS) break;

                for (int pos_j = 0; pos_j < numElementsInBucket_even[buck]; pos_j++) {
    223c:	e2844001 	add	r4, r4, #1
    2240:	e59b3000 	ldr	r3, [r11]
    2244:	e1530004 	cmp	r3, r4
    2248:	caffffe5 	bgt	21e4 <timeStepBucketwiseParticleUpdate+0x260>
        }

        for (int pos_i = 0; pos_i < numElementsInBucket_even[bucket]; pos_i++) {
            int i = buckets_even[bucket][pos_i];

            for(int nbIdx = 0; nbIdx < 3; nbIdx++){
    224c:	e59d4000 	ldr	r4, [sp]
    2250:	e59f0080 	ldr	r0, [pc, #128]	; 22d8 <timeStepBucketwiseParticleUpdate+0x354>
    2254:	e1540000 	cmp	r4, r0
    2258:	1affffcc 	bne	2190 <timeStepBucketwiseParticleUpdate+0x20c>

                }

            }
            
            timeStep++;
    225c:	e51937ac 	ldr	r3, [r9, #-1964]	; 0xfffff854
    2260:	e2833001 	add	r3, r3, #1
    2264:	e50937ac 	str	r3, [r9, #-1964]	; 0xfffff854
            generalParticleUpdate(i);
    2268:	e1a00008 	mov	r0, r8
    226c:	ebffff23 	bl	1f00 <generalParticleUpdate>
            timeStep--;
    2270:	e51937ac 	ldr	r3, [r9, #-1964]	; 0xfffff854
    2274:	e2433001 	sub	r3, r3, #1
    2278:	e50937ac 	str	r3, [r9, #-1964]	; 0xfffff854
            neighbourBucketIndexes[0] = bucket-1;
            neighbourBucketIndexes[1] = bucket;
            neighbourBucketIndexes[2] = bucket+1;
        }

        for (int pos_i = 0; pos_i < numElementsInBucket_even[bucket]; pos_i++) {
    227c:	e59d400c 	ldr	r4, [sp, #12]
    2280:	e2844001 	add	r4, r4, #1
    2284:	e58d400c 	str	r4, [sp, #12]
    2288:	e59d4020 	ldr	r4, [sp, #32]
    228c:	e5143004 	ldr	r3, [r4, #-4]
    2290:	e59d400c 	ldr	r4, [sp, #12]
    2294:	e1530004 	cmp	r3, r4
    2298:	caffffa3 	bgt	212c <timeStepBucketwiseParticleUpdate+0x1a8>
        buckets_even[evenBucket][numElementsInBucket_even[evenBucket]] = i;
        numElementsInBucket_even[evenBucket]++;

    }

    for (int bucket = 0; bucket < NUM_BUCKETS; bucket++) {
    229c:	e59d4014 	ldr	r4, [sp, #20]
    22a0:	e2844001 	add	r4, r4, #1
    22a4:	e58d4014 	str	r4, [sp, #20]
    22a8:	e3540020 	cmp	r4, #32
    22ac:	1affff72 	bne	207c <timeStepBucketwiseParticleUpdate+0xf8>
            timeStep--;
        }

        
    }
    timeStep++;
    22b0:	e303343c 	movw	r3, #13372	; 0x343c
    22b4:	e3403010 	movt	r3, #16
    22b8:	e51327ac 	ldr	r2, [r3, #-1964]	; 0xfffff854
    22bc:	e2822001 	add	r2, r2, #1
    22c0:	e50327ac 	str	r2, [r3, #-1964]	; 0xfffff854
}
    22c4:	e28dd02c 	add	sp, sp, #44	; 0x2c
    22c8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    22cc:	00102c9c 	.word	0x00102c9c
    22d0:	0000b850 	.word	0x0000b850
    22d4:	00102c94 	.word	0x00102c94
    22d8:	0010911c 	.word	0x0010911c

000022dc <dotProd2D>:
DrawBody eraseRBs [NUM_BODIES];
RigidBody allBodies [NUM_BODIES];

int currentMouseInteractionObj;

float dotProd2D(Vector2D * a, Vector2D * b){
    22dc:	e92d4070 	push	{r4, r5, r6, lr}
    22e0:	e1a05000 	mov	r5, r0
    22e4:	e1a04001 	mov	r4, r1
    return a->x * b->x + a->y * b->y;
    22e8:	e5900000 	ldr	r0, [r0]
    22ec:	e5911000 	ldr	r1, [r1]
    22f0:	eb001e0b 	bl	9b24 <__aeabi_fmul>
    22f4:	e1a06000 	mov	r6, r0
    22f8:	e5950004 	ldr	r0, [r5, #4]
    22fc:	e5941004 	ldr	r1, [r4, #4]
    2300:	eb001e07 	bl	9b24 <__aeabi_fmul>
    2304:	e1a01000 	mov	r1, r0
    2308:	e1a00006 	mov	r0, r6
    230c:	eb001d5c 	bl	9884 <__addsf3>
}
    2310:	e8bd8070 	pop	{r4, r5, r6, pc}

00002314 <magnitudeCrossProd2D>:
float magnitudeCrossProd2D(Vector2D * a, Vector2D * b){
    2314:	e92d4070 	push	{r4, r5, r6, lr}
    2318:	e1a05000 	mov	r5, r0
    231c:	e1a04001 	mov	r4, r1
    return a->x * b->y - a->y * b->x;
    2320:	e5900000 	ldr	r0, [r0]
    2324:	e5911004 	ldr	r1, [r1, #4]
    2328:	eb001dfd 	bl	9b24 <__aeabi_fmul>
    232c:	e1a06000 	mov	r6, r0
    2330:	e5950004 	ldr	r0, [r5, #4]
    2334:	e5941000 	ldr	r1, [r4]
    2338:	eb001df9 	bl	9b24 <__aeabi_fmul>
    233c:	e1a01000 	mov	r1, r0
    2340:	e1a00006 	mov	r0, r6
    2344:	eb001d4d 	bl	9880 <__aeabi_fsub>
}
    2348:	e8bd8070 	pop	{r4, r5, r6, pc}

0000234c <floatMin>:
float floatMin(float a, float b){
    234c:	e92d4038 	push	{r3, r4, r5, lr}
    2350:	e1a04000 	mov	r4, r0
    2354:	e1a05001 	mov	r5, r1
    return a < b? a : b;
    2358:	eb001edc 	bl	9ed0 <__aeabi_fcmplt>
    235c:	e3500000 	cmp	r0, #0
    2360:	01a04005 	moveq	r4, r5
}
    2364:	e1a00004 	mov	r0, r4
    2368:	e8bd8038 	pop	{r3, r4, r5, pc}

0000236c <floatMax>:
float floatMax(float a, float b){
    236c:	e92d4038 	push	{r3, r4, r5, lr}
    2370:	e1a04000 	mov	r4, r0
    2374:	e1a05001 	mov	r5, r1
    return a > b? a : b;
    2378:	eb001ee6 	bl	9f18 <__aeabi_fcmpgt>
    237c:	e3500000 	cmp	r0, #0
    2380:	01a04005 	moveq	r4, r5
}
    2384:	e1a00004 	mov	r0, r4
    2388:	e8bd8038 	pop	{r3, r4, r5, pc}

0000238c <getMag>:
float getMag(Vector2D * a){
    238c:	e92d4038 	push	{r3, r4, r5, lr}
    return sqrt(a->x*a->x + a->y*a->y);
    2390:	e5901000 	ldr	r1, [r0]
    2394:	e5904004 	ldr	r4, [r0, #4]
    2398:	e1a00001 	mov	r0, r1
    239c:	eb001de0 	bl	9b24 <__aeabi_fmul>
    23a0:	e1a05000 	mov	r5, r0
    23a4:	e1a00004 	mov	r0, r4
    23a8:	e1a01004 	mov	r1, r4
    23ac:	eb001ddc 	bl	9b24 <__aeabi_fmul>
    23b0:	e1a01000 	mov	r1, r0
    23b4:	e1a00005 	mov	r0, r5
    23b8:	eb001d31 	bl	9884 <__addsf3>
    23bc:	eb001b49 	bl	90e8 <__aeabi_f2d>
    23c0:	eb000ce2 	bl	5750 <sqrt>
    23c4:	eb001d03 	bl	97d8 <__aeabi_d2f>
}
    23c8:	e8bd8038 	pop	{r3, r4, r5, pc}

000023cc <addVec2>:
Vector2D addVec2 (Vector2D * a, Vector2D * b) {
    23cc:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    23d0:	e1a04000 	mov	r4, r0
    23d4:	e1a06001 	mov	r6, r1
    23d8:	e1a05002 	mov	r5, r2
    Vector2D res;
    res.x = a->x + b->x;
    res.y = a->y + b->y;
    23dc:	e5910004 	ldr	r0, [r1, #4]
    23e0:	e5921004 	ldr	r1, [r2, #4]
    23e4:	eb001d26 	bl	9884 <__addsf3>
    23e8:	e1a07000 	mov	r7, r0
float getMag(Vector2D * a){
    return sqrt(a->x*a->x + a->y*a->y);
}
Vector2D addVec2 (Vector2D * a, Vector2D * b) {
    Vector2D res;
    res.x = a->x + b->x;
    23ec:	e5960000 	ldr	r0, [r6]
    23f0:	e5951000 	ldr	r1, [r5]
    23f4:	eb001d22 	bl	9884 <__addsf3>
    res.y = a->y + b->y;
    return res;
    23f8:	e5840000 	str	r0, [r4]
    23fc:	e5847004 	str	r7, [r4, #4]
}
    2400:	e1a00004 	mov	r0, r4
    2404:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}

00002408 <subVec2>:
Vector2D subVec2 (Vector2D * a, Vector2D * b) {
    2408:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    240c:	e1a04000 	mov	r4, r0
    2410:	e1a06001 	mov	r6, r1
    2414:	e1a05002 	mov	r5, r2
    Vector2D res;
    res.x = a->x - b->x;
    res.y = a->y - b->y;
    2418:	e5910004 	ldr	r0, [r1, #4]
    241c:	e5921004 	ldr	r1, [r2, #4]
    2420:	eb001d16 	bl	9880 <__aeabi_fsub>
    2424:	e1a07000 	mov	r7, r0
    res.y = a->y + b->y;
    return res;
}
Vector2D subVec2 (Vector2D * a, Vector2D * b) {
    Vector2D res;
    res.x = a->x - b->x;
    2428:	e5960000 	ldr	r0, [r6]
    242c:	e5951000 	ldr	r1, [r5]
    2430:	eb001d12 	bl	9880 <__aeabi_fsub>
    res.y = a->y - b->y;
    return res;
    2434:	e5840000 	str	r0, [r4]
    2438:	e5847004 	str	r7, [r4, #4]
}
    243c:	e1a00004 	mov	r0, r4
    2440:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}

00002444 <multVec2>:
Vector2D multVec2 (Vector2D * a, float m) {
    2444:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    2448:	e1a04000 	mov	r4, r0
    244c:	e1a06001 	mov	r6, r1
    2450:	e1a05002 	mov	r5, r2
    Vector2D res;
    res.x = a->x * m;
    res.y = a->y * m;
    2454:	e1a00002 	mov	r0, r2
    2458:	e5911004 	ldr	r1, [r1, #4]
    245c:	eb001db0 	bl	9b24 <__aeabi_fmul>
    2460:	e1a07000 	mov	r7, r0
    res.y = a->y - b->y;
    return res;
}
Vector2D multVec2 (Vector2D * a, float m) {
    Vector2D res;
    res.x = a->x * m;
    2464:	e5960000 	ldr	r0, [r6]
    2468:	e1a01005 	mov	r1, r5
    246c:	eb001dac 	bl	9b24 <__aeabi_fmul>
    res.y = a->y * m;
    return res;
    2470:	e5840000 	str	r0, [r4]
    2474:	e5847004 	str	r7, [r4, #4]
}
    2478:	e1a00004 	mov	r0, r4
    247c:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}

00002480 <constrVec>:
Vector2D constrVec (float x, float y) {
    Vector2D res;
    res.x = x;
    res.y = y;
    return res;
    2480:	e5801000 	str	r1, [r0]
    2484:	e5802004 	str	r2, [r0, #4]
}
    2488:	e12fff1e 	bx	lr

0000248c <resetBodyFromCenter>:

void resetBodyFromCenter(int i) {
    248c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2490:	e24dd00c 	sub	sp, sp, #12
    2494:	e0608280 	rsb	r8, r0, r0, lsl #5
    2498:	e59f30dc 	ldr	r3, [pc, #220]	; 257c <resetBodyFromCenter+0xf0>
    249c:	e0838208 	add	r8, r3, r8, lsl #4
    for(int k = 0; (k < VERTICIES_PER_BODY); k++) {
    24a0:	e3a09000 	mov	r9, #0
        float nt = allBodies[i].constThetas[k] + allBodies[i].theta;
    24a4:	e3093424 	movw	r3, #37924	; 0x9424
    24a8:	e3403010 	movt	r3, #16
    24ac:	e0600280 	rsb	r0, r0, r0, lsl #5
    24b0:	e083a200 	add	r10, r3, r0, lsl #4
        float ndx = allBodies[i].vDistances[k] * cos(nt);
    24b4:	e5980040 	ldr	r0, [r8, #64]	; 0x40
    24b8:	eb001b0a 	bl	90e8 <__aeabi_f2d>
    24bc:	e1a04000 	mov	r4, r0
    24c0:	e1a05001 	mov	r5, r1
    return res;
}

void resetBodyFromCenter(int i) {
    for(int k = 0; (k < VERTICIES_PER_BODY); k++) {
        float nt = allBodies[i].constThetas[k] + allBodies[i].theta;
    24c4:	e5980084 	ldr	r0, [r8, #132]	; 0x84
    24c8:	e51a1284 	ldr	r1, [r10, #-644]	; 0xfffffd7c
    24cc:	eb001cec 	bl	9884 <__addsf3>
        float ndx = allBodies[i].vDistances[k] * cos(nt);
    24d0:	eb001b04 	bl	90e8 <__aeabi_f2d>
    24d4:	e1a06000 	mov	r6, r0
    24d8:	e1a07001 	mov	r7, r1
    24dc:	eb000a5d 	bl	4e58 <cos>
    24e0:	e1cd00f0 	strd	r0, [sp]
        float ndy = allBodies[i].vDistances[k] * sin(nt);
    24e4:	e1a00006 	mov	r0, r6
    24e8:	e1a01007 	mov	r1, r7
    24ec:	eb000afd 	bl	50e8 <sin>
    24f0:	e1a06000 	mov	r6, r0
    24f4:	e1a07001 	mov	r7, r1
}

void resetBodyFromCenter(int i) {
    for(int k = 0; (k < VERTICIES_PER_BODY); k++) {
        float nt = allBodies[i].constThetas[k] + allBodies[i].theta;
        float ndx = allBodies[i].vDistances[k] * cos(nt);
    24f8:	e1a00004 	mov	r0, r4
    24fc:	e1a01005 	mov	r1, r5
    2500:	e1cd20d0 	ldrd	r2, [sp]
    2504:	eb001b24 	bl	919c <__aeabi_dmul>
    2508:	eb001cb2 	bl	97d8 <__aeabi_d2f>
    250c:	e1a01000 	mov	r1, r0
        float ndy = allBodies[i].vDistances[k] * sin(nt);

        allBodies[i].pxs[k] = allBodies[i].cx + ndx;
    2510:	e51a0294 	ldr	r0, [r10, #-660]	; 0xfffffd6c
    2514:	eb001cda 	bl	9884 <__addsf3>
    2518:	e1a0b000 	mov	r11, r0
    251c:	e5880020 	str	r0, [r8, #32]

void resetBodyFromCenter(int i) {
    for(int k = 0; (k < VERTICIES_PER_BODY); k++) {
        float nt = allBodies[i].constThetas[k] + allBodies[i].theta;
        float ndx = allBodies[i].vDistances[k] * cos(nt);
        float ndy = allBodies[i].vDistances[k] * sin(nt);
    2520:	e1a00004 	mov	r0, r4
    2524:	e1a01005 	mov	r1, r5
    2528:	e1a02006 	mov	r2, r6
    252c:	e1a03007 	mov	r3, r7
    2530:	eb001b19 	bl	919c <__aeabi_dmul>
    2534:	eb001ca7 	bl	97d8 <__aeabi_d2f>
    2538:	e1a01000 	mov	r1, r0

        allBodies[i].pxs[k] = allBodies[i].cx + ndx;
        allBodies[i].pys[k] = allBodies[i].cy + ndy;
    253c:	e51a0290 	ldr	r0, [r10, #-656]	; 0xfffffd70
    2540:	eb001ccf 	bl	9884 <__addsf3>
    2544:	e1a04000 	mov	r4, r0
    2548:	e5880030 	str	r0, [r8, #48]	; 0x30

        allBodies[i].xs[k] = PX_PER_M_RB * allBodies[i].pxs[k];
    254c:	e1a0000b 	mov	r0, r11
    2550:	eb001e76 	bl	9f30 <__aeabi_f2iz>
    2554:	e5880000 	str	r0, [r8]
        allBodies[i].ys[k] = PX_PER_M_RB * allBodies[i].pys[k];
    2558:	e1a00004 	mov	r0, r4
    255c:	eb001e73 	bl	9f30 <__aeabi_f2iz>
    2560:	e5880010 	str	r0, [r8, #16]
    res.y = y;
    return res;
}

void resetBodyFromCenter(int i) {
    for(int k = 0; (k < VERTICIES_PER_BODY); k++) {
    2564:	e2899001 	add	r9, r9, #1
    2568:	e2888004 	add	r8, r8, #4
    256c:	e3590004 	cmp	r9, #4
    2570:	1affffcf 	bne	24b4 <resetBodyFromCenter+0x28>
        allBodies[i].pys[k] = allBodies[i].cy + ndy;

        allBodies[i].xs[k] = PX_PER_M_RB * allBodies[i].pxs[k];
        allBodies[i].ys[k] = PX_PER_M_RB * allBodies[i].pys[k];
    }
}
    2574:	e28dd00c 	add	sp, sp, #12
    2578:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    257c:	00109120 	.word	0x00109120

00002580 <pointIsInsideRB>:

bool pointIsInsideRB(float x, float y, int rbIdx){
    2580:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2584:	e24dd014 	sub	sp, sp, #20
    2588:	e58d000c 	str	r0, [sp, #12]
    258c:	e1a05001 	mov	r5, r1
    2590:	e0626282 	rsb	r6, r2, r2, lsl #5
    2594:	e59f3148 	ldr	r3, [pc, #328]	; 26e4 <pointIsInsideRB+0x164>
    2598:	e0836206 	add	r6, r3, r6, lsl #4
    259c:	e2866030 	add	r6, r6, #48	; 0x30
    
    int counter = 0;
    for (int i =0; i < VERTICIES_PER_BODY; i++) {
    25a0:	e3a04000 	mov	r4, #0
    }
}

bool pointIsInsideRB(float x, float y, int rbIdx){
    
    int counter = 0;
    25a4:	e58d4004 	str	r4, [sp, #4]
    for (int i =0; i < VERTICIES_PER_BODY; i++) {
        int nextIdx = (i+1) % VERTICIES_PER_BODY;
        if ((allBodies[rbIdx].pys[i] <= y && y < allBodies[rbIdx].pys[nextIdx]) ||
            (allBodies[rbIdx].pys[nextIdx] <= y && y < allBodies[rbIdx].pys[i])) {
            float m = (allBodies[rbIdx].pxs[nextIdx] - allBodies[rbIdx].pxs[i])/(allBodies[rbIdx].pys[nextIdx] - allBodies[rbIdx].pys[i]);
    25a8:	e3097424 	movw	r7, #37924	; 0x9424
    25ac:	e3407010 	movt	r7, #16
    25b0:	e0622282 	rsb	r2, r2, r2, lsl #5
    25b4:	e1a0a102 	lsl	r10, r2, #2

bool pointIsInsideRB(float x, float y, int rbIdx){
    
    int counter = 0;
    for (int i =0; i < VERTICIES_PER_BODY; i++) {
        int nextIdx = (i+1) % VERTICIES_PER_BODY;
    25b8:	e2844001 	add	r4, r4, #1
    25bc:	e1a03fc4 	asr	r3, r4, #31
    25c0:	e1a03f23 	lsr	r3, r3, #30
    25c4:	e084b003 	add	r11, r4, r3
    25c8:	e20bb003 	and	r11, r11, #3
    25cc:	e063b00b 	rsb	r11, r3, r11
        if ((allBodies[rbIdx].pys[i] <= y && y < allBodies[rbIdx].pys[nextIdx]) ||
    25d0:	e4968004 	ldr	r8, [r6], #4
    25d4:	e1a00008 	mov	r0, r8
    25d8:	e1a01005 	mov	r1, r5
    25dc:	eb001e41 	bl	9ee8 <__aeabi_fcmple>
    25e0:	e3500000 	cmp	r0, #0
    25e4:	0a000006 	beq	2604 <pointIsInsideRB+0x84>
    25e8:	e08a300b 	add	r3, r10, r11
    25ec:	e0873103 	add	r3, r7, r3, lsl #2
    25f0:	e1a00005 	mov	r0, r5
    25f4:	e51312d4 	ldr	r1, [r3, #-724]	; 0xfffffd2c
    25f8:	eb001e34 	bl	9ed0 <__aeabi_fcmplt>
    25fc:	e3500000 	cmp	r0, #0
    2600:	1a00000b 	bne	2634 <pointIsInsideRB+0xb4>
            (allBodies[rbIdx].pys[nextIdx] <= y && y < allBodies[rbIdx].pys[i])) {
    2604:	e08a300b 	add	r3, r10, r11
    2608:	e0873103 	add	r3, r7, r3, lsl #2
bool pointIsInsideRB(float x, float y, int rbIdx){
    
    int counter = 0;
    for (int i =0; i < VERTICIES_PER_BODY; i++) {
        int nextIdx = (i+1) % VERTICIES_PER_BODY;
        if ((allBodies[rbIdx].pys[i] <= y && y < allBodies[rbIdx].pys[nextIdx]) ||
    260c:	e1a00005 	mov	r0, r5
    2610:	e51312d4 	ldr	r1, [r3, #-724]	; 0xfffffd2c
    2614:	eb001e39 	bl	9f00 <__aeabi_fcmpge>
    2618:	e3500000 	cmp	r0, #0
    261c:	0a000024 	beq	26b4 <pointIsInsideRB+0x134>
            (allBodies[rbIdx].pys[nextIdx] <= y && y < allBodies[rbIdx].pys[i])) {
    2620:	e1a00008 	mov	r0, r8
    2624:	e1a01005 	mov	r1, r5
    2628:	eb001e3a 	bl	9f18 <__aeabi_fcmpgt>
    262c:	e3500000 	cmp	r0, #0
    2630:	0a00001f 	beq	26b4 <pointIsInsideRB+0x134>
        allBodies[i].xs[k] = PX_PER_M_RB * allBodies[i].pxs[k];
        allBodies[i].ys[k] = PX_PER_M_RB * allBodies[i].pys[k];
    }
}

bool pointIsInsideRB(float x, float y, int rbIdx){
    2634:	e1a09006 	mov	r9, r6
    int counter = 0;
    for (int i =0; i < VERTICIES_PER_BODY; i++) {
        int nextIdx = (i+1) % VERTICIES_PER_BODY;
        if ((allBodies[rbIdx].pys[i] <= y && y < allBodies[rbIdx].pys[nextIdx]) ||
            (allBodies[rbIdx].pys[nextIdx] <= y && y < allBodies[rbIdx].pys[i])) {
            float m = (allBodies[rbIdx].pxs[nextIdx] - allBodies[rbIdx].pxs[i])/(allBodies[rbIdx].pys[nextIdx] - allBodies[rbIdx].pys[i]);
    2638:	e08ab00b 	add	r11, r10, r11
    263c:	e087310b 	add	r3, r7, r11, lsl #2
    2640:	e51302e4 	ldr	r0, [r3, #-740]	; 0xfffffd1c
    2644:	e5161014 	ldr	r1, [r6, #-20]	; 0xffffffec
    2648:	eb001c8c 	bl	9880 <__aeabi_fsub>
    264c:	e58d0008 	str	r0, [sp, #8]
    2650:	e087b10b 	add	r11, r7, r11, lsl #2
    2654:	e51b02d4 	ldr	r0, [r11, #-724]	; 0xfffffd2c
    2658:	e1a01008 	mov	r1, r8
    265c:	eb001c87 	bl	9880 <__aeabi_fsub>
    2660:	e1a01000 	mov	r1, r0
    2664:	e59d0008 	ldr	r0, [sp, #8]
    2668:	eb001d93 	bl	9cbc <__aeabi_fdiv>
    266c:	e1a08000 	mov	r8, r0
            if (isnan(m)) m = 1.0e38;
    2670:	eb000adc 	bl	51e8 <__fpclassifyf>
    2674:	e3500000 	cmp	r0, #0
    2678:	03078699 	movweq	r8, #30361	; 0x7699
    267c:	03478e96 	movteq	r8, #32406	; 0x7e96
            float root = allBodies[rbIdx].pxs[i] + (y - allBodies[rbIdx].pys[i]) * m;
    2680:	e1a00005 	mov	r0, r5
    2684:	e5161004 	ldr	r1, [r6, #-4]
    2688:	eb001c7c 	bl	9880 <__aeabi_fsub>
    268c:	e1a01008 	mov	r1, r8
    2690:	eb001d23 	bl	9b24 <__aeabi_fmul>
    2694:	e5161014 	ldr	r1, [r6, #-20]	; 0xffffffec
    2698:	eb001c79 	bl	9884 <__addsf3>
            if (x < root) counter++;
    269c:	e59d100c 	ldr	r1, [sp, #12]
    26a0:	eb001e1c 	bl	9f18 <__aeabi_fcmpgt>
    26a4:	e3500000 	cmp	r0, #0
    26a8:	159d1004 	ldrne	r1, [sp, #4]
    26ac:	12811001 	addne	r1, r1, #1
    26b0:	158d1004 	strne	r1, [sp, #4]
}

bool pointIsInsideRB(float x, float y, int rbIdx){
    
    int counter = 0;
    for (int i =0; i < VERTICIES_PER_BODY; i++) {
    26b4:	e3540004 	cmp	r4, #4
    26b8:	1affffbe 	bne	25b8 <pointIsInsideRB+0x38>
            if (isnan(m)) m = 1.0e38;
            float root = allBodies[rbIdx].pxs[i] + (y - allBodies[rbIdx].pys[i]) * m;
            if (x < root) counter++;
        }
    }
    return ((counter % 2 ) == 1); // If we crossed an odd amt. of times. we must be inside.
    26bc:	e59d2004 	ldr	r2, [sp, #4]
    26c0:	e1a03fa2 	lsr	r3, r2, #31
    26c4:	e0822003 	add	r2, r2, r3
    26c8:	e2022001 	and	r2, r2, #1
    26cc:	e0630002 	rsb	r0, r3, r2
    //     lastY = allBodies[rbIdx].pys[i];
    // }

    // return (diffsInX && diffsInY);

} 
    26d0:	e3500001 	cmp	r0, #1
    26d4:	13a00000 	movne	r0, #0
    26d8:	03a00001 	moveq	r0, #1
    26dc:	e28dd014 	add	sp, sp, #20
    26e0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    26e4:	00109120 	.word	0x00109120

000026e8 <isColliding>:

// Returns true if bodies I 
bool isColliding(int i, int j){
    26e8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    26ec:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    bool hasCollided = true;
    float dx, dy, miniDot, minjDot, maxiDot, maxjDot;
    // Loop over edge normals of both shapes.
    for(int vertIdx = 0; vertIdx < (VERTICIES_PER_BODY<<1); vertIdx++) {
    26f0:	e3a0b000 	mov	r11, #0
        
        int startIdxi = (vertIdx % 4)? (vertIdx % 4)-1 : VERTICIES_PER_BODY - 1;
    26f4:	e3a05003 	mov	r5, #3
        int endIdxi = (vertIdx % 4);
        
        // dx and dy here define our current edge on either i or j (and the vector parallel to it).
        if(vertIdx < VERTICIES_PER_BODY){
            dx = allBodies[i].pxs[endIdxi] - allBodies[i].pxs[startIdxi];
    26f8:	e3092424 	movw	r2, #37924	; 0x9424
    26fc:	e3402010 	movt	r2, #16
    2700:	e58d2004 	str	r2, [sp, #4]
    2704:	e0600280 	rsb	r0, r0, r0, lsl #5
    2708:	e1a03100 	lsl	r3, r0, #2
    270c:	e58d3008 	str	r3, [sp, #8]
            dy = allBodies[i].pys[endIdxi] - allBodies[i].pys[startIdxi];
        } else {
            dx = allBodies[j].pxs[endIdxi] - allBodies[j].pxs[startIdxi];
    2710:	e0611281 	rsb	r1, r1, r1, lsl #5
    2714:	e1a02101 	lsl	r2, r1, #2
    2718:	e58d200c 	str	r2, [sp, #12]
    // return (diffsInX && diffsInY);

} 

// Returns true if bodies I 
bool isColliding(int i, int j){
    271c:	e59d2004 	ldr	r2, [sp, #4]
    2720:	e2423fc1 	sub	r3, r2, #772	; 0x304
    2724:	e0830200 	add	r0, r3, r0, lsl #4
    2728:	e280001c 	add	r0, r0, #28
    272c:	e58d0010 	str	r0, [sp, #16]
    2730:	e0833201 	add	r3, r3, r1, lsl #4
    2734:	e283301c 	add	r3, r3, #28
    2738:	e58d3014 	str	r3, [sp, #20]
    273c:	ea000007 	b	2760 <isColliding+0x78>
    bool hasCollided = true;
    float dx, dy, miniDot, minjDot, maxiDot, maxjDot;
    // Loop over edge normals of both shapes.
    for(int vertIdx = 0; vertIdx < (VERTICIES_PER_BODY<<1); vertIdx++) {
        
        int startIdxi = (vertIdx % 4)? (vertIdx % 4)-1 : VERTICIES_PER_BODY - 1;
    2740:	e31b0003 	tst	r11, #3
    2744:	11a03fcb 	asrne	r3, r11, #31
    2748:	11a03f23 	lsrne	r3, r3, #30
    274c:	108b5003 	addne	r5, r11, r3
    2750:	12055003 	andne	r5, r5, #3
    2754:	10635005 	rsbne	r5, r3, r5
    2758:	12455001 	subne	r5, r5, #1
    275c:	03a05003 	moveq	r5, #3
        int endIdxi = (vertIdx % 4);
    2760:	e1a03fcb 	asr	r3, r11, #31
    2764:	e1a03f23 	lsr	r3, r3, #30
    2768:	e08b2003 	add	r2, r11, r3
    276c:	e2022003 	and	r2, r2, #3
    2770:	e0633002 	rsb	r3, r3, r2
        
        // dx and dy here define our current edge on either i or j (and the vector parallel to it).
        if(vertIdx < VERTICIES_PER_BODY){
    2774:	e35b0003 	cmp	r11, #3
    2778:	ca000010 	bgt	27c0 <isColliding+0xd8>
            dx = allBodies[i].pxs[endIdxi] - allBodies[i].pxs[startIdxi];
    277c:	e59d1008 	ldr	r1, [sp, #8]
    2780:	e0816003 	add	r6, r1, r3
    2784:	e59d3004 	ldr	r3, [sp, #4]
    2788:	e0832106 	add	r2, r3, r6, lsl #2
    278c:	e0815005 	add	r5, r1, r5
    2790:	e0833105 	add	r3, r3, r5, lsl #2
    2794:	e51202e4 	ldr	r0, [r2, #-740]	; 0xfffffd1c
    2798:	e51312e4 	ldr	r1, [r3, #-740]	; 0xfffffd1c
    279c:	eb001c37 	bl	9880 <__aeabi_fsub>
    27a0:	e1a04000 	mov	r4, r0
            dy = allBodies[i].pys[endIdxi] - allBodies[i].pys[startIdxi];
    27a4:	e59d1004 	ldr	r1, [sp, #4]
    27a8:	e0816106 	add	r6, r1, r6, lsl #2
    27ac:	e0815105 	add	r5, r1, r5, lsl #2
    27b0:	e51602d4 	ldr	r0, [r6, #-724]	; 0xfffffd2c
    27b4:	e51512d4 	ldr	r1, [r5, #-724]	; 0xfffffd2c
    27b8:	eb001c30 	bl	9880 <__aeabi_fsub>
    27bc:	ea000010 	b	2804 <isColliding+0x11c>
        } else {
            dx = allBodies[j].pxs[endIdxi] - allBodies[j].pxs[startIdxi];
    27c0:	e59d200c 	ldr	r2, [sp, #12]
    27c4:	e0826003 	add	r6, r2, r3
    27c8:	e59d3004 	ldr	r3, [sp, #4]
    27cc:	e0832106 	add	r2, r3, r6, lsl #2
    27d0:	e59d100c 	ldr	r1, [sp, #12]
    27d4:	e0815005 	add	r5, r1, r5
    27d8:	e0833105 	add	r3, r3, r5, lsl #2
    27dc:	e51202e4 	ldr	r0, [r2, #-740]	; 0xfffffd1c
    27e0:	e51312e4 	ldr	r1, [r3, #-740]	; 0xfffffd1c
    27e4:	eb001c25 	bl	9880 <__aeabi_fsub>
    27e8:	e1a04000 	mov	r4, r0
            dy = allBodies[j].pys[endIdxi] - allBodies[j].pys[startIdxi];
    27ec:	e59d2004 	ldr	r2, [sp, #4]
    27f0:	e0826106 	add	r6, r2, r6, lsl #2
    27f4:	e0825105 	add	r5, r2, r5, lsl #2
    27f8:	e51602d4 	ldr	r0, [r6, #-724]	; 0xfffffd2c
    27fc:	e51512d4 	ldr	r1, [r5, #-724]	; 0xfffffd2c
    2800:	eb001c1e 	bl	9880 <__aeabi_fsub>
        }

        Vector2D normalVec, cVec;
        float testDot, testiIdxMin, testjIdxMin, testiIdxMax, testjIdxMax;
        normalVec.x = -dy;
    2804:	e2800102 	add	r0, r0, #-2147483648	; 0x80000000
    2808:	e58d0018 	str	r0, [sp, #24]
        normalVec.y = dx;
    280c:	e58d401c 	str	r4, [sp, #28]
    // return (diffsInX && diffsInY);

} 

// Returns true if bodies I 
bool isColliding(int i, int j){
    2810:	e59d5010 	ldr	r5, [sp, #16]
    2814:	e3a04004 	mov	r4, #4
        normalVec.x = -dy;
        normalVec.y = dx;

        miniDot = 1.0e38;
        minjDot = 1.0e38;
        maxiDot = -1.0e38;
    2818:	e3079699 	movw	r9, #30361	; 0x7699
    281c:	e34f9e96 	movt	r9, #65174	; 0xfe96
        Vector2D normalVec, cVec;
        float testDot, testiIdxMin, testjIdxMin, testiIdxMax, testjIdxMax;
        normalVec.x = -dy;
        normalVec.y = dx;

        miniDot = 1.0e38;
    2820:	e3077699 	movw	r7, #30361	; 0x7699
    2824:	e3477e96 	movt	r7, #32406	; 0x7e96
        minjDot = 1.0e38;
        maxiDot = -1.0e38;
        maxjDot = -1.0e38;

        for(int vertIdxi = 0; vertIdxi < VERTICIES_PER_BODY; vertIdxi++) {
            cVec.x = allBodies[i].pxs[vertIdxi];
    2828:	e5b53004 	ldr	r3, [r5, #4]!
    282c:	e58d3020 	str	r3, [sp, #32]
            cVec.y = allBodies[i].pys[vertIdxi];
    2830:	e5953010 	ldr	r3, [r5, #16]
    2834:	e58d3024 	str	r3, [sp, #36]	; 0x24
            testDot = dotProd2D(&normalVec, &cVec);
    2838:	e28d0018 	add	r0, sp, #24
    283c:	e28d1020 	add	r1, sp, #32
    2840:	ebfffea5 	bl	22dc <dotProd2D>
    2844:	e1a06000 	mov	r6, r0
            if(testDot < miniDot){miniDot = testDot; testiIdxMin = vertIdxi;}
    2848:	e1a01007 	mov	r1, r7
    284c:	eb001d9f 	bl	9ed0 <__aeabi_fcmplt>
    2850:	e3500000 	cmp	r0, #0
    2854:	11a07006 	movne	r7, r6
            if(testDot > maxiDot){maxiDot = testDot; testiIdxMax = vertIdxi;}
    2858:	e1a00006 	mov	r0, r6
    285c:	e1a01009 	mov	r1, r9
    2860:	eb001dac 	bl	9f18 <__aeabi_fcmpgt>
    2864:	e3500000 	cmp	r0, #0
    2868:	11a09006 	movne	r9, r6
        miniDot = 1.0e38;
        minjDot = 1.0e38;
        maxiDot = -1.0e38;
        maxjDot = -1.0e38;

        for(int vertIdxi = 0; vertIdxi < VERTICIES_PER_BODY; vertIdxi++) {
    286c:	e2544001 	subs	r4, r4, #1
    2870:	1affffec 	bne	2828 <isColliding+0x140>
    // return (diffsInX && diffsInY);

} 

// Returns true if bodies I 
bool isColliding(int i, int j){
    2874:	e59d5014 	ldr	r5, [sp, #20]
    2878:	e3a04004 	mov	r4, #4
    287c:	e3078699 	movw	r8, #30361	; 0x7699
    2880:	e34f8e96 	movt	r8, #65174	; 0xfe96
    2884:	e307a699 	movw	r10, #30361	; 0x7699
    2888:	e347ae96 	movt	r10, #32406	; 0x7e96
            testDot = dotProd2D(&normalVec, &cVec);
            if(testDot < miniDot){miniDot = testDot; testiIdxMin = vertIdxi;}
            if(testDot > maxiDot){maxiDot = testDot; testiIdxMax = vertIdxi;}
        }
        for(int vertIdxj = 0; vertIdxj < VERTICIES_PER_BODY; vertIdxj++) {
            cVec.x = allBodies[j].pxs[vertIdxj];
    288c:	e5b53004 	ldr	r3, [r5, #4]!
    2890:	e58d3020 	str	r3, [sp, #32]
            cVec.y = allBodies[j].pys[vertIdxj];
    2894:	e5953010 	ldr	r3, [r5, #16]
    2898:	e58d3024 	str	r3, [sp, #36]	; 0x24
            testDot = dotProd2D(&normalVec, &cVec);
    289c:	e28d0018 	add	r0, sp, #24
    28a0:	e28d1020 	add	r1, sp, #32
    28a4:	ebfffe8c 	bl	22dc <dotProd2D>
    28a8:	e1a06000 	mov	r6, r0
            if(testDot < minjDot){minjDot = testDot; testjIdxMin = vertIdxj;}
    28ac:	e1a0100a 	mov	r1, r10
    28b0:	eb001d86 	bl	9ed0 <__aeabi_fcmplt>
    28b4:	e3500000 	cmp	r0, #0
    28b8:	11a0a006 	movne	r10, r6
            if(testDot > maxjDot){maxjDot = testDot; testjIdxMax = vertIdxj;}
    28bc:	e1a00006 	mov	r0, r6
    28c0:	e1a01008 	mov	r1, r8
    28c4:	eb001d93 	bl	9f18 <__aeabi_fcmpgt>
    28c8:	e3500000 	cmp	r0, #0
    28cc:	11a08006 	movne	r8, r6
            cVec.y = allBodies[i].pys[vertIdxi];
            testDot = dotProd2D(&normalVec, &cVec);
            if(testDot < miniDot){miniDot = testDot; testiIdxMin = vertIdxi;}
            if(testDot > maxiDot){maxiDot = testDot; testiIdxMax = vertIdxi;}
        }
        for(int vertIdxj = 0; vertIdxj < VERTICIES_PER_BODY; vertIdxj++) {
    28d0:	e2544001 	subs	r4, r4, #1
    28d4:	1affffec 	bne	288c <isColliding+0x1a4>
            if(testDot < minjDot){minjDot = testDot; testjIdxMin = vertIdxj;}
            if(testDot > maxjDot){maxjDot = testDot; testjIdxMax = vertIdxj;}
        }

        // Test to see if we have found a seperating axis
        if(miniDot>=maxjDot || maxiDot<=minjDot) {hasCollided = false; break;}
    28d8:	e1a00008 	mov	r0, r8
    28dc:	e1a01007 	mov	r1, r7
    28e0:	eb001d80 	bl	9ee8 <__aeabi_fcmple>
    28e4:	e3500000 	cmp	r0, #0
    28e8:	1a000004 	bne	2900 <isColliding+0x218>
    28ec:	e1a00009 	mov	r0, r9
    28f0:	e1a0100a 	mov	r1, r10
    28f4:	eb001d7b 	bl	9ee8 <__aeabi_fcmple>
    28f8:	e3500000 	cmp	r0, #0
    28fc:	0a000001 	beq	2908 <isColliding+0x220>
    2900:	e3a00000 	mov	r0, #0
    2904:	ea000003 	b	2918 <isColliding+0x230>
// Returns true if bodies I 
bool isColliding(int i, int j){
    bool hasCollided = true;
    float dx, dy, miniDot, minjDot, maxiDot, maxjDot;
    // Loop over edge normals of both shapes.
    for(int vertIdx = 0; vertIdx < (VERTICIES_PER_BODY<<1); vertIdx++) {
    2908:	e28bb001 	add	r11, r11, #1
    290c:	e35b0008 	cmp	r11, #8
    2910:	1affff8a 	bne	2740 <isColliding+0x58>

} 

// Returns true if bodies I 
bool isColliding(int i, int j){
    bool hasCollided = true;
    2914:	e3a00001 	mov	r0, #1
        // Test to see if we have found a seperating axis
        if(miniDot>=maxjDot || maxiDot<=minjDot) {hasCollided = false; break;}
        
    }
    return hasCollided;
}
    2918:	e28dd02c 	add	sp, sp, #44	; 0x2c
    291c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00002920 <checkSATInterBodyCollision>:
// Check if rigid body I has coillided with any rigid body j
// Credit to the SAT. (Seperating Axis Theorem).
void checkSATInterBodyCollision(int i){
    2920:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2924:	e24dd084 	sub	sp, sp, #132	; 0x84
    2928:	e58d0034 	str	r0, [sp, #52]	; 0x34
    float maxjDot, minjDot;

    int forceIndex = VERTICIES_PER_BODY - 1;
    bool neverCollided = true;

    for(int j = 0; j < NUM_BODIES; j++){
    292c:	e3a00000 	mov	r0, #0
    2930:	e58d0014 	str	r0, [sp, #20]
    float dy, dx;
    float maxiDot, miniDot;
    float maxjDot, minjDot;

    int forceIndex = VERTICIES_PER_BODY - 1;
    bool neverCollided = true;
    2934:	e3a01001 	mov	r1, #1
    2938:	e58d103c 	str	r1, [sp, #60]	; 0x3c
            int startIdxi = (vertIdx % 4)? (vertIdx % 4)-1 : VERTICIES_PER_BODY - 1;
            int endIdxi = (vertIdx % 4);
            
            // dx and dy here define our current edge on either i or j (and the vector parallel to it).
            if(vertIdx < VERTICIES_PER_BODY){
                dx = allBodies[i].pxs[endIdxi] - allBodies[i].pxs[startIdxi];
    293c:	e59d2034 	ldr	r2, [sp, #52]	; 0x34
    2940:	e0622282 	rsb	r2, r2, r2, lsl #5
    2944:	e58d202c 	str	r2, [sp, #44]	; 0x2c
    }
    return hasCollided;
}
// Check if rigid body I has coillided with any rigid body j
// Credit to the SAT. (Seperating Axis Theorem).
void checkSATInterBodyCollision(int i){
    2948:	e1a03202 	lsl	r3, r2, #4
    294c:	e283301c 	add	r3, r3, #28
    2950:	e58d3038 	str	r3, [sp, #56]	; 0x38
    2954:	e59d3014 	ldr	r3, [sp, #20]
    2958:	e2833004 	add	r3, r3, #4
    295c:	e58d3030 	str	r3, [sp, #48]	; 0x30
    bool neverCollided = true;

    for(int j = 0; j < NUM_BODIES; j++){

        forceIndex += 1;
        if (j==i) continue;
    2960:	e59d0014 	ldr	r0, [sp, #20]
    2964:	e59d1034 	ldr	r1, [sp, #52]	; 0x34
    2968:	e1500001 	cmp	r0, r1
    296c:	0a00035a 	beq	36dc <checkSATInterBodyCollision+0xdbc>

        // if (bookMarkedCollisions[i][j]) continue;
        // Hold the minimum found sep value between bodies i and j.
        float minSep = 1.0e38;
        int testiIdxMin, testjIdxMin, testiIdxMax, testjIdxMax;
        int minSepEdgeBodyIdx = 0;
    2970:	e3a03000 	mov	r3, #0
    2974:	e58d3048 	str	r3, [sp, #72]	; 0x48
        int minSepVertBodyIdx = 0;
    2978:	e58d304c 	str	r3, [sp, #76]	; 0x4c
        Vector2D minEdgeResponsible, normMinEdgeResponsible;

        bool hasCollided = true;

        // Loop over edge normals of both shapes.
        for(int vertIdx = 0; vertIdx < (VERTICIES_PER_BODY<<1); vertIdx++) {
    297c:	e1a0b003 	mov	r11, r3
        if (j==i) continue;
        // if (j==currentMouseInteractionObj) continue;

        // if (bookMarkedCollisions[i][j]) continue;
        // Hold the minimum found sep value between bodies i and j.
        float minSep = 1.0e38;
    2980:	e3072699 	movw	r2, #30361	; 0x7699
    2984:	e3472e96 	movt	r2, #32406	; 0x7e96
    2988:	e58d2018 	str	r2, [sp, #24]
        bool hasCollided = true;

        // Loop over edge normals of both shapes.
        for(int vertIdx = 0; vertIdx < (VERTICIES_PER_BODY<<1); vertIdx++) {
            
            int startIdxi = (vertIdx % 4)? (vertIdx % 4)-1 : VERTICIES_PER_BODY - 1;
    298c:	e3a04003 	mov	r4, #3
            int endIdxi = (vertIdx % 4);
            
            // dx and dy here define our current edge on either i or j (and the vector parallel to it).
            if(vertIdx < VERTICIES_PER_BODY){
                dx = allBodies[i].pxs[endIdxi] - allBodies[i].pxs[startIdxi];
    2990:	e3093424 	movw	r3, #37924	; 0x9424
    2994:	e3403010 	movt	r3, #16
    2998:	e58d3008 	str	r3, [sp, #8]
                dy = allBodies[i].pys[endIdxi] - allBodies[i].pys[startIdxi];
            } else {
                dx = allBodies[j].pxs[endIdxi] - allBodies[j].pxs[startIdxi];
    299c:	e0600280 	rsb	r0, r0, r0, lsl #5
    29a0:	e58d0020 	str	r0, [sp, #32]
    }
    return hasCollided;
}
// Check if rigid body I has coillided with any rigid body j
// Credit to the SAT. (Seperating Axis Theorem).
void checkSATInterBodyCollision(int i){
    29a4:	e2433fc1 	sub	r3, r3, #772	; 0x304
    29a8:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
    29ac:	e0831001 	add	r1, r3, r1
    29b0:	e58d1024 	str	r1, [sp, #36]	; 0x24
    29b4:	e0833200 	add	r3, r3, r0, lsl #4
    29b8:	e283301c 	add	r3, r3, #28
    29bc:	e58d3028 	str	r3, [sp, #40]	; 0x28
    29c0:	ea000007 	b	29e4 <checkSATInterBodyCollision+0xc4>
        bool hasCollided = true;

        // Loop over edge normals of both shapes.
        for(int vertIdx = 0; vertIdx < (VERTICIES_PER_BODY<<1); vertIdx++) {
            
            int startIdxi = (vertIdx % 4)? (vertIdx % 4)-1 : VERTICIES_PER_BODY - 1;
    29c4:	e31b0003 	tst	r11, #3
    29c8:	11a03fcb 	asrne	r3, r11, #31
    29cc:	11a03f23 	lsrne	r3, r3, #30
    29d0:	108b4003 	addne	r4, r11, r3
    29d4:	12044003 	andne	r4, r4, #3
    29d8:	10634004 	rsbne	r4, r3, r4
    29dc:	12444001 	subne	r4, r4, #1
    29e0:	03a04003 	moveq	r4, #3
            int endIdxi = (vertIdx % 4);
    29e4:	e1a03fcb 	asr	r3, r11, #31
    29e8:	e1a03f23 	lsr	r3, r3, #30
    29ec:	e08b2003 	add	r2, r11, r3
    29f0:	e2022003 	and	r2, r2, #3
    29f4:	e0633002 	rsb	r3, r3, r2
            
            // dx and dy here define our current edge on either i or j (and the vector parallel to it).
            if(vertIdx < VERTICIES_PER_BODY){
    29f8:	e35b0003 	cmp	r11, #3
                dx = allBodies[i].pxs[endIdxi] - allBodies[i].pxs[startIdxi];
    29fc:	d59d202c 	ldrle	r2, [sp, #44]	; 0x2c
    2a00:	d0835102 	addle	r5, r3, r2, lsl #2
    2a04:	d59d3008 	ldrle	r3, [sp, #8]
    2a08:	d0832105 	addle	r2, r3, r5, lsl #2
    2a0c:	d59d002c 	ldrle	r0, [sp, #44]	; 0x2c
                dy = allBodies[i].pys[endIdxi] - allBodies[i].pys[startIdxi];
            } else {
                dx = allBodies[j].pxs[endIdxi] - allBodies[j].pxs[startIdxi];
    2a10:	c59d2020 	ldrgt	r2, [sp, #32]
    2a14:	c0835102 	addgt	r5, r3, r2, lsl #2
    2a18:	c59d3008 	ldrgt	r3, [sp, #8]
    2a1c:	c0832105 	addgt	r2, r3, r5, lsl #2
    2a20:	c59d0020 	ldrgt	r0, [sp, #32]
    2a24:	e0844100 	add	r4, r4, r0, lsl #2
    2a28:	e0833104 	add	r3, r3, r4, lsl #2
    2a2c:	e51202e4 	ldr	r0, [r2, #-740]	; 0xfffffd1c
    2a30:	e51312e4 	ldr	r1, [r3, #-740]	; 0xfffffd1c
    2a34:	eb001b91 	bl	9880 <__aeabi_fsub>
    2a38:	e58d000c 	str	r0, [sp, #12]
                dy = allBodies[j].pys[endIdxi] - allBodies[j].pys[startIdxi];
    2a3c:	e59d1008 	ldr	r1, [sp, #8]
    2a40:	e0815105 	add	r5, r1, r5, lsl #2
    2a44:	e0814104 	add	r4, r1, r4, lsl #2
    2a48:	e51502d4 	ldr	r0, [r5, #-724]	; 0xfffffd2c
    2a4c:	e51412d4 	ldr	r1, [r4, #-724]	; 0xfffffd2c
    2a50:	eb001b8a 	bl	9880 <__aeabi_fsub>
    2a54:	e58d0000 	str	r0, [sp]
            }

            Vector2D normalVec, cVec;
            float testDot;
            normalVec.x = -dy;
    2a58:	e59d2000 	ldr	r2, [sp]
    2a5c:	e2822102 	add	r2, r2, #-2147483648	; 0x80000000
    2a60:	e58d2010 	str	r2, [sp, #16]
    2a64:	e59d3010 	ldr	r3, [sp, #16]
    2a68:	e58d3070 	str	r3, [sp, #112]	; 0x70
            normalVec.y = dx;
    2a6c:	e59d000c 	ldr	r0, [sp, #12]
    2a70:	e58d0074 	str	r0, [sp, #116]	; 0x74
    }
    return hasCollided;
}
// Check if rigid body I has coillided with any rigid body j
// Credit to the SAT. (Seperating Axis Theorem).
void checkSATInterBodyCollision(int i){
    2a74:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
    2a78:	e3a04004 	mov	r4, #4
            Vector2D normalVec, cVec;
            float testDot;
            normalVec.x = -dy;
            normalVec.y = dx;

            miniDot = 1.0e38;
    2a7c:	e3077699 	movw	r7, #30361	; 0x7699
    2a80:	e3477e96 	movt	r7, #32406	; 0x7e96
            minjDot = 1.0e38;
            maxiDot = -1.0e38;
    2a84:	e3079699 	movw	r9, #30361	; 0x7699
    2a88:	e34f9e96 	movt	r9, #65174	; 0xfe96
            maxjDot = -1.0e38;

            for(int vertIdxi = 0; vertIdxi < VERTICIES_PER_BODY; vertIdxi++) {
                cVec.x = allBodies[i].pxs[vertIdxi];
    2a8c:	e5b53004 	ldr	r3, [r5, #4]!
    2a90:	e58d3078 	str	r3, [sp, #120]	; 0x78
                cVec.y = allBodies[i].pys[vertIdxi];
    2a94:	e5953010 	ldr	r3, [r5, #16]
    2a98:	e58d307c 	str	r3, [sp, #124]	; 0x7c
                testDot = dotProd2D(&normalVec, &cVec);
    2a9c:	e28d0070 	add	r0, sp, #112	; 0x70
    2aa0:	e28d1078 	add	r1, sp, #120	; 0x78
    2aa4:	ebfffe0c 	bl	22dc <dotProd2D>
    2aa8:	e1a06000 	mov	r6, r0
                if(testDot < miniDot){miniDot = testDot; testiIdxMin = vertIdxi;}
    2aac:	e1a01007 	mov	r1, r7
    2ab0:	eb001d06 	bl	9ed0 <__aeabi_fcmplt>
    2ab4:	e3500000 	cmp	r0, #0
    2ab8:	11a07006 	movne	r7, r6
                if(testDot > maxiDot){maxiDot = testDot; testiIdxMax = vertIdxi;}
    2abc:	e1a00006 	mov	r0, r6
    2ac0:	e1a01009 	mov	r1, r9
    2ac4:	eb001d13 	bl	9f18 <__aeabi_fcmpgt>
    2ac8:	e3500000 	cmp	r0, #0
    2acc:	11a09006 	movne	r9, r6
            miniDot = 1.0e38;
            minjDot = 1.0e38;
            maxiDot = -1.0e38;
            maxjDot = -1.0e38;

            for(int vertIdxi = 0; vertIdxi < VERTICIES_PER_BODY; vertIdxi++) {
    2ad0:	e2544001 	subs	r4, r4, #1
    2ad4:	1affffec 	bne	2a8c <checkSATInterBodyCollision+0x16c>
    }
    return hasCollided;
}
// Check if rigid body I has coillided with any rigid body j
// Credit to the SAT. (Seperating Axis Theorem).
void checkSATInterBodyCollision(int i){
    2ad8:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
    2adc:	e3a04004 	mov	r4, #4
    2ae0:	e307a699 	movw	r10, #30361	; 0x7699
    2ae4:	e347ae96 	movt	r10, #32406	; 0x7e96
    2ae8:	e3078699 	movw	r8, #30361	; 0x7699
    2aec:	e34f8e96 	movt	r8, #65174	; 0xfe96
                testDot = dotProd2D(&normalVec, &cVec);
                if(testDot < miniDot){miniDot = testDot; testiIdxMin = vertIdxi;}
                if(testDot > maxiDot){maxiDot = testDot; testiIdxMax = vertIdxi;}
            }
            for(int vertIdxj = 0; vertIdxj < VERTICIES_PER_BODY; vertIdxj++) {
                cVec.x = allBodies[j].pxs[vertIdxj];
    2af0:	e5b53004 	ldr	r3, [r5, #4]!
    2af4:	e58d3078 	str	r3, [sp, #120]	; 0x78
                cVec.y = allBodies[j].pys[vertIdxj];
    2af8:	e5953010 	ldr	r3, [r5, #16]
    2afc:	e58d307c 	str	r3, [sp, #124]	; 0x7c
                testDot = dotProd2D(&normalVec, &cVec);
    2b00:	e28d0070 	add	r0, sp, #112	; 0x70
    2b04:	e28d1078 	add	r1, sp, #120	; 0x78
    2b08:	ebfffdf3 	bl	22dc <dotProd2D>
    2b0c:	e1a06000 	mov	r6, r0
                if(testDot < minjDot){minjDot = testDot; testjIdxMin = vertIdxj;}
    2b10:	e1a0100a 	mov	r1, r10
    2b14:	eb001ced 	bl	9ed0 <__aeabi_fcmplt>
    2b18:	e3500000 	cmp	r0, #0
    2b1c:	11a0a006 	movne	r10, r6
                if(testDot > maxjDot){maxjDot = testDot; testjIdxMax = vertIdxj;}
    2b20:	e1a00006 	mov	r0, r6
    2b24:	e1a01008 	mov	r1, r8
    2b28:	eb001cfa 	bl	9f18 <__aeabi_fcmpgt>
    2b2c:	e3500000 	cmp	r0, #0
    2b30:	11a08006 	movne	r8, r6
                cVec.y = allBodies[i].pys[vertIdxi];
                testDot = dotProd2D(&normalVec, &cVec);
                if(testDot < miniDot){miniDot = testDot; testiIdxMin = vertIdxi;}
                if(testDot > maxiDot){maxiDot = testDot; testiIdxMax = vertIdxi;}
            }
            for(int vertIdxj = 0; vertIdxj < VERTICIES_PER_BODY; vertIdxj++) {
    2b34:	e2544001 	subs	r4, r4, #1
    2b38:	1affffec 	bne	2af0 <checkSATInterBodyCollision+0x1d0>
                if(testDot < minjDot){minjDot = testDot; testjIdxMin = vertIdxj;}
                if(testDot > maxjDot){maxjDot = testDot; testjIdxMax = vertIdxj;}
            }

            // Test to see if we have found a seperating axis
            if(miniDot>=maxjDot || maxiDot<=minjDot) {hasCollided = false; break;}
    2b3c:	e1a00008 	mov	r0, r8
    2b40:	e1a01007 	mov	r1, r7
    2b44:	eb001ce7 	bl	9ee8 <__aeabi_fcmple>
    2b48:	e3500000 	cmp	r0, #0
    2b4c:	1a0002e2 	bne	36dc <checkSATInterBodyCollision+0xdbc>
    2b50:	e1a00009 	mov	r0, r9
    2b54:	e1a0100a 	mov	r1, r10
    2b58:	eb001ce2 	bl	9ee8 <__aeabi_fcmple>
    2b5c:	e3500000 	cmp	r0, #0
    2b60:	1a0002dd 	bne	36dc <checkSATInterBodyCollision+0xdbc>

            // If we are still here then we have not found the seperating axis and can still collide.
            float seperation = -floatMin(maxiDot-minjDot, maxjDot-miniDot);
    2b64:	e1a00009 	mov	r0, r9
    2b68:	e1a0100a 	mov	r1, r10
    2b6c:	eb001b43 	bl	9880 <__aeabi_fsub>
    2b70:	e1a04000 	mov	r4, r0
    2b74:	e1a00008 	mov	r0, r8
    2b78:	e1a01007 	mov	r1, r7
    2b7c:	eb001b3f 	bl	9880 <__aeabi_fsub>
    2b80:	e1a01000 	mov	r1, r0
    2b84:	e1a00004 	mov	r0, r4
    2b88:	ebfffdef 	bl	234c <floatMin>
    2b8c:	e2804102 	add	r4, r0, #-2147483648	; 0x80000000
            // printf("SEP: %f\n\n", seperation);
            if (seperation <= minSep) {
    2b90:	e59d0018 	ldr	r0, [sp, #24]
    2b94:	e1a01004 	mov	r1, r4
    2b98:	eb001cd8 	bl	9f00 <__aeabi_fcmpge>
    2b9c:	e3500000 	cmp	r0, #0
    2ba0:	0a000015 	beq	2bfc <checkSATInterBodyCollision+0x2dc>
                // printf("we haere\n");
                minSep = seperation;
                minEdgeResponsible.x = dx;
                minEdgeResponsible.y = dy;
                float magPos = sqrt(dx*dx+dy*dy);
    2ba4:	e59d000c 	ldr	r0, [sp, #12]
    2ba8:	e1a01000 	mov	r1, r0
    2bac:	eb001bdc 	bl	9b24 <__aeabi_fmul>
    2bb0:	e1a05000 	mov	r5, r0
    2bb4:	e59d0000 	ldr	r0, [sp]
    2bb8:	e1a01000 	mov	r1, r0
    2bbc:	eb001bd8 	bl	9b24 <__aeabi_fmul>
    2bc0:	e1a01000 	mov	r1, r0
    2bc4:	e1a00005 	mov	r0, r5
    2bc8:	eb001b2d 	bl	9884 <__addsf3>
    2bcc:	eb001945 	bl	90e8 <__aeabi_f2d>
    2bd0:	eb000ade 	bl	5750 <sqrt>
                normMinEdgeResponsible.x = -dx;
    2bd4:	e59d100c 	ldr	r1, [sp, #12]
    2bd8:	e2813102 	add	r3, r1, #-2147483648	; 0x80000000
    2bdc:	e58d3050 	str	r3, [sp, #80]	; 0x50
                normMinEdgeResponsible.y = -dy;
    2be0:	e59d2010 	ldr	r2, [sp, #16]
    2be4:	e58d2054 	str	r2, [sp, #84]	; 0x54

                minSepEdgeBodyIdx = vertIdx < VERTICIES_PER_BODY ? i : j;
    2be8:	e35b0003 	cmp	r11, #3
    2bec:	da0002ce 	ble	372c <checkSATInterBodyCollision+0xe0c>
    2bf0:	ea0002c9 	b	371c <checkSATInterBodyCollision+0xdfc>
                minSepVertBodyIdx = minSepEdgeBodyIdx == i ? j : i;
    2bf4:	e58d304c 	str	r3, [sp, #76]	; 0x4c
            // If we are still here then we have not found the seperating axis and can still collide.
            float seperation = -floatMin(maxiDot-minjDot, maxjDot-miniDot);
            // printf("SEP: %f\n\n", seperation);
            if (seperation <= minSep) {
                // printf("we haere\n");
                minSep = seperation;
    2bf8:	e58d4018 	str	r4, [sp, #24]
        Vector2D minEdgeResponsible, normMinEdgeResponsible;

        bool hasCollided = true;

        // Loop over edge normals of both shapes.
        for(int vertIdx = 0; vertIdx < (VERTICIES_PER_BODY<<1); vertIdx++) {
    2bfc:	e28bb001 	add	r11, r11, #1
    2c00:	e35b0008 	cmp	r11, #8
    2c04:	1affff6e 	bne	29c4 <checkSATInterBodyCollision+0xa4>
    2c08:	e3a05000 	mov	r5, #0
    2c0c:	e3e04000 	mvn	r4, #0
            neverCollided = false;
            // Find the vert of the so-called vert body that was responsible for the collision.
            int vertInsideCount = 0;
            minSepBodyVertIdx = -1;
            for(int k = 0; k<VERTICIES_PER_BODY; k++){
                if(pointIsInsideRB(allBodies[minSepVertBodyIdx].pxs[k], allBodies[minSepVertBodyIdx].pys[k], minSepEdgeBodyIdx)) {
    2c10:	e3096424 	movw	r6, #37924	; 0x9424
    2c14:	e3406010 	movt	r6, #16
    2c18:	e59d304c 	ldr	r3, [sp, #76]	; 0x4c
    2c1c:	e0633283 	rsb	r3, r3, r3, lsl #5
    2c20:	e0853103 	add	r3, r5, r3, lsl #2
    2c24:	e0862103 	add	r2, r6, r3, lsl #2
    2c28:	e51202e4 	ldr	r0, [r2, #-740]	; 0xfffffd1c
    2c2c:	e51212d4 	ldr	r1, [r2, #-724]	; 0xfffffd2c
    2c30:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
    2c34:	ebfffe51 	bl	2580 <pointIsInsideRB>
    2c38:	e3500000 	cmp	r0, #0
    2c3c:	11a04005 	movne	r4, r5

            neverCollided = false;
            // Find the vert of the so-called vert body that was responsible for the collision.
            int vertInsideCount = 0;
            minSepBodyVertIdx = -1;
            for(int k = 0; k<VERTICIES_PER_BODY; k++){
    2c40:	e2855001 	add	r5, r5, #1
    2c44:	e3550004 	cmp	r5, #4
    2c48:	1afffff2 	bne	2c18 <checkSATInterBodyCollision+0x2f8>
    2c4c:	e1a05004 	mov	r5, r4
                    vertInsideCount++;
                    //draw2b2(allBodies[minSepVertBodyIdx].xs[k], allBodies[minSepVertBodyIdx].ys[k], WATER_COLOUR);
                    //break;
                } 
            }
            if (minSepBodyVertIdx == -1) {
    2c50:	e3740001 	cmn	r4, #1
    2c54:	1a000015 	bne	2cb0 <checkSATInterBodyCollision+0x390>
                vertInsideCount = 0;
                swap(&minSepEdgeBodyIdx, &minSepVertBodyIdx);
    2c58:	e28d0048 	add	r0, sp, #72	; 0x48
    2c5c:	e28d104c 	add	r1, sp, #76	; 0x4c
    2c60:	ebfff5d3 	bl	3b4 <swap>
                for(int k = 0; k<VERTICIES_PER_BODY; k++){
    2c64:	e3a04000 	mov	r4, #0
                    if(pointIsInsideRB(allBodies[minSepVertBodyIdx].pxs[k], allBodies[minSepVertBodyIdx].pys[k], minSepEdgeBodyIdx)) {
    2c68:	e3096424 	movw	r6, #37924	; 0x9424
    2c6c:	e3406010 	movt	r6, #16
    2c70:	e59d304c 	ldr	r3, [sp, #76]	; 0x4c
    2c74:	e0633283 	rsb	r3, r3, r3, lsl #5
    2c78:	e0843103 	add	r3, r4, r3, lsl #2
    2c7c:	e0862103 	add	r2, r6, r3, lsl #2
    2c80:	e51202e4 	ldr	r0, [r2, #-740]	; 0xfffffd1c
    2c84:	e51212d4 	ldr	r1, [r2, #-724]	; 0xfffffd2c
    2c88:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
    2c8c:	ebfffe3b 	bl	2580 <pointIsInsideRB>
    2c90:	e3500000 	cmp	r0, #0
    2c94:	11a05004 	movne	r5, r4
                } 
            }
            if (minSepBodyVertIdx == -1) {
                vertInsideCount = 0;
                swap(&minSepEdgeBodyIdx, &minSepVertBodyIdx);
                for(int k = 0; k<VERTICIES_PER_BODY; k++){
    2c98:	e2844001 	add	r4, r4, #1
    2c9c:	e3540004 	cmp	r4, #4
    2ca0:	1afffff2 	bne	2c70 <checkSATInterBodyCollision+0x350>
                        vertInsideCount++;
                        //draw2b2(allBodies[minSepVertBodyIdx].xs[k], allBodies[minSepVertBodyIdx].ys[k], WATER_COLOUR);
                        //break;
                    } 
                }
                if (minSepBodyVertIdx == -1) minSepBodyVertIdx = 0;
    2ca4:	e3750001 	cmn	r5, #1
    2ca8:	11a04005 	movne	r4, r5
    2cac:	03a04000 	moveq	r4, #0
            }
            
            Vector2D normedA;
            if(!bookMarkedCollisions[minSepVertBodyIdx][minSepEdgeBodyIdx] && !bookMarkedCollisions[minSepEdgeBodyIdx][minSepVertBodyIdx]) {
    2cb0:	e59d704c 	ldr	r7, [sp, #76]	; 0x4c
    2cb4:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
    2cb8:	e30b341c 	movw	r3, #46108	; 0xb41c
    2cbc:	e3403010 	movt	r3, #16
    2cc0:	e0871087 	add	r1, r7, r7, lsl #1
    2cc4:	e0833101 	add	r3, r3, r1, lsl #2
    2cc8:	e0833002 	add	r3, r3, r2
    2ccc:	e5533bbc 	ldrb	r3, [r3, #-3004]	; 0xfffff444
    2cd0:	e3530000 	cmp	r3, #0
    2cd4:	1a00003d 	bne	2dd0 <checkSATInterBodyCollision+0x4b0>
    2cd8:	e30b341c 	movw	r3, #46108	; 0xb41c
    2cdc:	e3403010 	movt	r3, #16
    2ce0:	e0822082 	add	r2, r2, r2, lsl #1
    2ce4:	e0833102 	add	r3, r3, r2, lsl #2
    2ce8:	e0833007 	add	r3, r3, r7
    2cec:	e5533bbc 	ldrb	r3, [r3, #-3004]	; 0xfffff444
    2cf0:	e3530000 	cmp	r3, #0
    2cf4:	1a000035 	bne	2dd0 <checkSATInterBodyCollision+0x4b0>
                normedA = constrVec(allBodies[minSepVertBodyIdx].pxs[minSepBodyVertIdx], allBodies[minSepVertBodyIdx].pys[minSepBodyVertIdx]);
    2cf8:	e28da058 	add	r10, sp, #88	; 0x58
    2cfc:	e3095424 	movw	r5, #37924	; 0x9424
    2d00:	e3405010 	movt	r5, #16
    2d04:	e1a08287 	lsl	r8, r7, #5
    2d08:	e0673008 	rsb	r3, r7, r8
    2d0c:	e0843103 	add	r3, r4, r3, lsl #2
    2d10:	e0852103 	add	r2, r5, r3, lsl #2
    2d14:	e1a0000a 	mov	r0, r10
    2d18:	e51212e4 	ldr	r1, [r2, #-740]	; 0xfffffd1c
    2d1c:	e51222d4 	ldr	r2, [r2, #-724]	; 0xfffffd2c
    2d20:	ebfffdd6 	bl	2480 <constrVec>
                Vector2D normedB;

                normedB = subVec2(&normedA, &allBodies[minSepVertBodyIdx].lastPointofCollision);
    2d24:	e28d9040 	add	r9, sp, #64	; 0x40
    2d28:	e245bfc1 	sub	r11, r5, #772	; 0x304
    2d2c:	e0672008 	rsb	r2, r7, r8
    2d30:	e08b2202 	add	r2, r11, r2, lsl #4
    2d34:	e1a00009 	mov	r0, r9
    2d38:	e1a0100a 	mov	r1, r10
    2d3c:	e282209c 	add	r2, r2, #156	; 0x9c
    2d40:	ebfffdb0 	bl	2408 <subVec2>
    2d44:	e28d6078 	add	r6, sp, #120	; 0x78
    2d48:	e8990003 	ldm	r9, {r0, r1}
    2d4c:	e8860003 	stm	r6, {r0, r1}
                allBodies[minSepVertBodyIdx].lastPositionDelta = getMag(&normedB);
    2d50:	e1a00006 	mov	r0, r6
    2d54:	ebfffd8c 	bl	238c <getMag>
    2d58:	e0673008 	rsb	r3, r7, r8
    2d5c:	e0853203 	add	r3, r5, r3, lsl #4
    2d60:	e5030260 	str	r0, [r3, #-608]	; 0xfffffda0
                allBodies[minSepVertBodyIdx].lastPointofCollision = normedA;
    2d64:	e59d304c 	ldr	r3, [sp, #76]	; 0x4c
    2d68:	e0633283 	rsb	r3, r3, r3, lsl #5
    2d6c:	e0853203 	add	r3, r5, r3, lsl #4
    2d70:	e2433f9a 	sub	r3, r3, #616	; 0x268
    2d74:	e89a0003 	ldm	r10, {r0, r1}
    2d78:	e8830003 	stm	r3, {r0, r1}

                normedB = subVec2(&normedA, &allBodies[minSepEdgeBodyIdx].lastPointofCollision);
    2d7c:	e59d7048 	ldr	r7, [sp, #72]	; 0x48
    2d80:	e1a08287 	lsl	r8, r7, #5
    2d84:	e0672008 	rsb	r2, r7, r8
    2d88:	e08b2202 	add	r2, r11, r2, lsl #4
    2d8c:	e1a00009 	mov	r0, r9
    2d90:	e1a0100a 	mov	r1, r10
    2d94:	e282209c 	add	r2, r2, #156	; 0x9c
    2d98:	ebfffd9a 	bl	2408 <subVec2>
    2d9c:	e8990003 	ldm	r9, {r0, r1}
    2da0:	e8860003 	stm	r6, {r0, r1}
                allBodies[minSepEdgeBodyIdx].lastPositionDelta = getMag(&normedB);
    2da4:	e1a00006 	mov	r0, r6
    2da8:	ebfffd77 	bl	238c <getMag>
    2dac:	e0673008 	rsb	r3, r7, r8
    2db0:	e0853203 	add	r3, r5, r3, lsl #4
    2db4:	e5030260 	str	r0, [r3, #-608]	; 0xfffffda0
                allBodies[minSepEdgeBodyIdx].lastPointofCollision = normedA;
    2db8:	e59d3048 	ldr	r3, [sp, #72]	; 0x48
    2dbc:	e0633283 	rsb	r3, r3, r3, lsl #5
    2dc0:	e0853203 	add	r3, r5, r3, lsl #4
    2dc4:	e2433f9a 	sub	r3, r3, #616	; 0x268
    2dc8:	e89a0003 	ldm	r10, {r0, r1}
    2dcc:	e8830003 	stm	r3, {r0, r1}

            }

            // Manual Positional Adjustment
            float signX = allBodies[minSepVertBodyIdx].pxs[minSepBodyVertIdx] > allBodies[minSepEdgeBodyIdx].cx ? 1 : -1;
    2dd0:	e59d604c 	ldr	r6, [sp, #76]	; 0x4c
    2dd4:	e59d5048 	ldr	r5, [sp, #72]	; 0x48
    2dd8:	e3093424 	movw	r3, #37924	; 0x9424
    2ddc:	e3403010 	movt	r3, #16
    2de0:	e0662286 	rsb	r2, r6, r6, lsl #5
    2de4:	e0842102 	add	r2, r4, r2, lsl #2
    2de8:	e0832102 	add	r2, r3, r2, lsl #2
    2dec:	e0651285 	rsb	r1, r5, r5, lsl #5
    2df0:	e0833201 	add	r3, r3, r1, lsl #4
    2df4:	e51202e4 	ldr	r0, [r2, #-740]	; 0xfffffd1c
    2df8:	e5131294 	ldr	r1, [r3, #-660]	; 0xfffffd6c
    2dfc:	eb001c45 	bl	9f18 <__aeabi_fcmpgt>
    2e00:	e3500000 	cmp	r0, #0
    2e04:	13a085fe 	movne	r8, #1065353216	; 0x3f800000
    2e08:	03a08000 	moveq	r8, #0
    2e0c:	034b8f80 	movteq	r8, #49024	; 0xbf80
            float signY = allBodies[minSepVertBodyIdx].pys[minSepBodyVertIdx] > allBodies[minSepEdgeBodyIdx].cy ? 1 : -1;
    2e10:	e3093424 	movw	r3, #37924	; 0x9424
    2e14:	e3403010 	movt	r3, #16
    2e18:	e0666286 	rsb	r6, r6, r6, lsl #5
    2e1c:	e0842106 	add	r2, r4, r6, lsl #2
    2e20:	e0832102 	add	r2, r3, r2, lsl #2
    2e24:	e0655285 	rsb	r5, r5, r5, lsl #5
    2e28:	e0833205 	add	r3, r3, r5, lsl #4
    2e2c:	e51202d4 	ldr	r0, [r2, #-724]	; 0xfffffd2c
    2e30:	e5131290 	ldr	r1, [r3, #-656]	; 0xfffffd70
    2e34:	eb001c37 	bl	9f18 <__aeabi_fcmpgt>
    2e38:	e3500000 	cmp	r0, #0
    2e3c:	13a075fe 	movne	r7, #1065353216	; 0x3f800000
    2e40:	03a07000 	moveq	r7, #0
    2e44:	034b7f80 	movteq	r7, #49024	; 0xbf80

            Vector2D unitNorm = multVec2(&normMinEdgeResponsible, (1/getMag(&normMinEdgeResponsible)));
    2e48:	e28d0050 	add	r0, sp, #80	; 0x50
    2e4c:	ebfffd4e 	bl	238c <getMag>
    2e50:	e1a01000 	mov	r1, r0
    2e54:	e3a005fe 	mov	r0, #1065353216	; 0x3f800000
    2e58:	eb001b97 	bl	9cbc <__aeabi_fdiv>
    2e5c:	e1a02000 	mov	r2, r0
    2e60:	e28d0060 	add	r0, sp, #96	; 0x60
    2e64:	e28d1050 	add	r1, sp, #80	; 0x50
    2e68:	ebfffd75 	bl	2444 <multVec2>
            dx = unitNorm.x > 0 ? unitNorm.x : -unitNorm.x;
    2e6c:	e59d6060 	ldr	r6, [sp, #96]	; 0x60
    2e70:	e1a00006 	mov	r0, r6
    2e74:	e3a01000 	mov	r1, #0
    2e78:	eb001c26 	bl	9f18 <__aeabi_fcmpgt>
    2e7c:	e3500000 	cmp	r0, #0
    2e80:	02866102 	addeq	r6, r6, #-2147483648	; 0x80000000
            dy = unitNorm.y > 0 ? unitNorm.y : -unitNorm.y;
    2e84:	e59d5064 	ldr	r5, [sp, #100]	; 0x64
    2e88:	e1a00005 	mov	r0, r5
    2e8c:	e3a01000 	mov	r1, #0
    2e90:	eb001c20 	bl	9f18 <__aeabi_fcmpgt>
    2e94:	e3500000 	cmp	r0, #0
    2e98:	02855102 	addeq	r5, r5, #-2147483648	; 0x80000000
            dx *= signX;
    2e9c:	e1a00008 	mov	r0, r8
    2ea0:	e1a01006 	mov	r1, r6
    2ea4:	eb001b1e 	bl	9b24 <__aeabi_fmul>
    2ea8:	e1a09000 	mov	r9, r0
            dy *= signY;
    2eac:	e1a00007 	mov	r0, r7
    2eb0:	e1a01005 	mov	r1, r5
    2eb4:	eb001b1a 	bl	9b24 <__aeabi_fmul>
    2eb8:	e1a0a000 	mov	r10, r0
            //     allBodies[minSepVertBodyIdx].cy,
            //     minSepEdgeBodyIdx)) {
            while (isColliding(minSepVertBodyIdx, minSepEdgeBodyIdx)){
                // draw2b2(allBodies[minSepVertBodyIdx].xs[minSepBodyVertIdx], allBodies[minSepVertBodyIdx].ys[minSepBodyVertIdx], WATER_COLOUR);
                
                allBodies[minSepVertBodyIdx].cx += dx;
    2ebc:	e3098424 	movw	r8, #37924	; 0x9424
    2ec0:	e3408010 	movt	r8, #16
            //     minSepEdgeBodyIdx
            // ) || pointIsInsideRB(
            //     allBodies[minSepVertBodyIdx].cx,
            //     allBodies[minSepVertBodyIdx].cy,
            //     minSepEdgeBodyIdx)) {
            while (isColliding(minSepVertBodyIdx, minSepEdgeBodyIdx)){
    2ec4:	ea000017 	b	2f28 <checkSATInterBodyCollision+0x608>
                // draw2b2(allBodies[minSepVertBodyIdx].xs[minSepBodyVertIdx], allBodies[minSepVertBodyIdx].ys[minSepBodyVertIdx], WATER_COLOUR);
                
                allBodies[minSepVertBodyIdx].cx += dx;
    2ec8:	e066b286 	rsb	r11, r6, r6, lsl #5
    2ecc:	e088b20b 	add	r11, r8, r11, lsl #4
    2ed0:	e51b0294 	ldr	r0, [r11, #-660]	; 0xfffffd6c
    2ed4:	e1a01009 	mov	r1, r9
    2ed8:	eb001a69 	bl	9884 <__addsf3>
    2edc:	e50b0294 	str	r0, [r11, #-660]	; 0xfffffd6c
                allBodies[minSepVertBodyIdx].cy += dy;
    2ee0:	e51b0290 	ldr	r0, [r11, #-656]	; 0xfffffd70
    2ee4:	e1a0100a 	mov	r1, r10
    2ee8:	eb001a65 	bl	9884 <__addsf3>
    2eec:	e50b0290 	str	r0, [r11, #-656]	; 0xfffffd70

                allBodies[minSepEdgeBodyIdx].cx -= dx;
    2ef0:	e0677287 	rsb	r7, r7, r7, lsl #5
    2ef4:	e0885207 	add	r5, r8, r7, lsl #4
    2ef8:	e5150294 	ldr	r0, [r5, #-660]	; 0xfffffd6c
    2efc:	e1a01009 	mov	r1, r9
    2f00:	eb001a5e 	bl	9880 <__aeabi_fsub>
    2f04:	e5050294 	str	r0, [r5, #-660]	; 0xfffffd6c
                allBodies[minSepEdgeBodyIdx].cy -= dy;
    2f08:	e5150290 	ldr	r0, [r5, #-656]	; 0xfffffd70
    2f0c:	e1a0100a 	mov	r1, r10
    2f10:	eb001a5a 	bl	9880 <__aeabi_fsub>
    2f14:	e5050290 	str	r0, [r5, #-656]	; 0xfffffd70

                resetBodyFromCenter(minSepVertBodyIdx);
    2f18:	e1a00006 	mov	r0, r6
    2f1c:	ebfffd5a 	bl	248c <resetBodyFromCenter>
                resetBodyFromCenter(minSepEdgeBodyIdx);
    2f20:	e59d0048 	ldr	r0, [sp, #72]	; 0x48
    2f24:	ebfffd58 	bl	248c <resetBodyFromCenter>
            //     minSepEdgeBodyIdx
            // ) || pointIsInsideRB(
            //     allBodies[minSepVertBodyIdx].cx,
            //     allBodies[minSepVertBodyIdx].cy,
            //     minSepEdgeBodyIdx)) {
            while (isColliding(minSepVertBodyIdx, minSepEdgeBodyIdx)){
    2f28:	e59d604c 	ldr	r6, [sp, #76]	; 0x4c
    2f2c:	e59d7048 	ldr	r7, [sp, #72]	; 0x48
    2f30:	e1a00006 	mov	r0, r6
    2f34:	e1a01007 	mov	r1, r7
    2f38:	ebfffdea 	bl	26e8 <isColliding>
    2f3c:	e3500000 	cmp	r0, #0
    2f40:	1affffe0 	bne	2ec8 <checkSATInterBodyCollision+0x5a8>
                resetBodyFromCenter(minSepEdgeBodyIdx);

            }

            // Torque handling
            unitNorm.x = dx;
    2f44:	e58d9060 	str	r9, [sp, #96]	; 0x60
            unitNorm.y = dy;
    2f48:	e58da064 	str	r10, [sp, #100]	; 0x64

            allBodies[minSepVertBodyIdx].extForces[forceIndex].isActive = true;
    2f4c:	e3095424 	movw	r5, #37924	; 0x9424
    2f50:	e3405010 	movt	r5, #16
    2f54:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
    2f58:	e1a03103 	lsl	r3, r3, #2
    2f5c:	e58d3008 	str	r3, [sp, #8]
    2f60:	e59d0030 	ldr	r0, [sp, #48]	; 0x30
    2f64:	e0833000 	add	r3, r3, r0
    2f68:	e0666286 	rsb	r6, r6, r6, lsl #5
    2f6c:	e1a06206 	lsl	r6, r6, #4
    2f70:	e0863103 	add	r3, r6, r3, lsl #2
    2f74:	e0853003 	add	r3, r5, r3
    2f78:	e3a01001 	mov	r1, #1
    2f7c:	e5431248 	strb	r1, [r3, #-584]	; 0xfffffdb8
            float magB = allBodies[minSepEdgeBodyIdx].mass * getMag(&allBodies[minSepEdgeBodyIdx].a);
    2f80:	e1a03287 	lsl	r3, r7, #5
    2f84:	e0672003 	rsb	r2, r7, r3
    2f88:	e0852202 	add	r2, r5, r2, lsl #4
    2f8c:	e5126288 	ldr	r6, [r2, #-648]	; 0xfffffd78
    2f90:	e0673003 	rsb	r3, r7, r3
    2f94:	e2452fc1 	sub	r2, r5, #772	; 0x304
    2f98:	e0820203 	add	r0, r2, r3, lsl #4
    2f9c:	e2800058 	add	r0, r0, #88	; 0x58
    2fa0:	ebfffcf9 	bl	238c <getMag>
    2fa4:	e1a01000 	mov	r1, r0
            normedA = multVec2(&unitNorm, magB);
    2fa8:	e28d3040 	add	r3, sp, #64	; 0x40
    2fac:	e58d3000 	str	r3, [sp]
            // Torque handling
            unitNorm.x = dx;
            unitNorm.y = dy;

            allBodies[minSepVertBodyIdx].extForces[forceIndex].isActive = true;
            float magB = allBodies[minSepEdgeBodyIdx].mass * getMag(&allBodies[minSepEdgeBodyIdx].a);
    2fb0:	e1a00006 	mov	r0, r6
    2fb4:	eb001ada 	bl	9b24 <__aeabi_fmul>
    2fb8:	e1a02000 	mov	r2, r0
            normedA = multVec2(&unitNorm, magB);
    2fbc:	e28d0040 	add	r0, sp, #64	; 0x40
    2fc0:	e28d1060 	add	r1, sp, #96	; 0x60
    2fc4:	ebfffd1e 	bl	2444 <multVec2>
    2fc8:	e28d6058 	add	r6, sp, #88	; 0x58
    2fcc:	e59d2000 	ldr	r2, [sp]
    2fd0:	e8920003 	ldm	r2, {r0, r1}
    2fd4:	e8860003 	stm	r6, {r0, r1}
            allBodies[minSepVertBodyIdx].extForces[forceIndex].force = normedA;
    2fd8:	e59d704c 	ldr	r7, [sp, #76]	; 0x4c
    2fdc:	e59d3008 	ldr	r3, [sp, #8]
    2fe0:	e59d0030 	ldr	r0, [sp, #48]	; 0x30
    2fe4:	e0839000 	add	r9, r3, r0
    2fe8:	e1a08287 	lsl	r8, r7, #5
    2fec:	e0673008 	rsb	r3, r7, r8
    2ff0:	e1a03203 	lsl	r3, r3, #4
    2ff4:	e0839109 	add	r9, r3, r9, lsl #2
    2ff8:	e0859009 	add	r9, r5, r9
    2ffc:	e2493e25 	sub	r3, r9, #592	; 0x250
    3000:	e8960003 	ldm	r6, {r0, r1}
    3004:	e8830003 	stm	r3, {r0, r1}
            allBodies[minSepVertBodyIdx].extForces[forceIndex].r.x = allBodies[minSepVertBodyIdx].pxs[minSepBodyVertIdx] - allBodies[minSepVertBodyIdx].cx;
    3008:	e067b008 	rsb	r11, r7, r8
    300c:	e084b10b 	add	r11, r4, r11, lsl #2
    3010:	e085310b 	add	r3, r5, r11, lsl #2
    3014:	e067a008 	rsb	r10, r7, r8
    3018:	e085a20a 	add	r10, r5, r10, lsl #4
    301c:	e51302e4 	ldr	r0, [r3, #-740]	; 0xfffffd1c
    3020:	e51a1294 	ldr	r1, [r10, #-660]	; 0xfffffd6c
    3024:	eb001a15 	bl	9880 <__aeabi_fsub>
    3028:	e5090258 	str	r0, [r9, #-600]	; 0xfffffda8
            allBodies[minSepVertBodyIdx].extForces[forceIndex].r.y = allBodies[minSepVertBodyIdx].pys[minSepBodyVertIdx] - allBodies[minSepVertBodyIdx].cy;
    302c:	e085b10b 	add	r11, r5, r11, lsl #2
    3030:	e51b02d4 	ldr	r0, [r11, #-724]	; 0xfffffd2c
    3034:	e51a1290 	ldr	r1, [r10, #-656]	; 0xfffffd70
    3038:	eb001a10 	bl	9880 <__aeabi_fsub>
    303c:	e5090254 	str	r0, [r9, #-596]	; 0xfffffdac

            allBodies[minSepEdgeBodyIdx].extForces[forceIndex].isActive = true;
    3040:	e59d3048 	ldr	r3, [sp, #72]	; 0x48
    3044:	e59d1008 	ldr	r1, [sp, #8]
    3048:	e59d0030 	ldr	r0, [sp, #48]	; 0x30
    304c:	e0812000 	add	r2, r1, r0
    3050:	e0633283 	rsb	r3, r3, r3, lsl #5
    3054:	e1a03203 	lsl	r3, r3, #4
    3058:	e0833102 	add	r3, r3, r2, lsl #2
    305c:	e0853003 	add	r3, r5, r3
    3060:	e3a01001 	mov	r1, #1
    3064:	e5431248 	strb	r1, [r3, #-584]	; 0xfffffdb8
            float magA = allBodies[minSepVertBodyIdx].mass * getMag(&allBodies[minSepVertBodyIdx].a);
    3068:	e51aa288 	ldr	r10, [r10, #-648]	; 0xfffffd78
    306c:	e0670008 	rsb	r0, r7, r8
    3070:	e2452fc1 	sub	r2, r5, #772	; 0x304
    3074:	e0820200 	add	r0, r2, r0, lsl #4
    3078:	e2800058 	add	r0, r0, #88	; 0x58
    307c:	ebfffcc2 	bl	238c <getMag>
    3080:	e1a01000 	mov	r1, r0
    3084:	e1a0000a 	mov	r0, r10
    3088:	eb001aa5 	bl	9b24 <__aeabi_fmul>
            normedA = multVec2(&unitNorm, -magA);
    308c:	e2802102 	add	r2, r0, #-2147483648	; 0x80000000
    3090:	e28d0040 	add	r0, sp, #64	; 0x40
    3094:	e28d1060 	add	r1, sp, #96	; 0x60
    3098:	ebfffce9 	bl	2444 <multVec2>
    309c:	e59d3000 	ldr	r3, [sp]
    30a0:	e8930003 	ldm	r3, {r0, r1}
    30a4:	e8860003 	stm	r6, {r0, r1}
            allBodies[minSepEdgeBodyIdx].extForces[forceIndex].force = normedA;
    30a8:	e59d7048 	ldr	r7, [sp, #72]	; 0x48
    30ac:	e59d0008 	ldr	r0, [sp, #8]
    30b0:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
    30b4:	e0808001 	add	r8, r0, r1
    30b8:	e1a09287 	lsl	r9, r7, #5
    30bc:	e0673009 	rsb	r3, r7, r9
    30c0:	e1a03203 	lsl	r3, r3, #4
    30c4:	e0838108 	add	r8, r3, r8, lsl #2
    30c8:	e0858008 	add	r8, r5, r8
    30cc:	e2483e25 	sub	r3, r8, #592	; 0x250
    30d0:	e8960003 	ldm	r6, {r0, r1}
    30d4:	e8830003 	stm	r3, {r0, r1}
            allBodies[minSepEdgeBodyIdx].extForces[forceIndex].r.x = allBodies[minSepVertBodyIdx].pxs[minSepBodyVertIdx] - allBodies[minSepEdgeBodyIdx].cx;
    30d8:	e59d604c 	ldr	r6, [sp, #76]	; 0x4c
    30dc:	e1a0a286 	lsl	r10, r6, #5
    30e0:	e066b00a 	rsb	r11, r6, r10
    30e4:	e084b10b 	add	r11, r4, r11, lsl #2
    30e8:	e085310b 	add	r3, r5, r11, lsl #2
    30ec:	e0679009 	rsb	r9, r7, r9
    30f0:	e0859209 	add	r9, r5, r9, lsl #4
    30f4:	e51302e4 	ldr	r0, [r3, #-740]	; 0xfffffd1c
    30f8:	e5191294 	ldr	r1, [r9, #-660]	; 0xfffffd6c
    30fc:	eb0019df 	bl	9880 <__aeabi_fsub>
    3100:	e5080258 	str	r0, [r8, #-600]	; 0xfffffda8
            allBodies[minSepEdgeBodyIdx].extForces[forceIndex].r.y = allBodies[minSepVertBodyIdx].pys[minSepBodyVertIdx] - allBodies[minSepEdgeBodyIdx].cy;
    3104:	e085b10b 	add	r11, r5, r11, lsl #2
    3108:	e51b02d4 	ldr	r0, [r11, #-724]	; 0xfffffd2c
    310c:	e5191290 	ldr	r1, [r9, #-656]	; 0xfffffd70
    3110:	eb0019da 	bl	9880 <__aeabi_fsub>
    3114:	e5080254 	str	r0, [r8, #-596]	; 0xfffffdac

            if(!allBodies[minSepVertBodyIdx].cLast && !allBodies[minSepEdgeBodyIdx].cLast) {
    3118:	e066a00a 	rsb	r10, r6, r10
    311c:	e085520a 	add	r5, r5, r10, lsl #4
    3120:	e555325c 	ldrb	r3, [r5, #-604]	; 0xfffffda4
    3124:	e3530000 	cmp	r3, #0
    3128:	1a000043 	bne	323c <checkSATInterBodyCollision+0x91c>
    312c:	e3093424 	movw	r3, #37924	; 0x9424
    3130:	e3403010 	movt	r3, #16
    3134:	e0672287 	rsb	r2, r7, r7, lsl #5
    3138:	e0833202 	add	r3, r3, r2, lsl #4
    313c:	e553325c 	ldrb	r3, [r3, #-604]	; 0xfffffda4
    3140:	e3530000 	cmp	r3, #0
    3144:	1a00003c 	bne	323c <checkSATInterBodyCollision+0x91c>
                allBodies[minSepVertBodyIdx].v.x *= -ELASTICITY_RB;
    3148:	e3095424 	movw	r5, #37924	; 0x9424
    314c:	e3405010 	movt	r5, #16
    3150:	e0666286 	rsb	r6, r6, r6, lsl #5
    3154:	e0856206 	add	r6, r5, r6, lsl #4
    3158:	e51602b4 	ldr	r0, [r6, #-692]	; 0xfffffd4c
    315c:	eb0017e1 	bl	90e8 <__aeabi_f2d>
    3160:	e309299a 	movw	r2, #39322	; 0x999a
    3164:	e3492999 	movt	r2, #39321	; 0x9999
    3168:	e3093999 	movw	r3, #39321	; 0x9999
    316c:	e34b3fd9 	movt	r3, #49113	; 0xbfd9
    3170:	eb001809 	bl	919c <__aeabi_dmul>
    3174:	eb001997 	bl	97d8 <__aeabi_d2f>
    3178:	e50602b4 	str	r0, [r6, #-692]	; 0xfffffd4c
                allBodies[minSepVertBodyIdx].v.y *= -ELASTICITY_RB;
    317c:	e51602b0 	ldr	r0, [r6, #-688]	; 0xfffffd50
    3180:	eb0017d8 	bl	90e8 <__aeabi_f2d>
    3184:	e309299a 	movw	r2, #39322	; 0x999a
    3188:	e3492999 	movt	r2, #39321	; 0x9999
    318c:	e3093999 	movw	r3, #39321	; 0x9999
    3190:	e34b3fd9 	movt	r3, #49113	; 0xbfd9
    3194:	eb001800 	bl	919c <__aeabi_dmul>
    3198:	eb00198e 	bl	97d8 <__aeabi_d2f>
    319c:	e50602b0 	str	r0, [r6, #-688]	; 0xfffffd50
                allBodies[minSepEdgeBodyIdx].v.x *= -ELASTICITY_RB;
    31a0:	e0677287 	rsb	r7, r7, r7, lsl #5
    31a4:	e0855207 	add	r5, r5, r7, lsl #4
    31a8:	e51502b4 	ldr	r0, [r5, #-692]	; 0xfffffd4c
    31ac:	eb0017cd 	bl	90e8 <__aeabi_f2d>
    31b0:	e309299a 	movw	r2, #39322	; 0x999a
    31b4:	e3492999 	movt	r2, #39321	; 0x9999
    31b8:	e3093999 	movw	r3, #39321	; 0x9999
    31bc:	e34b3fd9 	movt	r3, #49113	; 0xbfd9
    31c0:	eb0017f5 	bl	919c <__aeabi_dmul>
    31c4:	eb001983 	bl	97d8 <__aeabi_d2f>
    31c8:	e50502b4 	str	r0, [r5, #-692]	; 0xfffffd4c
                allBodies[minSepEdgeBodyIdx].v.y *= -ELASTICITY_RB;
    31cc:	e51502b0 	ldr	r0, [r5, #-688]	; 0xfffffd50
    31d0:	eb0017c4 	bl	90e8 <__aeabi_f2d>
    31d4:	e309299a 	movw	r2, #39322	; 0x999a
    31d8:	e3492999 	movt	r2, #39321	; 0x9999
    31dc:	e3093999 	movw	r3, #39321	; 0x9999
    31e0:	e34b3fd9 	movt	r3, #49113	; 0xbfd9
    31e4:	eb0017ec 	bl	919c <__aeabi_dmul>
    31e8:	eb00197a 	bl	97d8 <__aeabi_d2f>
    31ec:	e50502b0 	str	r0, [r5, #-688]	; 0xfffffd50

                allBodies[minSepVertBodyIdx].omega *= -ELASTICITY_RB;
    31f0:	e5160270 	ldr	r0, [r6, #-624]	; 0xfffffd90
    31f4:	eb0017bb 	bl	90e8 <__aeabi_f2d>
    31f8:	e309299a 	movw	r2, #39322	; 0x999a
    31fc:	e3492999 	movt	r2, #39321	; 0x9999
    3200:	e3093999 	movw	r3, #39321	; 0x9999
    3204:	e34b3fd9 	movt	r3, #49113	; 0xbfd9
    3208:	eb0017e3 	bl	919c <__aeabi_dmul>
    320c:	eb001971 	bl	97d8 <__aeabi_d2f>
    3210:	e5060270 	str	r0, [r6, #-624]	; 0xfffffd90
                allBodies[minSepEdgeBodyIdx].omega *= -ELASTICITY_RB;
    3214:	e5150270 	ldr	r0, [r5, #-624]	; 0xfffffd90
    3218:	eb0017b2 	bl	90e8 <__aeabi_f2d>
    321c:	e309299a 	movw	r2, #39322	; 0x999a
    3220:	e3492999 	movt	r2, #39321	; 0x9999
    3224:	e3093999 	movw	r3, #39321	; 0x9999
    3228:	e34b3fd9 	movt	r3, #49113	; 0xbfd9
    322c:	eb0017da 	bl	919c <__aeabi_dmul>
    3230:	eb001968 	bl	97d8 <__aeabi_d2f>
    3234:	e5050270 	str	r0, [r5, #-624]	; 0xfffffd90
    3238:	ea00003b 	b	332c <checkSATInterBodyCollision+0xa0c>
            } else {
                allBodies[minSepVertBodyIdx].v.x *= ELASTICITY_RB;
    323c:	e3095424 	movw	r5, #37924	; 0x9424
    3240:	e3405010 	movt	r5, #16
    3244:	e0666286 	rsb	r6, r6, r6, lsl #5
    3248:	e0856206 	add	r6, r5, r6, lsl #4
    324c:	e51602b4 	ldr	r0, [r6, #-692]	; 0xfffffd4c
    3250:	eb0017a4 	bl	90e8 <__aeabi_f2d>
    3254:	e309299a 	movw	r2, #39322	; 0x999a
    3258:	e3492999 	movt	r2, #39321	; 0x9999
    325c:	e3093999 	movw	r3, #39321	; 0x9999
    3260:	e3433fd9 	movt	r3, #16345	; 0x3fd9
    3264:	eb0017cc 	bl	919c <__aeabi_dmul>
    3268:	eb00195a 	bl	97d8 <__aeabi_d2f>
    326c:	e50602b4 	str	r0, [r6, #-692]	; 0xfffffd4c
                allBodies[minSepVertBodyIdx].v.y *= ELASTICITY_RB;
    3270:	e51602b0 	ldr	r0, [r6, #-688]	; 0xfffffd50
    3274:	eb00179b 	bl	90e8 <__aeabi_f2d>
    3278:	e309299a 	movw	r2, #39322	; 0x999a
    327c:	e3492999 	movt	r2, #39321	; 0x9999
    3280:	e3093999 	movw	r3, #39321	; 0x9999
    3284:	e3433fd9 	movt	r3, #16345	; 0x3fd9
    3288:	eb0017c3 	bl	919c <__aeabi_dmul>
    328c:	eb001951 	bl	97d8 <__aeabi_d2f>
    3290:	e50602b0 	str	r0, [r6, #-688]	; 0xfffffd50
                allBodies[minSepEdgeBodyIdx].v.x *= ELASTICITY_RB;
    3294:	e0677287 	rsb	r7, r7, r7, lsl #5
    3298:	e0855207 	add	r5, r5, r7, lsl #4
    329c:	e51502b4 	ldr	r0, [r5, #-692]	; 0xfffffd4c
    32a0:	eb001790 	bl	90e8 <__aeabi_f2d>
    32a4:	e309299a 	movw	r2, #39322	; 0x999a
    32a8:	e3492999 	movt	r2, #39321	; 0x9999
    32ac:	e3093999 	movw	r3, #39321	; 0x9999
    32b0:	e3433fd9 	movt	r3, #16345	; 0x3fd9
    32b4:	eb0017b8 	bl	919c <__aeabi_dmul>
    32b8:	eb001946 	bl	97d8 <__aeabi_d2f>
    32bc:	e50502b4 	str	r0, [r5, #-692]	; 0xfffffd4c
                allBodies[minSepEdgeBodyIdx].v.y *= ELASTICITY_RB;
    32c0:	e51502b0 	ldr	r0, [r5, #-688]	; 0xfffffd50
    32c4:	eb001787 	bl	90e8 <__aeabi_f2d>
    32c8:	e309299a 	movw	r2, #39322	; 0x999a
    32cc:	e3492999 	movt	r2, #39321	; 0x9999
    32d0:	e3093999 	movw	r3, #39321	; 0x9999
    32d4:	e3433fd9 	movt	r3, #16345	; 0x3fd9
    32d8:	eb0017af 	bl	919c <__aeabi_dmul>
    32dc:	eb00193d 	bl	97d8 <__aeabi_d2f>
    32e0:	e50502b0 	str	r0, [r5, #-688]	; 0xfffffd50

                allBodies[minSepVertBodyIdx].omega *= ELASTICITY_RB;
    32e4:	e5160270 	ldr	r0, [r6, #-624]	; 0xfffffd90
    32e8:	eb00177e 	bl	90e8 <__aeabi_f2d>
    32ec:	e309299a 	movw	r2, #39322	; 0x999a
    32f0:	e3492999 	movt	r2, #39321	; 0x9999
    32f4:	e3093999 	movw	r3, #39321	; 0x9999
    32f8:	e3433fd9 	movt	r3, #16345	; 0x3fd9
    32fc:	eb0017a6 	bl	919c <__aeabi_dmul>
    3300:	eb001934 	bl	97d8 <__aeabi_d2f>
    3304:	e5060270 	str	r0, [r6, #-624]	; 0xfffffd90
                allBodies[minSepEdgeBodyIdx].omega *= ELASTICITY_RB;
    3308:	e5150270 	ldr	r0, [r5, #-624]	; 0xfffffd90
    330c:	eb001775 	bl	90e8 <__aeabi_f2d>
    3310:	e309299a 	movw	r2, #39322	; 0x999a
    3314:	e3492999 	movt	r2, #39321	; 0x9999
    3318:	e3093999 	movw	r3, #39321	; 0x9999
    331c:	e3433fd9 	movt	r3, #16345	; 0x3fd9
    3320:	eb00179d 	bl	919c <__aeabi_dmul>
    3324:	eb00192b 	bl	97d8 <__aeabi_d2f>
    3328:	e5050270 	str	r0, [r5, #-624]	; 0xfffffd90
            }
            bookMarkedCollisions[minSepVertBodyIdx][minSepEdgeBodyIdx] = true;
    332c:	e59d504c 	ldr	r5, [sp, #76]	; 0x4c
    3330:	e59d3048 	ldr	r3, [sp, #72]	; 0x48
    3334:	e30b141c 	movw	r1, #46108	; 0xb41c
    3338:	e3401010 	movt	r1, #16
    333c:	e0850085 	add	r0, r5, r5, lsl #1
    3340:	e0810100 	add	r0, r1, r0, lsl #2
    3344:	e0800003 	add	r0, r0, r3
    3348:	e3a02001 	mov	r2, #1
    334c:	e5402bbc 	strb	r2, [r0, #-3004]	; 0xfffff444
            bookMarkedCollisions[minSepEdgeBodyIdx][minSepVertBodyIdx] = true;
    3350:	e0830083 	add	r0, r3, r3, lsl #1
    3354:	e0811100 	add	r1, r1, r0, lsl #2
    3358:	e0811005 	add	r1, r1, r5
    335c:	e5412bbc 	strb	r2, [r1, #-3004]	; 0xfffff444
            allBodies[minSepVertBodyIdx].cLast = true;
    3360:	e3098424 	movw	r8, #37924	; 0x9424
    3364:	e3408010 	movt	r8, #16
    3368:	e1a06285 	lsl	r6, r5, #5
    336c:	e065b006 	rsb	r11, r5, r6
    3370:	e088b20b 	add	r11, r8, r11, lsl #4
    3374:	e54b225c 	strb	r2, [r11, #-604]	; 0xfffffda4
            allBodies[minSepEdgeBodyIdx].cLast = true;
    3378:	e1a0c283 	lsl	r12, r3, #5
    337c:	e063a00c 	rsb	r10, r3, r12
    3380:	e088a20a 	add	r10, r8, r10, lsl #4
    3384:	e54a225c 	strb	r2, [r10, #-604]	; 0xfffffda4
            // continue;

            // Collision Resolution (Impulse-Based):
            normMinEdgeResponsible = unitNorm;
    3388:	e28d9050 	add	r9, sp, #80	; 0x50
    338c:	e28d2060 	add	r2, sp, #96	; 0x60
    3390:	e8920003 	ldm	r2, {r0, r1}
    3394:	e8890003 	stm	r9, {r0, r1}
            Vector2D c1 = subVec2(&allBodies[minSepVertBodyIdx].v, &allBodies[minSepEdgeBodyIdx].v);
    3398:	e28d7068 	add	r7, sp, #104	; 0x68
    339c:	e0651006 	rsb	r1, r5, r6
    33a0:	e2482fc1 	sub	r2, r8, #772	; 0x304
    33a4:	e0821201 	add	r1, r2, r1, lsl #4
    33a8:	e063300c 	rsb	r3, r3, r12
    33ac:	e0822203 	add	r2, r2, r3, lsl #4
    33b0:	e1a00007 	mov	r0, r7
    33b4:	e2811050 	add	r1, r1, #80	; 0x50
    33b8:	e2822050 	add	r2, r2, #80	; 0x50
    33bc:	ebfffc11 	bl	2408 <subVec2>
            Vector2D rAP = constrVec(
                allBodies[minSepVertBodyIdx].pxs[minSepBodyVertIdx] - allBodies[minSepVertBodyIdx].cx,
    33c0:	e0655006 	rsb	r5, r5, r6
    33c4:	e0844105 	add	r4, r4, r5, lsl #2
    33c8:	e0883104 	add	r3, r8, r4, lsl #2
    33cc:	e51352e4 	ldr	r5, [r3, #-740]	; 0xfffffd1c
                allBodies[minSepVertBodyIdx].pys[minSepBodyVertIdx] - allBodies[minSepVertBodyIdx].cy
    33d0:	e51342d4 	ldr	r4, [r3, #-724]	; 0xfffffd2c
            // continue;

            // Collision Resolution (Impulse-Based):
            normMinEdgeResponsible = unitNorm;
            Vector2D c1 = subVec2(&allBodies[minSepVertBodyIdx].v, &allBodies[minSepEdgeBodyIdx].v);
            Vector2D rAP = constrVec(
    33d4:	e1a00005 	mov	r0, r5
    33d8:	e51b1294 	ldr	r1, [r11, #-660]	; 0xfffffd6c
    33dc:	eb001927 	bl	9880 <__aeabi_fsub>
    33e0:	e1a06000 	mov	r6, r0
    33e4:	e1a00004 	mov	r0, r4
    33e8:	e51b1290 	ldr	r1, [r11, #-656]	; 0xfffffd70
    33ec:	eb001923 	bl	9880 <__aeabi_fsub>
    33f0:	e1a02000 	mov	r2, r0
    33f4:	e28d0070 	add	r0, sp, #112	; 0x70
    33f8:	e1a01006 	mov	r1, r6
    33fc:	ebfffc1f 	bl	2480 <constrVec>
                allBodies[minSepVertBodyIdx].pxs[minSepBodyVertIdx] - allBodies[minSepVertBodyIdx].cx,
                allBodies[minSepVertBodyIdx].pys[minSepBodyVertIdx] - allBodies[minSepVertBodyIdx].cy
            );
            Vector2D rBP = constrVec(
    3400:	e1a00005 	mov	r0, r5
    3404:	e51a1294 	ldr	r1, [r10, #-660]	; 0xfffffd6c
    3408:	eb00191c 	bl	9880 <__aeabi_fsub>
    340c:	e1a05000 	mov	r5, r0
    3410:	e1a00004 	mov	r0, r4
    3414:	e51a1290 	ldr	r1, [r10, #-656]	; 0xfffffd70
    3418:	eb001918 	bl	9880 <__aeabi_fsub>
    341c:	e1a02000 	mov	r2, r0
    3420:	e28d0078 	add	r0, sp, #120	; 0x78
    3424:	e1a01005 	mov	r1, r5
    3428:	ebfffc14 	bl	2480 <constrVec>
                allBodies[minSepVertBodyIdx].pxs[minSepBodyVertIdx] - allBodies[minSepEdgeBodyIdx].cx,
                allBodies[minSepVertBodyIdx].pys[minSepBodyVertIdx] - allBodies[minSepEdgeBodyIdx].cy
            );
            c1 = multVec2(&c1, (-1-ELASTICITY_RB));
    342c:	e28d6040 	add	r6, sp, #64	; 0x40
    3430:	e1a00006 	mov	r0, r6
    3434:	e1a01007 	mov	r1, r7
    3438:	e3032333 	movw	r2, #13107	; 0x3333
    343c:	e34b2fb3 	movt	r2, #49075	; 0xbfb3
    3440:	ebfffbff 	bl	2444 <multVec2>
    3444:	e8960003 	ldm	r6, {r0, r1}
    3448:	e8870003 	stm	r7, {r0, r1}
            float jCoeffNum = dotProd2D(&c1, &normMinEdgeResponsible); 
    344c:	e1a00007 	mov	r0, r7
    3450:	e1a01009 	mov	r1, r9
    3454:	ebfffba0 	bl	22dc <dotProd2D>
    3458:	e58d0010 	str	r0, [sp, #16]
            c1 = multVec2(&normMinEdgeResponsible, ((1/allBodies[minSepVertBodyIdx].mass) + (1/allBodies[minSepEdgeBodyIdx].mass)));
    345c:	e3a005fe 	mov	r0, #1065353216	; 0x3f800000
    3460:	e51b1288 	ldr	r1, [r11, #-648]	; 0xfffffd78
    3464:	eb001a14 	bl	9cbc <__aeabi_fdiv>
    3468:	e1a04000 	mov	r4, r0
    346c:	e3a005fe 	mov	r0, #1065353216	; 0x3f800000
    3470:	e51a1288 	ldr	r1, [r10, #-648]	; 0xfffffd78
    3474:	eb001a10 	bl	9cbc <__aeabi_fdiv>
    3478:	e1a01000 	mov	r1, r0
    347c:	e1a00004 	mov	r0, r4
    3480:	eb0018ff 	bl	9884 <__addsf3>
    3484:	e1a02000 	mov	r2, r0
    3488:	e1a00006 	mov	r0, r6
    348c:	e1a01009 	mov	r1, r9
    3490:	ebfffbeb 	bl	2444 <multVec2>
    3494:	e8960003 	ldm	r6, {r0, r1}
    3498:	e8870003 	stm	r7, {r0, r1}
            float jCoeffDenom = dotProd2D(&c1, &normMinEdgeResponsible);
    349c:	e1a00007 	mov	r0, r7
    34a0:	e1a01009 	mov	r1, r9
    34a4:	ebfffb8c 	bl	22dc <dotProd2D>
    34a8:	e1a0a000 	mov	r10, r0
            jCoeffDenom += pow(dotProd2D(&rAP, &normMinEdgeResponsible),2)/allBodies[minSepVertBodyIdx].I;
    34ac:	e28d0070 	add	r0, sp, #112	; 0x70
    34b0:	e1a01009 	mov	r1, r9
    34b4:	ebfffb88 	bl	22dc <dotProd2D>
    34b8:	eb00170a 	bl	90e8 <__aeabi_f2d>
    34bc:	e1a04000 	mov	r4, r0
    34c0:	e1a05001 	mov	r5, r1
    34c4:	e59d304c 	ldr	r3, [sp, #76]	; 0x4c
    34c8:	e58d3008 	str	r3, [sp, #8]
    34cc:	e1a0000a 	mov	r0, r10
    34d0:	eb001704 	bl	90e8 <__aeabi_f2d>
    34d4:	e1cd00f0 	strd	r0, [sp]
    34d8:	e1a00004 	mov	r0, r4
    34dc:	e1a01005 	mov	r1, r5
    34e0:	e1a02004 	mov	r2, r4
    34e4:	e1a03005 	mov	r3, r5
    34e8:	eb00172b 	bl	919c <__aeabi_dmul>
    34ec:	e1a04000 	mov	r4, r0
    34f0:	e1a05001 	mov	r5, r1
    34f4:	e59d0008 	ldr	r0, [sp, #8]
    34f8:	e1a00280 	lsl	r0, r0, #5
    34fc:	e58d000c 	str	r0, [sp, #12]
    3500:	e59d1008 	ldr	r1, [sp, #8]
    3504:	e0613000 	rsb	r3, r1, r0
    3508:	e088b203 	add	r11, r8, r3, lsl #4
    350c:	e51b028c 	ldr	r0, [r11, #-652]	; 0xfffffd74
    3510:	eb0016f4 	bl	90e8 <__aeabi_f2d>
    3514:	e1a02000 	mov	r2, r0
    3518:	e1a03001 	mov	r3, r1
    351c:	e1a00004 	mov	r0, r4
    3520:	e1a01005 	mov	r1, r5
    3524:	eb0017c0 	bl	942c <__aeabi_ddiv>
    3528:	e1a02000 	mov	r2, r0
    352c:	e1a03001 	mov	r3, r1
    3530:	e1cd00d0 	ldrd	r0, [sp]
    3534:	eb001614 	bl	8d8c <__adddf3>
    3538:	e1cd00f0 	strd	r0, [sp]
            jCoeffDenom += pow(dotProd2D(&rBP, &normMinEdgeResponsible),2)/allBodies[minSepEdgeBodyIdx].I;
    353c:	e28d0078 	add	r0, sp, #120	; 0x78
    3540:	e1a01009 	mov	r1, r9
    3544:	ebfffb64 	bl	22dc <dotProd2D>
    3548:	eb0016e6 	bl	90e8 <__aeabi_f2d>
    354c:	e1a04000 	mov	r4, r0
    3550:	e1a05001 	mov	r5, r1
    3554:	e59da048 	ldr	r10, [sp, #72]	; 0x48
            );
            c1 = multVec2(&c1, (-1-ELASTICITY_RB));
            float jCoeffNum = dotProd2D(&c1, &normMinEdgeResponsible); 
            c1 = multVec2(&normMinEdgeResponsible, ((1/allBodies[minSepVertBodyIdx].mass) + (1/allBodies[minSepEdgeBodyIdx].mass)));
            float jCoeffDenom = dotProd2D(&c1, &normMinEdgeResponsible);
            jCoeffDenom += pow(dotProd2D(&rAP, &normMinEdgeResponsible),2)/allBodies[minSepVertBodyIdx].I;
    3558:	e1cd00d0 	ldrd	r0, [sp]
    355c:	eb00189d 	bl	97d8 <__aeabi_d2f>
            jCoeffDenom += pow(dotProd2D(&rBP, &normMinEdgeResponsible),2)/allBodies[minSepEdgeBodyIdx].I;
    3560:	eb0016e0 	bl	90e8 <__aeabi_f2d>
    3564:	e1cd01f8 	strd	r0, [sp, #24]
    3568:	e1a00004 	mov	r0, r4
    356c:	e1a01005 	mov	r1, r5
    3570:	e1a02004 	mov	r2, r4
    3574:	e1a03005 	mov	r3, r5
    3578:	eb001707 	bl	919c <__aeabi_dmul>
    357c:	e1a04000 	mov	r4, r0
    3580:	e1a05001 	mov	r5, r1
    3584:	e1a0228a 	lsl	r2, r10, #5
    3588:	e58d2000 	str	r2, [sp]
    358c:	e06a3002 	rsb	r3, r10, r2
    3590:	e0888203 	add	r8, r8, r3, lsl #4
    3594:	e518028c 	ldr	r0, [r8, #-652]	; 0xfffffd74
    3598:	eb0016d2 	bl	90e8 <__aeabi_f2d>
    359c:	e1a02000 	mov	r2, r0
    35a0:	e1a03001 	mov	r3, r1
    35a4:	e1a00004 	mov	r0, r4
    35a8:	e1a01005 	mov	r1, r5
    35ac:	eb00179e 	bl	942c <__aeabi_ddiv>
    35b0:	e1a02000 	mov	r2, r0
    35b4:	e1a03001 	mov	r3, r1
    35b8:	e1cd01d8 	ldrd	r0, [sp, #24]
    35bc:	eb0015f2 	bl	8d8c <__adddf3>
    35c0:	eb001884 	bl	97d8 <__aeabi_d2f>
    35c4:	e1a01000 	mov	r1, r0

            float jCoeff = jCoeffNum/jCoeffDenom;
    35c8:	e59d0010 	ldr	r0, [sp, #16]
    35cc:	eb0019ba 	bl	9cbc <__aeabi_fdiv>
    35d0:	e1a04000 	mov	r4, r0

            // Linear Velocity response
            c1 = multVec2(&normMinEdgeResponsible, (jCoeff/allBodies[minSepVertBodyIdx].mass));
    35d4:	e51b1288 	ldr	r1, [r11, #-648]	; 0xfffffd78
    35d8:	eb0019b7 	bl	9cbc <__aeabi_fdiv>
    35dc:	e1a02000 	mov	r2, r0
    35e0:	e1a00006 	mov	r0, r6
    35e4:	e1a01009 	mov	r1, r9
    35e8:	ebfffb95 	bl	2444 <multVec2>
    35ec:	e8960003 	ldm	r6, {r0, r1}
    35f0:	e8870003 	stm	r7, {r0, r1}
            allBodies[minSepVertBodyIdx].v = addVec2(&allBodies[minSepVertBodyIdx].v, &c1);
    35f4:	e24b5fad 	sub	r5, r11, #692	; 0x2b4
    35f8:	e59d300c 	ldr	r3, [sp, #12]
    35fc:	e59d0008 	ldr	r0, [sp, #8]
    3600:	e0601003 	rsb	r1, r0, r3
    3604:	e59f2138 	ldr	r2, [pc, #312]	; 3744 <checkSATInterBodyCollision+0xe24>
    3608:	e0821201 	add	r1, r2, r1, lsl #4
    360c:	e1a00006 	mov	r0, r6
    3610:	e2811050 	add	r1, r1, #80	; 0x50
    3614:	e1a02007 	mov	r2, r7
    3618:	ebfffb6b 	bl	23cc <addVec2>
    361c:	e8960003 	ldm	r6, {r0, r1}
    3620:	e8850003 	stm	r5, {r0, r1}
            // allBodies[minSepVertBodyIdx].v = c1;
            c1 = multVec2(&normMinEdgeResponsible, (jCoeff/allBodies[minSepEdgeBodyIdx].mass));
    3624:	e1a00004 	mov	r0, r4
    3628:	e5181288 	ldr	r1, [r8, #-648]	; 0xfffffd78
    362c:	eb0019a2 	bl	9cbc <__aeabi_fdiv>
    3630:	e1a02000 	mov	r2, r0
    3634:	e1a00006 	mov	r0, r6
    3638:	e1a01009 	mov	r1, r9
    363c:	ebfffb80 	bl	2444 <multVec2>
    3640:	e8960003 	ldm	r6, {r0, r1}
    3644:	e8870003 	stm	r7, {r0, r1}
            allBodies[minSepEdgeBodyIdx].v = subVec2(&allBodies[minSepEdgeBodyIdx].v, &c1);
    3648:	e2485fad 	sub	r5, r8, #692	; 0x2b4
    364c:	e59d3000 	ldr	r3, [sp]
    3650:	e06a1003 	rsb	r1, r10, r3
    3654:	e59f00e8 	ldr	r0, [pc, #232]	; 3744 <checkSATInterBodyCollision+0xe24>
    3658:	e0801201 	add	r1, r0, r1, lsl #4
    365c:	e1a00006 	mov	r0, r6
    3660:	e2811050 	add	r1, r1, #80	; 0x50
    3664:	e1a02007 	mov	r2, r7
    3668:	ebfffb66 	bl	2408 <subVec2>
    366c:	e8960003 	ldm	r6, {r0, r1}
    3670:	e8850003 	stm	r5, {r0, r1}
            // allBodies[minSepEdgeBodyIdx].v = multVec2(&c1, -1.0);
            
            // Angular Velocity response
            c1 = multVec2(&normMinEdgeResponsible, jCoeff);
    3674:	e1a00006 	mov	r0, r6
    3678:	e1a01009 	mov	r1, r9
    367c:	e1a02004 	mov	r2, r4
    3680:	ebfffb6f 	bl	2444 <multVec2>
    3684:	e8960003 	ldm	r6, {r0, r1}
    3688:	e8870003 	stm	r7, {r0, r1}
            allBodies[minSepVertBodyIdx].omega += dotProd2D(&rAP, &c1)/allBodies[minSepVertBodyIdx].I;
    368c:	e28d0070 	add	r0, sp, #112	; 0x70
    3690:	e1a01007 	mov	r1, r7
    3694:	ebfffb10 	bl	22dc <dotProd2D>
    3698:	e51b128c 	ldr	r1, [r11, #-652]	; 0xfffffd74
    369c:	eb001986 	bl	9cbc <__aeabi_fdiv>
    36a0:	e1a01000 	mov	r1, r0
    36a4:	e51b0270 	ldr	r0, [r11, #-624]	; 0xfffffd90
    36a8:	eb001875 	bl	9884 <__addsf3>
    36ac:	e50b0270 	str	r0, [r11, #-624]	; 0xfffffd90
            allBodies[minSepEdgeBodyIdx].omega -= dotProd2D(&rBP, &c1)/allBodies[minSepEdgeBodyIdx].I;
    36b0:	e28d0078 	add	r0, sp, #120	; 0x78
    36b4:	e1a01007 	mov	r1, r7
    36b8:	ebfffb07 	bl	22dc <dotProd2D>
    36bc:	e518128c 	ldr	r1, [r8, #-652]	; 0xfffffd74
    36c0:	eb00197d 	bl	9cbc <__aeabi_fdiv>
    36c4:	e1a01000 	mov	r1, r0
    36c8:	e5180270 	ldr	r0, [r8, #-624]	; 0xfffffd90
    36cc:	eb00186b 	bl	9880 <__aeabi_fsub>
    36d0:	e5080270 	str	r0, [r8, #-624]	; 0xfffffd90
            }
        }

        if (hasCollided /*&& !bookMarkedCollisions[i][j]*/) {

            neverCollided = false;
    36d4:	e3a01000 	mov	r1, #0
    36d8:	e58d103c 	str	r1, [sp, #60]	; 0x3c
    float maxjDot, minjDot;

    int forceIndex = VERTICIES_PER_BODY - 1;
    bool neverCollided = true;

    for(int j = 0; j < NUM_BODIES; j++){
    36dc:	e59d2014 	ldr	r2, [sp, #20]
    36e0:	e2822001 	add	r2, r2, #1
    36e4:	e58d2014 	str	r2, [sp, #20]
    36e8:	e352000c 	cmp	r2, #12
    36ec:	1afffc98 	bne	2954 <checkSATInterBodyCollision+0x34>
            allBodies[minSepVertBodyIdx].omega += dotProd2D(&rAP, &c1)/allBodies[minSepVertBodyIdx].I;
            allBodies[minSepEdgeBodyIdx].omega -= dotProd2D(&rBP, &c1)/allBodies[minSepEdgeBodyIdx].I;

        }
    }
    if (neverCollided) {
    36f0:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
    36f4:	e3530000 	cmp	r3, #0
    36f8:	0a00000f 	beq	373c <checkSATInterBodyCollision+0xe1c>
        allBodies[i].cLast = false;
    36fc:	e3093424 	movw	r3, #37924	; 0x9424
    3700:	e3403010 	movt	r3, #16
    3704:	e59d0034 	ldr	r0, [sp, #52]	; 0x34
    3708:	e0602280 	rsb	r2, r0, r0, lsl #5
    370c:	e0833202 	add	r3, r3, r2, lsl #4
    3710:	e3a02000 	mov	r2, #0
    3714:	e543225c 	strb	r2, [r3, #-604]	; 0xfffffda4
    3718:	ea000007 	b	373c <checkSATInterBodyCollision+0xe1c>
                minEdgeResponsible.y = dy;
                float magPos = sqrt(dx*dx+dy*dy);
                normMinEdgeResponsible.x = -dx;
                normMinEdgeResponsible.y = -dy;

                minSepEdgeBodyIdx = vertIdx < VERTICIES_PER_BODY ? i : j;
    371c:	e59d1014 	ldr	r1, [sp, #20]
    3720:	e58d1048 	str	r1, [sp, #72]	; 0x48
                minSepVertBodyIdx = minSepEdgeBodyIdx == i ? j : i;
    3724:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
    3728:	eafffd31 	b	2bf4 <checkSATInterBodyCollision+0x2d4>
                minEdgeResponsible.y = dy;
                float magPos = sqrt(dx*dx+dy*dy);
                normMinEdgeResponsible.x = -dx;
                normMinEdgeResponsible.y = -dy;

                minSepEdgeBodyIdx = vertIdx < VERTICIES_PER_BODY ? i : j;
    372c:	e59d2034 	ldr	r2, [sp, #52]	; 0x34
    3730:	e58d2048 	str	r2, [sp, #72]	; 0x48
    3734:	e59d3014 	ldr	r3, [sp, #20]
    3738:	eafffd2d 	b	2bf4 <checkSATInterBodyCollision+0x2d4>
    }
    if (neverCollided) {
        allBodies[i].cLast = false;
    }
    
}
    373c:	e28dd084 	add	sp, sp, #132	; 0x84
    3740:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    3744:	00109120 	.word	0x00109120

00003748 <initRigidBodies>:

void initRigidBodies() {
    3748:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    374c:	e24dd044 	sub	sp, sp, #68	; 0x44
    int xStepCount = 0;
    int yStepCount = 0;

    for (int i = 0; i < NUM_BODIES; i++) {

        allBodies[i].colour = RB_COLOUR;
    3750:	e3093424 	movw	r3, #37924	; 0x9424
    3754:	e3403010 	movt	r3, #16
    3758:	e30f2ee8 	movw	r2, #65256	; 0xfee8
    375c:	e34f2fff 	movt	r2, #65535	; 0xffff
    3760:	e3a01e7e 	mov	r1, #2016	; 0x7e0
    3764:	e18310b2 	strh	r1, [r3, r2]
    3768:	e28330d8 	add	r3, r3, #216	; 0xd8
    376c:	e58d3018 	str	r3, [sp, #24]
    int initY = stepY/2;

    int xStepCount = 0;
    int yStepCount = 0;

    for (int i = 0; i < NUM_BODIES; i++) {
    3770:	e3a01000 	mov	r1, #0
    3774:	e58d101c 	str	r1, [sp, #28]

    int initX = stepX/2;
    int initY = stepY/2;

    int xStepCount = 0;
    int yStepCount = 0;
    3778:	e58d1020 	str	r1, [sp, #32]
    int avgStepParam =  (stepX + stepY) >> 3;

    int initX = stepX/2;
    int initY = stepY/2;

    int xStepCount = 0;
    377c:	e58d1024 	str	r1, [sp, #36]	; 0x24
        allBodies[i].v.x = 0;
        allBodies[i].v.y = rand() % VERT_VARIANCE - (VERT_VARIANCE >> 1);
        allBodies[i].theta = 0;
        allBodies[i].omega = 0;

        allBodies[i].lastPointofCollision = constrVec(0.0, 0.0);
    3780:	e3092424 	movw	r2, #37924	; 0x9424
    3784:	e3402010 	movt	r2, #16
    3788:	e58d203c 	str	r2, [sp, #60]	; 0x3c
    378c:	ea00000b 	b	37c0 <initRigidBodies+0x78>
    int xStepCount = 0;
    int yStepCount = 0;

    for (int i = 0; i < NUM_BODIES; i++) {

        allBodies[i].colour = RB_COLOUR;
    3790:	e3a03e7e 	mov	r3, #2016	; 0x7e0
    3794:	e1cb30b0 	strh	r3, [r11]

        if(xStepCount >= amtColumns) {
    3798:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
    379c:	e3530003 	cmp	r3, #3
            xStepCount = 0;
            yStepCount++;
    37a0:	c59d1020 	ldrgt	r1, [sp, #32]
    37a4:	c2811001 	addgt	r1, r1, #1
    37a8:	c58d1020 	strgt	r1, [sp, #32]
    for (int i = 0; i < NUM_BODIES; i++) {

        allBodies[i].colour = RB_COLOUR;

        if(xStepCount >= amtColumns) {
            xStepCount = 0;
    37ac:	c3a02000 	movgt	r2, #0
    37b0:	c58d2024 	strgt	r2, [sp, #36]	; 0x24
    37b4:	e59d3018 	ldr	r3, [sp, #24]
    37b8:	e2833e1f 	add	r3, r3, #496	; 0x1f0
    37bc:	e58d3018 	str	r3, [sp, #24]
            yStepCount++;
        }
        if(yStepCount >= amtRows) {
            yStepCount = 0;
    37c0:	e59d1020 	ldr	r1, [sp, #32]
    37c4:	e3510002 	cmp	r1, #2
    37c8:	c3a01000 	movgt	r1, #0
    37cc:	e58d1020 	str	r1, [sp, #32]
        }

        int centX = initX + xStepCount * stepX;
    37d0:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
    37d4:	e0813101 	add	r3, r1, r1, lsl #2
    37d8:	e1a03203 	lsl	r3, r3, #4
    37dc:	e2833028 	add	r3, r3, #40	; 0x28
    37e0:	e58d302c 	str	r3, [sp, #44]	; 0x2c
        int centY = initY + yStepCount * stepY;
    37e4:	e59d2020 	ldr	r2, [sp, #32]
    37e8:	e0823102 	add	r3, r2, r2, lsl #2
    37ec:	e1a03203 	lsl	r3, r3, #4
    37f0:	e2833028 	add	r3, r3, #40	; 0x28
    37f4:	e58d3030 	str	r3, [sp, #48]	; 0x30
        allBodies[i].cLast = false;
    }
    
}

void initRigidBodies() {
    37f8:	e59db018 	ldr	r11, [sp, #24]
        float sumX = 0;
        float sumY = 0;

        float runningAreaCount = 0;

        allBodies[i].v.x = 0;
    37fc:	e3a03000 	mov	r3, #0
    3800:	e50b338c 	str	r3, [r11, #-908]	; 0xfffffc74
        allBodies[i].v.y = rand() % VERT_VARIANCE - (VERT_VARIANCE >> 1);
    3804:	eb001a00 	bl	a00c <rand>
    3808:	e3003c31 	movw	r3, #3121	; 0xc31
    380c:	e34330c3 	movt	r3, #12483	; 0x30c3
    3810:	e0c31093 	smull	r1, r3, r3, r0
    3814:	e1a02fc0 	asr	r2, r0, #31
    3818:	e0623143 	rsb	r3, r2, r3, asr #2
    381c:	e0833083 	add	r3, r3, r3, lsl #1
    3820:	e0633183 	rsb	r3, r3, r3, lsl #3
    3824:	e0630000 	rsb	r0, r3, r0
    3828:	e240000a 	sub	r0, r0, #10
    382c:	eb001885 	bl	9a48 <__aeabi_i2f>
    3830:	e59d2018 	ldr	r2, [sp, #24]
    3834:	e5020388 	str	r0, [r2, #-904]	; 0xfffffc78
        allBodies[i].theta = 0;
    3838:	e3a03000 	mov	r3, #0
    383c:	e502335c 	str	r3, [r2, #-860]	; 0xfffffca4
        allBodies[i].omega = 0;
    3840:	e5023348 	str	r3, [r2, #-840]	; 0xfffffcb8

        allBodies[i].lastPointofCollision = constrVec(0.0, 0.0);
    3844:	e59d101c 	ldr	r1, [sp, #28]
    3848:	e1a08281 	lsl	r8, r1, #5
    384c:	e0610008 	rsb	r0, r1, r8
    3850:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
    3854:	e0820200 	add	r0, r2, r0, lsl #4
    3858:	e2400f9a 	sub	r0, r0, #616	; 0x268
    385c:	e1a01003 	mov	r1, r3
    3860:	e1a02003 	mov	r2, r3
    3864:	ebfffb05 	bl	2480 <constrVec>
        allBodies[i].cLast = false;
    }
    
}

void initRigidBodies() {
    3868:	e59d101c 	ldr	r1, [sp, #28]
    386c:	e0613008 	rsb	r3, r1, r8
    3870:	e59f2484 	ldr	r2, [pc, #1156]	; 3cfc <initRigidBodies+0x5b4>
    3874:	e0823203 	add	r3, r2, r3, lsl #4
    3878:	e58d3034 	str	r3, [sp, #52]	; 0x34
    387c:	e59f347c 	ldr	r3, [pc, #1148]	; 3d00 <initRigidBodies+0x5b8>
    3880:	e0838008 	add	r8, r3, r8
    3884:	e59d6034 	ldr	r6, [sp, #52]	; 0x34
    3888:	e3a0a000 	mov	r10, #0
        bool changeFlag = false;

        float sumX = 0;
        float sumY = 0;

        float runningAreaCount = 0;
    388c:	e3a01000 	mov	r1, #0
    3890:	e58d1010 	str	r1, [sp, #16]
        int signX = -1;
        int signY = -1;
        bool changeFlag = false;

        float sumX = 0;
        float sumY = 0;
    3894:	e58d1008 	str	r1, [sp, #8]

        int signX = -1;
        int signY = -1;
        bool changeFlag = false;

        float sumX = 0;
    3898:	e58d1004 	str	r1, [sp, #4]
        int centX = initX + xStepCount * stepX;
        int centY = initY + yStepCount * stepY;

        int signX = -1;
        int signY = -1;
        bool changeFlag = false;
    389c:	e58da028 	str	r10, [sp, #40]	; 0x28

        int centX = initX + xStepCount * stepX;
        int centY = initY + yStepCount * stepY;

        int signX = -1;
        int signY = -1;
    38a0:	e3e09000 	mvn	r9, #0
        }

        int centX = initX + xStepCount * stepX;
        int centY = initY + yStepCount * stepY;

        int signX = -1;
    38a4:	e1a07009 	mov	r7, r9

        allBodies[i].lastPointofCollision = constrVec(0.0, 0.0);
        for (int j = 0; j < VERTICIES_PER_BODY; j++) {

            // srand(i+j);
            allBodies[i].xs[j] = centX + signX*avgStepParam + rand() % VERT_VARIANCE - (VERT_VARIANCE >> 1);
    38a8:	e3001c31 	movw	r1, #3121	; 0xc31
    38ac:	e34310c3 	movt	r1, #12483	; 0x30c3
    38b0:	e58d100c 	str	r1, [sp, #12]
    38b4:	e58db038 	str	r11, [sp, #56]	; 0x38
    38b8:	ea000002 	b	38c8 <initRigidBodies+0x180>
    38bc:	e28aa001 	add	r10, r10, #1
    38c0:	e2866004 	add	r6, r6, #4
    38c4:	e2888004 	add	r8, r8, #4
    38c8:	e0874107 	add	r4, r7, r7, lsl #2
    38cc:	e59d202c 	ldr	r2, [sp, #44]	; 0x2c
    38d0:	e0824104 	add	r4, r2, r4, lsl #2
    38d4:	eb0019cc 	bl	a00c <rand>
        allBodies[i].cLast = false;
    }
    
}

void initRigidBodies() {
    38d8:	e1a0b006 	mov	r11, r6

        allBodies[i].lastPointofCollision = constrVec(0.0, 0.0);
        for (int j = 0; j < VERTICIES_PER_BODY; j++) {

            // srand(i+j);
            allBodies[i].xs[j] = centX + signX*avgStepParam + rand() % VERT_VARIANCE - (VERT_VARIANCE >> 1);
    38dc:	e59d300c 	ldr	r3, [sp, #12]
    38e0:	e0c23093 	smull	r3, r2, r3, r0
    38e4:	e1a03fc0 	asr	r3, r0, #31
    38e8:	e0633142 	rsb	r3, r3, r2, asr #2
    38ec:	e0833083 	add	r3, r3, r3, lsl #1
    38f0:	e0633183 	rsb	r3, r3, r3, lsl #3
    38f4:	e0630000 	rsb	r0, r3, r0
    38f8:	e0844000 	add	r4, r4, r0
    38fc:	e244400a 	sub	r4, r4, #10
    3900:	e5864000 	str	r4, [r6]
            allBodies[i].ys[j] = centY + signY*avgStepParam + rand() % VERT_VARIANCE - (VERT_VARIANCE >> 1);
    3904:	e0895109 	add	r5, r9, r9, lsl #2
    3908:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
    390c:	e0815105 	add	r5, r1, r5, lsl #2
    3910:	eb0019bd 	bl	a00c <rand>
    3914:	e59d200c 	ldr	r2, [sp, #12]
    3918:	e0c42092 	smull	r2, r4, r2, r0
    391c:	e1a03fc0 	asr	r3, r0, #31
    3920:	e0634144 	rsb	r4, r3, r4, asr #2
    3924:	e0844084 	add	r4, r4, r4, lsl #1
    3928:	e0644184 	rsb	r4, r4, r4, lsl #3
    392c:	e0644000 	rsb	r4, r4, r0
    3930:	e0854004 	add	r4, r5, r4
    3934:	e244400a 	sub	r4, r4, #10
    3938:	e5864010 	str	r4, [r6, #16]
            
            eraseRBs[i].xs[j] = allBodies[i].xs[j];
    393c:	e5960000 	ldr	r0, [r6]
    3940:	e5880000 	str	r0, [r8]
            eraseRBs[i].ys[j] = allBodies[i].ys[j];
    3944:	e5884010 	str	r4, [r8, #16]

            allBodies[i].pxs[j] = M_PER_PX_RB * allBodies[i].xs[j];
    3948:	eb0015dc 	bl	90c0 <__aeabi_i2d>
    394c:	eb0017a1 	bl	97d8 <__aeabi_d2f>
    3950:	e1a05000 	mov	r5, r0
    3954:	e5860020 	str	r0, [r6, #32]
            allBodies[i].pys[j] = M_PER_PX_RB * allBodies[i].ys[j];
    3958:	e1a00004 	mov	r0, r4
    395c:	eb0015d7 	bl	90c0 <__aeabi_i2d>
    3960:	eb00179c 	bl	97d8 <__aeabi_d2f>
    3964:	e1a04000 	mov	r4, r0
    3968:	e5860030 	str	r0, [r6, #48]	; 0x30

            sumX += allBodies[i].pxs[j];
    396c:	e59d0004 	ldr	r0, [sp, #4]
    3970:	e1a01005 	mov	r1, r5
    3974:	eb0017c2 	bl	9884 <__addsf3>
    3978:	e58d0004 	str	r0, [sp, #4]
            sumY += allBodies[i].pys[j];
    397c:	e59d0008 	ldr	r0, [sp, #8]
    3980:	e1a01004 	mov	r1, r4
    3984:	eb0017be 	bl	9884 <__addsf3>
    3988:	e58d0008 	str	r0, [sp, #8]

            // printf("\nsX:%d", signX);
            // printf("\nsY:%d\n\n", signY);

            if(signX == -1) {
    398c:	e3770001 	cmn	r7, #1
                signX = 1;
    3990:	03a07001 	moveq	r7, #1
            sumY += allBodies[i].pys[j];

            // printf("\nsX:%d", signX);
            // printf("\nsY:%d\n\n", signY);

            if(signX == -1) {
    3994:	0a000006 	beq	39b4 <initRigidBodies+0x26c>
                signX = 1;
            } else {
                if(changeFlag) {
    3998:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    399c:	e3530000 	cmp	r3, #0
                    signX = -1;
                    changeFlag = false;
                }
                changeFlag = true;
    39a0:	03a01001 	moveq	r1, #1
    39a4:	058d1028 	streq	r1, [sp, #40]	; 0x28
                signY = 1;
    39a8:	01a09001 	moveq	r9, r1
    39ac:	13a09001 	movne	r9, #1

            if(signX == -1) {
                signX = 1;
            } else {
                if(changeFlag) {
                    signX = -1;
    39b0:	13e07000 	mvnne	r7, #0
                }
                changeFlag = true;
                signY = 1;
            }

            if(j!=0) runningAreaCount += (allBodies[i].pxs[j-1] + allBodies[i].pxs[j]) * (allBodies[i].pys[j-1] - allBodies[i].pys[j]) / 2.0;
    39b4:	e35a0000 	cmp	r10, #0
    39b8:	0affffbf 	beq	38bc <initRigidBodies+0x174>
    39bc:	e59d0010 	ldr	r0, [sp, #16]
    39c0:	eb0015c8 	bl	90e8 <__aeabi_f2d>
    39c4:	e1cd01f0 	strd	r0, [sp, #16]
    39c8:	e1a00005 	mov	r0, r5
    39cc:	e59b101c 	ldr	r1, [r11, #28]
    39d0:	eb0017ab 	bl	9884 <__addsf3>
    39d4:	e1a05000 	mov	r5, r0
    39d8:	e59b002c 	ldr	r0, [r11, #44]	; 0x2c
    39dc:	e1a01004 	mov	r1, r4
    39e0:	eb0017a6 	bl	9880 <__aeabi_fsub>
    39e4:	e1a01000 	mov	r1, r0
    39e8:	e1a00005 	mov	r0, r5
    39ec:	eb00184c 	bl	9b24 <__aeabi_fmul>
    39f0:	eb0015bc 	bl	90e8 <__aeabi_f2d>
    39f4:	e3a02000 	mov	r2, #0
    39f8:	e3a03000 	mov	r3, #0
    39fc:	e3433fe0 	movt	r3, #16352	; 0x3fe0
    3a00:	eb0015e5 	bl	919c <__aeabi_dmul>
    3a04:	e1a02000 	mov	r2, r0
    3a08:	e1a03001 	mov	r3, r1
    3a0c:	e1cd01d0 	ldrd	r0, [sp, #16]
    3a10:	eb0014dd 	bl	8d8c <__adddf3>
    3a14:	eb00176f 	bl	97d8 <__aeabi_d2f>
    3a18:	e58d0010 	str	r0, [sp, #16]
        allBodies[i].cLast = false;
    }
    
}

void initRigidBodies() {
    3a1c:	e28a3001 	add	r3, r10, #1
        allBodies[i].v.y = rand() % VERT_VARIANCE - (VERT_VARIANCE >> 1);
        allBodies[i].theta = 0;
        allBodies[i].omega = 0;

        allBodies[i].lastPointofCollision = constrVec(0.0, 0.0);
        for (int j = 0; j < VERTICIES_PER_BODY; j++) {
    3a20:	e3530003 	cmp	r3, #3
    3a24:	daffffa4 	ble	38bc <initRigidBodies+0x174>
    3a28:	e59db038 	ldr	r11, [sp, #56]	; 0x38

            if(j!=0) runningAreaCount += (allBodies[i].pxs[j-1] + allBodies[i].pxs[j]) * (allBodies[i].pys[j-1] - allBodies[i].pys[j]) / 2.0;

        }

        runningAreaCount += (allBodies[i].pxs[VERTICIES_PER_BODY-1] + allBodies[i].pxs[0]) * (allBodies[i].pys[VERTICIES_PER_BODY-1] - allBodies[i].pys[0]) / 2.0;
    3a2c:	eb0015ad 	bl	90e8 <__aeabi_f2d>
    3a30:	e1a04000 	mov	r4, r0
    3a34:	e1a05001 	mov	r5, r1
    3a38:	e51b03b0 	ldr	r0, [r11, #-944]	; 0xfffffc50
    3a3c:	e51b13bc 	ldr	r1, [r11, #-956]	; 0xfffffc44
    3a40:	eb00178f 	bl	9884 <__addsf3>
    3a44:	e1a06000 	mov	r6, r0
    3a48:	e51b03a0 	ldr	r0, [r11, #-928]	; 0xfffffc60
    3a4c:	e51b13ac 	ldr	r1, [r11, #-940]	; 0xfffffc54
    3a50:	eb00178a 	bl	9880 <__aeabi_fsub>
    3a54:	e1a01000 	mov	r1, r0
    3a58:	e1a00006 	mov	r0, r6
    3a5c:	eb001830 	bl	9b24 <__aeabi_fmul>
    3a60:	eb0015a0 	bl	90e8 <__aeabi_f2d>
    3a64:	e3a02000 	mov	r2, #0
    3a68:	e3a03000 	mov	r3, #0
    3a6c:	e3433fe0 	movt	r3, #16352	; 0x3fe0
    3a70:	eb0015c9 	bl	919c <__aeabi_dmul>
    3a74:	e1a02000 	mov	r2, r0
    3a78:	e1a03001 	mov	r3, r1
    3a7c:	e1a00004 	mov	r0, r4
    3a80:	e1a01005 	mov	r1, r5
    3a84:	eb0014c0 	bl	8d8c <__adddf3>
    3a88:	eb001752 	bl	97d8 <__aeabi_d2f>
    3a8c:	e58d0010 	str	r0, [sp, #16]

        allBodies[i].cx = sumX / (float)VERTICIES_PER_BODY;
    3a90:	e59d0004 	ldr	r0, [sp, #4]
    3a94:	e3a015fa 	mov	r1, #1048576000	; 0x3e800000
    3a98:	eb001821 	bl	9b24 <__aeabi_fmul>
    3a9c:	e50b036c 	str	r0, [r11, #-876]	; 0xfffffc94
        allBodies[i].cy = sumY / (float)VERTICIES_PER_BODY;
    3aa0:	e59d0008 	ldr	r0, [sp, #8]
    3aa4:	e3a015fa 	mov	r1, #1048576000	; 0x3e800000
    3aa8:	eb00181d 	bl	9b24 <__aeabi_fmul>
    3aac:	e50b0368 	str	r0, [r11, #-872]	; 0xfffffc98
        float maxX = -1;
        float maxY = -1;
        float minX = M_PER_PX_RB * MAX_X;
        float minY = M_PER_PX_RB * MAX_Y;

        for (int j = 0; j < VERTICIES_PER_BODY; j++) {
    3ab0:	e3a08000 	mov	r8, #0
        allBodies[i].cy = sumY / (float)VERTICIES_PER_BODY;

        float maxX = -1;
        float maxY = -1;
        float minX = M_PER_PX_RB * MAX_X;
        float minY = M_PER_PX_RB * MAX_Y;
    3ab4:	e3a09000 	mov	r9, #0
    3ab8:	e3449370 	movt	r9, #17264	; 0x4370
        allBodies[i].cx = sumX / (float)VERTICIES_PER_BODY;
        allBodies[i].cy = sumY / (float)VERTICIES_PER_BODY;

        float maxX = -1;
        float maxY = -1;
        float minX = M_PER_PX_RB * MAX_X;
    3abc:	e3a02000 	mov	r2, #0
    3ac0:	e34423a0 	movt	r2, #17312	; 0x43a0
    3ac4:	e58d2008 	str	r2, [sp, #8]

        allBodies[i].cx = sumX / (float)VERTICIES_PER_BODY;
        allBodies[i].cy = sumY / (float)VERTICIES_PER_BODY;

        float maxX = -1;
        float maxY = -1;
    3ac8:	e3a0a000 	mov	r10, #0
    3acc:	e34baf80 	movt	r10, #49024	; 0xbf80
        runningAreaCount += (allBodies[i].pxs[VERTICIES_PER_BODY-1] + allBodies[i].pxs[0]) * (allBodies[i].pys[VERTICIES_PER_BODY-1] - allBodies[i].pys[0]) / 2.0;

        allBodies[i].cx = sumX / (float)VERTICIES_PER_BODY;
        allBodies[i].cy = sumY / (float)VERTICIES_PER_BODY;

        float maxX = -1;
    3ad0:	e58da004 	str	r10, [sp, #4]
    3ad4:	e58da00c 	str	r10, [sp, #12]
    3ad8:	e59d6034 	ldr	r6, [sp, #52]	; 0x34
        float minX = M_PER_PX_RB * MAX_X;
        float minY = M_PER_PX_RB * MAX_Y;

        for (int j = 0; j < VERTICIES_PER_BODY; j++) {

            maxX = allBodies[i].pxs[j] > maxX ? allBodies[i].pxs[j] : maxX;
    3adc:	e5965020 	ldr	r5, [r6, #32]
    3ae0:	e1a00005 	mov	r0, r5
    3ae4:	e59d1004 	ldr	r1, [sp, #4]
    3ae8:	eb00190a 	bl	9f18 <__aeabi_fcmpgt>
    3aec:	e3500000 	cmp	r0, #0
    3af0:	158d5004 	strne	r5, [sp, #4]
            maxY = allBodies[i].pys[j] > maxY ? allBodies[i].pys[j] : maxY;
    3af4:	e5964030 	ldr	r4, [r6, #48]	; 0x30
    3af8:	e1a00004 	mov	r0, r4
    3afc:	e59d100c 	ldr	r1, [sp, #12]
    3b00:	eb001904 	bl	9f18 <__aeabi_fcmpgt>
    3b04:	e3500000 	cmp	r0, #0
    3b08:	158d400c 	strne	r4, [sp, #12]
            minX = allBodies[i].pxs[j] < minX ? allBodies[i].pxs[j] : minX;
    3b0c:	e1a00005 	mov	r0, r5
    3b10:	e59d1008 	ldr	r1, [sp, #8]
    3b14:	eb0018ed 	bl	9ed0 <__aeabi_fcmplt>
    3b18:	e3500000 	cmp	r0, #0
    3b1c:	158d5008 	strne	r5, [sp, #8]
            minY = allBodies[i].pys[j] < minY ? allBodies[i].pys[j] : minY;
    3b20:	e1a00004 	mov	r0, r4
    3b24:	e1a01009 	mov	r1, r9
    3b28:	eb0018e8 	bl	9ed0 <__aeabi_fcmplt>
    3b2c:	e3500000 	cmp	r0, #0
    3b30:	11a09004 	movne	r9, r4

            float dx = allBodies[i].pxs[j] - allBodies[i].cx;
    3b34:	e1a00005 	mov	r0, r5
    3b38:	e51b136c 	ldr	r1, [r11, #-876]	; 0xfffffc94
    3b3c:	eb00174f 	bl	9880 <__aeabi_fsub>
    3b40:	e1a0a000 	mov	r10, r0
            float dy = allBodies[i].pys[j] - allBodies[i].cy;
    3b44:	e1a00004 	mov	r0, r4
    3b48:	e51b1368 	ldr	r1, [r11, #-872]	; 0xfffffc98
    3b4c:	eb00174b 	bl	9880 <__aeabi_fsub>
    3b50:	e1a04000 	mov	r4, r0

            allBodies[i].vDistances[j] = sqrt(dx*dx+dy*dy);
    3b54:	e1a0000a 	mov	r0, r10
    3b58:	e1a0100a 	mov	r1, r10
    3b5c:	eb0017f0 	bl	9b24 <__aeabi_fmul>
    3b60:	e1a05000 	mov	r5, r0
    3b64:	e1a00004 	mov	r0, r4
    3b68:	e1a01004 	mov	r1, r4
    3b6c:	eb0017ec 	bl	9b24 <__aeabi_fmul>
    3b70:	e1a01000 	mov	r1, r0
    3b74:	e1a00005 	mov	r0, r5
    3b78:	eb001741 	bl	9884 <__addsf3>
    3b7c:	eb001559 	bl	90e8 <__aeabi_f2d>
    3b80:	eb0006f2 	bl	5750 <sqrt>
    3b84:	eb001713 	bl	97d8 <__aeabi_d2f>
    3b88:	e5860040 	str	r0, [r6, #64]	; 0x40
            allBodies[i].constThetas[j] = atan2(dy, dx);
    3b8c:	e1a00004 	mov	r0, r4
    3b90:	eb001554 	bl	90e8 <__aeabi_f2d>
    3b94:	e1a04000 	mov	r4, r0
    3b98:	e1a05001 	mov	r5, r1
    3b9c:	e1a0000a 	mov	r0, r10
    3ba0:	eb001550 	bl	90e8 <__aeabi_f2d>
    3ba4:	e1a02000 	mov	r2, r0
    3ba8:	e1a03001 	mov	r3, r1
    3bac:	e1a00004 	mov	r0, r4
    3bb0:	e1a01005 	mov	r1, r5
    3bb4:	eb0005a1 	bl	5240 <atan2>
    3bb8:	eb001706 	bl	97d8 <__aeabi_d2f>
    3bbc:	e5860084 	str	r0, [r6, #132]	; 0x84
        float maxX = -1;
        float maxY = -1;
        float minX = M_PER_PX_RB * MAX_X;
        float minY = M_PER_PX_RB * MAX_Y;

        for (int j = 0; j < VERTICIES_PER_BODY; j++) {
    3bc0:	e2888001 	add	r8, r8, #1
    3bc4:	e2866004 	add	r6, r6, #4
    3bc8:	e3580004 	cmp	r8, #4
    3bcc:	1affffc2 	bne	3adc <initRigidBodies+0x394>
    3bd0:	e59da00c 	ldr	r10, [sp, #12]
            allBodies[i].vDistances[j] = sqrt(dx*dx+dy*dy);
            allBodies[i].constThetas[j] = atan2(dy, dx);

        }

        allBodies[i].maxPX = maxX * PX_PER_M_RB;
    3bd4:	e59d0004 	ldr	r0, [sp, #4]
    3bd8:	eb0018d4 	bl	9f30 <__aeabi_f2iz>
    3bdc:	e50b0374 	str	r0, [r11, #-884]	; 0xfffffc8c
        allBodies[i].maxPY = maxY * PX_PER_M_RB;
    3be0:	e1a0000a 	mov	r0, r10
    3be4:	eb0018d1 	bl	9f30 <__aeabi_f2iz>
    3be8:	e50b0370 	str	r0, [r11, #-880]	; 0xfffffc90
        allBodies[i].minPX = minX * PX_PER_M_RB;
    3bec:	e59d0008 	ldr	r0, [sp, #8]
    3bf0:	eb0018ce 	bl	9f30 <__aeabi_f2iz>
    3bf4:	e50b037c 	str	r0, [r11, #-892]	; 0xfffffc84
        allBodies[i].minPY = minY * PX_PER_M_RB;
    3bf8:	e1a00009 	mov	r0, r9
    3bfc:	eb0018cb 	bl	9f30 <__aeabi_f2iz>
    3c00:	e50b0378 	str	r0, [r11, #-888]	; 0xfffffc88

        allBodies[i].mass = BODY_DENSITY * abs(runningAreaCount);
    3c04:	e59d0010 	ldr	r0, [sp, #16]
    3c08:	eb0018c8 	bl	9f30 <__aeabi_f2iz>
    3c0c:	e3500000 	cmp	r0, #0
    3c10:	b2600000 	rsblt	r0, r0, #0
    3c14:	e1a00080 	lsl	r0, r0, #1
    3c18:	eb00178a 	bl	9a48 <__aeabi_i2f>
    3c1c:	e1a06000 	mov	r6, r0
    3c20:	e50b0360 	str	r0, [r11, #-864]	; 0xfffffca0
        allBodies[i].I = allBodies[i].mass * (pow(maxX-minX, 2) + pow(maxY-minY, 2)) / 12.0;
    3c24:	e59d0004 	ldr	r0, [sp, #4]
    3c28:	e59d1008 	ldr	r1, [sp, #8]
    3c2c:	eb001713 	bl	9880 <__aeabi_fsub>
    3c30:	eb00152c 	bl	90e8 <__aeabi_f2d>
    3c34:	e1a04000 	mov	r4, r0
    3c38:	e1a05001 	mov	r5, r1
    3c3c:	e1a0000a 	mov	r0, r10
    3c40:	e1a01009 	mov	r1, r9
    3c44:	eb00170d 	bl	9880 <__aeabi_fsub>
    3c48:	eb001526 	bl	90e8 <__aeabi_f2d>
    3c4c:	e1a08000 	mov	r8, r0
    3c50:	e1a09001 	mov	r9, r1
    3c54:	e1a00006 	mov	r0, r6
    3c58:	eb001522 	bl	90e8 <__aeabi_f2d>
    3c5c:	e1a06000 	mov	r6, r0
    3c60:	e1a07001 	mov	r7, r1
    3c64:	e1a00004 	mov	r0, r4
    3c68:	e1a01005 	mov	r1, r5
    3c6c:	e1a02004 	mov	r2, r4
    3c70:	e1a03005 	mov	r3, r5
    3c74:	eb001548 	bl	919c <__aeabi_dmul>
    3c78:	e1a04000 	mov	r4, r0
    3c7c:	e1a05001 	mov	r5, r1
    3c80:	e1a00008 	mov	r0, r8
    3c84:	e1a01009 	mov	r1, r9
    3c88:	e1a02008 	mov	r2, r8
    3c8c:	e1a03009 	mov	r3, r9
    3c90:	eb001541 	bl	919c <__aeabi_dmul>
    3c94:	e1a02000 	mov	r2, r0
    3c98:	e1a03001 	mov	r3, r1
    3c9c:	e1a00004 	mov	r0, r4
    3ca0:	e1a01005 	mov	r1, r5
    3ca4:	eb001438 	bl	8d8c <__adddf3>
    3ca8:	e1a02000 	mov	r2, r0
    3cac:	e1a03001 	mov	r3, r1
    3cb0:	e1a00006 	mov	r0, r6
    3cb4:	e1a01007 	mov	r1, r7
    3cb8:	eb001537 	bl	919c <__aeabi_dmul>
    3cbc:	e3a02000 	mov	r2, #0
    3cc0:	e3a03000 	mov	r3, #0
    3cc4:	e3443028 	movt	r3, #16424	; 0x4028
    3cc8:	eb0015d7 	bl	942c <__aeabi_ddiv>
    3ccc:	eb0016c1 	bl	97d8 <__aeabi_d2f>
    3cd0:	e50b0364 	str	r0, [r11, #-868]	; 0xfffffc9c

        xStepCount++;
    3cd4:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
    3cd8:	e2833001 	add	r3, r3, #1
    3cdc:	e58d3024 	str	r3, [sp, #36]	; 0x24
    int initY = stepY/2;

    int xStepCount = 0;
    int yStepCount = 0;

    for (int i = 0; i < NUM_BODIES; i++) {
    3ce0:	e59d101c 	ldr	r1, [sp, #28]
    3ce4:	e2811001 	add	r1, r1, #1
    3ce8:	e58d101c 	str	r1, [sp, #28]
    3cec:	e351000c 	cmp	r1, #12
    3cf0:	1afffea6 	bne	3790 <initRigidBodies+0x48>

        xStepCount++;

    }

}
    3cf4:	e28dd044 	add	sp, sp, #68	; 0x44
    3cf8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    3cfc:	00109120 	.word	0x00109120
    3d00:	0010a8f0 	.word	0x0010a8f0

00003d04 <eraseBodies>:

void eraseBodies() {
    3d04:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
    3d08:	e24dd008 	sub	sp, sp, #8
    3d0c:	e59f6070 	ldr	r6, [pc, #112]	; 3d84 <eraseBodies+0x80>

    for (int i = 0; i<NUM_BODIES; i++) {
    3d10:	e3a08000 	mov	r8, #0

    }

}

void eraseBodies() {
    3d14:	e246900c 	sub	r9, r6, #12
    3d18:	e3a0a003 	mov	r10, #3

    for (int i = 0; i<NUM_BODIES; i++) {
        for (int j = 1; j<VERTICIES_PER_BODY; j++) {
            drawBresenhamLine(eraseRBs[i].xs[j-1], eraseRBs[i].ys[j-1], eraseRBs[i].xs[j], eraseRBs[i].ys[j], BLACK);
    3d1c:	e1a07008 	mov	r7, r8
    3d20:	ea000012 	b	3d70 <eraseBodies+0x6c>
    3d24:	e5940000 	ldr	r0, [r4]
    3d28:	e5941010 	ldr	r1, [r4, #16]
    3d2c:	e5942004 	ldr	r2, [r4, #4]
    3d30:	e5943014 	ldr	r3, [r4, #20]
    3d34:	e58d7000 	str	r7, [sp]
    3d38:	ebfff1e1 	bl	4c4 <drawBresenhamLine>
    3d3c:	e2844004 	add	r4, r4, #4
}

void eraseBodies() {

    for (int i = 0; i<NUM_BODIES; i++) {
        for (int j = 1; j<VERTICIES_PER_BODY; j++) {
    3d40:	e2555001 	subs	r5, r5, #1
    3d44:	1afffff6 	bne	3d24 <eraseBodies+0x20>
            drawBresenhamLine(eraseRBs[i].xs[j-1], eraseRBs[i].ys[j-1], eraseRBs[i].xs[j], eraseRBs[i].ys[j], BLACK);
        }
        drawBresenhamLine(eraseRBs[i].xs[VERTICIES_PER_BODY-1], eraseRBs[i].ys[VERTICIES_PER_BODY-1], eraseRBs[i].xs[0], eraseRBs[i].ys[0], BLACK);
    3d48:	e5960000 	ldr	r0, [r6]
    3d4c:	e5961010 	ldr	r1, [r6, #16]
    3d50:	e516200c 	ldr	r2, [r6, #-12]
    3d54:	e5963004 	ldr	r3, [r6, #4]
    3d58:	e58d7000 	str	r7, [sp]
    3d5c:	ebfff1d8 	bl	4c4 <drawBresenhamLine>

}

void eraseBodies() {

    for (int i = 0; i<NUM_BODIES; i++) {
    3d60:	e2888001 	add	r8, r8, #1
    3d64:	e2866020 	add	r6, r6, #32
    3d68:	e358000c 	cmp	r8, #12
    3d6c:	0a000002 	beq	3d7c <eraseBodies+0x78>

    }

}

void eraseBodies() {
    3d70:	e0894288 	add	r4, r9, r8, lsl #5
    3d74:	e1a0500a 	mov	r5, r10
    3d78:	eaffffe9 	b	3d24 <eraseBodies+0x20>
            drawBresenhamLine(eraseRBs[i].xs[j-1], eraseRBs[i].ys[j-1], eraseRBs[i].xs[j], eraseRBs[i].ys[j], BLACK);
        }
        drawBresenhamLine(eraseRBs[i].xs[VERTICIES_PER_BODY-1], eraseRBs[i].ys[VERTICIES_PER_BODY-1], eraseRBs[i].xs[0], eraseRBs[i].ys[0], BLACK);
    }   

}
    3d7c:	e28dd008 	add	sp, sp, #8
    3d80:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
    3d84:	0010a8fc 	.word	0x0010a8fc

00003d88 <drawBodies>:

void drawBodies() {
    3d88:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
    3d8c:	e24dd008 	sub	sp, sp, #8
    3d90:	e59f607c 	ldr	r6, [pc, #124]	; 3e14 <drawBodies+0x8c>

    for (int i = 0; i<NUM_BODIES; i++) {
    3d94:	e3a08000 	mov	r8, #0
        drawBresenhamLine(eraseRBs[i].xs[VERTICIES_PER_BODY-1], eraseRBs[i].ys[VERTICIES_PER_BODY-1], eraseRBs[i].xs[0], eraseRBs[i].ys[0], BLACK);
    }   

}

void drawBodies() {
    3d98:	e2469f7b 	sub	r9, r6, #492	; 0x1ec
    3d9c:	e3a0a003 	mov	r10, #3
    3da0:	ea000015 	b	3dfc <drawBodies+0x74>
    3da4:	e1a07006 	mov	r7, r6

    for (int i = 0; i<NUM_BODIES; i++) {
        for (int j = 1; j<VERTICIES_PER_BODY; j++) {
            drawBresenhamLine(allBodies[i].xs[j-1], allBodies[i].ys[j-1], allBodies[i].xs[j], allBodies[i].ys[j], allBodies[i].colour);
    3da8:	e5940000 	ldr	r0, [r4]
    3dac:	e5941010 	ldr	r1, [r4, #16]
    3db0:	e5942004 	ldr	r2, [r4, #4]
    3db4:	e5943014 	ldr	r3, [r4, #20]
    3db8:	e1d6c0f0 	ldrsh	r12, [r6]
    3dbc:	e58dc000 	str	r12, [sp]
    3dc0:	ebfff1bf 	bl	4c4 <drawBresenhamLine>
    3dc4:	e2844004 	add	r4, r4, #4
}

void drawBodies() {

    for (int i = 0; i<NUM_BODIES; i++) {
        for (int j = 1; j<VERTICIES_PER_BODY; j++) {
    3dc8:	e2555001 	subs	r5, r5, #1
    3dcc:	1afffff4 	bne	3da4 <drawBodies+0x1c>
            drawBresenhamLine(allBodies[i].xs[j-1], allBodies[i].ys[j-1], allBodies[i].xs[j], allBodies[i].ys[j], allBodies[i].colour);
        }
        drawBresenhamLine(allBodies[i].xs[VERTICIES_PER_BODY-1], allBodies[i].ys[VERTICIES_PER_BODY-1], allBodies[i].xs[0], allBodies[i].ys[0], allBodies[i].colour);
    3dd0:	e51601e0 	ldr	r0, [r6, #-480]	; 0xfffffe20
    3dd4:	e51611d0 	ldr	r1, [r6, #-464]	; 0xfffffe30
    3dd8:	e51621ec 	ldr	r2, [r6, #-492]	; 0xfffffe14
    3ddc:	e51631dc 	ldr	r3, [r6, #-476]	; 0xfffffe24
    3de0:	e1d6c0f0 	ldrsh	r12, [r6]
    3de4:	e58dc000 	str	r12, [sp]
    3de8:	ebfff1b5 	bl	4c4 <drawBresenhamLine>

}

void drawBodies() {

    for (int i = 0; i<NUM_BODIES; i++) {
    3dec:	e2888001 	add	r8, r8, #1
    3df0:	e2866e1f 	add	r6, r6, #496	; 0x1f0
    3df4:	e358000c 	cmp	r8, #12
    3df8:	0a000003 	beq	3e0c <drawBodies+0x84>
        drawBresenhamLine(eraseRBs[i].xs[VERTICIES_PER_BODY-1], eraseRBs[i].ys[VERTICIES_PER_BODY-1], eraseRBs[i].xs[0], eraseRBs[i].ys[0], BLACK);
    }   

}

void drawBodies() {
    3dfc:	e0684288 	rsb	r4, r8, r8, lsl #5
    3e00:	e0894204 	add	r4, r9, r4, lsl #4
    3e04:	e1a0500a 	mov	r5, r10
    3e08:	eaffffe5 	b	3da4 <drawBodies+0x1c>
            drawBresenhamLine(allBodies[i].xs[j-1], allBodies[i].ys[j-1], allBodies[i].xs[j], allBodies[i].ys[j], allBodies[i].colour);
        }
        drawBresenhamLine(allBodies[i].xs[VERTICIES_PER_BODY-1], allBodies[i].ys[VERTICIES_PER_BODY-1], allBodies[i].xs[0], allBodies[i].ys[0], allBodies[i].colour);
    }   

}
    3e0c:	e28dd008 	add	sp, sp, #8
    3e10:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
    3e14:	0010930c 	.word	0x0010930c

00003e18 <updateRBMinsAndMaxes>:

void updateRBMinsAndMaxes(int i){
    3e18:	e92d0070 	push	{r4, r5, r6}
    3e1c:	e0602280 	rsb	r2, r0, r0, lsl #5
    3e20:	e59f3070 	ldr	r3, [pc, #112]	; 3e98 <updateRBMinsAndMaxes+0x80>
    3e24:	e0832202 	add	r2, r3, r2, lsl #4
    3e28:	e2422004 	sub	r2, r2, #4
    3e2c:	e3a03004 	mov	r3, #4

    int cMaxX = INT_MIN_C;
    int cMaxY = INT_MIN_C;
    int cMinX = INT_MAX_C;
    int cMinY = INT_MAX_C;
    3e30:	e3e0c102 	mvn	r12, #-2147483648	; 0x80000000

void updateRBMinsAndMaxes(int i){

    int cMaxX = INT_MIN_C;
    int cMaxY = INT_MIN_C;
    int cMinX = INT_MAX_C;
    3e34:	e1a0500c 	mov	r5, r12
}

void updateRBMinsAndMaxes(int i){

    int cMaxX = INT_MIN_C;
    int cMaxY = INT_MIN_C;
    3e38:	e3a04102 	mov	r4, #-2147483648	; 0x80000000

}

void updateRBMinsAndMaxes(int i){

    int cMaxX = INT_MIN_C;
    3e3c:	e1a06004 	mov	r6, r4
    int cMaxY = INT_MIN_C;
    int cMinX = INT_MAX_C;
    int cMinY = INT_MAX_C;
    for (int vertIdx = 0; vertIdx < VERTICIES_PER_BODY; vertIdx++) {
        if (allBodies[i].xs[vertIdx] > cMaxX) cMaxX = allBodies[i].xs[vertIdx];
    3e40:	e5b21004 	ldr	r1, [r2, #4]!
    3e44:	e1560001 	cmp	r6, r1
    3e48:	b1a06001 	movlt	r6, r1
    3e4c:	e1550001 	cmp	r5, r1
    3e50:	a1a05001 	movge	r5, r1
        if (allBodies[i].xs[vertIdx] < cMinX) cMinX = allBodies[i].xs[vertIdx];
        if (allBodies[i].ys[vertIdx] > cMaxY) cMaxY = allBodies[i].ys[vertIdx];
    3e54:	e5921010 	ldr	r1, [r2, #16]
    3e58:	e1540001 	cmp	r4, r1
    3e5c:	b1a04001 	movlt	r4, r1
    3e60:	e15c0001 	cmp	r12, r1
    3e64:	a1a0c001 	movge	r12, r1

    int cMaxX = INT_MIN_C;
    int cMaxY = INT_MIN_C;
    int cMinX = INT_MAX_C;
    int cMinY = INT_MAX_C;
    for (int vertIdx = 0; vertIdx < VERTICIES_PER_BODY; vertIdx++) {
    3e68:	e2533001 	subs	r3, r3, #1
    3e6c:	1afffff3 	bne	3e40 <updateRBMinsAndMaxes+0x28>
        if (allBodies[i].xs[vertIdx] > cMaxX) cMaxX = allBodies[i].xs[vertIdx];
        if (allBodies[i].xs[vertIdx] < cMinX) cMinX = allBodies[i].xs[vertIdx];
        if (allBodies[i].ys[vertIdx] > cMaxY) cMaxY = allBodies[i].ys[vertIdx];
        if (allBodies[i].ys[vertIdx] < cMinY) cMinY = allBodies[i].ys[vertIdx];
    }
    allBodies[i].maxPX = cMaxX;
    3e70:	e3093424 	movw	r3, #37924	; 0x9424
    3e74:	e3403010 	movt	r3, #16
    3e78:	e0600280 	rsb	r0, r0, r0, lsl #5
    3e7c:	e0830200 	add	r0, r3, r0, lsl #4
    3e80:	e500629c 	str	r6, [r0, #-668]	; 0xfffffd64
    allBodies[i].minPX = cMinX;
    3e84:	e50052a4 	str	r5, [r0, #-676]	; 0xfffffd5c
    allBodies[i].maxPY = cMaxY;
    3e88:	e5004298 	str	r4, [r0, #-664]	; 0xfffffd68
    allBodies[i].minPY = cMinY;
    3e8c:	e500c2a0 	str	r12, [r0, #-672]	; 0xfffffd60
    //     printf("minX:%d\n", cMinX);
    //     printf("maxY:%d\n", cMaxY);
    //     printf("minY:%d\n", cMinY);
    // }

}
    3e90:	e8bd0070 	pop	{r4, r5, r6}
    3e94:	e12fff1e 	bx	lr
    3e98:	00109120 	.word	0x00109120

00003e9c <stepBodyPositions>:

void stepBodyPositions(int i) {
    3e9c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    3ea0:	e24dd01c 	sub	sp, sp, #28
    3ea4:	e1a0a000 	mov	r10, r0

    // Must also update positions of all verticies

    float pt = allBodies[i].theta;
    if(allBodies[i].cLast){
    3ea8:	e3093424 	movw	r3, #37924	; 0x9424
    3eac:	e3403010 	movt	r3, #16
    3eb0:	e0602280 	rsb	r2, r0, r0, lsl #5
    3eb4:	e0833202 	add	r3, r3, r2, lsl #4
    3eb8:	e553325c 	ldrb	r3, [r3, #-604]	; 0xfffffda4
    3ebc:	e3530000 	cmp	r3, #0
    3ec0:	0a000170 	beq	4488 <stepBodyPositions+0x5ec>
        allBodies[i].omega *= ELASTICITY_RB * EPSILON_RB;
    3ec4:	e3093424 	movw	r3, #37924	; 0x9424
    3ec8:	e3403010 	movt	r3, #16
    3ecc:	e0834202 	add	r4, r3, r2, lsl #4
    3ed0:	e5140270 	ldr	r0, [r4, #-624]	; 0xfffffd90
    3ed4:	eb001483 	bl	90e8 <__aeabi_f2d>
    3ed8:	e30e2d8e 	movw	r2, #60814	; 0xed8e
    3edc:	e34a20b5 	movt	r2, #41141	; 0xa0b5
    3ee0:	e30c36f7 	movw	r3, #50935	; 0xc6f7
    3ee4:	e3433ed0 	movt	r3, #16080	; 0x3ed0
    3ee8:	eb0014ab 	bl	919c <__aeabi_dmul>
    3eec:	eb001639 	bl	97d8 <__aeabi_d2f>
        allBodies[i].omega *= ELASTICITY_RB * EPSILON_RB;
    3ef0:	eb00147c 	bl	90e8 <__aeabi_f2d>
    3ef4:	e30e2d8e 	movw	r2, #60814	; 0xed8e
    3ef8:	e34a20b5 	movt	r2, #41141	; 0xa0b5
    3efc:	e30c36f7 	movw	r3, #50935	; 0xc6f7
    3f00:	e3433ed0 	movt	r3, #16080	; 0x3ed0
    3f04:	eb0014a4 	bl	919c <__aeabi_dmul>
    3f08:	eb001632 	bl	97d8 <__aeabi_d2f>
    3f0c:	e5040270 	str	r0, [r4, #-624]	; 0xfffffd90
    }
    bool goStep = !allBodies[i].cLast || (allBodies[i].cLast && (allBodies[i].lastPositionDelta < MAX_COLLISIONPT_DELTA));
    3f10:	e554325c 	ldrb	r3, [r4, #-604]	; 0xfffffda4
    3f14:	e3530000 	cmp	r3, #0
    3f18:	0a00015a 	beq	4488 <stepBodyPositions+0x5ec>
    3f1c:	e5140260 	ldr	r0, [r4, #-608]	; 0xfffffda0
    3f20:	e3a01000 	mov	r1, #0
    3f24:	e3441120 	movt	r1, #16672	; 0x4120
    3f28:	eb0017e8 	bl	9ed0 <__aeabi_fcmplt>
    3f2c:	e3500000 	cmp	r0, #0
    3f30:	1a000154 	bne	4488 <stepBodyPositions+0x5ec>
    3f34:	ea000163 	b	44c8 <stepBodyPositions+0x62c>
    if (i!=currentMouseInteractionObj && goStep){

        if(-EPSILON_RB > allBodies[i].omega || EPSILON_RB < allBodies[i].omega){
    3f38:	e3093424 	movw	r3, #37924	; 0x9424
    3f3c:	e3403010 	movt	r3, #16
    3f40:	e06a228a 	rsb	r2, r10, r10, lsl #5
    3f44:	e0833202 	add	r3, r3, r2, lsl #4
    3f48:	e5136270 	ldr	r6, [r3, #-624]	; 0xfffffd90
    3f4c:	e1a00006 	mov	r0, r6
    3f50:	eb001464 	bl	90e8 <__aeabi_f2d>
    3f54:	e1a04000 	mov	r4, r0
    3f58:	e1a05001 	mov	r5, r1
    3f5c:	e30628f1 	movw	r2, #26865	; 0x68f1
    3f60:	e34828e3 	movt	r2, #35043	; 0x88e3
    3f64:	e30f38b5 	movw	r3, #63669	; 0xf8b5
    3f68:	e34b3ee4 	movt	r3, #48868	; 0xbee4
    3f6c:	eb0015ea 	bl	971c <__aeabi_dcmplt>
    3f70:	e3500000 	cmp	r0, #0
    3f74:	1a000008 	bne	3f9c <stepBodyPositions+0x100>
    3f78:	e1a00004 	mov	r0, r4
    3f7c:	e1a01005 	mov	r1, r5
    3f80:	e30628f1 	movw	r2, #26865	; 0x68f1
    3f84:	e34828e3 	movt	r2, #35043	; 0x88e3
    3f88:	e30f38b5 	movw	r3, #63669	; 0xf8b5
    3f8c:	e3433ee4 	movt	r3, #16100	; 0x3ee4
    3f90:	eb0015f3 	bl	9764 <__aeabi_dcmpgt>
    3f94:	e3500000 	cmp	r0, #0
    3f98:	0a00000c 	beq	3fd0 <stepBodyPositions+0x134>
            allBodies[i].theta += allBodies[i].omega * SPH_RB;
    3f9c:	e3093424 	movw	r3, #37924	; 0x9424
    3fa0:	e3403010 	movt	r3, #16
    3fa4:	e06a428a 	rsb	r4, r10, r10, lsl #5
    3fa8:	e0834204 	add	r4, r3, r4, lsl #4
    3fac:	e30a3700 	movw	r3, #42752	; 0xa700
    3fb0:	e3403000 	movt	r3, #0
    3fb4:	e1a00006 	mov	r0, r6
    3fb8:	e5931cac 	ldr	r1, [r3, #3244]	; 0xcac
    3fbc:	eb0016d8 	bl	9b24 <__aeabi_fmul>
    3fc0:	e1a01000 	mov	r1, r0
    3fc4:	e5140284 	ldr	r0, [r4, #-644]	; 0xfffffd7c
    3fc8:	eb00162d 	bl	9884 <__addsf3>
    3fcc:	e5040284 	str	r0, [r4, #-644]	; 0xfffffd7c
        }
        if(-EPSILON_RB > allBodies[i].v.x || EPSILON_RB < allBodies[i].v.x) {
    3fd0:	e3093424 	movw	r3, #37924	; 0x9424
    3fd4:	e3403010 	movt	r3, #16
    3fd8:	e06a228a 	rsb	r2, r10, r10, lsl #5
    3fdc:	e0833202 	add	r3, r3, r2, lsl #4
    3fe0:	e51362b4 	ldr	r6, [r3, #-692]	; 0xfffffd4c
    3fe4:	e1a00006 	mov	r0, r6
    3fe8:	eb00143e 	bl	90e8 <__aeabi_f2d>
    3fec:	e1a04000 	mov	r4, r0
    3ff0:	e1a05001 	mov	r5, r1
    3ff4:	e30628f1 	movw	r2, #26865	; 0x68f1
    3ff8:	e34828e3 	movt	r2, #35043	; 0x88e3
    3ffc:	e30f38b5 	movw	r3, #63669	; 0xf8b5
    4000:	e34b3ee4 	movt	r3, #48868	; 0xbee4
    4004:	eb0015c4 	bl	971c <__aeabi_dcmplt>
    4008:	e3500000 	cmp	r0, #0
    400c:	1a000008 	bne	4034 <stepBodyPositions+0x198>
    4010:	e1a00004 	mov	r0, r4
    4014:	e1a01005 	mov	r1, r5
    4018:	e30628f1 	movw	r2, #26865	; 0x68f1
    401c:	e34828e3 	movt	r2, #35043	; 0x88e3
    4020:	e30f38b5 	movw	r3, #63669	; 0xf8b5
    4024:	e3433ee4 	movt	r3, #16100	; 0x3ee4
    4028:	eb0015cd 	bl	9764 <__aeabi_dcmpgt>
    402c:	e3500000 	cmp	r0, #0
    4030:	0a00000c 	beq	4068 <stepBodyPositions+0x1cc>
            allBodies[i].cx += allBodies[i].v.x * SPH_RB;
    4034:	e3093424 	movw	r3, #37924	; 0x9424
    4038:	e3403010 	movt	r3, #16
    403c:	e06a428a 	rsb	r4, r10, r10, lsl #5
    4040:	e0834204 	add	r4, r3, r4, lsl #4
    4044:	e30a3700 	movw	r3, #42752	; 0xa700
    4048:	e3403000 	movt	r3, #0
    404c:	e1a00006 	mov	r0, r6
    4050:	e5931cac 	ldr	r1, [r3, #3244]	; 0xcac
    4054:	eb0016b2 	bl	9b24 <__aeabi_fmul>
    4058:	e1a01000 	mov	r1, r0
    405c:	e5140294 	ldr	r0, [r4, #-660]	; 0xfffffd6c
    4060:	eb001607 	bl	9884 <__addsf3>
    4064:	e5040294 	str	r0, [r4, #-660]	; 0xfffffd6c
        }
        if(-EPSILON_RB > allBodies[i].v.y || EPSILON_RB < allBodies[i].v.y) {
    4068:	e3093424 	movw	r3, #37924	; 0x9424
    406c:	e3403010 	movt	r3, #16
    4070:	e06a228a 	rsb	r2, r10, r10, lsl #5
    4074:	e0833202 	add	r3, r3, r2, lsl #4
    4078:	e51362b0 	ldr	r6, [r3, #-688]	; 0xfffffd50
    407c:	e1a00006 	mov	r0, r6
    4080:	eb001418 	bl	90e8 <__aeabi_f2d>
    4084:	e1a04000 	mov	r4, r0
    4088:	e1a05001 	mov	r5, r1
    408c:	e30628f1 	movw	r2, #26865	; 0x68f1
    4090:	e34828e3 	movt	r2, #35043	; 0x88e3
    4094:	e30f38b5 	movw	r3, #63669	; 0xf8b5
    4098:	e34b3ee4 	movt	r3, #48868	; 0xbee4
    409c:	eb00159e 	bl	971c <__aeabi_dcmplt>
    40a0:	e3500000 	cmp	r0, #0
    40a4:	1a000008 	bne	40cc <stepBodyPositions+0x230>
    40a8:	e1a00004 	mov	r0, r4
    40ac:	e1a01005 	mov	r1, r5
    40b0:	e30628f1 	movw	r2, #26865	; 0x68f1
    40b4:	e34828e3 	movt	r2, #35043	; 0x88e3
    40b8:	e30f38b5 	movw	r3, #63669	; 0xf8b5
    40bc:	e3433ee4 	movt	r3, #16100	; 0x3ee4
    40c0:	eb0015a7 	bl	9764 <__aeabi_dcmpgt>
    40c4:	e3500000 	cmp	r0, #0
    40c8:	0a0000f3 	beq	449c <stepBodyPositions+0x600>
            allBodies[i].cy += allBodies[i].v.y * SPH_RB;
    40cc:	e3093424 	movw	r3, #37924	; 0x9424
    40d0:	e3403010 	movt	r3, #16
    40d4:	e06a428a 	rsb	r4, r10, r10, lsl #5
    40d8:	e0834204 	add	r4, r3, r4, lsl #4
    40dc:	e30a3700 	movw	r3, #42752	; 0xa700
    40e0:	e3403000 	movt	r3, #0
    40e4:	e1a00006 	mov	r0, r6
    40e8:	e5931cac 	ldr	r1, [r3, #3244]	; 0xcac
    40ec:	eb00168c 	bl	9b24 <__aeabi_fmul>
    40f0:	e1a01000 	mov	r1, r0
    40f4:	e5140290 	ldr	r0, [r4, #-656]	; 0xfffffd70
    40f8:	eb0015e1 	bl	9884 <__addsf3>
    40fc:	e5040290 	str	r0, [r4, #-656]	; 0xfffffd70
    4100:	ea0000e5 	b	449c <stepBodyPositions+0x600>
        
    } else if (!goStep) {

        //Kill everything.
        for(int k = 0; k < NUM_BODIES; k++){
            allBodies[i].extForces[k].force.x = 0;
    4104:	e58310b4 	str	r1, [r3, #180]	; 0xb4
            allBodies[i].extForces[k].force.y = 0;
    4108:	e58310b8 	str	r1, [r3, #184]	; 0xb8
            allBodies[i].extForces[k].isActive = false;
    410c:	e5c300bc 	strb	r0, [r3, #188]	; 0xbc
    4110:	e2833014 	add	r3, r3, #20
        }
        
    } else if (!goStep) {

        //Kill everything.
        for(int k = 0; k < NUM_BODIES; k++){
    4114:	e2522001 	subs	r2, r2, #1
    4118:	1afffff9 	bne	4104 <stepBodyPositions+0x268>
            allBodies[i].extForces[k].force.x = 0;
            allBodies[i].extForces[k].force.y = 0;
            allBodies[i].extForces[k].isActive = false;
        }
        allBodies[i].alpha = 0;
    411c:	e3093424 	movw	r3, #37924	; 0x9424
    4120:	e3403010 	movt	r3, #16
    4124:	e06a228a 	rsb	r2, r10, r10, lsl #5
    4128:	e0833202 	add	r3, r3, r2, lsl #4
    412c:	e3a02000 	mov	r2, #0
    4130:	e503226c 	str	r2, [r3, #-620]	; 0xfffffd94
        // allBodies[i].v.x *= ELASTICITY_RB;
        // allBodies[i].v.y *= ELASTICITY_RB;
        if(-EPSILON_RB > allBodies[i].v.x || EPSILON_RB < allBodies[i].v.x) {
    4134:	e51362b4 	ldr	r6, [r3, #-692]	; 0xfffffd4c
    4138:	e1a00006 	mov	r0, r6
    413c:	eb0013e9 	bl	90e8 <__aeabi_f2d>
    4140:	e1a04000 	mov	r4, r0
    4144:	e1a05001 	mov	r5, r1
    4148:	e30628f1 	movw	r2, #26865	; 0x68f1
    414c:	e34828e3 	movt	r2, #35043	; 0x88e3
    4150:	e30f38b5 	movw	r3, #63669	; 0xf8b5
    4154:	e34b3ee4 	movt	r3, #48868	; 0xbee4
    4158:	eb00156f 	bl	971c <__aeabi_dcmplt>
    415c:	e3500000 	cmp	r0, #0
    4160:	1a000008 	bne	4188 <stepBodyPositions+0x2ec>
    4164:	e1a00004 	mov	r0, r4
    4168:	e1a01005 	mov	r1, r5
    416c:	e30628f1 	movw	r2, #26865	; 0x68f1
    4170:	e34828e3 	movt	r2, #35043	; 0x88e3
    4174:	e30f38b5 	movw	r3, #63669	; 0xf8b5
    4178:	e3433ee4 	movt	r3, #16100	; 0x3ee4
    417c:	eb001578 	bl	9764 <__aeabi_dcmpgt>
    4180:	e3500000 	cmp	r0, #0
    4184:	0a00000c 	beq	41bc <stepBodyPositions+0x320>
            allBodies[i].cx += allBodies[i].v.x * SPH_RB;// * 0.01;
    4188:	e3093424 	movw	r3, #37924	; 0x9424
    418c:	e3403010 	movt	r3, #16
    4190:	e06a428a 	rsb	r4, r10, r10, lsl #5
    4194:	e0834204 	add	r4, r3, r4, lsl #4
    4198:	e30a3700 	movw	r3, #42752	; 0xa700
    419c:	e3403000 	movt	r3, #0
    41a0:	e1a00006 	mov	r0, r6
    41a4:	e5931cac 	ldr	r1, [r3, #3244]	; 0xcac
    41a8:	eb00165d 	bl	9b24 <__aeabi_fmul>
    41ac:	e1a01000 	mov	r1, r0
    41b0:	e5140294 	ldr	r0, [r4, #-660]	; 0xfffffd6c
    41b4:	eb0015b2 	bl	9884 <__addsf3>
    41b8:	e5040294 	str	r0, [r4, #-660]	; 0xfffffd6c
        }
        if(-EPSILON_RB > allBodies[i].v.y || EPSILON_RB < allBodies[i].v.y) {
    41bc:	e3093424 	movw	r3, #37924	; 0x9424
    41c0:	e3403010 	movt	r3, #16
    41c4:	e06a228a 	rsb	r2, r10, r10, lsl #5
    41c8:	e0833202 	add	r3, r3, r2, lsl #4
    41cc:	e51362b0 	ldr	r6, [r3, #-688]	; 0xfffffd50
    41d0:	e1a00006 	mov	r0, r6
    41d4:	eb0013c3 	bl	90e8 <__aeabi_f2d>
    41d8:	e1a04000 	mov	r4, r0
    41dc:	e1a05001 	mov	r5, r1
    41e0:	e30628f1 	movw	r2, #26865	; 0x68f1
    41e4:	e34828e3 	movt	r2, #35043	; 0x88e3
    41e8:	e30f38b5 	movw	r3, #63669	; 0xf8b5
    41ec:	e34b3ee4 	movt	r3, #48868	; 0xbee4
    41f0:	eb001549 	bl	971c <__aeabi_dcmplt>
    41f4:	e3500000 	cmp	r0, #0
    41f8:	1a000008 	bne	4220 <stepBodyPositions+0x384>
    41fc:	e1a00004 	mov	r0, r4
    4200:	e1a01005 	mov	r1, r5
    4204:	e30628f1 	movw	r2, #26865	; 0x68f1
    4208:	e34828e3 	movt	r2, #35043	; 0x88e3
    420c:	e30f38b5 	movw	r3, #63669	; 0xf8b5
    4210:	e3433ee4 	movt	r3, #16100	; 0x3ee4
    4214:	eb001552 	bl	9764 <__aeabi_dcmpgt>
    4218:	e3500000 	cmp	r0, #0
    421c:	0a00009e 	beq	449c <stepBodyPositions+0x600>
            allBodies[i].cy += allBodies[i].v.y * SPH_RB;// * 0.01;
    4220:	e3093424 	movw	r3, #37924	; 0x9424
    4224:	e3403010 	movt	r3, #16
    4228:	e06a428a 	rsb	r4, r10, r10, lsl #5
    422c:	e0834204 	add	r4, r3, r4, lsl #4
    4230:	e30a3700 	movw	r3, #42752	; 0xa700
    4234:	e3403000 	movt	r3, #0
    4238:	e1a00006 	mov	r0, r6
    423c:	e5931cac 	ldr	r1, [r3, #3244]	; 0xcac
    4240:	eb001637 	bl	9b24 <__aeabi_fmul>
    4244:	e1a01000 	mov	r1, r0
    4248:	e5140290 	ldr	r0, [r4, #-656]	; 0xfffffd70
    424c:	eb00158c 	bl	9884 <__addsf3>
    4250:	e5040290 	str	r0, [r4, #-656]	; 0xfffffd70
    4254:	ea000090 	b	449c <stepBodyPositions+0x600>
    //     printf("minY:%d\n", cMinY);
    // }

}

void stepBodyPositions(int i) {
    4258:	e1a0a00b 	mov	r10, r11

        // eraseRBs[i].xs[j] = allBodies[i].xs[j];
        // eraseRBs[i].ys[j] = allBodies[i].ys[j];

        nt = allBodies[i].constThetas[j] + allBodies[i].theta;
        ndx = allBodies[i].vDistances[j] * cos(nt);
    425c:	e59b0040 	ldr	r0, [r11, #64]	; 0x40
    4260:	eb0013a0 	bl	90e8 <__aeabi_f2d>
    4264:	e1a06000 	mov	r6, r0
    4268:	e1a07001 	mov	r7, r1
    for (int j = 0; j < VERTICIES_PER_BODY; j++) {    

        // eraseRBs[i].xs[j] = allBodies[i].xs[j];
        // eraseRBs[i].ys[j] = allBodies[i].ys[j];

        nt = allBodies[i].constThetas[j] + allBodies[i].theta;
    426c:	e59b0084 	ldr	r0, [r11, #132]	; 0x84
    4270:	e5191284 	ldr	r1, [r9, #-644]	; 0xfffffd7c
    4274:	eb001582 	bl	9884 <__addsf3>
        ndx = allBodies[i].vDistances[j] * cos(nt);
    4278:	eb00139a 	bl	90e8 <__aeabi_f2d>
    427c:	e1a04000 	mov	r4, r0
    4280:	e1a05001 	mov	r5, r1
    4284:	eb0002f3 	bl	4e58 <cos>
    4288:	e1cd00f0 	strd	r0, [sp]
        ndy = allBodies[i].vDistances[j] * sin(nt);
    428c:	e1a00004 	mov	r0, r4
    4290:	e1a01005 	mov	r1, r5
    4294:	eb000393 	bl	50e8 <sin>
    4298:	e1cd00f8 	strd	r0, [sp, #8]

        // eraseRBs[i].xs[j] = allBodies[i].xs[j];
        // eraseRBs[i].ys[j] = allBodies[i].ys[j];

        nt = allBodies[i].constThetas[j] + allBodies[i].theta;
        ndx = allBodies[i].vDistances[j] * cos(nt);
    429c:	e1a00006 	mov	r0, r6
    42a0:	e1a01007 	mov	r1, r7
    42a4:	e1cd20d0 	ldrd	r2, [sp]
    42a8:	eb0013bb 	bl	919c <__aeabi_dmul>
    42ac:	eb001549 	bl	97d8 <__aeabi_d2f>
    42b0:	e1a01000 	mov	r1, r0
        ndy = allBodies[i].vDistances[j] * sin(nt);

        allBodies[i].pxs[j] = allBodies[i].cx + ndx;
    42b4:	e5190294 	ldr	r0, [r9, #-660]	; 0xfffffd6c
    42b8:	eb001571 	bl	9884 <__addsf3>
    42bc:	e1a04000 	mov	r4, r0
    42c0:	e58b0020 	str	r0, [r11, #32]
        // eraseRBs[i].xs[j] = allBodies[i].xs[j];
        // eraseRBs[i].ys[j] = allBodies[i].ys[j];

        nt = allBodies[i].constThetas[j] + allBodies[i].theta;
        ndx = allBodies[i].vDistances[j] * cos(nt);
        ndy = allBodies[i].vDistances[j] * sin(nt);
    42c4:	e1a00006 	mov	r0, r6
    42c8:	e1a01007 	mov	r1, r7
    42cc:	e1cd20d8 	ldrd	r2, [sp, #8]
    42d0:	eb0013b1 	bl	919c <__aeabi_dmul>
    42d4:	eb00153f 	bl	97d8 <__aeabi_d2f>
    42d8:	e1a01000 	mov	r1, r0

        allBodies[i].pxs[j] = allBodies[i].cx + ndx;
        allBodies[i].pys[j] = allBodies[i].cy + ndy;
    42dc:	e5190290 	ldr	r0, [r9, #-656]	; 0xfffffd70
    42e0:	eb001567 	bl	9884 <__addsf3>
    42e4:	e1a05000 	mov	r5, r0
    42e8:	e58b0030 	str	r0, [r11, #48]	; 0x30

        allBodies[i].xs[j] = PX_PER_M_RB * allBodies[i].pxs[j];
    42ec:	e1a00004 	mov	r0, r4
    42f0:	eb00170e 	bl	9f30 <__aeabi_f2iz>
    42f4:	e1a06000 	mov	r6, r0
    42f8:	e58b0000 	str	r0, [r11]
        allBodies[i].ys[j] = PX_PER_M_RB * allBodies[i].pys[j];
    42fc:	e1a00005 	mov	r0, r5
    4300:	eb00170a 	bl	9f30 <__aeabi_f2iz>
    4304:	e58b0010 	str	r0, [r11, #16]
        
        // Logic for necessary aadjustment if any
        if (allBodies[i].xs[j] < 0 ){
    4308:	e3560000 	cmp	r6, #0
    430c:	aa000014 	bge	4364 <stepBodyPositions+0x4c8>
            allBodies[i].cx += 0 - M_PER_PX_RB * allBodies[i].xs[j];
    4310:	e5190294 	ldr	r0, [r9, #-660]	; 0xfffffd6c
    4314:	eb001373 	bl	90e8 <__aeabi_f2d>
    4318:	e1a04000 	mov	r4, r0
    431c:	e1a05001 	mov	r5, r1
    4320:	e1a00006 	mov	r0, r6
    4324:	eb001365 	bl	90c0 <__aeabi_i2d>
    4328:	e1a02000 	mov	r2, r0
    432c:	e1a03001 	mov	r3, r1
    4330:	e3a00000 	mov	r0, #0
    4334:	e3a01000 	mov	r1, #0
    4338:	eb001292 	bl	8d88 <__aeabi_dsub>
    433c:	e1a02000 	mov	r2, r0
    4340:	e1a03001 	mov	r3, r1
    4344:	e1a00004 	mov	r0, r4
    4348:	e1a01005 	mov	r1, r5
    434c:	eb00128e 	bl	8d8c <__adddf3>
    4350:	eb001520 	bl	97d8 <__aeabi_d2f>
    4354:	e5090294 	str	r0, [r9, #-660]	; 0xfffffd6c
            mustAdjust = true;
    4358:	e3a03001 	mov	r3, #1
    435c:	e58d3010 	str	r3, [sp, #16]
    4360:	ea000012 	b	43b0 <stepBodyPositions+0x514>
        } else if (allBodies[i].xs[j] > (MAX_X-1)){
    4364:	e300313f 	movw	r3, #319	; 0x13f
    4368:	e1560003 	cmp	r6, r3
    436c:	da00000f 	ble	43b0 <stepBodyPositions+0x514>
            allBodies[i].cx -=  M_PER_PX_RB * (allBodies[i].xs[j] - MAX_X + 1);
    4370:	e5190294 	ldr	r0, [r9, #-660]	; 0xfffffd6c
    4374:	eb00135b 	bl	90e8 <__aeabi_f2d>
    4378:	e1a04000 	mov	r4, r0
    437c:	e1a05001 	mov	r5, r1
    4380:	e2460f4f 	sub	r0, r6, #316	; 0x13c
    4384:	e2400003 	sub	r0, r0, #3
    4388:	eb00134c 	bl	90c0 <__aeabi_i2d>
    438c:	e1a02000 	mov	r2, r0
    4390:	e1a03001 	mov	r3, r1
    4394:	e1a00004 	mov	r0, r4
    4398:	e1a01005 	mov	r1, r5
    439c:	eb001279 	bl	8d88 <__aeabi_dsub>
    43a0:	eb00150c 	bl	97d8 <__aeabi_d2f>
    43a4:	e5090294 	str	r0, [r9, #-660]	; 0xfffffd6c
            mustAdjust = true;
    43a8:	e3a03001 	mov	r3, #1
    43ac:	e58d3010 	str	r3, [sp, #16]
        }
        if (allBodies[i].ys[j] < 0 ){
    43b0:	e59a6010 	ldr	r6, [r10, #16]
    43b4:	e3560000 	cmp	r6, #0
    43b8:	aa000014 	bge	4410 <stepBodyPositions+0x574>
            allBodies[i].cy += 0 - M_PER_PX_RB * allBodies[i].ys[j];
    43bc:	e5190290 	ldr	r0, [r9, #-656]	; 0xfffffd70
    43c0:	eb001348 	bl	90e8 <__aeabi_f2d>
    43c4:	e1a04000 	mov	r4, r0
    43c8:	e1a05001 	mov	r5, r1
    43cc:	e1a00006 	mov	r0, r6
    43d0:	eb00133a 	bl	90c0 <__aeabi_i2d>
    43d4:	e1a02000 	mov	r2, r0
    43d8:	e1a03001 	mov	r3, r1
    43dc:	e3a00000 	mov	r0, #0
    43e0:	e3a01000 	mov	r1, #0
    43e4:	eb001267 	bl	8d88 <__aeabi_dsub>
    43e8:	e1a02000 	mov	r2, r0
    43ec:	e1a03001 	mov	r3, r1
    43f0:	e1a00004 	mov	r0, r4
    43f4:	e1a01005 	mov	r1, r5
    43f8:	eb001263 	bl	8d8c <__adddf3>
    43fc:	eb0014f5 	bl	97d8 <__aeabi_d2f>
    4400:	e5090290 	str	r0, [r9, #-656]	; 0xfffffd70
            mustAdjust = true;
    4404:	e3a03001 	mov	r3, #1
    4408:	e58d3010 	str	r3, [sp, #16]
    440c:	ea000010 	b	4454 <stepBodyPositions+0x5b8>
        } else if (allBodies[i].ys[j] > (MAX_Y-1)){
    4410:	e35600ef 	cmp	r6, #239	; 0xef
    4414:	da00000e 	ble	4454 <stepBodyPositions+0x5b8>
            allBodies[i].cy -= M_PER_PX_RB * (allBodies[i].ys[j] - MAX_Y + 1);
    4418:	e5190290 	ldr	r0, [r9, #-656]	; 0xfffffd70
    441c:	eb001331 	bl	90e8 <__aeabi_f2d>
    4420:	e1a04000 	mov	r4, r0
    4424:	e1a05001 	mov	r5, r1
    4428:	e24600ef 	sub	r0, r6, #239	; 0xef
    442c:	eb001323 	bl	90c0 <__aeabi_i2d>
    4430:	e1a02000 	mov	r2, r0
    4434:	e1a03001 	mov	r3, r1
    4438:	e1a00004 	mov	r0, r4
    443c:	e1a01005 	mov	r1, r5
    4440:	eb001250 	bl	8d88 <__aeabi_dsub>
    4444:	eb0014e3 	bl	97d8 <__aeabi_d2f>
    4448:	e5090290 	str	r0, [r9, #-656]	; 0xfffffd70
            mustAdjust = true;
    444c:	e3a03001 	mov	r3, #1
    4450:	e58d3010 	str	r3, [sp, #16]
    // Revert last position application if any vert out of bounds.
    bool mustAdjust = false;

    float ndx, ndy, nt;

    for (int j = 0; j < VERTICIES_PER_BODY; j++) {    
    4454:	e2888001 	add	r8, r8, #1
    4458:	e28bb004 	add	r11, r11, #4
    445c:	e3580004 	cmp	r8, #4
    4460:	1affff7c 	bne	4258 <stepBodyPositions+0x3bc>
    4464:	e59da014 	ldr	r10, [sp, #20]
            allBodies[i].cy -= M_PER_PX_RB * (allBodies[i].ys[j] - MAX_Y + 1);
            mustAdjust = true;
        }

    }
    if(mustAdjust) resetBodyFromCenter(i);
    4468:	e59d3010 	ldr	r3, [sp, #16]
    446c:	e3530000 	cmp	r3, #0
    4470:	0a000001 	beq	447c <stepBodyPositions+0x5e0>
    4474:	e1a0000a 	mov	r0, r10
    4478:	ebfff803 	bl	248c <resetBodyFromCenter>
    updateRBMinsAndMaxes(i);
    447c:	e1a0000a 	mov	r0, r10
    4480:	ebfffe64 	bl	3e18 <updateRBMinsAndMaxes>
    4484:	ea000016 	b	44e4 <stepBodyPositions+0x648>
    if(allBodies[i].cLast){
        allBodies[i].omega *= ELASTICITY_RB * EPSILON_RB;
        allBodies[i].omega *= ELASTICITY_RB * EPSILON_RB;
    }
    bool goStep = !allBodies[i].cLast || (allBodies[i].cLast && (allBodies[i].lastPositionDelta < MAX_COLLISIONPT_DELTA));
    if (i!=currentMouseInteractionObj && goStep){
    4488:	e30b341c 	movw	r3, #46108	; 0xb41c
    448c:	e3403010 	movt	r3, #16
    4490:	e51339ac 	ldr	r3, [r3, #-2476]	; 0xfffff654
    4494:	e15a0003 	cmp	r10, r3
    4498:	1afffea6 	bne	3f38 <stepBodyPositions+0x9c>
    //     printf("minY:%d\n", cMinY);
    // }

}

void stepBodyPositions(int i) {
    449c:	e06ab28a 	rsb	r11, r10, r10, lsl #5
    44a0:	e59f3044 	ldr	r3, [pc, #68]	; 44ec <stepBodyPositions+0x650>
    44a4:	e083b20b 	add	r11, r3, r11, lsl #4
    44a8:	e3a08000 	mov	r8, #0
    44ac:	e58d8010 	str	r8, [sp, #16]
    for (int j = 0; j < VERTICIES_PER_BODY; j++) {    

        // eraseRBs[i].xs[j] = allBodies[i].xs[j];
        // eraseRBs[i].ys[j] = allBodies[i].ys[j];

        nt = allBodies[i].constThetas[j] + allBodies[i].theta;
    44b0:	e3093424 	movw	r3, #37924	; 0x9424
    44b4:	e3403010 	movt	r3, #16
    44b8:	e06a228a 	rsb	r2, r10, r10, lsl #5
    44bc:	e0839202 	add	r9, r3, r2, lsl #4
    44c0:	e58da014 	str	r10, [sp, #20]
    44c4:	eaffff63 	b	4258 <stepBodyPositions+0x3bc>
    //     printf("minY:%d\n", cMinY);
    // }

}

void stepBodyPositions(int i) {
    44c8:	e06a328a 	rsb	r3, r10, r10, lsl #5
    44cc:	e59f2018 	ldr	r2, [pc, #24]	; 44ec <stepBodyPositions+0x650>
    44d0:	e0823203 	add	r3, r2, r3, lsl #4
    44d4:	e3a0200c 	mov	r2, #12
        
    } else if (!goStep) {

        //Kill everything.
        for(int k = 0; k < NUM_BODIES; k++){
            allBodies[i].extForces[k].force.x = 0;
    44d8:	e3a01000 	mov	r1, #0
            allBodies[i].extForces[k].force.y = 0;
            allBodies[i].extForces[k].isActive = false;
    44dc:	e3a00000 	mov	r0, #0
    44e0:	eaffff07 	b	4104 <stepBodyPositions+0x268>

    }
    if(mustAdjust) resetBodyFromCenter(i);
    updateRBMinsAndMaxes(i);

}
    44e4:	e28dd01c 	add	sp, sp, #28
    44e8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    44ec:	00109120 	.word	0x00109120

000044f0 <stepBodyVelocities>:

void stepBodyVelocities(int i) {
    44f0:	e92d4070 	push	{r4, r5, r6, lr}

    allBodies[i].omega += allBodies[i].alpha * SPH_RB;
    44f4:	e30a3700 	movw	r3, #42752	; 0xa700
    44f8:	e3403000 	movt	r3, #0
    44fc:	e5935cac 	ldr	r5, [r3, #3244]	; 0xcac
    4500:	e3093424 	movw	r3, #37924	; 0x9424
    4504:	e3403010 	movt	r3, #16
    4508:	e0600280 	rsb	r0, r0, r0, lsl #5
    450c:	e0834200 	add	r4, r3, r0, lsl #4
    4510:	e1a00005 	mov	r0, r5
    4514:	e514126c 	ldr	r1, [r4, #-620]	; 0xfffffd94
    4518:	eb001581 	bl	9b24 <__aeabi_fmul>
    451c:	e1a01000 	mov	r1, r0
    4520:	e5140270 	ldr	r0, [r4, #-624]	; 0xfffffd90
    4524:	eb0014d6 	bl	9884 <__addsf3>
    4528:	e5040270 	str	r0, [r4, #-624]	; 0xfffffd90
    allBodies[i].v.x += allBodies[i].a.x * SPH_RB;
    452c:	e1a00005 	mov	r0, r5
    4530:	e51412ac 	ldr	r1, [r4, #-684]	; 0xfffffd54
    4534:	eb00157a 	bl	9b24 <__aeabi_fmul>
    4538:	e1a01000 	mov	r1, r0
    453c:	e51402b4 	ldr	r0, [r4, #-692]	; 0xfffffd4c
    4540:	eb0014cf 	bl	9884 <__addsf3>
    4544:	e1a06000 	mov	r6, r0
    4548:	e50402b4 	str	r0, [r4, #-692]	; 0xfffffd4c
    allBodies[i].v.y += allBodies[i].a.y * SPH_RB;
    454c:	e1a00005 	mov	r0, r5
    4550:	e51412a8 	ldr	r1, [r4, #-680]	; 0xfffffd58
    4554:	eb001572 	bl	9b24 <__aeabi_fmul>
    4558:	e51412b0 	ldr	r1, [r4, #-688]	; 0xfffffd50
    455c:	eb0014c8 	bl	9884 <__addsf3>
    4560:	e1a05000 	mov	r5, r0
    4564:	e50402b0 	str	r0, [r4, #-688]	; 0xfffffd50

    allBodies[i].colour = hueToRGB565(RB_HUE-sqrt(allBodies[i].v.x*allBodies[i].v.x + allBodies[i].v.y*allBodies[i].v.y)/VELOCITY_COLOUR_SENSITIVITY_RB);
    4568:	e1a01006 	mov	r1, r6
    456c:	e1a00006 	mov	r0, r6
    4570:	eb00156b 	bl	9b24 <__aeabi_fmul>
    4574:	e1a06000 	mov	r6, r0
    4578:	e1a00005 	mov	r0, r5
    457c:	e1a01005 	mov	r1, r5
    4580:	eb001567 	bl	9b24 <__aeabi_fmul>
    4584:	e1a01000 	mov	r1, r0
    4588:	e1a00006 	mov	r0, r6
    458c:	eb0014bc 	bl	9884 <__addsf3>
    4590:	eb0012d4 	bl	90e8 <__aeabi_f2d>
    4594:	eb00046d 	bl	5750 <sqrt>
    4598:	e3a02000 	mov	r2, #0
    459c:	e3a03000 	mov	r3, #0
    45a0:	e3443059 	movt	r3, #16473	; 0x4059
    45a4:	eb0013a0 	bl	942c <__aeabi_ddiv>
    45a8:	e1a02000 	mov	r2, r0
    45ac:	e1a03001 	mov	r3, r1
    45b0:	e3060666 	movw	r0, #26214	; 0x6666
    45b4:	e3460666 	movt	r0, #26214	; 0x6666
    45b8:	e3061666 	movw	r1, #26214	; 0x6666
    45bc:	e3431fd6 	movt	r1, #16342	; 0x3fd6
    45c0:	eb0011f0 	bl	8d88 <__aeabi_dsub>
    45c4:	eb001483 	bl	97d8 <__aeabi_d2f>
    45c8:	ebffef23 	bl	25c <hueToRGB565>
    45cc:	e2444f47 	sub	r4, r4, #284	; 0x11c
    45d0:	e1c400b4 	strh	r0, [r4, #4]
    45d4:	e8bd8070 	pop	{r4, r5, r6, pc}

000045d8 <checkCollisions>:

}

void checkCollisions(int i) {
    45d8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    45dc:	e24dd014 	sub	sp, sp, #20
    45e0:	e1a04000 	mov	r4, r0

    int collisionCount = 0;
    checkSATInterBodyCollision(i);
    45e4:	ebfff8cd 	bl	2920 <checkSATInterBodyCollision>

    allBodies[i].colour = hueToRGB565(RB_HUE-sqrt(allBodies[i].v.x*allBodies[i].v.x + allBodies[i].v.y*allBodies[i].v.y)/VELOCITY_COLOUR_SENSITIVITY_RB);

}

void checkCollisions(int i) {
    45e8:	e0642284 	rsb	r2, r4, r4, lsl #5
    45ec:	e59f3258 	ldr	r3, [pc, #600]	; 484c <checkCollisions+0x274>
    45f0:	e0832202 	add	r2, r3, r2, lsl #4
    45f4:	e58d200c 	str	r2, [sp, #12]
    45f8:	e1a0a002 	mov	r10, r2
    45fc:	e1a08002 	mov	r8, r2

    int collisionCount = 0;
    checkSATInterBodyCollision(i);
    
    for (int j = 0; j < VERTICIES_PER_BODY; j++) {
    4600:	e3a06000 	mov	r6, #0

}

void checkCollisions(int i) {

    int collisionCount = 0;
    4604:	e58d6008 	str	r6, [sp, #8]
    checkSATInterBodyCollision(i);
    
    for (int j = 0; j < VERTICIES_PER_BODY; j++) {

        bool setActive = false;
    4608:	e1a07006 	mov	r7, r6

        // Container collision handling
        if(allBodies[i].xs[j] >= (MAX_X-1) || allBodies[i].xs[j] <= 0) {
            
            if((allBodies[i].v.x > 0) == (allBodies[i].xs[j] > 0)) {
    460c:	e3093424 	movw	r3, #37924	; 0x9424
    4610:	e3403010 	movt	r3, #16
    4614:	e0644284 	rsb	r4, r4, r4, lsl #5
    4618:	e0835204 	add	r5, r3, r4, lsl #4
    461c:	e3a04000 	mov	r4, #0

    allBodies[i].colour = hueToRGB565(RB_HUE-sqrt(allBodies[i].v.x*allBodies[i].v.x + allBodies[i].v.y*allBodies[i].v.y)/VELOCITY_COLOUR_SENSITIVITY_RB);

}

void checkCollisions(int i) {
    4620:	e58d8000 	str	r8, [sp]
    for (int j = 0; j < VERTICIES_PER_BODY; j++) {

        bool setActive = false;

        // Container collision handling
        if(allBodies[i].xs[j] >= (MAX_X-1) || allBodies[i].xs[j] <= 0) {
    4624:	e598b000 	ldr	r11, [r8]
    4628:	e24b3001 	sub	r3, r11, #1
    462c:	e300213d 	movw	r2, #317	; 0x13d
    4630:	e1530002 	cmp	r3, r2
    int collisionCount = 0;
    checkSATInterBodyCollision(i);
    
    for (int j = 0; j < VERTICIES_PER_BODY; j++) {

        bool setActive = false;
    4634:	91a09007 	movls	r9, r7

        // Container collision handling
        if(allBodies[i].xs[j] >= (MAX_X-1) || allBodies[i].xs[j] <= 0) {
    4638:	9a00001f 	bls	46bc <checkCollisions+0xe4>
            
            if((allBodies[i].v.x > 0) == (allBodies[i].xs[j] > 0)) {
    463c:	e51532b4 	ldr	r3, [r5, #-692]	; 0xfffffd4c
    4640:	e58d3004 	str	r3, [sp, #4]
    4644:	e35b0000 	cmp	r11, #0
    4648:	d3a0b000 	movle	r11, #0
    464c:	c3a0b001 	movgt	r11, #1
    4650:	e3a09001 	mov	r9, #1
    4654:	e1a00003 	mov	r0, r3
    4658:	e1a01004 	mov	r1, r4
    465c:	eb00162d 	bl	9f18 <__aeabi_fcmpgt>
    4660:	e3500000 	cmp	r0, #0
    4664:	01a09007 	moveq	r9, r7
    4668:	e2299001 	eor	r9, r9, #1
    466c:	e2099001 	and	r9, r9, #1
    4670:	e159000b 	cmp	r9, r11
    4674:	0a000009 	beq	46a0 <checkCollisions+0xc8>
                allBodies[i].v.x = -allBodies[i].v.x * ELASTICITY_RB;
    4678:	e59d2004 	ldr	r2, [sp, #4]
    467c:	e2820102 	add	r0, r2, #-2147483648	; 0x80000000
    4680:	eb001298 	bl	90e8 <__aeabi_f2d>
    4684:	e309299a 	movw	r2, #39322	; 0x999a
    4688:	e3492999 	movt	r2, #39321	; 0x9999
    468c:	e3093999 	movw	r3, #39321	; 0x9999
    4690:	e3433fd9 	movt	r3, #16345	; 0x3fd9
    4694:	eb0012c0 	bl	919c <__aeabi_dmul>
    4698:	eb00144e 	bl	97d8 <__aeabi_d2f>
    469c:	e50502b4 	str	r0, [r5, #-692]	; 0xfffffd4c
            }

            allBodies[i].extForces[j].force.x = -allBodies[i].mass * allBodies[i].a.x;
    46a0:	e5150288 	ldr	r0, [r5, #-648]	; 0xfffffd78
    46a4:	e2800102 	add	r0, r0, #-2147483648	; 0x80000000
    46a8:	e51512ac 	ldr	r1, [r5, #-684]	; 0xfffffd54
    46ac:	eb00151c 	bl	9b24 <__aeabi_fmul>
    46b0:	e58a00b4 	str	r0, [r10, #180]	; 0xb4
            setActive = true;
    46b4:	e3a09001 	mov	r9, #1
    46b8:	eaffffff 	b	46bc <checkCollisions+0xe4>

        }
        if(allBodies[i].ys[j] >= (MAX_Y-1) || allBodies[i].ys[j] <= 0) {
    46bc:	e59d3000 	ldr	r3, [sp]
    46c0:	e593b010 	ldr	r11, [r3, #16]
    46c4:	e24b3001 	sub	r3, r11, #1
    46c8:	e35300ed 	cmp	r3, #237	; 0xed
    46cc:	9a000024 	bls	4764 <checkCollisions+0x18c>

            if((allBodies[i].v.y > 0) == (allBodies[i].ys[j] >= (MAX_Y-1))) {
    46d0:	e51522b0 	ldr	r2, [r5, #-688]	; 0xfffffd50
    46d4:	e58d2004 	str	r2, [sp, #4]
    46d8:	e35b00ee 	cmp	r11, #238	; 0xee
    46dc:	d3a0b000 	movle	r11, #0
    46e0:	c3a0b001 	movgt	r11, #1
    46e4:	e3a09001 	mov	r9, #1
    46e8:	e1a00002 	mov	r0, r2
    46ec:	e1a01004 	mov	r1, r4
    46f0:	eb001608 	bl	9f18 <__aeabi_fcmpgt>
    46f4:	e3500000 	cmp	r0, #0
    46f8:	01a09007 	moveq	r9, r7
    46fc:	e2299001 	eor	r9, r9, #1
    4700:	e2099001 	and	r9, r9, #1
    4704:	e159000b 	cmp	r9, r11
    4708:	0a000009 	beq	4734 <checkCollisions+0x15c>
                allBodies[i].v.y = -allBodies[i].v.y * ELASTICITY_RB;
    470c:	e59d3004 	ldr	r3, [sp, #4]
    4710:	e2830102 	add	r0, r3, #-2147483648	; 0x80000000
    4714:	eb001273 	bl	90e8 <__aeabi_f2d>
    4718:	e309299a 	movw	r2, #39322	; 0x999a
    471c:	e3492999 	movt	r2, #39321	; 0x9999
    4720:	e3093999 	movw	r3, #39321	; 0x9999
    4724:	e3433fd9 	movt	r3, #16345	; 0x3fd9
    4728:	eb00129b 	bl	919c <__aeabi_dmul>
    472c:	eb001429 	bl	97d8 <__aeabi_d2f>
    4730:	e50502b0 	str	r0, [r5, #-688]	; 0xfffffd50
            }
            allBodies[i].extForces[j].force.y = -allBodies[i].mass * allBodies[i].a.y;
    4734:	e5150288 	ldr	r0, [r5, #-648]	; 0xfffffd78
    4738:	e2800102 	add	r0, r0, #-2147483648	; 0x80000000
    473c:	e51512a8 	ldr	r1, [r5, #-680]	; 0xfffffd58
    4740:	eb0014f7 	bl	9b24 <__aeabi_fmul>
    4744:	e58a00b8 	str	r0, [r10, #184]	; 0xb8
            if(allBodies[i].ys[j] >= (MAX_Y-1)) collisionCount++;;
    4748:	e59d2000 	ldr	r2, [sp]
    474c:	e5923010 	ldr	r3, [r2, #16]
    4750:	e35300ee 	cmp	r3, #238	; 0xee
    4754:	c59d3008 	ldrgt	r3, [sp, #8]
    4758:	c2833001 	addgt	r3, r3, #1
    475c:	c58d3008 	strgt	r3, [sp, #8]
    4760:	ea000032 	b	4830 <checkCollisions+0x258>
            setActive = true;
            

        }

        if (collisionCount > 1) {
    4764:	e59d2008 	ldr	r2, [sp, #8]
    4768:	e3520001 	cmp	r2, #1
    476c:	da000010 	ble	47b4 <checkCollisions+0x1dc>
            for(int k = 0; k <= j; k++){
    4770:	e3560000 	cmp	r6, #0
    4774:	ba000008 	blt	479c <checkCollisions+0x1c4>
    4778:	e59d300c 	ldr	r3, [sp, #12]
    477c:	e1a02007 	mov	r2, r7
                allBodies[i].extForces[k].force.x = 0;
    4780:	e58340b4 	str	r4, [r3, #180]	; 0xb4
                allBodies[i].extForces[k].force.y = 0;
    4784:	e58340b8 	str	r4, [r3, #184]	; 0xb8
                allBodies[i].extForces[k].isActive = false;
    4788:	e5c370bc 	strb	r7, [r3, #188]	; 0xbc
            

        }

        if (collisionCount > 1) {
            for(int k = 0; k <= j; k++){
    478c:	e2822001 	add	r2, r2, #1
    4790:	e2833014 	add	r3, r3, #20
    4794:	e1520006 	cmp	r2, r6
    4798:	dafffff8 	ble	4780 <checkCollisions+0x1a8>
                allBodies[i].extForces[k].force.x = 0;
                allBodies[i].extForces[k].force.y = 0;
                allBodies[i].extForces[k].isActive = false;
            }
            allBodies[i].alpha = 0;
    479c:	e505426c 	str	r4, [r5, #-620]	; 0xfffffd94
            allBodies[i].v.x = 0;
    47a0:	e50542b4 	str	r4, [r5, #-692]	; 0xfffffd4c
            allBodies[i].v.y = 0;
    47a4:	e50542b0 	str	r4, [r5, #-688]	; 0xfffffd50
            allBodies[i].a.x = 0;
    47a8:	e50542ac 	str	r4, [r5, #-684]	; 0xfffffd54
            allBodies[i].a.y = 0;
    47ac:	e50542a8 	str	r4, [r5, #-680]	; 0xfffffd58
            continue;
    47b0:	ea000018 	b	4818 <checkCollisions+0x240>
        }
        
        if (setActive) {
    47b4:	e3590000 	cmp	r9, #0
            //if((allBodies[i].omega > 0) == (allBodies[i].alpha > 0)) allBodies[i].omega = -allBodies[i].omega * ELASTICITY_RB;
            allBodies[i].omega *= ELASTICITY_RB * (0.001);
            allBodies[i].extForces[j].r.x = allBodies[i].pxs[j] - allBodies[i].cx;
            allBodies[i].extForces[j].r.y = allBodies[i].pys[j] - allBodies[i].cy;
        } else {
            allBodies[i].extForces[j].force.x = 0;
    47b8:	058a40b4 	streq	r4, [r10, #180]	; 0xb4
            allBodies[i].extForces[j].force.y = 0;
    47bc:	058a40b8 	streq	r4, [r10, #184]	; 0xb8
            allBodies[i].a.x = 0;
            allBodies[i].a.y = 0;
            continue;
        }
        
        if (setActive) {
    47c0:	0a000013 	beq	4814 <checkCollisions+0x23c>
            //if((allBodies[i].omega > 0) == (allBodies[i].alpha > 0)) allBodies[i].omega = -allBodies[i].omega * ELASTICITY_RB;
            allBodies[i].omega *= ELASTICITY_RB * (0.001);
    47c4:	e5150270 	ldr	r0, [r5, #-624]	; 0xfffffd90
    47c8:	eb001246 	bl	90e8 <__aeabi_f2d>
    47cc:	e304232d 	movw	r2, #17197	; 0x432d
    47d0:	e34e2b1c 	movt	r2, #60188	; 0xeb1c
    47d4:	e30336e2 	movw	r3, #14050	; 0x36e2
    47d8:	e3433f3a 	movt	r3, #16186	; 0x3f3a
    47dc:	eb00126e 	bl	919c <__aeabi_dmul>
    47e0:	eb0013fc 	bl	97d8 <__aeabi_d2f>
    47e4:	e5050270 	str	r0, [r5, #-624]	; 0xfffffd90
            allBodies[i].extForces[j].r.x = allBodies[i].pxs[j] - allBodies[i].cx;
    47e8:	e59d3000 	ldr	r3, [sp]
    47ec:	e5930020 	ldr	r0, [r3, #32]
    47f0:	e5151294 	ldr	r1, [r5, #-660]	; 0xfffffd6c
    47f4:	eb001421 	bl	9880 <__aeabi_fsub>
    47f8:	e58a00ac 	str	r0, [r10, #172]	; 0xac
            allBodies[i].extForces[j].r.y = allBodies[i].pys[j] - allBodies[i].cy;
    47fc:	e59d2000 	ldr	r2, [sp]
    4800:	e5920030 	ldr	r0, [r2, #48]	; 0x30
    4804:	e5151290 	ldr	r1, [r5, #-656]	; 0xfffffd70
    4808:	eb00141c 	bl	9880 <__aeabi_fsub>
    480c:	e58a00b0 	str	r0, [r10, #176]	; 0xb0
    4810:	eaffffff 	b	4814 <checkCollisions+0x23c>
        } else {
            allBodies[i].extForces[j].force.x = 0;
            allBodies[i].extForces[j].force.y = 0;
        }
        allBodies[i].extForces[j].isActive = setActive;
    4814:	e5ca90bc 	strb	r9, [r10, #188]	; 0xbc
void checkCollisions(int i) {

    int collisionCount = 0;
    checkSATInterBodyCollision(i);
    
    for (int j = 0; j < VERTICIES_PER_BODY; j++) {
    4818:	e2866001 	add	r6, r6, #1
    481c:	e2888004 	add	r8, r8, #4
    4820:	e28aa014 	add	r10, r10, #20
    4824:	e3560004 	cmp	r6, #4
    4828:	1affff7c 	bne	4620 <checkCollisions+0x48>
    482c:	ea000004 	b	4844 <checkCollisions+0x26c>
            setActive = true;
            

        }

        if (collisionCount > 1) {
    4830:	e59d3008 	ldr	r3, [sp, #8]
    4834:	e3530001 	cmp	r3, #1
    4838:	d3a09001 	movle	r9, #1
    483c:	daffffe0 	ble	47c4 <checkCollisions+0x1ec>
    4840:	eaffffca 	b	4770 <checkCollisions+0x198>
        }
        allBodies[i].extForces[j].isActive = setActive;

    }

}
    4844:	e28dd014 	add	sp, sp, #20
    4848:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    484c:	00109120 	.word	0x00109120

00004850 <checkMouseLocation>:

void checkMouseLocation(int i) {

    if (!mData.left) {
    4850:	e30b381c 	movw	r3, #47132	; 0xb81c
    4854:	e3403000 	movt	r3, #0
    4858:	e5d33014 	ldrb	r3, [r3, #20]
    485c:	e3530000 	cmp	r3, #0
    4860:	1a000004 	bne	4878 <checkMouseLocation+0x28>
        currentMouseInteractionObj = -1;
    4864:	e30b341c 	movw	r3, #46108	; 0xb41c
    4868:	e3403010 	movt	r3, #16
    486c:	e3e02000 	mvn	r2, #0
    4870:	e50329ac 	str	r2, [r3, #-2476]	; 0xfffff654
        return;
    4874:	e12fff1e 	bx	lr
    }
    if((allBodies[i].minPX <= mData.x) && (mData.x <= allBodies[i].maxPX) && (allBodies[i].minPY <= mData.y) && (mData.y <= allBodies[i].maxPY)) {
    4878:	e30b381c 	movw	r3, #47132	; 0xb81c
    487c:	e3403000 	movt	r3, #0
    4880:	e5932004 	ldr	r2, [r3, #4]
    4884:	e3093424 	movw	r3, #37924	; 0x9424
    4888:	e3403010 	movt	r3, #16
    488c:	e0601280 	rsb	r1, r0, r0, lsl #5
    4890:	e0833201 	add	r3, r3, r1, lsl #4
    4894:	e51332a4 	ldr	r3, [r3, #-676]	; 0xfffffd5c
    4898:	e1530002 	cmp	r3, r2
    489c:	c12fff1e 	bxgt	lr
    48a0:	e3093424 	movw	r3, #37924	; 0x9424
    48a4:	e3403010 	movt	r3, #16
    48a8:	e0833201 	add	r3, r3, r1, lsl #4
    48ac:	e513329c 	ldr	r3, [r3, #-668]	; 0xfffffd64
    48b0:	e1520003 	cmp	r2, r3
    48b4:	c12fff1e 	bxgt	lr
    48b8:	e30b381c 	movw	r3, #47132	; 0xb81c
    48bc:	e3403000 	movt	r3, #0
    48c0:	e5932008 	ldr	r2, [r3, #8]
    48c4:	e3093424 	movw	r3, #37924	; 0x9424
    48c8:	e3403010 	movt	r3, #16
    48cc:	e0833201 	add	r3, r3, r1, lsl #4
    48d0:	e51332a0 	ldr	r3, [r3, #-672]	; 0xfffffd60
    48d4:	e1530002 	cmp	r3, r2
    48d8:	c12fff1e 	bxgt	lr
    48dc:	e3093424 	movw	r3, #37924	; 0x9424
    48e0:	e3403010 	movt	r3, #16
    48e4:	e0833201 	add	r3, r3, r1, lsl #4
    48e8:	e5133298 	ldr	r3, [r3, #-664]	; 0xfffffd68
    48ec:	e1520003 	cmp	r2, r3
    48f0:	c12fff1e 	bxgt	lr
        if(currentMouseInteractionObj == -1) currentMouseInteractionObj = i;   
    48f4:	e30b341c 	movw	r3, #46108	; 0xb41c
    48f8:	e3403010 	movt	r3, #16
    48fc:	e51339ac 	ldr	r3, [r3, #-2476]	; 0xfffff654
    4900:	e3730001 	cmn	r3, #1
    4904:	030b341c 	movweq	r3, #46108	; 0xb41c
    4908:	03403010 	movteq	r3, #16
    490c:	050309ac 	streq	r0, [r3, #-2476]	; 0xfffff654
    4910:	e12fff1e 	bx	lr

00004914 <timeStepRBForceApplication>:
    }

}

void timeStepRBForceApplication() {
    4914:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    4918:	e24dd01c 	sub	sp, sp, #28
            eraseRBs[i].xs[j] = allBodies[i].xs[j];
            eraseRBs[i].ys[j] = allBodies[i].ys[j];
            bookMarkedCollisions[i][j] = false;
        }

        if (i==currentMouseInteractionObj) {
    491c:	e30b241c 	movw	r2, #46108	; 0xb41c
    4920:	e3402010 	movt	r2, #16
    4924:	e51299ac 	ldr	r9, [r2, #-2476]	; 0xfffff654
            allBodies[i].cx = mData.x;
    4928:	e30b381c 	movw	r3, #47132	; 0xb81c
    492c:	e3403000 	movt	r3, #0
    4930:	e5931004 	ldr	r1, [r3, #4]
    4934:	e58d1010 	str	r1, [sp, #16]
            allBodies[i].cy = mData.y;
    4938:	e5931008 	ldr	r1, [r3, #8]
    493c:	e58d1004 	str	r1, [sp, #4]
            allBodies[i].omega = 0;
            allBodies[i].v.x = M_PER_PX_RB * (float)mData.vx;
    4940:	e593100c 	ldr	r1, [r3, #12]
    4944:	e58d1008 	str	r1, [sp, #8]
            allBodies[i].v.y = M_PER_PX_RB * (float)mData.vy;
    4948:	e5933010 	ldr	r3, [r3, #16]
    494c:	e58d300c 	str	r3, [sp, #12]
    4950:	e59fb1ac 	ldr	r11, [pc, #428]	; 4b04 <timeStepRBForceApplication+0x1f0>
    4954:	e2422ebb 	sub	r2, r2, #2992	; 0xbb0
    4958:	e242400c 	sub	r4, r2, #12
    495c:	e1a0700b 	mov	r7, r11
}

void timeStepRBForceApplication() {

    // model collisions with normal forces.
    for (int i = 0; i < NUM_BODIES; i++) {   
    4960:	e3a05000 	mov	r5, #0
        if(currentMouseInteractionObj == -1) currentMouseInteractionObj = i;   
    }

}

void timeStepRBForceApplication() {
    4964:	e1a0a00b 	mov	r10, r11
    4968:	e2828084 	add	r8, r2, #132	; 0x84
    496c:	e1a06005 	mov	r6, r5
    4970:	e58db014 	str	r11, [sp, #20]
    4974:	e59db010 	ldr	r11, [sp, #16]
    4978:	ea00001e 	b	49f8 <timeStepRBForceApplication+0xe4>

    // model collisions with normal forces.
    for (int i = 0; i < NUM_BODIES; i++) {   
        for (int j = 0; j < VERTICIES_PER_BODY; j++) {
            eraseRBs[i].xs[j] = allBodies[i].xs[j];
    497c:	e5910000 	ldr	r0, [r1]
    4980:	e5820000 	str	r0, [r2]
            eraseRBs[i].ys[j] = allBodies[i].ys[j];
    4984:	e5910010 	ldr	r0, [r1, #16]
    4988:	e5820010 	str	r0, [r2, #16]
            bookMarkedCollisions[i][j] = false;
    498c:	e7c46003 	strb	r6, [r4, r3]

void timeStepRBForceApplication() {

    // model collisions with normal forces.
    for (int i = 0; i < NUM_BODIES; i++) {   
        for (int j = 0; j < VERTICIES_PER_BODY; j++) {
    4990:	e2833001 	add	r3, r3, #1
    4994:	e2811004 	add	r1, r1, #4
    4998:	e2822004 	add	r2, r2, #4
    499c:	e3530004 	cmp	r3, #4
    49a0:	1afffff5 	bne	497c <timeStepRBForceApplication+0x68>
            eraseRBs[i].xs[j] = allBodies[i].xs[j];
            eraseRBs[i].ys[j] = allBodies[i].ys[j];
            bookMarkedCollisions[i][j] = false;
        }

        if (i==currentMouseInteractionObj) {
    49a4:	e1550009 	cmp	r5, r9
    49a8:	1a00000d 	bne	49e4 <timeStepRBForceApplication+0xd0>
            allBodies[i].cx = mData.x;
    49ac:	e1a0000b 	mov	r0, r11
    49b0:	eb001424 	bl	9a48 <__aeabi_i2f>
    49b4:	e5870070 	str	r0, [r7, #112]	; 0x70
            allBodies[i].cy = mData.y;
    49b8:	e59d0004 	ldr	r0, [sp, #4]
    49bc:	eb001421 	bl	9a48 <__aeabi_i2f>
    49c0:	e5870074 	str	r0, [r7, #116]	; 0x74
            allBodies[i].omega = 0;
    49c4:	e3a02000 	mov	r2, #0
    49c8:	e5872094 	str	r2, [r7, #148]	; 0x94
            allBodies[i].v.x = M_PER_PX_RB * (float)mData.vx;
    49cc:	e59d0008 	ldr	r0, [sp, #8]
    49d0:	eb00141c 	bl	9a48 <__aeabi_i2f>
    49d4:	e5870050 	str	r0, [r7, #80]	; 0x50
            allBodies[i].v.y = M_PER_PX_RB * (float)mData.vy;
    49d8:	e59d000c 	ldr	r0, [sp, #12]
    49dc:	eb001419 	bl	9a48 <__aeabi_i2f>
    49e0:	e5870054 	str	r0, [r7, #84]	; 0x54
}

void timeStepRBForceApplication() {

    // model collisions with normal forces.
    for (int i = 0; i < NUM_BODIES; i++) {   
    49e4:	e2855001 	add	r5, r5, #1
    49e8:	e2877e1f 	add	r7, r7, #496	; 0x1f0
    49ec:	e284400c 	add	r4, r4, #12
    49f0:	e355000c 	cmp	r5, #12
    49f4:	0a000005 	beq	4a10 <timeStepRBForceApplication+0xfc>
        if(currentMouseInteractionObj == -1) currentMouseInteractionObj = i;   
    }

}

void timeStepRBForceApplication() {
    49f8:	e1a02285 	lsl	r2, r5, #5
    49fc:	e0651002 	rsb	r1, r5, r2
    4a00:	e08a1201 	add	r1, r10, r1, lsl #4
    4a04:	e0882002 	add	r2, r8, r2
    4a08:	e1a03006 	mov	r3, r6
    4a0c:	eaffffda 	b	497c <timeStepRBForceApplication+0x68>
    4a10:	e59db014 	ldr	r11, [sp, #20]

    // model collisions with normal forces.
    for (int i = 0; i < NUM_BODIES; i++) {   
    4a14:	e3a08000 	mov	r8, #0
            allBodies[i].v.y = M_PER_PX_RB * (float)mData.vy;
        }
    }
    for (int i = 0; i < NUM_BODIES; i++) {   

        if (i != currentMouseInteractionObj) {
    4a18:	e30b341c 	movw	r3, #46108	; 0xb41c
    4a1c:	e3403010 	movt	r3, #16
    4a20:	e58d3004 	str	r3, [sp, #4]

            allBodies[i].a.x = 0;
            allBodies[i].a.y = G_RB;
            
            float torque = 0;
            for (int j = 0; j < MAX_EXTERNAL_FORCES; j++) {
    4a24:	e1a0a008 	mov	r10, r8
            allBodies[i].v.y = M_PER_PX_RB * (float)mData.vy;
        }
    }
    for (int i = 0; i < NUM_BODIES; i++) {   

        if (i != currentMouseInteractionObj) {
    4a28:	e59d1004 	ldr	r1, [sp, #4]
    4a2c:	e51139ac 	ldr	r3, [r1, #-2476]	; 0xfffff654
    4a30:	e1580003 	cmp	r8, r3
    4a34:	0a000024 	beq	4acc <timeStepRBForceApplication+0x1b8>
        if(currentMouseInteractionObj == -1) currentMouseInteractionObj = i;   
    }

}

void timeStepRBForceApplication() {
    4a38:	e1a0900b 	mov	r9, r11
    }
    for (int i = 0; i < NUM_BODIES; i++) {   

        if (i != currentMouseInteractionObj) {

            allBodies[i].a.x = 0;
    4a3c:	e3a02000 	mov	r2, #0
    4a40:	e58b2058 	str	r2, [r11, #88]	; 0x58
            allBodies[i].a.y = G_RB;
    4a44:	e3a03000 	mov	r3, #0
    4a48:	e3443110 	movt	r3, #16656	; 0x4110
    4a4c:	e58b305c 	str	r3, [r11, #92]	; 0x5c
        if(currentMouseInteractionObj == -1) currentMouseInteractionObj = i;   
    }

}

void timeStepRBForceApplication() {
    4a50:	e0684288 	rsb	r4, r8, r8, lsl #5
    4a54:	e59f10a8 	ldr	r1, [pc, #168]	; 4b04 <timeStepRBForceApplication+0x1f0>
    4a58:	e0814204 	add	r4, r1, r4, lsl #4

            allBodies[i].a.x = 0;
            allBodies[i].a.y = G_RB;
            
            float torque = 0;
            for (int j = 0; j < MAX_EXTERNAL_FORCES; j++) {
    4a5c:	e1a0500a 	mov	r5, r10
        if (i != currentMouseInteractionObj) {

            allBodies[i].a.x = 0;
            allBodies[i].a.y = G_RB;
            
            float torque = 0;
    4a60:	e1a06002 	mov	r6, r2
            for (int j = 0; j < MAX_EXTERNAL_FORCES; j++) {
                if (!allBodies[i].extForces[j].isActive) continue;
    4a64:	e5d430bc 	ldrb	r3, [r4, #188]	; 0xbc
    4a68:	e3530000 	cmp	r3, #0
    4a6c:	0a00000e 	beq	4aac <timeStepRBForceApplication+0x198>
                allBodies[i].extForces[j].isActive = false;
    4a70:	e5c4a0bc 	strb	r10, [r4, #188]	; 0xbc
                // allBodies[i].a.x += allBodies[i].extForces[j].force.x / allBodies[i].mass;
                // allBodies[i].a.y += allBodies[i].extForces[j].force.y / allBodies[i].mass;
                torque += allBodies[i].extForces[j].r.x * allBodies[i].extForces[j].force.y - allBodies[i].extForces[j].r.y * allBodies[i].extForces[j].force.x;
    4a74:	e59400ac 	ldr	r0, [r4, #172]	; 0xac
    4a78:	e59410b8 	ldr	r1, [r4, #184]	; 0xb8
    4a7c:	eb001428 	bl	9b24 <__aeabi_fmul>
    4a80:	e1a07000 	mov	r7, r0
    4a84:	e59400b0 	ldr	r0, [r4, #176]	; 0xb0
    4a88:	e59410b4 	ldr	r1, [r4, #180]	; 0xb4
    4a8c:	eb001424 	bl	9b24 <__aeabi_fmul>
    4a90:	e1a01000 	mov	r1, r0
    4a94:	e1a00007 	mov	r0, r7
    4a98:	eb001378 	bl	9880 <__aeabi_fsub>
    4a9c:	e1a01000 	mov	r1, r0
    4aa0:	e1a00006 	mov	r0, r6
    4aa4:	eb001376 	bl	9884 <__addsf3>
    4aa8:	e1a06000 	mov	r6, r0

            allBodies[i].a.x = 0;
            allBodies[i].a.y = G_RB;
            
            float torque = 0;
            for (int j = 0; j < MAX_EXTERNAL_FORCES; j++) {
    4aac:	e2855001 	add	r5, r5, #1
    4ab0:	e2844014 	add	r4, r4, #20
    4ab4:	e3550010 	cmp	r5, #16
    4ab8:	1affffe9 	bne	4a64 <timeStepRBForceApplication+0x150>
                // allBodies[i].a.x += allBodies[i].extForces[j].force.x / allBodies[i].mass;
                // allBodies[i].a.y += allBodies[i].extForces[j].force.y / allBodies[i].mass;
                torque += allBodies[i].extForces[j].r.x * allBodies[i].extForces[j].force.y - allBodies[i].extForces[j].r.y * allBodies[i].extForces[j].force.x;
            }
            
            allBodies[i].alpha = torque / allBodies[i].I;
    4abc:	e1a00006 	mov	r0, r6
    4ac0:	e5991078 	ldr	r1, [r9, #120]	; 0x78
    4ac4:	eb00147c 	bl	9cbc <__aeabi_fdiv>
    4ac8:	e5890098 	str	r0, [r9, #152]	; 0x98
            

        } 

        checkMouseLocation(i);
    4acc:	e1a00008 	mov	r0, r8
    4ad0:	ebffff5e 	bl	4850 <checkMouseLocation>
        checkCollisions(i);
    4ad4:	e1a00008 	mov	r0, r8
    4ad8:	ebfffebe 	bl	45d8 <checkCollisions>
        stepBodyVelocities(i);
    4adc:	e1a00008 	mov	r0, r8
    4ae0:	ebfffe82 	bl	44f0 <stepBodyVelocities>

        stepBodyPositions(i);
    4ae4:	e1a00008 	mov	r0, r8
    4ae8:	ebfffceb 	bl	3e9c <stepBodyPositions>
            allBodies[i].omega = 0;
            allBodies[i].v.x = M_PER_PX_RB * (float)mData.vx;
            allBodies[i].v.y = M_PER_PX_RB * (float)mData.vy;
        }
    }
    for (int i = 0; i < NUM_BODIES; i++) {   
    4aec:	e2888001 	add	r8, r8, #1
    4af0:	e28bbe1f 	add	r11, r11, #496	; 0x1f0
    4af4:	e358000c 	cmp	r8, #12
    4af8:	1affffca 	bne	4a28 <timeStepRBForceApplication+0x114>

        stepBodyPositions(i);

    }

}
    4afc:	e28dd01c 	add	sp, sp, #28
    4b00:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    4b04:	00109120 	.word	0x00109120

00004b08 <resetSimHandler>:
    isFluidSim = !isFluidSim;
    speedMult = 0;
    resetSimHandler();
}

void resetSimHandler() {
    4b08:	e92d4008 	push	{r3, lr}
    clearWholeScreen();
    4b0c:	ebffee3e 	bl	40c <clearWholeScreen>
    if (isFluidSim) {
    4b10:	e30b381c 	movw	r3, #47132	; 0xb81c
    4b14:	e3403000 	movt	r3, #0
    4b18:	e5d33018 	ldrb	r3, [r3, #24]
    4b1c:	e3530000 	cmp	r3, #0
    4b20:	0a000001 	beq	4b2c <resetSimHandler+0x24>
        initParticles(); 
    4b24:	ebfff019 	bl	b90 <initParticles>
    4b28:	e8bd8008 	pop	{r3, pc}
    }
    else {
        initRigidBodies();
    4b2c:	ebfffb05 	bl	3748 <initRigidBodies>
    4b30:	e8bd8008 	pop	{r3, pc}

00004b34 <switchSimHandler>:

// =======================================================================================================
//                                                   MAIN
// =======================================================================================================

void switchSimHandler() {
    4b34:	e92d4008 	push	{r3, lr}
    isFluidSim = !isFluidSim;
    4b38:	e30b381c 	movw	r3, #47132	; 0xb81c
    4b3c:	e3403000 	movt	r3, #0
    4b40:	e5d32018 	ldrb	r2, [r3, #24]
    4b44:	e2222001 	eor	r2, r2, #1
    4b48:	e5c32018 	strb	r2, [r3, #24]
    speedMult = 0;
    4b4c:	e3a02000 	mov	r2, #0
    4b50:	e583201c 	str	r2, [r3, #28]
    resetSimHandler();
    4b54:	ebffffeb 	bl	4b08 <resetSimHandler>
    4b58:	e8bd8008 	pop	{r3, pc}

00004b5c <fastFowardHandler>:
    }
    // speedMult = 4;
    // fastFowardHandler();
}

void fastFowardHandler(){
    4b5c:	e92d4070 	push	{r4, r5, r6, lr}
    if(speedMult == 4)speedMult = 0;
    4b60:	e30b381c 	movw	r3, #47132	; 0xb81c
    4b64:	e3403000 	movt	r3, #0
    4b68:	e593201c 	ldr	r2, [r3, #28]
    4b6c:	e3520004 	cmp	r2, #4
    4b70:	e30b381c 	movw	r3, #47132	; 0xb81c
    4b74:	e3403000 	movt	r3, #0
    4b78:	03a02000 	moveq	r2, #0
    else speedMult++;
    4b7c:	12822001 	addne	r2, r2, #1
    4b80:	e583201c 	str	r2, [r3, #28]
    SPF = speedArray[speedMult] * DEFAULT_SPF;
    4b84:	e30a6700 	movw	r6, #42752	; 0xa700
    4b88:	e3406000 	movt	r6, #0
    4b8c:	e30b381c 	movw	r3, #47132	; 0xb81c
    4b90:	e3403000 	movt	r3, #0
    4b94:	e593301c 	ldr	r3, [r3, #28]
    4b98:	e0863103 	add	r3, r6, r3, lsl #2
    4b9c:	e5930cb0 	ldr	r0, [r3, #3248]	; 0xcb0
    4ba0:	eb001150 	bl	90e8 <__aeabi_f2d>
    4ba4:	e1a04000 	mov	r4, r0
    4ba8:	e1a05001 	mov	r5, r1
    4bac:	e301247b 	movw	r2, #5243	; 0x147b
    4bb0:	e34427ae 	movt	r2, #18350	; 0x47ae
    4bb4:	e3073ae1 	movw	r3, #31457	; 0x7ae1
    4bb8:	e3433f94 	movt	r3, #16276	; 0x3f94
    4bbc:	eb001176 	bl	919c <__aeabi_dmul>
    4bc0:	eb001304 	bl	97d8 <__aeabi_d2f>
    4bc4:	e5860ca8 	str	r0, [r6, #3240]	; 0xca8
    SPH_RB = speedArray[speedMult] * DEFAULT_SPH_RB;
    4bc8:	e1a00004 	mov	r0, r4
    4bcc:	e1a01005 	mov	r1, r5
    4bd0:	e309299a 	movw	r2, #39322	; 0x999a
    4bd4:	e3492999 	movt	r2, #39321	; 0x9999
    4bd8:	e3093999 	movw	r3, #39321	; 0x9999
    4bdc:	e3433fc9 	movt	r3, #16329	; 0x3fc9
    4be0:	eb00116d 	bl	919c <__aeabi_dmul>
    4be4:	eb0012fb 	bl	97d8 <__aeabi_d2f>
    4be8:	e5860cac 	str	r0, [r6, #3244]	; 0xcac
    4bec:	e8bd8070 	pop	{r4, r5, r6, pc}

00004bf0 <__cs3_isr_irq>:
  *((volatile int*) 0xFFFEC100) = 1;

  *((volatile int*) 0xFFFED000) = 1;
}

void __attribute__ ((interrupt)) __cs3_isr_irq(void){
    4bf0:	e24ee004 	sub	lr, lr, #4
    4bf4:	e92d500f 	push	{r0, r1, r2, r3, r12, lr}
  int interruptID = *((volatile int*) 0xFFFEC10C);
    4bf8:	e3e03a13 	mvn	r3, #77824	; 0x13000
    4bfc:	e5133ef3 	ldr	r3, [r3, #-3827]	; 0xfffff10d

  if(interruptID != 79) while(1);
    4c00:	e353004f 	cmp	r3, #79	; 0x4f
    4c04:	0a000000 	beq	4c0c <__cs3_isr_irq+0x1c>
    4c08:	eafffffe 	b	4c08 <__cs3_isr_irq+0x18>
    //   prevmData = mData;
  updateMouse();
    4c0c:	ebffee6f 	bl	5d0 <updateMouse>
  if((mData.x >= SWITCH_BUTTON_X) && (mData.x < (SWITCH_BUTTON_X + 15)) && (mData.y >= SWITCH_BUTTON_Y) && (mData.y < (SWITCH_BUTTON_Y + 12))){
    4c10:	e30b381c 	movw	r3, #47132	; 0xb81c
    4c14:	e3403000 	movt	r3, #0
    4c18:	e5933004 	ldr	r3, [r3, #4]
    4c1c:	e2433f4b 	sub	r3, r3, #300	; 0x12c
    4c20:	e2433001 	sub	r3, r3, #1
    4c24:	e353000e 	cmp	r3, #14
    4c28:	8a000045 	bhi	4d44 <__cs3_isr_irq+0x154>
    4c2c:	e30b381c 	movw	r3, #47132	; 0xb81c
    4c30:	e3403000 	movt	r3, #0
    4c34:	e5933008 	ldr	r3, [r3, #8]
    4c38:	e3530003 	cmp	r3, #3
    4c3c:	da00000d 	ble	4c78 <__cs3_isr_irq+0x88>
    4c40:	e353000f 	cmp	r3, #15
    4c44:	ca00000b 	bgt	4c78 <__cs3_isr_irq+0x88>
    if(!prevmData.left && mData.left){
    4c48:	e30b341c 	movw	r3, #46108	; 0xb41c
    4c4c:	e3403010 	movt	r3, #16
    4c50:	e5533998 	ldrb	r3, [r3, #-2456]	; 0xfffff668
    4c54:	e3530000 	cmp	r3, #0
    4c58:	1a000039 	bne	4d44 <__cs3_isr_irq+0x154>
    4c5c:	e30b381c 	movw	r3, #47132	; 0xb81c
    4c60:	e3403000 	movt	r3, #0
    4c64:	e5d33014 	ldrb	r3, [r3, #20]
    4c68:	e3530000 	cmp	r3, #0
    4c6c:	0a000034 	beq	4d44 <__cs3_isr_irq+0x154>
      switchSimHandler();
    4c70:	ebffffaf 	bl	4b34 <switchSimHandler>
    4c74:	ea000032 	b	4d44 <__cs3_isr_irq+0x154>
    }
  }
  else if((mData.x >= RESET_BUTTON_X) && (mData.x < (RESET_BUTTON_X + 15)) && (mData.y >= RESET_BUTTON_Y) && (mData.y < (RESET_BUTTON_Y + 12))){
    4c78:	e3530013 	cmp	r3, #19
    4c7c:	da00000d 	ble	4cb8 <__cs3_isr_irq+0xc8>
    4c80:	e353001f 	cmp	r3, #31
    4c84:	ca00000b 	bgt	4cb8 <__cs3_isr_irq+0xc8>
    if(!prevmData.left && mData.left){
    4c88:	e30b341c 	movw	r3, #46108	; 0xb41c
    4c8c:	e3403010 	movt	r3, #16
    4c90:	e5533998 	ldrb	r3, [r3, #-2456]	; 0xfffff668
    4c94:	e3530000 	cmp	r3, #0
    4c98:	1a000029 	bne	4d44 <__cs3_isr_irq+0x154>
    4c9c:	e30b381c 	movw	r3, #47132	; 0xb81c
    4ca0:	e3403000 	movt	r3, #0
    4ca4:	e5d33014 	ldrb	r3, [r3, #20]
    4ca8:	e3530000 	cmp	r3, #0
    4cac:	0a000024 	beq	4d44 <__cs3_isr_irq+0x154>
      resetSimHandler();
    4cb0:	ebffff94 	bl	4b08 <resetSimHandler>
    4cb4:	ea000022 	b	4d44 <__cs3_isr_irq+0x154>
    }
  }
  else if((mData.x >= PLAY_BUTTON_X) && (mData.x < (PLAY_BUTTON_X + 15)) && (mData.y >= PLAY_BUTTON_Y) && (mData.y < (PLAY_BUTTON_Y + 12))){
    4cb8:	e3530023 	cmp	r3, #35	; 0x23
    4cbc:	da000011 	ble	4d08 <__cs3_isr_irq+0x118>
    4cc0:	e353002f 	cmp	r3, #47	; 0x2f
    4cc4:	ca00000f 	bgt	4d08 <__cs3_isr_irq+0x118>
    if(!prevmData.left && mData.left){
    4cc8:	e30b341c 	movw	r3, #46108	; 0xb41c
    4ccc:	e3403010 	movt	r3, #16
    4cd0:	e5533998 	ldrb	r3, [r3, #-2456]	; 0xfffff668
    4cd4:	e3530000 	cmp	r3, #0
    4cd8:	1a000019 	bne	4d44 <__cs3_isr_irq+0x154>
    4cdc:	e30b381c 	movw	r3, #47132	; 0xb81c
    4ce0:	e3403000 	movt	r3, #0
    4ce4:	e5d33014 	ldrb	r3, [r3, #20]
    4ce8:	e3530000 	cmp	r3, #0
    4cec:	0a000014 	beq	4d44 <__cs3_isr_irq+0x154>
      play = !play;
    4cf0:	e30b341c 	movw	r3, #46108	; 0xb41c
    4cf4:	e3403010 	movt	r3, #16
    4cf8:	e5532994 	ldrb	r2, [r3, #-2452]	; 0xfffff66c
    4cfc:	e2222001 	eor	r2, r2, #1
    4d00:	e5432994 	strb	r2, [r3, #-2452]	; 0xfffff66c
    4d04:	ea00000e 	b	4d44 <__cs3_isr_irq+0x154>
    }
  }
  else if((mData.x >= FF_BUTTON_X) && (mData.x < (FF_BUTTON_X + 15)) && (mData.y >= FF_BUTTON_Y) && (mData.y < (FF_BUTTON_Y + 12))){
    4d08:	e3530033 	cmp	r3, #51	; 0x33
    4d0c:	da00000c 	ble	4d44 <__cs3_isr_irq+0x154>
    4d10:	e353003f 	cmp	r3, #63	; 0x3f
    4d14:	ca00000a 	bgt	4d44 <__cs3_isr_irq+0x154>
    if(!prevmData.left && mData.left){
    4d18:	e30b341c 	movw	r3, #46108	; 0xb41c
    4d1c:	e3403010 	movt	r3, #16
    4d20:	e5533998 	ldrb	r3, [r3, #-2456]	; 0xfffff668
    4d24:	e3530000 	cmp	r3, #0
    4d28:	1a000005 	bne	4d44 <__cs3_isr_irq+0x154>
    4d2c:	e30b381c 	movw	r3, #47132	; 0xb81c
    4d30:	e3403000 	movt	r3, #0
    4d34:	e5d33014 	ldrb	r3, [r3, #20]
    4d38:	e3530000 	cmp	r3, #0
    4d3c:	0a000000 	beq	4d44 <__cs3_isr_irq+0x154>
      fastFowardHandler();
    4d40:	ebffff85 	bl	4b5c <fastFowardHandler>
    }
  }

  *((volatile int*) 0xFFFEC110) = interruptID;
    4d44:	e3a0204f 	mov	r2, #79	; 0x4f
    4d48:	e3e03a13 	mvn	r3, #77824	; 0x13000
    4d4c:	e5032eef 	str	r2, [r3, #-3823]	; 0xfffff111
    4d50:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, r12, pc}^

00004d54 <main>:
    else speedMult++;
    SPF = speedArray[speedMult] * DEFAULT_SPF;
    SPH_RB = speedArray[speedMult] * DEFAULT_SPH_RB;
}

int main(void){ // main for this simulation
    4d54:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}

    // volatile int * sw_ptr = (volatile int *)SW_BASE;

    play = true;
    4d58:	e30b441c 	movw	r4, #46108	; 0xb41c
    4d5c:	e3404010 	movt	r4, #16
    4d60:	e3a03001 	mov	r3, #1
    4d64:	e5443994 	strb	r3, [r4, #-2452]	; 0xfffff66c
    initParticles();
    4d68:	ebffef88 	bl	b90 <initParticles>
    initRigidBodies();
    4d6c:	ebfffa75 	bl	3748 <initRigidBodies>

    intializeMouse(&mData);
    4d70:	e59f50dc 	ldr	r5, [pc, #220]	; 4e54 <main+0x100>
    4d74:	e1a00005 	mov	r0, r5
    4d78:	ebffeec5 	bl	894 <intializeMouse>
    prevmData = mData;
    4d7c:	e244ce9a 	sub	r12, r4, #2464	; 0x9a0
    4d80:	e24cc008 	sub	r12, r12, #8
    4d84:	e1a0e005 	mov	lr, r5
    4d88:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    4d8c:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
    4d90:	e59e3000 	ldr	r3, [lr]
    4d94:	e58c3000 	str	r3, [r12]

    vgaSetup();
    4d98:	ebffedab 	bl	44c <vgaSetup>
        //     if (lastFluidSim) eraseParticles();
        //     else eraseBodies();
        // }

        
        lastFluidSim = isFluidSim;
    4d9c:	e30b481c 	movw	r4, #47132	; 0xb81c
    4da0:	e3404000 	movt	r4, #0
    4da4:	e30b541c 	movw	r5, #46108	; 0xb41c
    4da8:	e3405010 	movt	r5, #16
        // Erase Stuff
        if (isFluidSim) eraseParticles();
        else eraseBodies();

        drawMouse(&prevmData, BLACK);
    4dac:	e2457e9a 	sub	r7, r5, #2464	; 0x9a0
    4db0:	e2479008 	sub	r9, r7, #8
    4db4:	e3a0a000 	mov	r10, #0
        // Draw Stuff
        if (isFluidSim) drawParticles();
        else drawBodies();

        drawButtons();
        drawMouse(&mData, WHITE);
    4db8:	e2846004 	add	r6, r4, #4
    4dbc:	e3e08000 	mvn	r8, #0
        //     if (lastFluidSim) eraseParticles();
        //     else eraseBodies();
        // }

        
        lastFluidSim = isFluidSim;
    4dc0:	e5d43018 	ldrb	r3, [r4, #24]
    4dc4:	e5453993 	strb	r3, [r5, #-2451]	; 0xfffff66d
        // Erase Stuff
        if (isFluidSim) eraseParticles();
    4dc8:	e3530000 	cmp	r3, #0
    4dcc:	0a000001 	beq	4dd8 <main+0x84>
    4dd0:	ebfff002 	bl	de0 <eraseParticles>
    4dd4:	ea000000 	b	4ddc <main+0x88>
        else eraseBodies();
    4dd8:	ebfffbc9 	bl	3d04 <eraseBodies>

        drawMouse(&prevmData, BLACK);
    4ddc:	e1a00009 	mov	r0, r9
    4de0:	e1a0100a 	mov	r1, r10
    4de4:	ebffee45 	bl	700 <drawMouse>

        // Draw Stuff
        if (isFluidSim) drawParticles();
    4de8:	e5d43018 	ldrb	r3, [r4, #24]
    4dec:	e3530000 	cmp	r3, #0
    4df0:	0a000001 	beq	4dfc <main+0xa8>
    4df4:	ebfff007 	bl	e18 <drawParticles>
    4df8:	ea000000 	b	4e00 <main+0xac>
        else drawBodies();
    4dfc:	ebfffbe1 	bl	3d88 <drawBodies>

        drawButtons();
    4e00:	ebffef5c 	bl	b78 <drawButtons>
        drawMouse(&mData, WHITE);
    4e04:	e1a00006 	mov	r0, r6
    4e08:	e1a01008 	mov	r1, r8
    4e0c:	ebffee3b 	bl	700 <drawMouse>
        prevmData = mData;
    4e10:	e247c008 	sub	r12, r7, #8
    4e14:	e1a0e006 	mov	lr, r6
    4e18:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    4e1c:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
    4e20:	e59e3000 	ldr	r3, [lr]
    4e24:	e58c3000 	str	r3, [r12]
        
        // Update Stuff 
        if(play){
    4e28:	e5553994 	ldrb	r3, [r5, #-2452]	; 0xfffff66c
    4e2c:	e3530000 	cmp	r3, #0
    4e30:	0a000005 	beq	4e4c <main+0xf8>
            if (isFluidSim) timeStepBucketwiseParticleUpdate();
    4e34:	e5d43018 	ldrb	r3, [r4, #24]
    4e38:	e3530000 	cmp	r3, #0
    4e3c:	0a000001 	beq	4e48 <main+0xf4>
    4e40:	ebfff44f 	bl	1f84 <timeStepBucketwiseParticleUpdate>
    4e44:	ea000000 	b	4e4c <main+0xf8>
            else timeStepRBForceApplication();
    4e48:	ebfffeb1 	bl	4914 <timeStepRBForceApplication>
        }

        // Wait for Stuff
        waitForVsync();
    4e4c:	ebffed5d 	bl	3c8 <waitForVsync>

    }
    4e50:	eaffffda 	b	4dc0 <main+0x6c>
    4e54:	0000b820 	.word	0x0000b820

00004e58 <cos>:
    4e58:	e92d4030 	push	{r4, r5, lr}
    4e5c:	e59fe0e0 	ldr	lr, [pc, #224]	; 4f44 <cos+0xec>
    4e60:	e3c1c102 	bic	r12, r1, #-2147483648	; 0x80000000
    4e64:	e15c000e 	cmp	r12, lr
    4e68:	e24dd01c 	sub	sp, sp, #28
    4e6c:	e1a02000 	mov	r2, r0
    4e70:	e1a03001 	mov	r3, r1
    4e74:	e1a04000 	mov	r4, r0
    4e78:	e1a05001 	mov	r5, r1
    4e7c:	da000015 	ble	4ed8 <cos+0x80>
    4e80:	e59fe0c0 	ldr	lr, [pc, #192]	; 4f48 <cos+0xf0>
    4e84:	e15c000e 	cmp	r12, lr
    4e88:	da000003 	ble	4e9c <cos+0x44>
    4e8c:	eb000fbd 	bl	8d88 <__aeabi_dsub>
    4e90:	e28dd01c 	add	sp, sp, #28
    4e94:	e8bd4030 	pop	{r4, r5, lr}
    4e98:	e12fff1e 	bx	lr
    4e9c:	e28d2008 	add	r2, sp, #8
    4ea0:	eb000730 	bl	6b68 <__ieee754_rem_pio2>
    4ea4:	e2000003 	and	r0, r0, #3
    4ea8:	e3500001 	cmp	r0, #1
    4eac:	0a000014 	beq	4f04 <cos+0xac>
    4eb0:	e3500002 	cmp	r0, #2
    4eb4:	0a00000b 	beq	4ee8 <cos+0x90>
    4eb8:	e3500000 	cmp	r0, #0
    4ebc:	1a000018 	bne	4f24 <cos+0xcc>
    4ec0:	e28d1008 	add	r1, sp, #8
    4ec4:	e8910003 	ldm	r1, {r0, r1}
    4ec8:	e28d3010 	add	r3, sp, #16
    4ecc:	e893000c 	ldm	r3, {r2, r3}
    4ed0:	eb00094a 	bl	7400 <__kernel_cos>
    4ed4:	eaffffed 	b	4e90 <cos+0x38>
    4ed8:	e3a02000 	mov	r2, #0
    4edc:	e3a03000 	mov	r3, #0
    4ee0:	eb000946 	bl	7400 <__kernel_cos>
    4ee4:	eaffffe9 	b	4e90 <cos+0x38>
    4ee8:	e28d1008 	add	r1, sp, #8
    4eec:	e8910003 	ldm	r1, {r0, r1}
    4ef0:	e28d3010 	add	r3, sp, #16
    4ef4:	e893000c 	ldm	r3, {r2, r3}
    4ef8:	eb000940 	bl	7400 <__kernel_cos>
    4efc:	e2811102 	add	r1, r1, #-2147483648	; 0x80000000
    4f00:	eaffffe2 	b	4e90 <cos+0x38>
    4f04:	e58d0000 	str	r0, [sp]
    4f08:	e28d3010 	add	r3, sp, #16
    4f0c:	e893000c 	ldm	r3, {r2, r3}
    4f10:	e28d1008 	add	r1, sp, #8
    4f14:	e8910003 	ldm	r1, {r0, r1}
    4f18:	eb000cf0 	bl	82e0 <__kernel_sin>
    4f1c:	e2811102 	add	r1, r1, #-2147483648	; 0x80000000
    4f20:	eaffffda 	b	4e90 <cos+0x38>
    4f24:	e3a03001 	mov	r3, #1
    4f28:	e58d3000 	str	r3, [sp]
    4f2c:	e28d1008 	add	r1, sp, #8
    4f30:	e8910003 	ldm	r1, {r0, r1}
    4f34:	e28d3010 	add	r3, sp, #16
    4f38:	e893000c 	ldm	r3, {r2, r3}
    4f3c:	eb000ce7 	bl	82e0 <__kernel_sin>
    4f40:	eaffffd2 	b	4e90 <cos+0x38>
    4f44:	3fe921fb 	.word	0x3fe921fb
    4f48:	7fefffff 	.word	0x7fefffff
    4f4c:	00000000 	.word	0x00000000

00004f50 <floor>:
    4f50:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
    4f54:	e1a08081 	lsl	r8, r1, #1
    4f58:	e1a08aa8 	lsr	r8, r8, #21
    4f5c:	e2486fff 	sub	r6, r8, #1020	; 0x3fc
    4f60:	e2466003 	sub	r6, r6, #3
    4f64:	e3560013 	cmp	r6, #19
    4f68:	e1a02000 	mov	r2, r0
    4f6c:	e1a03001 	mov	r3, r1
    4f70:	e1a04000 	mov	r4, r0
    4f74:	e1a05001 	mov	r5, r1
    4f78:	e1a07001 	mov	r7, r1
    4f7c:	ca000019 	bgt	4fe8 <floor+0x98>
    4f80:	e3560000 	cmp	r6, #0
    4f84:	ba000034 	blt	505c <floor+0x10c>
    4f88:	e59f8150 	ldr	r8, [pc, #336]	; 50e0 <floor+0x190>
    4f8c:	e1a08658 	asr	r8, r8, r6
    4f90:	e008c001 	and	r12, r8, r1
    4f94:	e19cc000 	orrs	r12, r12, r0
    4f98:	0a00000e 	beq	4fd8 <floor+0x88>
    4f9c:	e28f3f4d 	add	r3, pc, #308	; 0x134
    4fa0:	e893000c 	ldm	r3, {r2, r3}
    4fa4:	eb000f78 	bl	8d8c <__adddf3>
    4fa8:	e3a02000 	mov	r2, #0
    4fac:	e3a03000 	mov	r3, #0
    4fb0:	eb0011eb 	bl	9764 <__aeabi_dcmpgt>
    4fb4:	e3500000 	cmp	r0, #0
    4fb8:	0a000004 	beq	4fd0 <floor+0x80>
    4fbc:	e3550000 	cmp	r5, #0
    4fc0:	b3a03601 	movlt	r3, #1048576	; 0x100000
    4fc4:	b0855653 	addlt	r5, r5, r3, asr r6
    4fc8:	e3a04000 	mov	r4, #0
    4fcc:	e1c57008 	bic	r7, r5, r8
    4fd0:	e1a03007 	mov	r3, r7
    4fd4:	e1a02004 	mov	r2, r4
    4fd8:	e1a00002 	mov	r0, r2
    4fdc:	e1a01003 	mov	r1, r3
    4fe0:	e8bd45f8 	pop	{r3, r4, r5, r6, r7, r8, r10, lr}
    4fe4:	e12fff1e 	bx	lr
    4fe8:	e3560033 	cmp	r6, #51	; 0x33
    4fec:	da000005 	ble	5008 <floor+0xb8>
    4ff0:	e3560b01 	cmp	r6, #1024	; 0x400
    4ff4:	1afffff7 	bne	4fd8 <floor+0x88>
    4ff8:	eb000f63 	bl	8d8c <__adddf3>
    4ffc:	e1a02000 	mov	r2, r0
    5000:	e1a03001 	mov	r3, r1
    5004:	eafffff3 	b	4fd8 <floor+0x88>
    5008:	e248ae41 	sub	r10, r8, #1040	; 0x410
    500c:	e24aa003 	sub	r10, r10, #3
    5010:	e3e0c000 	mvn	r12, #0
    5014:	e1a0aa3c 	lsr	r10, r12, r10
    5018:	e11a0000 	tst	r10, r0
    501c:	0affffed 	beq	4fd8 <floor+0x88>
    5020:	e28f30b0 	add	r3, pc, #176	; 0xb0
    5024:	e893000c 	ldm	r3, {r2, r3}
    5028:	eb000f57 	bl	8d8c <__adddf3>
    502c:	e3a02000 	mov	r2, #0
    5030:	e3a03000 	mov	r3, #0
    5034:	eb0011ca 	bl	9764 <__aeabi_dcmpgt>
    5038:	e3500000 	cmp	r0, #0
    503c:	0affffe3 	beq	4fd0 <floor+0x80>
    5040:	e3550000 	cmp	r5, #0
    5044:	ba000017 	blt	50a8 <floor+0x158>
    5048:	e1c4400a 	bic	r4, r4, r10
    504c:	e1a07005 	mov	r7, r5
    5050:	e1a03007 	mov	r3, r7
    5054:	e1a02004 	mov	r2, r4
    5058:	eaffffde 	b	4fd8 <floor+0x88>
    505c:	e28f3074 	add	r3, pc, #116	; 0x74
    5060:	e893000c 	ldm	r3, {r2, r3}
    5064:	eb000f48 	bl	8d8c <__adddf3>
    5068:	e3a02000 	mov	r2, #0
    506c:	e3a03000 	mov	r3, #0
    5070:	eb0011bb 	bl	9764 <__aeabi_dcmpgt>
    5074:	e3500000 	cmp	r0, #0
    5078:	0affffd4 	beq	4fd0 <floor+0x80>
    507c:	e3550000 	cmp	r5, #0
    5080:	a3a04000 	movge	r4, #0
    5084:	a1a07004 	movge	r7, r4
    5088:	aaffffd0 	bge	4fd0 <floor+0x80>
    508c:	e3c73102 	bic	r3, r7, #-2147483648	; 0x80000000
    5090:	e1833004 	orr	r3, r3, r4
    5094:	e3530000 	cmp	r3, #0
    5098:	e59f3044 	ldr	r3, [pc, #68]	; 50e4 <floor+0x194>
    509c:	13a04000 	movne	r4, #0
    50a0:	11a07003 	movne	r7, r3
    50a4:	eaffffc9 	b	4fd0 <floor+0x80>
    50a8:	e3560014 	cmp	r6, #20
    50ac:	02855001 	addeq	r5, r5, #1
    50b0:	0affffe4 	beq	5048 <floor+0xf8>
    50b4:	e2688e43 	rsb	r8, r8, #1072	; 0x430
    50b8:	e2888003 	add	r8, r8, #3
    50bc:	e3a03001 	mov	r3, #1
    50c0:	e0843813 	add	r3, r4, r3, lsl r8
    50c4:	e1540003 	cmp	r4, r3
    50c8:	82855001 	addhi	r5, r5, #1
    50cc:	e1a04003 	mov	r4, r3
    50d0:	eaffffdc 	b	5048 <floor+0xf8>
    50d4:	e1a00000 	nop			; (mov r0, r0)
    50d8:	8800759c 	.word	0x8800759c
    50dc:	7e37e43c 	.word	0x7e37e43c
    50e0:	000fffff 	.word	0x000fffff
    50e4:	bff00000 	.word	0xbff00000

000050e8 <sin>:
    50e8:	e92d4030 	push	{r4, r5, lr}
    50ec:	e59fe0ec 	ldr	lr, [pc, #236]	; 51e0 <sin+0xf8>
    50f0:	e3c1c102 	bic	r12, r1, #-2147483648	; 0x80000000
    50f4:	e15c000e 	cmp	r12, lr
    50f8:	e24dd01c 	sub	sp, sp, #28
    50fc:	e1a02000 	mov	r2, r0
    5100:	e1a03001 	mov	r3, r1
    5104:	e1a04000 	mov	r4, r0
    5108:	e1a05001 	mov	r5, r1
    510c:	da000017 	ble	5170 <sin+0x88>
    5110:	e59fe0cc 	ldr	lr, [pc, #204]	; 51e4 <sin+0xfc>
    5114:	e15c000e 	cmp	r12, lr
    5118:	da000003 	ble	512c <sin+0x44>
    511c:	eb000f19 	bl	8d88 <__aeabi_dsub>
    5120:	e28dd01c 	add	sp, sp, #28
    5124:	e8bd4030 	pop	{r4, r5, lr}
    5128:	e12fff1e 	bx	lr
    512c:	e28d2008 	add	r2, sp, #8
    5130:	eb00068c 	bl	6b68 <__ieee754_rem_pio2>
    5134:	e2000003 	and	r0, r0, #3
    5138:	e3500001 	cmp	r0, #1
    513c:	0a00001a 	beq	51ac <sin+0xc4>
    5140:	e3500002 	cmp	r0, #2
    5144:	0a00000f 	beq	5188 <sin+0xa0>
    5148:	e3500000 	cmp	r0, #0
    514c:	1a00001c 	bne	51c4 <sin+0xdc>
    5150:	e3a03001 	mov	r3, #1
    5154:	e58d3000 	str	r3, [sp]
    5158:	e28d1008 	add	r1, sp, #8
    515c:	e8910003 	ldm	r1, {r0, r1}
    5160:	e28d3010 	add	r3, sp, #16
    5164:	e893000c 	ldm	r3, {r2, r3}
    5168:	eb000c5c 	bl	82e0 <__kernel_sin>
    516c:	eaffffeb 	b	5120 <sin+0x38>
    5170:	e3a03000 	mov	r3, #0
    5174:	e58d3000 	str	r3, [sp]
    5178:	e3a02000 	mov	r2, #0
    517c:	e3a03000 	mov	r3, #0
    5180:	eb000c56 	bl	82e0 <__kernel_sin>
    5184:	eaffffe5 	b	5120 <sin+0x38>
    5188:	e3a03001 	mov	r3, #1
    518c:	e58d3000 	str	r3, [sp]
    5190:	e28d1008 	add	r1, sp, #8
    5194:	e8910003 	ldm	r1, {r0, r1}
    5198:	e28d3010 	add	r3, sp, #16
    519c:	e893000c 	ldm	r3, {r2, r3}
    51a0:	eb000c4e 	bl	82e0 <__kernel_sin>
    51a4:	e2811102 	add	r1, r1, #-2147483648	; 0x80000000
    51a8:	eaffffdc 	b	5120 <sin+0x38>
    51ac:	e28d1008 	add	r1, sp, #8
    51b0:	e8910003 	ldm	r1, {r0, r1}
    51b4:	e28d3010 	add	r3, sp, #16
    51b8:	e893000c 	ldm	r3, {r2, r3}
    51bc:	eb00088f 	bl	7400 <__kernel_cos>
    51c0:	eaffffd6 	b	5120 <sin+0x38>
    51c4:	e28d1008 	add	r1, sp, #8
    51c8:	e8910003 	ldm	r1, {r0, r1}
    51cc:	e28d3010 	add	r3, sp, #16
    51d0:	e893000c 	ldm	r3, {r2, r3}
    51d4:	eb000889 	bl	7400 <__kernel_cos>
    51d8:	e2811102 	add	r1, r1, #-2147483648	; 0x80000000
    51dc:	eaffffcf 	b	5120 <sin+0x38>
    51e0:	3fe921fb 	.word	0x3fe921fb
    51e4:	7fefffff 	.word	0x7fefffff

000051e8 <__fpclassifyf>:
    51e8:	e3d00102 	bics	r0, r0, #-2147483648	; 0x80000000
    51ec:	1a000001 	bne	51f8 <__fpclassifyf+0x10>
    51f0:	e3a00002 	mov	r0, #2
    51f4:	e12fff1e 	bx	lr
    51f8:	e2403502 	sub	r3, r0, #8388608	; 0x800000
    51fc:	e353047f 	cmp	r3, #2130706432	; 0x7f000000
    5200:	2a000001 	bcs	520c <__fpclassifyf+0x24>
    5204:	e3a00004 	mov	r0, #4
    5208:	e12fff1e 	bx	lr
    520c:	e59f3024 	ldr	r3, [pc, #36]	; 5238 <__fpclassifyf+0x50>
    5210:	e2402001 	sub	r2, r0, #1
    5214:	e1520003 	cmp	r2, r3
    5218:	8a000001 	bhi	5224 <__fpclassifyf+0x3c>
    521c:	e3a00003 	mov	r0, #3
    5220:	e12fff1e 	bx	lr
    5224:	e59f3010 	ldr	r3, [pc, #16]	; 523c <__fpclassifyf+0x54>
    5228:	e0503003 	subs	r3, r0, r3
    522c:	e2730000 	rsbs	r0, r3, #0
    5230:	e0b00003 	adcs	r0, r0, r3
    5234:	e12fff1e 	bx	lr
    5238:	007ffffe 	.word	0x007ffffe
    523c:	7f800000 	.word	0x7f800000

00005240 <atan2>:
    5240:	e92d4008 	push	{r3, lr}
    5244:	eb00018b 	bl	5878 <__ieee754_atan2>
    5248:	e8bd4008 	pop	{r3, lr}
    524c:	e12fff1e 	bx	lr

00005250 <pow>:
    5250:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    5254:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    5258:	e1a07003 	mov	r7, r3
    525c:	e1a08000 	mov	r8, r0
    5260:	e1a09001 	mov	r9, r1
    5264:	e1a06002 	mov	r6, r2
    5268:	eb00023e 	bl	5b68 <__ieee754_pow>
    526c:	e59fb4bc 	ldr	r11, [pc, #1212]	; 5730 <pow+0x4e0>
    5270:	e1db30d0 	ldrsb	r3, [r11]
    5274:	e3730001 	cmn	r3, #1
    5278:	e1a04000 	mov	r4, r0
    527c:	e1a05001 	mov	r5, r1
    5280:	0a000004 	beq	5298 <pow+0x48>
    5284:	e1a00006 	mov	r0, r6
    5288:	e1a01007 	mov	r1, r7
    528c:	eb000dc3 	bl	89a0 <__fpclassifyd>
    5290:	e3500000 	cmp	r0, #0
    5294:	1a000004 	bne	52ac <pow+0x5c>
    5298:	e1a00004 	mov	r0, r4
    529c:	e1a01005 	mov	r1, r5
    52a0:	e28dd02c 	add	sp, sp, #44	; 0x2c
    52a4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    52a8:	e12fff1e 	bx	lr
    52ac:	e1a00008 	mov	r0, r8
    52b0:	e1a01009 	mov	r1, r9
    52b4:	eb000db9 	bl	89a0 <__fpclassifyd>
    52b8:	e250a000 	subs	r10, r0, #0
    52bc:	1a00001a 	bne	532c <pow+0xdc>
    52c0:	e1a00006 	mov	r0, r6
    52c4:	e1a01007 	mov	r1, r7
    52c8:	e3a02000 	mov	r2, #0
    52cc:	e3a03000 	mov	r3, #0
    52d0:	eb00110b 	bl	9704 <__aeabi_dcmpeq>
    52d4:	e3500000 	cmp	r0, #0
    52d8:	0affffee 	beq	5298 <pow+0x48>
    52dc:	e1db30d0 	ldrsb	r3, [r11]
    52e0:	e3730001 	cmn	r3, #1
    52e4:	13530002 	cmpne	r3, #2
    52e8:	e3a03001 	mov	r3, #1
    52ec:	e58d3000 	str	r3, [sp]
    52f0:	e59f343c 	ldr	r3, [pc, #1084]	; 5734 <pow+0x4e4>
    52f4:	e58d3004 	str	r3, [sp, #4]
    52f8:	e59f3438 	ldr	r3, [pc, #1080]	; 5738 <pow+0x4e8>
    52fc:	e3a02000 	mov	r2, #0
    5300:	e58da020 	str	r10, [sp, #32]
    5304:	e58d8008 	str	r8, [sp, #8]
    5308:	e58d900c 	str	r9, [sp, #12]
    530c:	e58d6010 	str	r6, [sp, #16]
    5310:	e58d7014 	str	r7, [sp, #20]
    5314:	e58d2018 	str	r2, [sp, #24]
    5318:	e58d301c 	str	r3, [sp, #28]
    531c:	1a000025 	bne	53b8 <pow+0x168>
    5320:	e28d5018 	add	r5, sp, #24
    5324:	e8950030 	ldm	r5, {r4, r5}
    5328:	eaffffda 	b	5298 <pow+0x48>
    532c:	e1a00008 	mov	r0, r8
    5330:	e1a01009 	mov	r1, r9
    5334:	e3a02000 	mov	r2, #0
    5338:	e3a03000 	mov	r3, #0
    533c:	eb0010f0 	bl	9704 <__aeabi_dcmpeq>
    5340:	e3500000 	cmp	r0, #0
    5344:	0a000026 	beq	53e4 <pow+0x194>
    5348:	e1a00006 	mov	r0, r6
    534c:	e1a01007 	mov	r1, r7
    5350:	e3a02000 	mov	r2, #0
    5354:	e3a03000 	mov	r3, #0
    5358:	eb0010e9 	bl	9704 <__aeabi_dcmpeq>
    535c:	e3500000 	cmp	r0, #0
    5360:	0a00004e 	beq	54a0 <pow+0x250>
    5364:	e1db30d0 	ldrsb	r3, [r11]
    5368:	e3530000 	cmp	r3, #0
    536c:	e3a03001 	mov	r3, #1
    5370:	e58d3000 	str	r3, [sp]
    5374:	e59f33b8 	ldr	r3, [pc, #952]	; 5734 <pow+0x4e4>
    5378:	e58d3004 	str	r3, [sp, #4]
    537c:	e3a03000 	mov	r3, #0
    5380:	e58d3020 	str	r3, [sp, #32]
    5384:	e3a04000 	mov	r4, #0
    5388:	e3a03000 	mov	r3, #0
    538c:	e58d8008 	str	r8, [sp, #8]
    5390:	e58d900c 	str	r9, [sp, #12]
    5394:	e58d6010 	str	r6, [sp, #16]
    5398:	e58d7014 	str	r7, [sp, #20]
    539c:	e58d3018 	str	r3, [sp, #24]
    53a0:	e58d401c 	str	r4, [sp, #28]
    53a4:	159f338c 	ldrne	r3, [pc, #908]	; 5738 <pow+0x4e8>
    53a8:	13a02000 	movne	r2, #0
    53ac:	158d2018 	strne	r2, [sp, #24]
    53b0:	158d301c 	strne	r3, [sp, #28]
    53b4:	1affffd9 	bne	5320 <pow+0xd0>
    53b8:	e1a0000d 	mov	r0, sp
    53bc:	eb000d92 	bl	8a0c <matherr>
    53c0:	e3500000 	cmp	r0, #0
    53c4:	0a000058 	beq	552c <pow+0x2dc>
    53c8:	e59d3020 	ldr	r3, [sp, #32]
    53cc:	e3530000 	cmp	r3, #0
    53d0:	0affffd2 	beq	5320 <pow+0xd0>
    53d4:	eb0012f4 	bl	9fac <__errno>
    53d8:	e59d3020 	ldr	r3, [sp, #32]
    53dc:	e5803000 	str	r3, [r0]
    53e0:	eaffffce 	b	5320 <pow+0xd0>
    53e4:	e1a00004 	mov	r0, r4
    53e8:	e1a01005 	mov	r1, r5
    53ec:	eb000d67 	bl	8990 <finite>
    53f0:	e250a000 	subs	r10, r0, #0
    53f4:	0a000050 	beq	553c <pow+0x2ec>
    53f8:	e1a00004 	mov	r0, r4
    53fc:	e1a01005 	mov	r1, r5
    5400:	e3a02000 	mov	r2, #0
    5404:	e3a03000 	mov	r3, #0
    5408:	eb0010bd 	bl	9704 <__aeabi_dcmpeq>
    540c:	e3500000 	cmp	r0, #0
    5410:	0affffa0 	beq	5298 <pow+0x48>
    5414:	e1a00008 	mov	r0, r8
    5418:	e1a01009 	mov	r1, r9
    541c:	eb000d5b 	bl	8990 <finite>
    5420:	e3500000 	cmp	r0, #0
    5424:	0affff9b 	beq	5298 <pow+0x48>
    5428:	e1a00006 	mov	r0, r6
    542c:	e1a01007 	mov	r1, r7
    5430:	eb000d56 	bl	8990 <finite>
    5434:	e3500000 	cmp	r0, #0
    5438:	0affff96 	beq	5298 <pow+0x48>
    543c:	e1db30d0 	ldrsb	r3, [r11]
    5440:	e3530002 	cmp	r3, #2
    5444:	e3a03004 	mov	r3, #4
    5448:	e58d3000 	str	r3, [sp]
    544c:	e59f32e0 	ldr	r3, [pc, #736]	; 5734 <pow+0x4e4>
    5450:	e58d3004 	str	r3, [sp, #4]
    5454:	e3a03000 	mov	r3, #0
    5458:	e58d3020 	str	r3, [sp, #32]
    545c:	e3a04000 	mov	r4, #0
    5460:	e3a03000 	mov	r3, #0
    5464:	e58d8008 	str	r8, [sp, #8]
    5468:	e58d900c 	str	r9, [sp, #12]
    546c:	e58d6010 	str	r6, [sp, #16]
    5470:	e58d7014 	str	r7, [sp, #20]
    5474:	e58d3018 	str	r3, [sp, #24]
    5478:	e58d401c 	str	r4, [sp, #28]
    547c:	0a00005c 	beq	55f4 <pow+0x3a4>
    5480:	e1a0000d 	mov	r0, sp
    5484:	eb000d60 	bl	8a0c <matherr>
    5488:	e3500000 	cmp	r0, #0
    548c:	0a000058 	beq	55f4 <pow+0x3a4>
    5490:	e59d3020 	ldr	r3, [sp, #32]
    5494:	e3530000 	cmp	r3, #0
    5498:	0affffa0 	beq	5320 <pow+0xd0>
    549c:	eaffffcc 	b	53d4 <pow+0x184>
    54a0:	e1a00006 	mov	r0, r6
    54a4:	e1a01007 	mov	r1, r7
    54a8:	eb000d38 	bl	8990 <finite>
    54ac:	e3500000 	cmp	r0, #0
    54b0:	0affff78 	beq	5298 <pow+0x48>
    54b4:	e1a00006 	mov	r0, r6
    54b8:	e1a01007 	mov	r1, r7
    54bc:	e3a02000 	mov	r2, #0
    54c0:	e3a03000 	mov	r3, #0
    54c4:	eb001094 	bl	971c <__aeabi_dcmplt>
    54c8:	e3500000 	cmp	r0, #0
    54cc:	0affff71 	beq	5298 <pow+0x48>
    54d0:	e3a02001 	mov	r2, #1
    54d4:	e5db3000 	ldrb	r3, [r11]
    54d8:	e58d2000 	str	r2, [sp]
    54dc:	e59f2250 	ldr	r2, [pc, #592]	; 5734 <pow+0x4e4>
    54e0:	e3530000 	cmp	r3, #0
    54e4:	e58d2004 	str	r2, [sp, #4]
    54e8:	e3a02000 	mov	r2, #0
    54ec:	e58d2020 	str	r2, [sp, #32]
    54f0:	e58d8008 	str	r8, [sp, #8]
    54f4:	e58d900c 	str	r9, [sp, #12]
    54f8:	e58d6010 	str	r6, [sp, #16]
    54fc:	e58d7014 	str	r7, [sp, #20]
    5500:	0a000036 	beq	55e0 <pow+0x390>
    5504:	e3530002 	cmp	r3, #2
    5508:	e59f322c 	ldr	r3, [pc, #556]	; 573c <pow+0x4ec>
    550c:	e3a02000 	mov	r2, #0
    5510:	e58d2018 	str	r2, [sp, #24]
    5514:	e58d301c 	str	r3, [sp, #28]
    5518:	1a00002b 	bne	55cc <pow+0x37c>
    551c:	eb0012a2 	bl	9fac <__errno>
    5520:	e3a03021 	mov	r3, #33	; 0x21
    5524:	e5803000 	str	r3, [r0]
    5528:	eaffffd8 	b	5490 <pow+0x240>
    552c:	eb00129e 	bl	9fac <__errno>
    5530:	e3a03021 	mov	r3, #33	; 0x21
    5534:	e5803000 	str	r3, [r0]
    5538:	eaffffa2 	b	53c8 <pow+0x178>
    553c:	e1a00008 	mov	r0, r8
    5540:	e1a01009 	mov	r1, r9
    5544:	eb000d11 	bl	8990 <finite>
    5548:	e3500000 	cmp	r0, #0
    554c:	0affffa9 	beq	53f8 <pow+0x1a8>
    5550:	e1a00006 	mov	r0, r6
    5554:	e1a01007 	mov	r1, r7
    5558:	eb000d0c 	bl	8990 <finite>
    555c:	e3500000 	cmp	r0, #0
    5560:	0affffa4 	beq	53f8 <pow+0x1a8>
    5564:	e1a00004 	mov	r0, r4
    5568:	e1a01005 	mov	r1, r5
    556c:	eb000d0b 	bl	89a0 <__fpclassifyd>
    5570:	e3500000 	cmp	r0, #0
    5574:	1a000022 	bne	5604 <pow+0x3b4>
    5578:	e3a03001 	mov	r3, #1
    557c:	e5db4000 	ldrb	r4, [r11]
    5580:	e58d3000 	str	r3, [sp]
    5584:	e59f31a8 	ldr	r3, [pc, #424]	; 5734 <pow+0x4e4>
    5588:	e3540000 	cmp	r4, #0
    558c:	e58d3004 	str	r3, [sp, #4]
    5590:	e58d0020 	str	r0, [sp, #32]
    5594:	e58d8008 	str	r8, [sp, #8]
    5598:	e58d900c 	str	r9, [sp, #12]
    559c:	e58d6010 	str	r6, [sp, #16]
    55a0:	e58d7014 	str	r7, [sp, #20]
    55a4:	0a00000d 	beq	55e0 <pow+0x390>
    55a8:	e3a00000 	mov	r0, #0
    55ac:	e3a01000 	mov	r1, #0
    55b0:	e1a02000 	mov	r2, r0
    55b4:	e1a03001 	mov	r3, r1
    55b8:	eb000f9b 	bl	942c <__aeabi_ddiv>
    55bc:	e3540002 	cmp	r4, #2
    55c0:	e58d0018 	str	r0, [sp, #24]
    55c4:	e58d101c 	str	r1, [sp, #28]
    55c8:	0affffd3 	beq	551c <pow+0x2cc>
    55cc:	e1a0000d 	mov	r0, sp
    55d0:	eb000d0d 	bl	8a0c <matherr>
    55d4:	e3500000 	cmp	r0, #0
    55d8:	1affffac 	bne	5490 <pow+0x240>
    55dc:	eaffffce 	b	551c <pow+0x2cc>
    55e0:	e3a03000 	mov	r3, #0
    55e4:	e3a04000 	mov	r4, #0
    55e8:	e58d3018 	str	r3, [sp, #24]
    55ec:	e58d401c 	str	r4, [sp, #28]
    55f0:	eafffff5 	b	55cc <pow+0x37c>
    55f4:	eb00126c 	bl	9fac <__errno>
    55f8:	e3a03022 	mov	r3, #34	; 0x22
    55fc:	e5803000 	str	r3, [r0]
    5600:	eaffffa2 	b	5490 <pow+0x240>
    5604:	e1db20d0 	ldrsb	r2, [r11]
    5608:	e3520000 	cmp	r2, #0
    560c:	e3a02003 	mov	r2, #3
    5610:	e58d2000 	str	r2, [sp]
    5614:	e59f2118 	ldr	r2, [pc, #280]	; 5734 <pow+0x4e4>
    5618:	e1a00008 	mov	r0, r8
    561c:	e58d2004 	str	r2, [sp, #4]
    5620:	e1a01009 	mov	r1, r9
    5624:	e58da020 	str	r10, [sp, #32]
    5628:	e58d8008 	str	r8, [sp, #8]
    562c:	e58d900c 	str	r9, [sp, #12]
    5630:	e58d6010 	str	r6, [sp, #16]
    5634:	e58d7014 	str	r7, [sp, #20]
    5638:	e3a02000 	mov	r2, #0
    563c:	e3a03000 	mov	r3, #0
    5640:	1a000011 	bne	568c <pow+0x43c>
    5644:	e59f50f4 	ldr	r5, [pc, #244]	; 5740 <pow+0x4f0>
    5648:	e3a0420e 	mov	r4, #-536870912	; 0xe0000000
    564c:	e58d4018 	str	r4, [sp, #24]
    5650:	e58d501c 	str	r5, [sp, #28]
    5654:	eb001030 	bl	971c <__aeabi_dcmplt>
    5658:	e3500000 	cmp	r0, #0
    565c:	1a000022 	bne	56ec <pow+0x49c>
    5660:	e1db30d0 	ldrsb	r3, [r11]
    5664:	e3530002 	cmp	r3, #2
    5668:	0a000003 	beq	567c <pow+0x42c>
    566c:	e1a0000d 	mov	r0, sp
    5670:	eb000ce5 	bl	8a0c <matherr>
    5674:	e3500000 	cmp	r0, #0
    5678:	1affff52 	bne	53c8 <pow+0x178>
    567c:	eb00124a 	bl	9fac <__errno>
    5680:	e3a03022 	mov	r3, #34	; 0x22
    5684:	e5803000 	str	r3, [r0]
    5688:	eaffff4e 	b	53c8 <pow+0x178>
    568c:	e59f50b0 	ldr	r5, [pc, #176]	; 5744 <pow+0x4f4>
    5690:	e3a04000 	mov	r4, #0
    5694:	e58d4018 	str	r4, [sp, #24]
    5698:	e58d501c 	str	r5, [sp, #28]
    569c:	eb00101e 	bl	971c <__aeabi_dcmplt>
    56a0:	e3500000 	cmp	r0, #0
    56a4:	0affffed 	beq	5660 <pow+0x410>
    56a8:	e3a02000 	mov	r2, #0
    56ac:	e59f3094 	ldr	r3, [pc, #148]	; 5748 <pow+0x4f8>
    56b0:	e1a00006 	mov	r0, r6
    56b4:	e1a01007 	mov	r1, r7
    56b8:	eb000eb7 	bl	919c <__aeabi_dmul>
    56bc:	e1a04000 	mov	r4, r0
    56c0:	e1a05001 	mov	r5, r1
    56c4:	eb000cd6 	bl	8a24 <rint>
    56c8:	e1a02004 	mov	r2, r4
    56cc:	e1a03005 	mov	r3, r5
    56d0:	eb00100b 	bl	9704 <__aeabi_dcmpeq>
    56d4:	e3500000 	cmp	r0, #0
    56d8:	059f305c 	ldreq	r3, [pc, #92]	; 573c <pow+0x4ec>
    56dc:	03a02000 	moveq	r2, #0
    56e0:	058d2018 	streq	r2, [sp, #24]
    56e4:	058d301c 	streq	r3, [sp, #28]
    56e8:	eaffffdc 	b	5660 <pow+0x410>
    56ec:	e3a02000 	mov	r2, #0
    56f0:	e59f3050 	ldr	r3, [pc, #80]	; 5748 <pow+0x4f8>
    56f4:	e1a00006 	mov	r0, r6
    56f8:	e1a01007 	mov	r1, r7
    56fc:	eb000ea6 	bl	919c <__aeabi_dmul>
    5700:	e1a04000 	mov	r4, r0
    5704:	e1a05001 	mov	r5, r1
    5708:	eb000cc5 	bl	8a24 <rint>
    570c:	e1a02004 	mov	r2, r4
    5710:	e1a03005 	mov	r3, r5
    5714:	eb000ffa 	bl	9704 <__aeabi_dcmpeq>
    5718:	e3500000 	cmp	r0, #0
    571c:	059f3028 	ldreq	r3, [pc, #40]	; 574c <pow+0x4fc>
    5720:	03a0220e 	moveq	r2, #-536870912	; 0xe0000000
    5724:	058d2018 	streq	r2, [sp, #24]
    5728:	058d301c 	streq	r3, [sp, #28]
    572c:	eaffffcb 	b	5660 <pow+0x410>
    5730:	0000b3c4 	.word	0x0000b3c4
    5734:	0000a438 	.word	0x0000a438
    5738:	3ff00000 	.word	0x3ff00000
    573c:	fff00000 	.word	0xfff00000
    5740:	47efffff 	.word	0x47efffff
    5744:	7ff00000 	.word	0x7ff00000
    5748:	3fe00000 	.word	0x3fe00000
    574c:	c7efffff 	.word	0xc7efffff

00005750 <sqrt>:
    5750:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
    5754:	e24dd028 	sub	sp, sp, #40	; 0x28
    5758:	e1a04000 	mov	r4, r0
    575c:	e1a05001 	mov	r5, r1
    5760:	eb000696 	bl	71c0 <__ieee754_sqrt>
    5764:	e59fa104 	ldr	r10, [pc, #260]	; 5870 <sqrt+0x120>
    5768:	e1da30d0 	ldrsb	r3, [r10]
    576c:	e3730001 	cmn	r3, #1
    5770:	e1a06000 	mov	r6, r0
    5774:	e1a07001 	mov	r7, r1
    5778:	0a00000d 	beq	57b4 <sqrt+0x64>
    577c:	e1a00004 	mov	r0, r4
    5780:	e1a01005 	mov	r1, r5
    5784:	eb000c85 	bl	89a0 <__fpclassifyd>
    5788:	e3500000 	cmp	r0, #0
    578c:	0a000008 	beq	57b4 <sqrt+0x64>
    5790:	e3a08000 	mov	r8, #0
    5794:	e3a09000 	mov	r9, #0
    5798:	e1a00004 	mov	r0, r4
    579c:	e1a01005 	mov	r1, r5
    57a0:	e1a02008 	mov	r2, r8
    57a4:	e1a03009 	mov	r3, r9
    57a8:	eb000fdb 	bl	971c <__aeabi_dcmplt>
    57ac:	e3500000 	cmp	r0, #0
    57b0:	1a000004 	bne	57c8 <sqrt+0x78>
    57b4:	e1a00006 	mov	r0, r6
    57b8:	e1a01007 	mov	r1, r7
    57bc:	e28dd028 	add	sp, sp, #40	; 0x28
    57c0:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, r10, lr}
    57c4:	e12fff1e 	bx	lr
    57c8:	e3a03001 	mov	r3, #1
    57cc:	e5da6000 	ldrb	r6, [r10]
    57d0:	e58d3000 	str	r3, [sp]
    57d4:	e59f3098 	ldr	r3, [pc, #152]	; 5874 <sqrt+0x124>
    57d8:	e3560000 	cmp	r6, #0
    57dc:	e58d3004 	str	r3, [sp, #4]
    57e0:	e3a03000 	mov	r3, #0
    57e4:	e58d3020 	str	r3, [sp, #32]
    57e8:	e58d4010 	str	r4, [sp, #16]
    57ec:	e58d5014 	str	r5, [sp, #20]
    57f0:	e58d4008 	str	r4, [sp, #8]
    57f4:	e58d500c 	str	r5, [sp, #12]
    57f8:	1a00000b 	bne	582c <sqrt+0xdc>
    57fc:	e58d8018 	str	r8, [sp, #24]
    5800:	e58d901c 	str	r9, [sp, #28]
    5804:	e1a0000d 	mov	r0, sp
    5808:	eb000c7f 	bl	8a0c <matherr>
    580c:	e3500000 	cmp	r0, #0
    5810:	0a00000e 	beq	5850 <sqrt+0x100>
    5814:	e59d3020 	ldr	r3, [sp, #32]
    5818:	e3530000 	cmp	r3, #0
    581c:	1a00000f 	bne	5860 <sqrt+0x110>
    5820:	e28d7018 	add	r7, sp, #24
    5824:	e89700c0 	ldm	r7, {r6, r7}
    5828:	eaffffe1 	b	57b4 <sqrt+0x64>
    582c:	e1a00008 	mov	r0, r8
    5830:	e1a01009 	mov	r1, r9
    5834:	e1a02008 	mov	r2, r8
    5838:	e1a03009 	mov	r3, r9
    583c:	eb000efa 	bl	942c <__aeabi_ddiv>
    5840:	e3560002 	cmp	r6, #2
    5844:	e58d0018 	str	r0, [sp, #24]
    5848:	e58d101c 	str	r1, [sp, #28]
    584c:	1affffec 	bne	5804 <sqrt+0xb4>
    5850:	eb0011d5 	bl	9fac <__errno>
    5854:	e3a03021 	mov	r3, #33	; 0x21
    5858:	e5803000 	str	r3, [r0]
    585c:	eaffffec 	b	5814 <sqrt+0xc4>
    5860:	eb0011d1 	bl	9fac <__errno>
    5864:	e59d3020 	ldr	r3, [sp, #32]
    5868:	e5803000 	str	r3, [r0]
    586c:	eaffffeb 	b	5820 <sqrt+0xd0>
    5870:	0000b3c4 	.word	0x0000b3c4
    5874:	0000a43c 	.word	0x0000a43c

00005878 <__ieee754_atan2>:
    5878:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
    587c:	e24dd010 	sub	sp, sp, #16
    5880:	e1a04003 	mov	r4, r3
    5884:	e58d2008 	str	r2, [sp, #8]
    5888:	e58d300c 	str	r3, [sp, #12]
    588c:	e1a03002 	mov	r3, r2
    5890:	e88d0018 	stm	sp, {r3, r4}
    5894:	e59dc000 	ldr	r12, [sp]
    5898:	e59d7004 	ldr	r7, [sp, #4]
    589c:	e26ca000 	rsb	r10, r12, #0
    58a0:	e3c78102 	bic	r8, r7, #-2147483648	; 0x80000000
    58a4:	e18aa00c 	orr	r10, r10, r12
    58a8:	e59f62b0 	ldr	r6, [pc, #688]	; 5b60 <__ieee754_atan2+0x2e8>
    58ac:	e188afaa 	orr	r10, r8, r10, lsr #31
    58b0:	e15a0006 	cmp	r10, r6
    58b4:	e1a04000 	mov	r4, r0
    58b8:	e1a05001 	mov	r5, r1
    58bc:	e1a02000 	mov	r2, r0
    58c0:	e1a03001 	mov	r3, r1
    58c4:	8a000033 	bhi	5998 <__ieee754_atan2+0x120>
    58c8:	e2609000 	rsb	r9, r0, #0
    58cc:	e3c1a102 	bic	r10, r1, #-2147483648	; 0x80000000
    58d0:	e1899000 	orr	r9, r9, r0
    58d4:	e18a9fa9 	orr	r9, r10, r9, lsr #31
    58d8:	e1590006 	cmp	r9, r6
    58dc:	8a00002d 	bhi	5998 <__ieee754_atan2+0x120>
    58e0:	e2877103 	add	r7, r7, #-1073741824	; 0xc0000000
    58e4:	e2877601 	add	r7, r7, #1048576	; 0x100000
    58e8:	e197700c 	orrs	r7, r7, r12
    58ec:	e59d7004 	ldr	r7, [sp, #4]
    58f0:	0a000040 	beq	59f8 <__ieee754_atan2+0x180>
    58f4:	e1a06f47 	asr	r6, r7, #30
    58f8:	e2066002 	and	r6, r6, #2
    58fc:	e19a2002 	orrs	r2, r10, r2
    5900:	e1866fa1 	orr	r6, r6, r1, lsr #31
    5904:	0a00002f 	beq	59c8 <__ieee754_atan2+0x150>
    5908:	e198c00c 	orrs	r12, r8, r12
    590c:	0a000034 	beq	59e4 <__ieee754_atan2+0x16c>
    5910:	e59f2248 	ldr	r2, [pc, #584]	; 5b60 <__ieee754_atan2+0x2e8>
    5914:	e1580002 	cmp	r8, r2
    5918:	0a000043 	beq	5a2c <__ieee754_atan2+0x1b4>
    591c:	e59f223c 	ldr	r2, [pc, #572]	; 5b60 <__ieee754_atan2+0x2e8>
    5920:	e15a0002 	cmp	r10, r2
    5924:	0a00002e 	beq	59e4 <__ieee754_atan2+0x16c>
    5928:	e068800a 	rsb	r8, r8, r10
    592c:	e1a08a48 	asr	r8, r8, #20
    5930:	e358003c 	cmp	r8, #60	; 0x3c
    5934:	ca000039 	bgt	5a20 <__ieee754_atan2+0x1a8>
    5938:	e378003c 	cmn	r8, #60	; 0x3c
    593c:	a3a08000 	movge	r8, #0
    5940:	b3a08001 	movlt	r8, #1
    5944:	e0188fa7 	ands	r8, r8, r7, lsr #31
    5948:	13a00000 	movne	r0, #0
    594c:	13a01000 	movne	r1, #0
    5950:	0a000055 	beq	5aac <__ieee754_atan2+0x234>
    5954:	e3560001 	cmp	r6, #1
    5958:	0a000050 	beq	5aa0 <__ieee754_atan2+0x228>
    595c:	e3560002 	cmp	r6, #2
    5960:	0a000043 	beq	5a74 <__ieee754_atan2+0x1fc>
    5964:	e3560000 	cmp	r6, #0
    5968:	01a04000 	moveq	r4, r0
    596c:	01a05001 	moveq	r5, r1
    5970:	0a00000f 	beq	59b4 <__ieee754_atan2+0x13c>
    5974:	e28f3f67 	add	r3, pc, #412	; 0x19c
    5978:	e893000c 	ldm	r3, {r2, r3}
    597c:	eb000d01 	bl	8d88 <__aeabi_dsub>
    5980:	e28f3f66 	add	r3, pc, #408	; 0x198
    5984:	e893000c 	ldm	r3, {r2, r3}
    5988:	eb000cfe 	bl	8d88 <__aeabi_dsub>
    598c:	e1a04000 	mov	r4, r0
    5990:	e1a05001 	mov	r5, r1
    5994:	ea000006 	b	59b4 <__ieee754_atan2+0x13c>
    5998:	e1a00004 	mov	r0, r4
    599c:	e1a01005 	mov	r1, r5
    59a0:	e28d3008 	add	r3, sp, #8
    59a4:	e893000c 	ldm	r3, {r2, r3}
    59a8:	eb000cf7 	bl	8d8c <__adddf3>
    59ac:	e1a04000 	mov	r4, r0
    59b0:	e1a05001 	mov	r5, r1
    59b4:	e1a00004 	mov	r0, r4
    59b8:	e1a01005 	mov	r1, r5
    59bc:	e28dd010 	add	sp, sp, #16
    59c0:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, r10, lr}
    59c4:	e12fff1e 	bx	lr
    59c8:	e3560003 	cmp	r6, #3
    59cc:	979ff106 	ldrls	pc, [pc, r6, lsl #2]
    59d0:	eaffffcc 	b	5908 <__ieee754_atan2+0x90>
    59d4:	000059b4 	.word	0x000059b4
    59d8:	000059b4 	.word	0x000059b4
    59dc:	00005a14 	.word	0x00005a14
    59e0:	00005a08 	.word	0x00005a08
    59e4:	e3530000 	cmp	r3, #0
    59e8:	ba00001e 	blt	5a68 <__ieee754_atan2+0x1f0>
    59ec:	e28f5f4d 	add	r5, pc, #308	; 0x134
    59f0:	e8950030 	ldm	r5, {r4, r5}
    59f4:	eaffffee 	b	59b4 <__ieee754_atan2+0x13c>
    59f8:	eb000ac0 	bl	8500 <atan>
    59fc:	e1a04000 	mov	r4, r0
    5a00:	e1a05001 	mov	r5, r1
    5a04:	eaffffea 	b	59b4 <__ieee754_atan2+0x13c>
    5a08:	e28f5e12 	add	r5, pc, #288	; 0x120
    5a0c:	e8950030 	ldm	r5, {r4, r5}
    5a10:	eaffffe7 	b	59b4 <__ieee754_atan2+0x13c>
    5a14:	e28f5f41 	add	r5, pc, #260	; 0x104
    5a18:	e8950030 	ldm	r5, {r4, r5}
    5a1c:	eaffffe4 	b	59b4 <__ieee754_atan2+0x13c>
    5a20:	e28f1c01 	add	r1, pc, #256	; 0x100
    5a24:	e8910003 	ldm	r1, {r0, r1}
    5a28:	eaffffc9 	b	5954 <__ieee754_atan2+0xdc>
    5a2c:	e15a0008 	cmp	r10, r8
    5a30:	0a000025 	beq	5acc <__ieee754_atan2+0x254>
    5a34:	e3560003 	cmp	r6, #3
    5a38:	979ff106 	ldrls	pc, [pc, r6, lsl #2]
    5a3c:	eaffffb6 	b	591c <__ieee754_atan2+0xa4>
    5a40:	00005a5c 	.word	0x00005a5c
    5a44:	00005a50 	.word	0x00005a50
    5a48:	00005a14 	.word	0x00005a14
    5a4c:	00005a08 	.word	0x00005a08
    5a50:	e3a04000 	mov	r4, #0
    5a54:	e3a05102 	mov	r5, #-2147483648	; 0x80000000
    5a58:	eaffffd5 	b	59b4 <__ieee754_atan2+0x13c>
    5a5c:	e3a04000 	mov	r4, #0
    5a60:	e3a05000 	mov	r5, #0
    5a64:	eaffffd2 	b	59b4 <__ieee754_atan2+0x13c>
    5a68:	e28f50c8 	add	r5, pc, #200	; 0xc8
    5a6c:	e8950030 	ldm	r5, {r4, r5}
    5a70:	eaffffcf 	b	59b4 <__ieee754_atan2+0x13c>
    5a74:	e28f309c 	add	r3, pc, #156	; 0x9c
    5a78:	e893000c 	ldm	r3, {r2, r3}
    5a7c:	eb000cc1 	bl	8d88 <__aeabi_dsub>
    5a80:	e1a02000 	mov	r2, r0
    5a84:	e1a03001 	mov	r3, r1
    5a88:	e28f1090 	add	r1, pc, #144	; 0x90
    5a8c:	e8910003 	ldm	r1, {r0, r1}
    5a90:	eb000cbc 	bl	8d88 <__aeabi_dsub>
    5a94:	e1a04000 	mov	r4, r0
    5a98:	e1a05001 	mov	r5, r1
    5a9c:	eaffffc4 	b	59b4 <__ieee754_atan2+0x13c>
    5aa0:	e1a04000 	mov	r4, r0
    5aa4:	e2815102 	add	r5, r1, #-2147483648	; 0x80000000
    5aa8:	eaffffc1 	b	59b4 <__ieee754_atan2+0x13c>
    5aac:	e28d3008 	add	r3, sp, #8
    5ab0:	e893000c 	ldm	r3, {r2, r3}
    5ab4:	e1a00004 	mov	r0, r4
    5ab8:	e1a01005 	mov	r1, r5
    5abc:	eb000e5a 	bl	942c <__aeabi_ddiv>
    5ac0:	eb000bb0 	bl	8988 <fabs>
    5ac4:	eb000a8d 	bl	8500 <atan>
    5ac8:	eaffffa1 	b	5954 <__ieee754_atan2+0xdc>
    5acc:	e3560003 	cmp	r6, #3
    5ad0:	979ff106 	ldrls	pc, [pc, r6, lsl #2]
    5ad4:	eaffffc2 	b	59e4 <__ieee754_atan2+0x16c>
    5ad8:	00005b0c 	.word	0x00005b0c
    5adc:	00005b00 	.word	0x00005b00
    5ae0:	00005af4 	.word	0x00005af4
    5ae4:	00005ae8 	.word	0x00005ae8
    5ae8:	e28f5050 	add	r5, pc, #80	; 0x50
    5aec:	e8950030 	ldm	r5, {r4, r5}
    5af0:	eaffffaf 	b	59b4 <__ieee754_atan2+0x13c>
    5af4:	e28f504c 	add	r5, pc, #76	; 0x4c
    5af8:	e8950030 	ldm	r5, {r4, r5}
    5afc:	eaffffac 	b	59b4 <__ieee754_atan2+0x13c>
    5b00:	e28f5048 	add	r5, pc, #72	; 0x48
    5b04:	e8950030 	ldm	r5, {r4, r5}
    5b08:	eaffffa9 	b	59b4 <__ieee754_atan2+0x13c>
    5b0c:	e28f5044 	add	r5, pc, #68	; 0x44
    5b10:	e8950030 	ldm	r5, {r4, r5}
    5b14:	eaffffa6 	b	59b4 <__ieee754_atan2+0x13c>
    5b18:	33145c07 	.word	0x33145c07
    5b1c:	3ca1a626 	.word	0x3ca1a626
    5b20:	54442d18 	.word	0x54442d18
    5b24:	400921fb 	.word	0x400921fb
    5b28:	54442d18 	.word	0x54442d18
    5b2c:	3ff921fb 	.word	0x3ff921fb
    5b30:	54442d18 	.word	0x54442d18
    5b34:	c00921fb 	.word	0xc00921fb
    5b38:	54442d18 	.word	0x54442d18
    5b3c:	bff921fb 	.word	0xbff921fb
    5b40:	7f3321d2 	.word	0x7f3321d2
    5b44:	c002d97c 	.word	0xc002d97c
    5b48:	7f3321d2 	.word	0x7f3321d2
    5b4c:	4002d97c 	.word	0x4002d97c
    5b50:	54442d18 	.word	0x54442d18
    5b54:	bfe921fb 	.word	0xbfe921fb
    5b58:	54442d18 	.word	0x54442d18
    5b5c:	3fe921fb 	.word	0x3fe921fb
    5b60:	7ff00000 	.word	0x7ff00000
    5b64:	e1a00000 	nop			; (mov r0, r0)

00005b68 <__ieee754_pow>:
    5b68:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    5b6c:	e1a0b003 	mov	r11, r3
    5b70:	e1a0a002 	mov	r10, r2
    5b74:	e3cb6102 	bic	r6, r11, #-2147483648	; 0x80000000
    5b78:	e1a08001 	mov	r8, r1
    5b7c:	e24dd044 	sub	sp, sp, #68	; 0x44
    5b80:	e196100a 	orrs	r1, r6, r10
    5b84:	e1a04002 	mov	r4, r2
    5b88:	e1a07000 	mov	r7, r0
    5b8c:	e1a05003 	mov	r5, r3
    5b90:	e1a0c00a 	mov	r12, r10
    5b94:	e58d8010 	str	r8, [sp, #16]
    5b98:	e1a09000 	mov	r9, r0
    5b9c:	0a000060 	beq	5d24 <__ieee754_pow+0x1bc>
    5ba0:	e59f12d0 	ldr	r1, [pc, #720]	; 5e78 <__ieee754_pow+0x310>
    5ba4:	e3c80102 	bic	r0, r8, #-2147483648	; 0x80000000
    5ba8:	e1500001 	cmp	r0, r1
    5bac:	e58d0008 	str	r0, [sp, #8]
    5bb0:	da00000b 	ble	5be4 <__ieee754_pow+0x7c>
    5bb4:	e59d4008 	ldr	r4, [sp, #8]
    5bb8:	e284a103 	add	r10, r4, #-1073741824	; 0xc0000000
    5bbc:	e28aa601 	add	r10, r10, #1048576	; 0x100000
    5bc0:	e19a9009 	orrs	r9, r10, r9
    5bc4:	01a0a009 	moveq	r10, r9
    5bc8:	059fb2d4 	ldreq	r11, [pc, #724]	; 5ea4 <__ieee754_pow+0x33c>
    5bcc:	1a000057 	bne	5d30 <__ieee754_pow+0x1c8>
    5bd0:	e1a0000a 	mov	r0, r10
    5bd4:	e1a0100b 	mov	r1, r11
    5bd8:	e28dd044 	add	sp, sp, #68	; 0x44
    5bdc:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    5be0:	e12fff1e 	bx	lr
    5be4:	13a00000 	movne	r0, #0
    5be8:	03a00001 	moveq	r0, #1
    5bec:	e58d0018 	str	r0, [sp, #24]
    5bf0:	e3570000 	cmp	r7, #0
    5bf4:	03a00000 	moveq	r0, #0
    5bf8:	12000001 	andne	r0, r0, #1
    5bfc:	e3500000 	cmp	r0, #0
    5c00:	1affffeb 	bne	5bb4 <__ieee754_pow+0x4c>
    5c04:	e1560001 	cmp	r6, r1
    5c08:	caffffe9 	bgt	5bb4 <__ieee754_pow+0x4c>
    5c0c:	13a01000 	movne	r1, #0
    5c10:	03a01001 	moveq	r1, #1
    5c14:	e58d1028 	str	r1, [sp, #40]	; 0x28
    5c18:	e35a0000 	cmp	r10, #0
    5c1c:	03a01000 	moveq	r1, #0
    5c20:	12011001 	andne	r1, r1, #1
    5c24:	e3510000 	cmp	r1, #0
    5c28:	1affffe1 	bne	5bb4 <__ieee754_pow+0x4c>
    5c2c:	e59d0010 	ldr	r0, [sp, #16]
    5c30:	e3500000 	cmp	r0, #0
    5c34:	e58d8020 	str	r8, [sp, #32]
    5c38:	e1a0400b 	mov	r4, r11
    5c3c:	ba000040 	blt	5d44 <__ieee754_pow+0x1dc>
    5c40:	e58d1030 	str	r1, [sp, #48]	; 0x30
    5c44:	e35c0000 	cmp	r12, #0
    5c48:	1a00000c 	bne	5c80 <__ieee754_pow+0x118>
    5c4c:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    5c50:	e3530000 	cmp	r3, #0
    5c54:	1a00004e 	bne	5d94 <__ieee754_pow+0x22c>
    5c58:	e59f3244 	ldr	r3, [pc, #580]	; 5ea4 <__ieee754_pow+0x33c>
    5c5c:	e1560003 	cmp	r6, r3
    5c60:	0a000073 	beq	5e34 <__ieee754_pow+0x2cc>
    5c64:	e3540101 	cmp	r4, #1073741824	; 0x40000000
    5c68:	01a00007 	moveq	r0, r7
    5c6c:	01a01008 	moveq	r1, r8
    5c70:	0a000025 	beq	5d0c <__ieee754_pow+0x1a4>
    5c74:	e59f3200 	ldr	r3, [pc, #512]	; 5e7c <__ieee754_pow+0x314>
    5c78:	e1540003 	cmp	r4, r3
    5c7c:	0a0002c7 	beq	67a0 <__ieee754_pow+0xc38>
    5c80:	e1a00007 	mov	r0, r7
    5c84:	e1a01008 	mov	r1, r8
    5c88:	eb000b3e 	bl	8988 <fabs>
    5c8c:	e3590000 	cmp	r9, #0
    5c90:	1a000008 	bne	5cb8 <__ieee754_pow+0x150>
    5c94:	e59d3018 	ldr	r3, [sp, #24]
    5c98:	e59d2008 	ldr	r2, [sp, #8]
    5c9c:	e3520000 	cmp	r2, #0
    5ca0:	03833001 	orreq	r3, r3, #1
    5ca4:	e3530000 	cmp	r3, #0
    5ca8:	1a000046 	bne	5dc8 <__ieee754_pow+0x260>
    5cac:	e59f31f0 	ldr	r3, [pc, #496]	; 5ea4 <__ieee754_pow+0x33c>
    5cb0:	e1520003 	cmp	r2, r3
    5cb4:	0a000043 	beq	5dc8 <__ieee754_pow+0x260>
    5cb8:	e59d2010 	ldr	r2, [sp, #16]
    5cbc:	e1a03fa2 	lsr	r3, r2, #31
    5cc0:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
    5cc4:	e2433001 	sub	r3, r3, #1
    5cc8:	e1922003 	orrs	r2, r2, r3
    5ccc:	e58d3010 	str	r3, [sp, #16]
    5cd0:	0a000052 	beq	5e20 <__ieee754_pow+0x2b8>
    5cd4:	e59f31a4 	ldr	r3, [pc, #420]	; 5e80 <__ieee754_pow+0x318>
    5cd8:	e1560003 	cmp	r6, r3
    5cdc:	da000071 	ble	5ea8 <__ieee754_pow+0x340>
    5ce0:	e2833621 	add	r3, r3, #34603008	; 0x2100000
    5ce4:	e1560003 	cmp	r6, r3
    5ce8:	da00030e 	ble	6928 <__ieee754_pow+0xdc0>
    5cec:	e59d0008 	ldr	r0, [sp, #8]
    5cf0:	e2433341 	sub	r3, r3, #67108865	; 0x4000001
    5cf4:	e1500003 	cmp	r0, r3
    5cf8:	da0002b4 	ble	67d0 <__ieee754_pow+0xc68>
    5cfc:	e3540000 	cmp	r4, #0
    5d00:	da00002d 	ble	5dbc <__ieee754_pow+0x254>
    5d04:	e28f1f59 	add	r1, pc, #356	; 0x164
    5d08:	e8910003 	ldm	r1, {r0, r1}
    5d0c:	e1a02000 	mov	r2, r0
    5d10:	e1a03001 	mov	r3, r1
    5d14:	eb000d20 	bl	919c <__aeabi_dmul>
    5d18:	e1a0a000 	mov	r10, r0
    5d1c:	e1a0b001 	mov	r11, r1
    5d20:	eaffffaa 	b	5bd0 <__ieee754_pow+0x68>
    5d24:	e1a0a001 	mov	r10, r1
    5d28:	e59fb174 	ldr	r11, [pc, #372]	; 5ea4 <__ieee754_pow+0x33c>
    5d2c:	eaffffa7 	b	5bd0 <__ieee754_pow+0x68>
    5d30:	e59f014c 	ldr	r0, [pc, #332]	; 5e84 <__ieee754_pow+0x31c>
    5d34:	eb000b36 	bl	8a14 <nan>
    5d38:	e1a0a000 	mov	r10, r0
    5d3c:	e1a0b001 	mov	r11, r1
    5d40:	eaffffa2 	b	5bd0 <__ieee754_pow+0x68>
    5d44:	e59f313c 	ldr	r3, [pc, #316]	; 5e88 <__ieee754_pow+0x320>
    5d48:	e1560003 	cmp	r6, r3
    5d4c:	ca000044 	bgt	5e64 <__ieee754_pow+0x2fc>
    5d50:	e2433635 	sub	r3, r3, #55574528	; 0x3500000
    5d54:	e1560003 	cmp	r6, r3
    5d58:	daffffb8 	ble	5c40 <__ieee754_pow+0xd8>
    5d5c:	e59f2128 	ldr	r2, [pc, #296]	; 5e8c <__ieee754_pow+0x324>
    5d60:	e1a03a46 	asr	r3, r6, #20
    5d64:	e1530002 	cmp	r3, r2
    5d68:	da00034b 	ble	6a9c <__ieee754_pow+0xf34>
    5d6c:	e2633e43 	rsb	r3, r3, #1072	; 0x430
    5d70:	e2832003 	add	r2, r3, #3
    5d74:	e1a0323a 	lsr	r3, r10, r2
    5d78:	e15a0213 	cmp	r10, r3, lsl r2
    5d7c:	02033001 	andeq	r3, r3, #1
    5d80:	02633002 	rsbeq	r3, r3, #2
    5d84:	058d3030 	streq	r3, [sp, #48]	; 0x30
    5d88:	13a02000 	movne	r2, #0
    5d8c:	158d2030 	strne	r2, [sp, #48]	; 0x30
    5d90:	eaffffab 	b	5c44 <__ieee754_pow+0xdc>
    5d94:	e59d0008 	ldr	r0, [sp, #8]
    5d98:	e2803103 	add	r3, r0, #-1073741824	; 0xc0000000
    5d9c:	e2833601 	add	r3, r3, #1048576	; 0x100000
    5da0:	e1933009 	orrs	r3, r3, r9
    5da4:	0a000286 	beq	67c4 <__ieee754_pow+0xc5c>
    5da8:	e59f30e0 	ldr	r3, [pc, #224]	; 5e90 <__ieee754_pow+0x328>
    5dac:	e1500003 	cmp	r0, r3
    5db0:	da0002c4 	ble	68c8 <__ieee754_pow+0xd60>
    5db4:	e3540000 	cmp	r4, #0
    5db8:	aaffff84 	bge	5bd0 <__ieee754_pow+0x68>
    5dbc:	e3a0a000 	mov	r10, #0
    5dc0:	e1a0b00a 	mov	r11, r10
    5dc4:	eaffff81 	b	5bd0 <__ieee754_pow+0x68>
    5dc8:	e3540000 	cmp	r4, #0
    5dcc:	ba000321 	blt	6a58 <__ieee754_pow+0xef0>
    5dd0:	e59d4020 	ldr	r4, [sp, #32]
    5dd4:	e3540000 	cmp	r4, #0
    5dd8:	aaffffce 	bge	5d18 <__ieee754_pow+0x1b0>
    5ddc:	e59d4008 	ldr	r4, [sp, #8]
    5de0:	e2843103 	add	r3, r4, #-1073741824	; 0xc0000000
    5de4:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
    5de8:	e2833601 	add	r3, r3, #1048576	; 0x100000
    5dec:	e1944003 	orrs	r4, r4, r3
    5df0:	1a000335 	bne	6acc <__ieee754_pow+0xf64>
    5df4:	e1a04000 	mov	r4, r0
    5df8:	e1a02000 	mov	r2, r0
    5dfc:	e1a05001 	mov	r5, r1
    5e00:	e1a03001 	mov	r3, r1
    5e04:	eb000bdf 	bl	8d88 <__aeabi_dsub>
    5e08:	e1a02000 	mov	r2, r0
    5e0c:	e1a03001 	mov	r3, r1
    5e10:	eb000d85 	bl	942c <__aeabi_ddiv>
    5e14:	e1a0a000 	mov	r10, r0
    5e18:	e1a0b001 	mov	r11, r1
    5e1c:	eaffff6b 	b	5bd0 <__ieee754_pow+0x68>
    5e20:	e1a00007 	mov	r0, r7
    5e24:	e1a01008 	mov	r1, r8
    5e28:	e1a02007 	mov	r2, r7
    5e2c:	e1a03008 	mov	r3, r8
    5e30:	eafffff3 	b	5e04 <__ieee754_pow+0x29c>
    5e34:	e3540000 	cmp	r4, #0
    5e38:	a1a0a007 	movge	r10, r7
    5e3c:	a1a0b008 	movge	r11, r8
    5e40:	aaffff62 	bge	5bd0 <__ieee754_pow+0x68>
    5e44:	e1a02007 	mov	r2, r7
    5e48:	e1a03008 	mov	r3, r8
    5e4c:	e3a00000 	mov	r0, #0
    5e50:	e59f104c 	ldr	r1, [pc, #76]	; 5ea4 <__ieee754_pow+0x33c>
    5e54:	eb000d74 	bl	942c <__aeabi_ddiv>
    5e58:	e1a0a000 	mov	r10, r0
    5e5c:	e1a0b001 	mov	r11, r1
    5e60:	eaffff5a 	b	5bd0 <__ieee754_pow+0x68>
    5e64:	e3a01002 	mov	r1, #2
    5e68:	eaffff74 	b	5c40 <__ieee754_pow+0xd8>
    5e6c:	e1a00000 	nop			; (mov r0, r0)
    5e70:	8800759c 	.word	0x8800759c
    5e74:	7e37e43c 	.word	0x7e37e43c
    5e78:	7ff00000 	.word	0x7ff00000
    5e7c:	3fe00000 	.word	0x3fe00000
    5e80:	41e00000 	.word	0x41e00000
    5e84:	0000a440 	.word	0x0000a440
    5e88:	433fffff 	.word	0x433fffff
    5e8c:	00000413 	.word	0x00000413
    5e90:	3fefffff 	.word	0x3fefffff
    5e94:	43400000 	.word	0x43400000
    5e98:	0003988e 	.word	0x0003988e
    5e9c:	000bb679 	.word	0x000bb679
    5ea0:	0000a448 	.word	0x0000a448
    5ea4:	3ff00000 	.word	0x3ff00000
    5ea8:	e59d4008 	ldr	r4, [sp, #8]
    5eac:	e3540601 	cmp	r4, #1048576	; 0x100000
    5eb0:	a3a02000 	movge	r2, #0
    5eb4:	aa000004 	bge	5ecc <__ieee754_pow+0x364>
    5eb8:	e3a02000 	mov	r2, #0
    5ebc:	e51f3030 	ldr	r3, [pc, #-48]	; 5e94 <__ieee754_pow+0x32c>
    5ec0:	eb000cb5 	bl	919c <__aeabi_dmul>
    5ec4:	e58d1008 	str	r1, [sp, #8]
    5ec8:	e3e02034 	mvn	r2, #52	; 0x34
    5ecc:	e59d4008 	ldr	r4, [sp, #8]
    5ed0:	e51fe040 	ldr	lr, [pc, #-64]	; 5e98 <__ieee754_pow+0x330>
    5ed4:	e3c434ff 	bic	r3, r4, #-16777216	; 0xff000000
    5ed8:	e1a0ca44 	asr	r12, r4, #20
    5edc:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
    5ee0:	e153000e 	cmp	r3, lr
    5ee4:	e24ccfff 	sub	r12, r12, #1020	; 0x3fc
    5ee8:	e24cc003 	sub	r12, r12, #3
    5eec:	e38345ff 	orr	r4, r3, #1069547520	; 0x3fc00000
    5ef0:	d3a05000 	movle	r5, #0
    5ef4:	e08cc002 	add	r12, r12, r2
    5ef8:	e3844603 	orr	r4, r4, #3145728	; 0x300000
    5efc:	d1a0e005 	movle	lr, r5
    5f00:	da000007 	ble	5f24 <__ieee754_pow+0x3bc>
    5f04:	e51f2070 	ldr	r2, [pc, #-112]	; 5e9c <__ieee754_pow+0x334>
    5f08:	e1530002 	cmp	r3, r2
    5f0c:	c3a05000 	movgt	r5, #0
    5f10:	c28cc001 	addgt	r12, r12, #1
    5f14:	c2444601 	subgt	r4, r4, #1048576	; 0x100000
    5f18:	c1a0e005 	movgt	lr, r5
    5f1c:	d3a05701 	movle	r5, #262144	; 0x40000
    5f20:	d3a0e001 	movle	lr, #1
    5f24:	e51f108c 	ldr	r1, [pc, #-140]	; 5ea0 <__ieee754_pow+0x338>
    5f28:	e081118e 	add	r1, r1, lr, lsl #3
    5f2c:	e1a02000 	mov	r2, r0
    5f30:	e58d1034 	str	r1, [sp, #52]	; 0x34
    5f34:	e8910003 	ldm	r1, {r0, r1}
    5f38:	e1a03004 	mov	r3, r4
    5f3c:	e58d0028 	str	r0, [sp, #40]	; 0x28
    5f40:	e58d102c 	str	r1, [sp, #44]	; 0x2c
    5f44:	e58d2020 	str	r2, [sp, #32]
    5f48:	e58d3024 	str	r3, [sp, #36]	; 0x24
    5f4c:	e1a00002 	mov	r0, r2
    5f50:	e1a01004 	mov	r1, r4
    5f54:	e28d3028 	add	r3, sp, #40	; 0x28
    5f58:	e893000c 	ldm	r3, {r2, r3}
    5f5c:	e58dc004 	str	r12, [sp, #4]
    5f60:	eb000b88 	bl	8d88 <__aeabi_dsub>
    5f64:	e28d3028 	add	r3, sp, #40	; 0x28
    5f68:	e893000c 	ldm	r3, {r2, r3}
    5f6c:	e1a06000 	mov	r6, r0
    5f70:	e1a07001 	mov	r7, r1
    5f74:	e28d1020 	add	r1, sp, #32
    5f78:	e8910003 	ldm	r1, {r0, r1}
    5f7c:	eb000b82 	bl	8d8c <__adddf3>
    5f80:	e1a02000 	mov	r2, r0
    5f84:	e1a03001 	mov	r3, r1
    5f88:	e3a00000 	mov	r0, #0
    5f8c:	e51f10f0 	ldr	r1, [pc, #-240]	; 5ea4 <__ieee754_pow+0x33c>
    5f90:	eb000d25 	bl	942c <__aeabi_ddiv>
    5f94:	e58d0038 	str	r0, [sp, #56]	; 0x38
    5f98:	e58d103c 	str	r1, [sp, #60]	; 0x3c
    5f9c:	e28d3038 	add	r3, sp, #56	; 0x38
    5fa0:	e893000c 	ldm	r3, {r2, r3}
    5fa4:	e1a00006 	mov	r0, r6
    5fa8:	e1a01007 	mov	r1, r7
    5fac:	eb000c7a 	bl	919c <__aeabi_dmul>
    5fb0:	e58d0018 	str	r0, [sp, #24]
    5fb4:	e58d101c 	str	r1, [sp, #28]
    5fb8:	e28d3018 	add	r3, sp, #24
    5fbc:	e893000c 	ldm	r3, {r2, r3}
    5fc0:	e1a010c4 	asr	r1, r4, #1
    5fc4:	e3a04000 	mov	r4, #0
    5fc8:	e58d2008 	str	r2, [sp, #8]
    5fcc:	e58d300c 	str	r3, [sp, #12]
    5fd0:	e58d4008 	str	r4, [sp, #8]
    5fd4:	e28d9008 	add	r9, sp, #8
    5fd8:	e8990300 	ldm	r9, {r8, r9}
    5fdc:	e3811202 	orr	r1, r1, #536870912	; 0x20000000
    5fe0:	e2811702 	add	r1, r1, #524288	; 0x80000
    5fe4:	e0853001 	add	r3, r5, r1
    5fe8:	e3a02000 	mov	r2, #0
    5fec:	e1a00008 	mov	r0, r8
    5ff0:	e1a01009 	mov	r1, r9
    5ff4:	e1a04002 	mov	r4, r2
    5ff8:	e1a05003 	mov	r5, r3
    5ffc:	eb000c66 	bl	919c <__aeabi_dmul>
    6000:	e1a02000 	mov	r2, r0
    6004:	e1a03001 	mov	r3, r1
    6008:	e1a00006 	mov	r0, r6
    600c:	e1a01007 	mov	r1, r7
    6010:	eb000b5c 	bl	8d88 <__aeabi_dsub>
    6014:	e28d3028 	add	r3, sp, #40	; 0x28
    6018:	e893000c 	ldm	r3, {r2, r3}
    601c:	e1a06000 	mov	r6, r0
    6020:	e1a07001 	mov	r7, r1
    6024:	e1a00004 	mov	r0, r4
    6028:	e1a01005 	mov	r1, r5
    602c:	eb000b55 	bl	8d88 <__aeabi_dsub>
    6030:	e1a02000 	mov	r2, r0
    6034:	e1a03001 	mov	r3, r1
    6038:	e28d1020 	add	r1, sp, #32
    603c:	e8910003 	ldm	r1, {r0, r1}
    6040:	eb000b50 	bl	8d88 <__aeabi_dsub>
    6044:	e1a02000 	mov	r2, r0
    6048:	e1a03001 	mov	r3, r1
    604c:	e1a00008 	mov	r0, r8
    6050:	e1a01009 	mov	r1, r9
    6054:	eb000c50 	bl	919c <__aeabi_dmul>
    6058:	e1a02000 	mov	r2, r0
    605c:	e1a03001 	mov	r3, r1
    6060:	e1a00006 	mov	r0, r6
    6064:	e1a01007 	mov	r1, r7
    6068:	eb000b46 	bl	8d88 <__aeabi_dsub>
    606c:	e28d3038 	add	r3, sp, #56	; 0x38
    6070:	e893000c 	ldm	r3, {r2, r3}
    6074:	eb000c48 	bl	919c <__aeabi_dmul>
    6078:	e1a06000 	mov	r6, r0
    607c:	e1a07001 	mov	r7, r1
    6080:	e28d1018 	add	r1, sp, #24
    6084:	e8910003 	ldm	r1, {r0, r1}
    6088:	e1a02000 	mov	r2, r0
    608c:	e1a03001 	mov	r3, r1
    6090:	eb000c41 	bl	919c <__aeabi_dmul>
    6094:	e1a02000 	mov	r2, r0
    6098:	e1a03001 	mov	r3, r1
    609c:	e1a04000 	mov	r4, r0
    60a0:	e1a05001 	mov	r5, r1
    60a4:	eb000c3c 	bl	919c <__aeabi_dmul>
    60a8:	e28f3e3f 	add	r3, pc, #1008	; 0x3f0
    60ac:	e893000c 	ldm	r3, {r2, r3}
    60b0:	e58d0020 	str	r0, [sp, #32]
    60b4:	e58d1024 	str	r1, [sp, #36]	; 0x24
    60b8:	e1a00004 	mov	r0, r4
    60bc:	e1a01005 	mov	r1, r5
    60c0:	eb000c35 	bl	919c <__aeabi_dmul>
    60c4:	e28f3ff7 	add	r3, pc, #988	; 0x3dc
    60c8:	e893000c 	ldm	r3, {r2, r3}
    60cc:	eb000b2e 	bl	8d8c <__adddf3>
    60d0:	e1a02004 	mov	r2, r4
    60d4:	e1a03005 	mov	r3, r5
    60d8:	eb000c2f 	bl	919c <__aeabi_dmul>
    60dc:	e28f3ff3 	add	r3, pc, #972	; 0x3cc
    60e0:	e893000c 	ldm	r3, {r2, r3}
    60e4:	eb000b28 	bl	8d8c <__adddf3>
    60e8:	e1a02004 	mov	r2, r4
    60ec:	e1a03005 	mov	r3, r5
    60f0:	eb000c29 	bl	919c <__aeabi_dmul>
    60f4:	e28f3fef 	add	r3, pc, #956	; 0x3bc
    60f8:	e893000c 	ldm	r3, {r2, r3}
    60fc:	eb000b22 	bl	8d8c <__adddf3>
    6100:	e1a02004 	mov	r2, r4
    6104:	e1a03005 	mov	r3, r5
    6108:	eb000c23 	bl	919c <__aeabi_dmul>
    610c:	e28f3feb 	add	r3, pc, #940	; 0x3ac
    6110:	e893000c 	ldm	r3, {r2, r3}
    6114:	eb000b1c 	bl	8d8c <__adddf3>
    6118:	e1a02004 	mov	r2, r4
    611c:	e1a03005 	mov	r3, r5
    6120:	eb000c1d 	bl	919c <__aeabi_dmul>
    6124:	e28f3fe7 	add	r3, pc, #924	; 0x39c
    6128:	e893000c 	ldm	r3, {r2, r3}
    612c:	eb000b16 	bl	8d8c <__adddf3>
    6130:	e1a02000 	mov	r2, r0
    6134:	e1a03001 	mov	r3, r1
    6138:	e28d1020 	add	r1, sp, #32
    613c:	e8910003 	ldm	r1, {r0, r1}
    6140:	eb000c15 	bl	919c <__aeabi_dmul>
    6144:	e28d3018 	add	r3, sp, #24
    6148:	e893000c 	ldm	r3, {r2, r3}
    614c:	e1a04000 	mov	r4, r0
    6150:	e1a05001 	mov	r5, r1
    6154:	e1a00008 	mov	r0, r8
    6158:	e1a01009 	mov	r1, r9
    615c:	eb000b0a 	bl	8d8c <__adddf3>
    6160:	e1a02006 	mov	r2, r6
    6164:	e1a03007 	mov	r3, r7
    6168:	eb000c0b 	bl	919c <__aeabi_dmul>
    616c:	e1a02004 	mov	r2, r4
    6170:	e1a03005 	mov	r3, r5
    6174:	eb000b04 	bl	8d8c <__adddf3>
    6178:	e1a02008 	mov	r2, r8
    617c:	e58d0020 	str	r0, [sp, #32]
    6180:	e58d1024 	str	r1, [sp, #36]	; 0x24
    6184:	e1a03009 	mov	r3, r9
    6188:	e1a00008 	mov	r0, r8
    618c:	e1a01009 	mov	r1, r9
    6190:	eb000c01 	bl	919c <__aeabi_dmul>
    6194:	e3a02000 	mov	r2, #0
    6198:	e59f3348 	ldr	r3, [pc, #840]	; 64e8 <__ieee754_pow+0x980>
    619c:	e58d0028 	str	r0, [sp, #40]	; 0x28
    61a0:	e58d102c 	str	r1, [sp, #44]	; 0x2c
    61a4:	eb000af8 	bl	8d8c <__adddf3>
    61a8:	e28d3020 	add	r3, sp, #32
    61ac:	e893000c 	ldm	r3, {r2, r3}
    61b0:	eb000af5 	bl	8d8c <__adddf3>
    61b4:	e59de008 	ldr	lr, [sp, #8]
    61b8:	e1a05001 	mov	r5, r1
    61bc:	e1a0200e 	mov	r2, lr
    61c0:	e1a03005 	mov	r3, r5
    61c4:	e1a00008 	mov	r0, r8
    61c8:	e1a01009 	mov	r1, r9
    61cc:	e1a0400e 	mov	r4, lr
    61d0:	eb000bf1 	bl	919c <__aeabi_dmul>
    61d4:	e1a02004 	mov	r2, r4
    61d8:	e1a08000 	mov	r8, r0
    61dc:	e1a09001 	mov	r9, r1
    61e0:	e1a03005 	mov	r3, r5
    61e4:	e1a00006 	mov	r0, r6
    61e8:	e1a01007 	mov	r1, r7
    61ec:	eb000bea 	bl	919c <__aeabi_dmul>
    61f0:	e3a02000 	mov	r2, #0
    61f4:	e1a06000 	mov	r6, r0
    61f8:	e1a07001 	mov	r7, r1
    61fc:	e1a00004 	mov	r0, r4
    6200:	e1a01005 	mov	r1, r5
    6204:	e59f32dc 	ldr	r3, [pc, #732]	; 64e8 <__ieee754_pow+0x980>
    6208:	eb000ade 	bl	8d88 <__aeabi_dsub>
    620c:	e28d3028 	add	r3, sp, #40	; 0x28
    6210:	e893000c 	ldm	r3, {r2, r3}
    6214:	eb000adb 	bl	8d88 <__aeabi_dsub>
    6218:	e1a02000 	mov	r2, r0
    621c:	e1a03001 	mov	r3, r1
    6220:	e28d1020 	add	r1, sp, #32
    6224:	e8910003 	ldm	r1, {r0, r1}
    6228:	eb000ad6 	bl	8d88 <__aeabi_dsub>
    622c:	e28d3018 	add	r3, sp, #24
    6230:	e893000c 	ldm	r3, {r2, r3}
    6234:	eb000bd8 	bl	919c <__aeabi_dmul>
    6238:	e1a02000 	mov	r2, r0
    623c:	e1a03001 	mov	r3, r1
    6240:	e1a00006 	mov	r0, r6
    6244:	e1a01007 	mov	r1, r7
    6248:	eb000acf 	bl	8d8c <__adddf3>
    624c:	e1a06000 	mov	r6, r0
    6250:	e1a07001 	mov	r7, r1
    6254:	e1a02006 	mov	r2, r6
    6258:	e1a03007 	mov	r3, r7
    625c:	e1a00008 	mov	r0, r8
    6260:	e1a01009 	mov	r1, r9
    6264:	eb000ac8 	bl	8d8c <__adddf3>
    6268:	e59d2008 	ldr	r2, [sp, #8]
    626c:	e59f3278 	ldr	r3, [pc, #632]	; 64ec <__ieee754_pow+0x984>
    6270:	e1a04002 	mov	r4, r2
    6274:	e1a00002 	mov	r0, r2
    6278:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    627c:	e1a05001 	mov	r5, r1
    6280:	eb000bc5 	bl	919c <__aeabi_dmul>
    6284:	e28f3f91 	add	r3, pc, #580	; 0x244
    6288:	e893000c 	ldm	r3, {r2, r3}
    628c:	e58d0018 	str	r0, [sp, #24]
    6290:	e58d101c 	str	r1, [sp, #28]
    6294:	e1a00004 	mov	r0, r4
    6298:	e1a01005 	mov	r1, r5
    629c:	eb000bbe 	bl	919c <__aeabi_dmul>
    62a0:	e1a02008 	mov	r2, r8
    62a4:	e58d0020 	str	r0, [sp, #32]
    62a8:	e58d1024 	str	r1, [sp, #36]	; 0x24
    62ac:	e1a03009 	mov	r3, r9
    62b0:	e1a00004 	mov	r0, r4
    62b4:	e1a01005 	mov	r1, r5
    62b8:	eb000ab2 	bl	8d88 <__aeabi_dsub>
    62bc:	e1a02000 	mov	r2, r0
    62c0:	e1a03001 	mov	r3, r1
    62c4:	e1a00006 	mov	r0, r6
    62c8:	e1a01007 	mov	r1, r7
    62cc:	eb000aad 	bl	8d88 <__aeabi_dsub>
    62d0:	e28f3c02 	add	r3, pc, #512	; 0x200
    62d4:	e893000c 	ldm	r3, {r2, r3}
    62d8:	eb000baf 	bl	919c <__aeabi_dmul>
    62dc:	e1a02000 	mov	r2, r0
    62e0:	e1a03001 	mov	r3, r1
    62e4:	e28d1020 	add	r1, sp, #32
    62e8:	e8910003 	ldm	r1, {r0, r1}
    62ec:	eb000aa6 	bl	8d8c <__adddf3>
    62f0:	e59d4034 	ldr	r4, [sp, #52]	; 0x34
    62f4:	e2843010 	add	r3, r4, #16
    62f8:	e893000c 	ldm	r3, {r2, r3}
    62fc:	eb000aa2 	bl	8d8c <__adddf3>
    6300:	e59dc004 	ldr	r12, [sp, #4]
    6304:	e1a04000 	mov	r4, r0
    6308:	e1a0000c 	mov	r0, r12
    630c:	e1a05001 	mov	r5, r1
    6310:	eb000b6a 	bl	90c0 <__aeabi_i2d>
    6314:	e59de034 	ldr	lr, [sp, #52]	; 0x34
    6318:	e28e9020 	add	r9, lr, #32
    631c:	e8990300 	ldm	r9, {r8, r9}
    6320:	e1a06000 	mov	r6, r0
    6324:	e1a07001 	mov	r7, r1
    6328:	e1a02004 	mov	r2, r4
    632c:	e28d1018 	add	r1, sp, #24
    6330:	e8910003 	ldm	r1, {r0, r1}
    6334:	e1a03005 	mov	r3, r5
    6338:	eb000a93 	bl	8d8c <__adddf3>
    633c:	e1a02008 	mov	r2, r8
    6340:	e1a03009 	mov	r3, r9
    6344:	eb000a90 	bl	8d8c <__adddf3>
    6348:	e1a02006 	mov	r2, r6
    634c:	e1a03007 	mov	r3, r7
    6350:	eb000a8d 	bl	8d8c <__adddf3>
    6354:	e59d2008 	ldr	r2, [sp, #8]
    6358:	e1a03007 	mov	r3, r7
    635c:	e1a00002 	mov	r0, r2
    6360:	e1a02006 	mov	r2, r6
    6364:	e58d0008 	str	r0, [sp, #8]
    6368:	e58d100c 	str	r1, [sp, #12]
    636c:	eb000a85 	bl	8d88 <__aeabi_dsub>
    6370:	e1a02008 	mov	r2, r8
    6374:	e1a03009 	mov	r3, r9
    6378:	eb000a82 	bl	8d88 <__aeabi_dsub>
    637c:	e28d3018 	add	r3, sp, #24
    6380:	e893000c 	ldm	r3, {r2, r3}
    6384:	eb000a7f 	bl	8d88 <__aeabi_dsub>
    6388:	e1a03001 	mov	r3, r1
    638c:	e1a02000 	mov	r2, r0
    6390:	e1a01005 	mov	r1, r5
    6394:	e1a00004 	mov	r0, r4
    6398:	eb000a7a 	bl	8d88 <__aeabi_dsub>
    639c:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
    63a0:	e2443001 	sub	r3, r4, #1
    63a4:	e59d4010 	ldr	r4, [sp, #16]
    63a8:	e1934004 	orrs	r4, r3, r4
    63ac:	e1a08000 	mov	r8, r0
    63b0:	e1a09001 	mov	r9, r1
    63b4:	1a00013e 	bne	68b4 <__ieee754_pow+0xd4c>
    63b8:	e59f1130 	ldr	r1, [pc, #304]	; 64f0 <__ieee754_pow+0x988>
    63bc:	e3a00000 	mov	r0, #0
    63c0:	e58d0010 	str	r0, [sp, #16]
    63c4:	e58d1014 	str	r1, [sp, #20]
    63c8:	e3a06000 	mov	r6, #0
    63cc:	e1a02006 	mov	r2, r6
    63d0:	e1a0300b 	mov	r3, r11
    63d4:	e1a0000a 	mov	r0, r10
    63d8:	e1a0100b 	mov	r1, r11
    63dc:	eb000a69 	bl	8d88 <__aeabi_dsub>
    63e0:	e28d3008 	add	r3, sp, #8
    63e4:	e893000c 	ldm	r3, {r2, r3}
    63e8:	eb000b6b 	bl	919c <__aeabi_dmul>
    63ec:	e1a03009 	mov	r3, r9
    63f0:	e1a04000 	mov	r4, r0
    63f4:	e1a05001 	mov	r5, r1
    63f8:	e1a0000a 	mov	r0, r10
    63fc:	e1a0100b 	mov	r1, r11
    6400:	e1a02008 	mov	r2, r8
    6404:	eb000b64 	bl	919c <__aeabi_dmul>
    6408:	e1a02000 	mov	r2, r0
    640c:	e1a03001 	mov	r3, r1
    6410:	e1a00004 	mov	r0, r4
    6414:	e1a01005 	mov	r1, r5
    6418:	eb000a5b 	bl	8d8c <__adddf3>
    641c:	e1a0700b 	mov	r7, r11
    6420:	e28d3008 	add	r3, sp, #8
    6424:	e893000c 	ldm	r3, {r2, r3}
    6428:	e1a0a000 	mov	r10, r0
    642c:	e1a0b001 	mov	r11, r1
    6430:	e1a00006 	mov	r0, r6
    6434:	e1a01007 	mov	r1, r7
    6438:	eb000b57 	bl	919c <__aeabi_dmul>
    643c:	e1a04000 	mov	r4, r0
    6440:	e1a05001 	mov	r5, r1
    6444:	e1a0000a 	mov	r0, r10
    6448:	e1a0100b 	mov	r1, r11
    644c:	e1a02004 	mov	r2, r4
    6450:	e1a03005 	mov	r3, r5
    6454:	eb000a4c 	bl	8d8c <__adddf3>
    6458:	e59fc094 	ldr	r12, [pc, #148]	; 64f4 <__ieee754_pow+0x98c>
    645c:	e151000c 	cmp	r1, r12
    6460:	e1a06000 	mov	r6, r0
    6464:	e1a07001 	mov	r7, r1
    6468:	e1a09001 	mov	r9, r1
    646c:	da0000da 	ble	67dc <__ieee754_pow+0xc74>
    6470:	e28134bf 	add	r3, r1, #-1090519040	; 0xbf000000
    6474:	e2833607 	add	r3, r3, #7340032	; 0x700000
    6478:	e1933000 	orrs	r3, r3, r0
    647c:	1a00017b 	bne	6a70 <__ieee754_pow+0xf08>
    6480:	e28f3058 	add	r3, pc, #88	; 0x58
    6484:	e893000c 	ldm	r3, {r2, r3}
    6488:	e1a0000a 	mov	r0, r10
    648c:	e1a0100b 	mov	r1, r11
    6490:	eb000a3d 	bl	8d8c <__adddf3>
    6494:	e1a02004 	mov	r2, r4
    6498:	ea000018 	b	6500 <__ieee754_pow+0x998>
    649c:	e1a00000 	nop			; (mov r0, r0)
    64a0:	4a454eef 	.word	0x4a454eef
    64a4:	3fca7e28 	.word	0x3fca7e28
    64a8:	93c9db65 	.word	0x93c9db65
    64ac:	3fcd864a 	.word	0x3fcd864a
    64b0:	a91d4101 	.word	0xa91d4101
    64b4:	3fd17460 	.word	0x3fd17460
    64b8:	518f264d 	.word	0x518f264d
    64bc:	3fd55555 	.word	0x3fd55555
    64c0:	db6fabff 	.word	0xdb6fabff
    64c4:	3fdb6db6 	.word	0x3fdb6db6
    64c8:	33333303 	.word	0x33333303
    64cc:	3fe33333 	.word	0x3fe33333
    64d0:	145b01f5 	.word	0x145b01f5
    64d4:	be3e2fe0 	.word	0xbe3e2fe0
    64d8:	dc3a03fd 	.word	0xdc3a03fd
    64dc:	3feec709 	.word	0x3feec709
    64e0:	652b82fe 	.word	0x652b82fe
    64e4:	3c971547 	.word	0x3c971547
    64e8:	40080000 	.word	0x40080000
    64ec:	3feec709 	.word	0x3feec709
    64f0:	bff00000 	.word	0xbff00000
    64f4:	408fffff 	.word	0x408fffff
    64f8:	3fe00000 	.word	0x3fe00000
    64fc:	3fe62e43 	.word	0x3fe62e43
    6500:	e58d0008 	str	r0, [sp, #8]
    6504:	e58d100c 	str	r1, [sp, #12]
    6508:	e1a03005 	mov	r3, r5
    650c:	e1a00006 	mov	r0, r6
    6510:	e1a01007 	mov	r1, r7
    6514:	eb000a1b 	bl	8d88 <__aeabi_dsub>
    6518:	e1a02000 	mov	r2, r0
    651c:	e1a03001 	mov	r3, r1
    6520:	e28d1008 	add	r1, sp, #8
    6524:	e8910003 	ldm	r1, {r0, r1}
    6528:	eb000c8d 	bl	9764 <__aeabi_dcmpgt>
    652c:	e3500000 	cmp	r0, #0
    6530:	03c78102 	biceq	r8, r7, #-2147483648	; 0x80000000
    6534:	1a00014d 	bne	6a70 <__ieee754_pow+0xf08>
    6538:	e51f3048 	ldr	r3, [pc, #-72]	; 64f8 <__ieee754_pow+0x990>
    653c:	e1580003 	cmp	r8, r3
    6540:	d3a0c000 	movle	r12, #0
    6544:	d58dc008 	strle	r12, [sp, #8]
    6548:	ca0000b5 	bgt	6824 <__ieee754_pow+0xcbc>
    654c:	e3a06000 	mov	r6, #0
    6550:	e1a00006 	mov	r0, r6
    6554:	e1a01007 	mov	r1, r7
    6558:	e3a02000 	mov	r2, #0
    655c:	e51f3068 	ldr	r3, [pc, #-104]	; 64fc <__ieee754_pow+0x994>
    6560:	e58dc004 	str	r12, [sp, #4]
    6564:	eb000b0c 	bl	919c <__aeabi_dmul>
    6568:	e1a02004 	mov	r2, r4
    656c:	e1a08000 	mov	r8, r0
    6570:	e1a09001 	mov	r9, r1
    6574:	e1a03005 	mov	r3, r5
    6578:	e1a00006 	mov	r0, r6
    657c:	e1a01007 	mov	r1, r7
    6580:	eb000a00 	bl	8d88 <__aeabi_dsub>
    6584:	e1a02000 	mov	r2, r0
    6588:	e1a03001 	mov	r3, r1
    658c:	e1a0000a 	mov	r0, r10
    6590:	e1a0100b 	mov	r1, r11
    6594:	eb0009fb 	bl	8d88 <__aeabi_dsub>
    6598:	e28f3fce 	add	r3, pc, #824	; 0x338
    659c:	e893000c 	ldm	r3, {r2, r3}
    65a0:	eb000afd 	bl	919c <__aeabi_dmul>
    65a4:	e28f3fcd 	add	r3, pc, #820	; 0x334
    65a8:	e893000c 	ldm	r3, {r2, r3}
    65ac:	e1a04000 	mov	r4, r0
    65b0:	e1a05001 	mov	r5, r1
    65b4:	e1a00006 	mov	r0, r6
    65b8:	e1a01007 	mov	r1, r7
    65bc:	eb000af6 	bl	919c <__aeabi_dmul>
    65c0:	e1a02000 	mov	r2, r0
    65c4:	e1a03001 	mov	r3, r1
    65c8:	e1a00004 	mov	r0, r4
    65cc:	e1a01005 	mov	r1, r5
    65d0:	eb0009ed 	bl	8d8c <__adddf3>
    65d4:	e1a04000 	mov	r4, r0
    65d8:	e1a05001 	mov	r5, r1
    65dc:	e1a02004 	mov	r2, r4
    65e0:	e1a03005 	mov	r3, r5
    65e4:	e1a00008 	mov	r0, r8
    65e8:	e1a01009 	mov	r1, r9
    65ec:	eb0009e6 	bl	8d8c <__adddf3>
    65f0:	e1a02008 	mov	r2, r8
    65f4:	e1a03009 	mov	r3, r9
    65f8:	e1a0a000 	mov	r10, r0
    65fc:	e1a0b001 	mov	r11, r1
    6600:	eb0009e0 	bl	8d88 <__aeabi_dsub>
    6604:	e1a02000 	mov	r2, r0
    6608:	e1a03001 	mov	r3, r1
    660c:	e1a00004 	mov	r0, r4
    6610:	e1a01005 	mov	r1, r5
    6614:	eb0009db 	bl	8d88 <__aeabi_dsub>
    6618:	e1a0200a 	mov	r2, r10
    661c:	e1a08000 	mov	r8, r0
    6620:	e1a09001 	mov	r9, r1
    6624:	e1a0300b 	mov	r3, r11
    6628:	e1a0000a 	mov	r0, r10
    662c:	e1a0100b 	mov	r1, r11
    6630:	eb000ad9 	bl	919c <__aeabi_dmul>
    6634:	e28f3fab 	add	r3, pc, #684	; 0x2ac
    6638:	e893000c 	ldm	r3, {r2, r3}
    663c:	e1a04000 	mov	r4, r0
    6640:	e1a05001 	mov	r5, r1
    6644:	eb000ad4 	bl	919c <__aeabi_dmul>
    6648:	e28f3e2a 	add	r3, pc, #672	; 0x2a0
    664c:	e893000c 	ldm	r3, {r2, r3}
    6650:	eb0009cc 	bl	8d88 <__aeabi_dsub>
    6654:	e1a02004 	mov	r2, r4
    6658:	e1a03005 	mov	r3, r5
    665c:	eb000ace 	bl	919c <__aeabi_dmul>
    6660:	e28f3e29 	add	r3, pc, #656	; 0x290
    6664:	e893000c 	ldm	r3, {r2, r3}
    6668:	eb0009c7 	bl	8d8c <__adddf3>
    666c:	e1a02004 	mov	r2, r4
    6670:	e1a03005 	mov	r3, r5
    6674:	eb000ac8 	bl	919c <__aeabi_dmul>
    6678:	e28f3d0a 	add	r3, pc, #640	; 0x280
    667c:	e893000c 	ldm	r3, {r2, r3}
    6680:	eb0009c0 	bl	8d88 <__aeabi_dsub>
    6684:	e1a02004 	mov	r2, r4
    6688:	e1a03005 	mov	r3, r5
    668c:	eb000ac2 	bl	919c <__aeabi_dmul>
    6690:	e28f3e27 	add	r3, pc, #624	; 0x270
    6694:	e893000c 	ldm	r3, {r2, r3}
    6698:	eb0009bb 	bl	8d8c <__adddf3>
    669c:	e1a02004 	mov	r2, r4
    66a0:	e1a03005 	mov	r3, r5
    66a4:	eb000abc 	bl	919c <__aeabi_dmul>
    66a8:	e1a02000 	mov	r2, r0
    66ac:	e1a03001 	mov	r3, r1
    66b0:	e1a0000a 	mov	r0, r10
    66b4:	e1a0100b 	mov	r1, r11
    66b8:	eb0009b2 	bl	8d88 <__aeabi_dsub>
    66bc:	e1a04000 	mov	r4, r0
    66c0:	e1a05001 	mov	r5, r1
    66c4:	e1a02004 	mov	r2, r4
    66c8:	e1a03005 	mov	r3, r5
    66cc:	e1a0000a 	mov	r0, r10
    66d0:	e1a0100b 	mov	r1, r11
    66d4:	eb000ab0 	bl	919c <__aeabi_dmul>
    66d8:	e3a02000 	mov	r2, #0
    66dc:	e1a06000 	mov	r6, r0
    66e0:	e1a07001 	mov	r7, r1
    66e4:	e1a00004 	mov	r0, r4
    66e8:	e1a01005 	mov	r1, r5
    66ec:	e3a03101 	mov	r3, #1073741824	; 0x40000000
    66f0:	eb0009a4 	bl	8d88 <__aeabi_dsub>
    66f4:	e1a02000 	mov	r2, r0
    66f8:	e1a03001 	mov	r3, r1
    66fc:	e1a00006 	mov	r0, r6
    6700:	e1a01007 	mov	r1, r7
    6704:	eb000b48 	bl	942c <__aeabi_ddiv>
    6708:	e1a02008 	mov	r2, r8
    670c:	e1a04000 	mov	r4, r0
    6710:	e1a05001 	mov	r5, r1
    6714:	e1a03009 	mov	r3, r9
    6718:	e1a0000a 	mov	r0, r10
    671c:	e1a0100b 	mov	r1, r11
    6720:	eb000a9d 	bl	919c <__aeabi_dmul>
    6724:	e1a02008 	mov	r2, r8
    6728:	e1a03009 	mov	r3, r9
    672c:	eb000996 	bl	8d8c <__adddf3>
    6730:	e1a02000 	mov	r2, r0
    6734:	e1a03001 	mov	r3, r1
    6738:	e1a00004 	mov	r0, r4
    673c:	e1a01005 	mov	r1, r5
    6740:	eb000990 	bl	8d88 <__aeabi_dsub>
    6744:	e1a0200a 	mov	r2, r10
    6748:	e1a0300b 	mov	r3, r11
    674c:	eb00098d 	bl	8d88 <__aeabi_dsub>
    6750:	e1a02000 	mov	r2, r0
    6754:	e1a03001 	mov	r3, r1
    6758:	e3a00000 	mov	r0, #0
    675c:	e59f11bc 	ldr	r1, [pc, #444]	; 6920 <__ieee754_pow+0xdb8>
    6760:	eb000988 	bl	8d88 <__aeabi_dsub>
    6764:	e59dc004 	ldr	r12, [sp, #4]
    6768:	e08ce001 	add	lr, r12, r1
    676c:	e35e0601 	cmp	lr, #1048576	; 0x100000
    6770:	e1a03001 	mov	r3, r1
    6774:	e1a02000 	mov	r2, r0
    6778:	e1a04000 	mov	r4, r0
    677c:	e1a05001 	mov	r5, r1
    6780:	a1a0300e 	movge	r3, lr
    6784:	ba0000e4 	blt	6b1c <__ieee754_pow+0xfb4>
    6788:	e28d1010 	add	r1, sp, #16
    678c:	e8910003 	ldm	r1, {r0, r1}
    6790:	eb000a81 	bl	919c <__aeabi_dmul>
    6794:	e1a0a000 	mov	r10, r0
    6798:	e1a0b001 	mov	r11, r1
    679c:	eafffd0b 	b	5bd0 <__ieee754_pow+0x68>
    67a0:	e59d1020 	ldr	r1, [sp, #32]
    67a4:	e3510000 	cmp	r1, #0
    67a8:	bafffd34 	blt	5c80 <__ieee754_pow+0x118>
    67ac:	e1a00007 	mov	r0, r7
    67b0:	e1a01008 	mov	r1, r8
    67b4:	eb000281 	bl	71c0 <__ieee754_sqrt>
    67b8:	e1a0a000 	mov	r10, r0
    67bc:	e1a0b001 	mov	r11, r1
    67c0:	eafffd02 	b	5bd0 <__ieee754_pow+0x68>
    67c4:	e1a0a003 	mov	r10, r3
    67c8:	e59fb150 	ldr	r11, [pc, #336]	; 6920 <__ieee754_pow+0xdb8>
    67cc:	eafffcff 	b	5bd0 <__ieee754_pow+0x68>
    67d0:	e3540000 	cmp	r4, #0
    67d4:	aafffd78 	bge	5dbc <__ieee754_pow+0x254>
    67d8:	eafffd49 	b	5d04 <__ieee754_pow+0x19c>
    67dc:	e59f312c 	ldr	r3, [pc, #300]	; 6910 <__ieee754_pow+0xda8>
    67e0:	e3c18102 	bic	r8, r1, #-2147483648	; 0x80000000
    67e4:	e1580003 	cmp	r8, r3
    67e8:	daffff52 	ble	6538 <__ieee754_pow+0x9d0>
    67ec:	e59f3120 	ldr	r3, [pc, #288]	; 6914 <__ieee754_pow+0xdac>
    67f0:	e0813003 	add	r3, r1, r3
    67f4:	e1933000 	orrs	r3, r3, r0
    67f8:	1a0000b9 	bne	6ae4 <__ieee754_pow+0xf7c>
    67fc:	e1a02004 	mov	r2, r4
    6800:	e1a03005 	mov	r3, r5
    6804:	eb00095f 	bl	8d88 <__aeabi_dsub>
    6808:	e1a02000 	mov	r2, r0
    680c:	e1a03001 	mov	r3, r1
    6810:	e1a0000a 	mov	r0, r10
    6814:	e1a0100b 	mov	r1, r11
    6818:	eb000bc5 	bl	9734 <__aeabi_dcmple>
    681c:	e3500000 	cmp	r0, #0
    6820:	1a0000af 	bne	6ae4 <__ieee754_pow+0xf7c>
    6824:	e1a03a48 	asr	r3, r8, #20
    6828:	e2433fff 	sub	r3, r3, #1020	; 0x3fc
    682c:	e2433002 	sub	r3, r3, #2
    6830:	e3a01601 	mov	r1, #1048576	; 0x100000
    6834:	e0891351 	add	r1, r9, r1, asr r3
    6838:	e3c10102 	bic	r0, r1, #-2147483648	; 0x80000000
    683c:	e1a00a40 	asr	r0, r0, #20
    6840:	e240efff 	sub	lr, r0, #1020	; 0x3fc
    6844:	e59f60cc 	ldr	r6, [pc, #204]	; 6918 <__ieee754_pow+0xdb0>
    6848:	e24ee003 	sub	lr, lr, #3
    684c:	e1c13e56 	bic	r3, r1, r6, asr lr
    6850:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
    6854:	e3c1e60f 	bic	lr, r1, #15728640	; 0xf00000
    6858:	e2601e41 	rsb	r1, r0, #1040	; 0x410
    685c:	e38ee601 	orr	lr, lr, #1048576	; 0x100000
    6860:	e2811003 	add	r1, r1, #3
    6864:	e1a0115e 	asr	r1, lr, r1
    6868:	e3590000 	cmp	r9, #0
    686c:	e58d1008 	str	r1, [sp, #8]
    6870:	b2611000 	rsblt	r1, r1, #0
    6874:	b58d1008 	strlt	r1, [sp, #8]
    6878:	e3a02000 	mov	r2, #0
    687c:	e1a00004 	mov	r0, r4
    6880:	e1a01005 	mov	r1, r5
    6884:	eb00093f 	bl	8d88 <__aeabi_dsub>
    6888:	e1a04000 	mov	r4, r0
    688c:	e1a05001 	mov	r5, r1
    6890:	e1a02004 	mov	r2, r4
    6894:	e1a0000a 	mov	r0, r10
    6898:	e1a0100b 	mov	r1, r11
    689c:	e1a03005 	mov	r3, r5
    68a0:	eb000939 	bl	8d8c <__adddf3>
    68a4:	e59d2008 	ldr	r2, [sp, #8]
    68a8:	e1a07001 	mov	r7, r1
    68ac:	e1a0ca02 	lsl	r12, r2, #20
    68b0:	eaffff25 	b	654c <__ieee754_pow+0x9e4>
    68b4:	e59f2064 	ldr	r2, [pc, #100]	; 6920 <__ieee754_pow+0xdb8>
    68b8:	e3a01000 	mov	r1, #0
    68bc:	e58d1010 	str	r1, [sp, #16]
    68c0:	e58d2014 	str	r2, [sp, #20]
    68c4:	eafffebf 	b	63c8 <__ieee754_pow+0x860>
    68c8:	e3540000 	cmp	r4, #0
    68cc:	b28bb102 	addlt	r11, r11, #-2147483648	; 0x80000000
    68d0:	aafffd39 	bge	5dbc <__ieee754_pow+0x254>
    68d4:	eafffcbd 	b	5bd0 <__ieee754_pow+0x68>
    68d8:	fefa39ef 	.word	0xfefa39ef
    68dc:	3fe62e42 	.word	0x3fe62e42
    68e0:	0ca86c39 	.word	0x0ca86c39
    68e4:	be205c61 	.word	0xbe205c61
    68e8:	72bea4d0 	.word	0x72bea4d0
    68ec:	3e663769 	.word	0x3e663769
    68f0:	c5d26bf1 	.word	0xc5d26bf1
    68f4:	3ebbbd41 	.word	0x3ebbbd41
    68f8:	af25de2c 	.word	0xaf25de2c
    68fc:	3f11566a 	.word	0x3f11566a
    6900:	16bebd93 	.word	0x16bebd93
    6904:	3f66c16c 	.word	0x3f66c16c
    6908:	5555553e 	.word	0x5555553e
    690c:	3fc55555 	.word	0x3fc55555
    6910:	4090cbff 	.word	0x4090cbff
    6914:	3f6f3400 	.word	0x3f6f3400
    6918:	000fffff 	.word	0x000fffff
    691c:	3feffffe 	.word	0x3feffffe
    6920:	3ff00000 	.word	0x3ff00000
    6924:	3ff71547 	.word	0x3ff71547
    6928:	e51f3014 	ldr	r3, [pc, #-20]	; 691c <__ieee754_pow+0xdb4>
    692c:	e59d2008 	ldr	r2, [sp, #8]
    6930:	e1520003 	cmp	r2, r3
    6934:	daffffa5 	ble	67d0 <__ieee754_pow+0xc68>
    6938:	e51f3020 	ldr	r3, [pc, #-32]	; 6920 <__ieee754_pow+0xdb8>
    693c:	e59d2008 	ldr	r2, [sp, #8]
    6940:	e1520003 	cmp	r2, r3
    6944:	cafffcec 	bgt	5cfc <__ieee754_pow+0x194>
    6948:	e3a02000 	mov	r2, #0
    694c:	e51f3034 	ldr	r3, [pc, #-52]	; 6920 <__ieee754_pow+0xdb8>
    6950:	eb00090c 	bl	8d88 <__aeabi_dsub>
    6954:	e3a02206 	mov	r2, #1610612736	; 0x60000000
    6958:	e51f303c 	ldr	r3, [pc, #-60]	; 6924 <__ieee754_pow+0xdbc>
    695c:	e1a04000 	mov	r4, r0
    6960:	e1a05001 	mov	r5, r1
    6964:	eb000a0c 	bl	919c <__aeabi_dmul>
    6968:	e28f3d07 	add	r3, pc, #448	; 0x1c0
    696c:	e893000c 	ldm	r3, {r2, r3}
    6970:	e1a06000 	mov	r6, r0
    6974:	e1a07001 	mov	r7, r1
    6978:	e1a00004 	mov	r0, r4
    697c:	e1a01005 	mov	r1, r5
    6980:	eb000a05 	bl	919c <__aeabi_dmul>
    6984:	e1a02004 	mov	r2, r4
    6988:	e58d0008 	str	r0, [sp, #8]
    698c:	e58d100c 	str	r1, [sp, #12]
    6990:	e1a03005 	mov	r3, r5
    6994:	e1a00004 	mov	r0, r4
    6998:	e1a01005 	mov	r1, r5
    699c:	eb0009fe 	bl	919c <__aeabi_dmul>
    69a0:	e3a02000 	mov	r2, #0
    69a4:	e1a08000 	mov	r8, r0
    69a8:	e1a09001 	mov	r9, r1
    69ac:	e1a00004 	mov	r0, r4
    69b0:	e1a01005 	mov	r1, r5
    69b4:	e59f319c 	ldr	r3, [pc, #412]	; 6b58 <__ieee754_pow+0xff0>
    69b8:	eb0009f7 	bl	919c <__aeabi_dmul>
    69bc:	e1a02000 	mov	r2, r0
    69c0:	e1a03001 	mov	r3, r1
    69c4:	e28f1f5b 	add	r1, pc, #364	; 0x16c
    69c8:	e8910003 	ldm	r1, {r0, r1}
    69cc:	eb0008ed 	bl	8d88 <__aeabi_dsub>
    69d0:	e1a02004 	mov	r2, r4
    69d4:	e1a03005 	mov	r3, r5
    69d8:	eb0009ef 	bl	919c <__aeabi_dmul>
    69dc:	e1a02000 	mov	r2, r0
    69e0:	e1a03001 	mov	r3, r1
    69e4:	e3a00000 	mov	r0, #0
    69e8:	e59f116c 	ldr	r1, [pc, #364]	; 6b5c <__ieee754_pow+0xff4>
    69ec:	eb0008e5 	bl	8d88 <__aeabi_dsub>
    69f0:	e1a02000 	mov	r2, r0
    69f4:	e1a03001 	mov	r3, r1
    69f8:	e1a00008 	mov	r0, r8
    69fc:	e1a01009 	mov	r1, r9
    6a00:	eb0009e5 	bl	919c <__aeabi_dmul>
    6a04:	e28f3f4d 	add	r3, pc, #308	; 0x134
    6a08:	e893000c 	ldm	r3, {r2, r3}
    6a0c:	eb0009e2 	bl	919c <__aeabi_dmul>
    6a10:	e1a02000 	mov	r2, r0
    6a14:	e1a03001 	mov	r3, r1
    6a18:	e28d1008 	add	r1, sp, #8
    6a1c:	e8910003 	ldm	r1, {r0, r1}
    6a20:	eb0008d8 	bl	8d88 <__aeabi_dsub>
    6a24:	e1a04000 	mov	r4, r0
    6a28:	e1a05001 	mov	r5, r1
    6a2c:	e1a02004 	mov	r2, r4
    6a30:	e1a03005 	mov	r3, r5
    6a34:	e1a00006 	mov	r0, r6
    6a38:	e1a01007 	mov	r1, r7
    6a3c:	eb0008d2 	bl	8d8c <__adddf3>
    6a40:	e3a00000 	mov	r0, #0
    6a44:	e58d0008 	str	r0, [sp, #8]
    6a48:	e58d100c 	str	r1, [sp, #12]
    6a4c:	e1a02006 	mov	r2, r6
    6a50:	e1a03007 	mov	r3, r7
    6a54:	eafffe4a 	b	6384 <__ieee754_pow+0x81c>
    6a58:	e1a02000 	mov	r2, r0
    6a5c:	e1a03001 	mov	r3, r1
    6a60:	e3a00000 	mov	r0, #0
    6a64:	e59f10f4 	ldr	r1, [pc, #244]	; 6b60 <__ieee754_pow+0xff8>
    6a68:	eb000a6f 	bl	942c <__aeabi_ddiv>
    6a6c:	eafffcd7 	b	5dd0 <__ieee754_pow+0x268>
    6a70:	e28f30d0 	add	r3, pc, #208	; 0xd0
    6a74:	e893000c 	ldm	r3, {r2, r3}
    6a78:	e28d1010 	add	r1, sp, #16
    6a7c:	e8910003 	ldm	r1, {r0, r1}
    6a80:	eb0009c5 	bl	919c <__aeabi_dmul>
    6a84:	e28f30bc 	add	r3, pc, #188	; 0xbc
    6a88:	e893000c 	ldm	r3, {r2, r3}
    6a8c:	eb0009c2 	bl	919c <__aeabi_dmul>
    6a90:	e1a0a000 	mov	r10, r0
    6a94:	e1a0b001 	mov	r11, r1
    6a98:	eafffc4c 	b	5bd0 <__ieee754_pow+0x68>
    6a9c:	e35a0000 	cmp	r10, #0
    6aa0:	1a00001a 	bne	6b10 <__ieee754_pow+0xfa8>
    6aa4:	e2633e41 	rsb	r3, r3, #1040	; 0x410
    6aa8:	e2832003 	add	r2, r3, #3
    6aac:	e1a03256 	asr	r3, r6, r2
    6ab0:	e1560213 	cmp	r6, r3, lsl r2
    6ab4:	02033001 	andeq	r3, r3, #1
    6ab8:	02633002 	rsbeq	r3, r3, #2
    6abc:	058d3030 	streq	r3, [sp, #48]	; 0x30
    6ac0:	13a03000 	movne	r3, #0
    6ac4:	158d3030 	strne	r3, [sp, #48]	; 0x30
    6ac8:	eafffc5f 	b	5c4c <__ieee754_pow+0xe4>
    6acc:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
    6ad0:	e3540001 	cmp	r4, #1
    6ad4:	e1a0a000 	mov	r10, r0
    6ad8:	0281b102 	addeq	r11, r1, #-2147483648	; 0x80000000
    6adc:	1afffc8e 	bne	5d1c <__ieee754_pow+0x1b4>
    6ae0:	eafffc3a 	b	5bd0 <__ieee754_pow+0x68>
    6ae4:	e28f3064 	add	r3, pc, #100	; 0x64
    6ae8:	e893000c 	ldm	r3, {r2, r3}
    6aec:	e28d1010 	add	r1, sp, #16
    6af0:	e8910003 	ldm	r1, {r0, r1}
    6af4:	eb0009a8 	bl	919c <__aeabi_dmul>
    6af8:	e28f3050 	add	r3, pc, #80	; 0x50
    6afc:	e893000c 	ldm	r3, {r2, r3}
    6b00:	eb0009a5 	bl	919c <__aeabi_dmul>
    6b04:	e1a0a000 	mov	r10, r0
    6b08:	e1a0b001 	mov	r11, r1
    6b0c:	eafffc2f 	b	5bd0 <__ieee754_pow+0x68>
    6b10:	e3a02000 	mov	r2, #0
    6b14:	e58d2030 	str	r2, [sp, #48]	; 0x30
    6b18:	eafffc58 	b	5c80 <__ieee754_pow+0x118>
    6b1c:	e59d2008 	ldr	r2, [sp, #8]
    6b20:	eb000828 	bl	8bc8 <scalbn>
    6b24:	e1a02000 	mov	r2, r0
    6b28:	e1a03001 	mov	r3, r1
    6b2c:	eaffff15 	b	6788 <__ieee754_pow+0xc20>
    6b30:	f85ddf44 	.word	0xf85ddf44
    6b34:	3e54ae0b 	.word	0x3e54ae0b
    6b38:	55555555 	.word	0x55555555
    6b3c:	3fd55555 	.word	0x3fd55555
    6b40:	652b82fe 	.word	0x652b82fe
    6b44:	3ff71547 	.word	0x3ff71547
    6b48:	8800759c 	.word	0x8800759c
    6b4c:	7e37e43c 	.word	0x7e37e43c
    6b50:	c2f8f359 	.word	0xc2f8f359
    6b54:	01a56e1f 	.word	0x01a56e1f
    6b58:	3fd00000 	.word	0x3fd00000
    6b5c:	3fe00000 	.word	0x3fe00000
    6b60:	3ff00000 	.word	0x3ff00000
    6b64:	e1a00000 	nop			; (mov r0, r0)

00006b68 <__ieee754_rem_pio2>:
    6b68:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    6b6c:	e59fc3bc 	ldr	r12, [pc, #956]	; 6f30 <__ieee754_rem_pio2+0x3c8>
    6b70:	e3c17102 	bic	r7, r1, #-2147483648	; 0x80000000
    6b74:	e157000c 	cmp	r7, r12
    6b78:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    6b7c:	e1a04000 	mov	r4, r0
    6b80:	e1a05001 	mov	r5, r1
    6b84:	e1a0a000 	mov	r10, r0
    6b88:	e1a0b001 	mov	r11, r1
    6b8c:	e1a08002 	mov	r8, r2
    6b90:	da00005b 	ble	6d04 <__ieee754_rem_pio2+0x19c>
    6b94:	e59f2398 	ldr	r2, [pc, #920]	; 6f34 <__ieee754_rem_pio2+0x3cc>
    6b98:	e1570002 	cmp	r7, r2
    6b9c:	e1a09001 	mov	r9, r1
    6ba0:	ca000019 	bgt	6c0c <__ieee754_rem_pio2+0xa4>
    6ba4:	e3510000 	cmp	r1, #0
    6ba8:	e28f3fd6 	add	r3, pc, #856	; 0x358
    6bac:	e893000c 	ldm	r3, {r2, r3}
    6bb0:	da000149 	ble	70dc <__ieee754_rem_pio2+0x574>
    6bb4:	eb000873 	bl	8d88 <__aeabi_dsub>
    6bb8:	e59f3378 	ldr	r3, [pc, #888]	; 6f38 <__ieee754_rem_pio2+0x3d0>
    6bbc:	e1570003 	cmp	r7, r3
    6bc0:	e1a0a000 	mov	r10, r0
    6bc4:	e1a0b001 	mov	r11, r1
    6bc8:	0a00005f 	beq	6d4c <__ieee754_rem_pio2+0x1e4>
    6bcc:	e28f3fcf 	add	r3, pc, #828	; 0x33c
    6bd0:	e893000c 	ldm	r3, {r2, r3}
    6bd4:	eb00086b 	bl	8d88 <__aeabi_dsub>
    6bd8:	e1a02000 	mov	r2, r0
    6bdc:	e1a03001 	mov	r3, r1
    6be0:	e8880003 	stm	r8, {r0, r1}
    6be4:	e1a0000a 	mov	r0, r10
    6be8:	e1a0100b 	mov	r1, r11
    6bec:	eb000865 	bl	8d88 <__aeabi_dsub>
    6bf0:	e28f3fc6 	add	r3, pc, #792	; 0x318
    6bf4:	e893000c 	ldm	r3, {r2, r3}
    6bf8:	eb000862 	bl	8d88 <__aeabi_dsub>
    6bfc:	e3a06001 	mov	r6, #1
    6c00:	e5880008 	str	r0, [r8, #8]
    6c04:	e588100c 	str	r1, [r8, #12]
    6c08:	ea000043 	b	6d1c <__ieee754_rem_pio2+0x1b4>
    6c0c:	e59f3328 	ldr	r3, [pc, #808]	; 6f3c <__ieee754_rem_pio2+0x3d4>
    6c10:	e1570003 	cmp	r7, r3
    6c14:	da000075 	ble	6df0 <__ieee754_rem_pio2+0x288>
    6c18:	e59f3320 	ldr	r3, [pc, #800]	; 6f40 <__ieee754_rem_pio2+0x3d8>
    6c1c:	e1570003 	cmp	r7, r3
    6c20:	ca000041 	bgt	6d2c <__ieee754_rem_pio2+0x1c4>
    6c24:	e1a0aa47 	asr	r10, r7, #20
    6c28:	e24aae41 	sub	r10, r10, #1040	; 0x410
    6c2c:	e24aa006 	sub	r10, r10, #6
    6c30:	e0475a0a 	sub	r5, r7, r10, lsl #20
    6c34:	e1a01005 	mov	r1, r5
    6c38:	e1a04000 	mov	r4, r0
    6c3c:	eb000ace 	bl	977c <__aeabi_d2iz>
    6c40:	eb00091e 	bl	90c0 <__aeabi_i2d>
    6c44:	e1a06000 	mov	r6, r0
    6c48:	e1a07001 	mov	r7, r1
    6c4c:	e1a02000 	mov	r2, r0
    6c50:	e1a03001 	mov	r3, r1
    6c54:	e1a00004 	mov	r0, r4
    6c58:	e1a01005 	mov	r1, r5
    6c5c:	e58d6020 	str	r6, [sp, #32]
    6c60:	e58d7024 	str	r7, [sp, #36]	; 0x24
    6c64:	eb000847 	bl	8d88 <__aeabi_dsub>
    6c68:	e3a02000 	mov	r2, #0
    6c6c:	e59f32d0 	ldr	r3, [pc, #720]	; 6f44 <__ieee754_rem_pio2+0x3dc>
    6c70:	eb000949 	bl	919c <__aeabi_dmul>
    6c74:	e1a06000 	mov	r6, r0
    6c78:	e1a07001 	mov	r7, r1
    6c7c:	eb000abe 	bl	977c <__aeabi_d2iz>
    6c80:	eb00090e 	bl	90c0 <__aeabi_i2d>
    6c84:	e1a02000 	mov	r2, r0
    6c88:	e1a03001 	mov	r3, r1
    6c8c:	e1a04000 	mov	r4, r0
    6c90:	e1a05001 	mov	r5, r1
    6c94:	e1a00006 	mov	r0, r6
    6c98:	e1a01007 	mov	r1, r7
    6c9c:	e58d4028 	str	r4, [sp, #40]	; 0x28
    6ca0:	e58d502c 	str	r5, [sp, #44]	; 0x2c
    6ca4:	eb000837 	bl	8d88 <__aeabi_dsub>
    6ca8:	e3a02000 	mov	r2, #0
    6cac:	e59f3290 	ldr	r3, [pc, #656]	; 6f44 <__ieee754_rem_pio2+0x3dc>
    6cb0:	eb000939 	bl	919c <__aeabi_dmul>
    6cb4:	e3a02000 	mov	r2, #0
    6cb8:	e3a03000 	mov	r3, #0
    6cbc:	e58d0030 	str	r0, [sp, #48]	; 0x30
    6cc0:	e58d1034 	str	r1, [sp, #52]	; 0x34
    6cc4:	eb000a8e 	bl	9704 <__aeabi_dcmpeq>
    6cc8:	e3500000 	cmp	r0, #0
    6ccc:	03a06003 	moveq	r6, #3
    6cd0:	0a000032 	beq	6da0 <__ieee754_rem_pio2+0x238>
    6cd4:	e28d7028 	add	r7, sp, #40	; 0x28
    6cd8:	e3a06003 	mov	r6, #3
    6cdc:	e1a00004 	mov	r0, r4
    6ce0:	e1a01005 	mov	r1, r5
    6ce4:	e3a02000 	mov	r2, #0
    6ce8:	e3a03000 	mov	r3, #0
    6cec:	eb000a84 	bl	9704 <__aeabi_dcmpeq>
    6cf0:	e3500000 	cmp	r0, #0
    6cf4:	e2466001 	sub	r6, r6, #1
    6cf8:	0a000028 	beq	6da0 <__ieee754_rem_pio2+0x238>
    6cfc:	e9370003 	ldmdb	r7!, {r0, r1}
    6d00:	eafffff7 	b	6ce4 <__ieee754_rem_pio2+0x17c>
    6d04:	e8820030 	stm	r2, {r4, r5}
    6d08:	e3a03000 	mov	r3, #0
    6d0c:	e3a02000 	mov	r2, #0
    6d10:	e5882008 	str	r2, [r8, #8]
    6d14:	e588300c 	str	r3, [r8, #12]
    6d18:	e3a06000 	mov	r6, #0
    6d1c:	e1a00006 	mov	r0, r6
    6d20:	e28dd03c 	add	sp, sp, #60	; 0x3c
    6d24:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    6d28:	e12fff1e 	bx	lr
    6d2c:	e1a02000 	mov	r2, r0
    6d30:	e1a03001 	mov	r3, r1
    6d34:	eb000813 	bl	8d88 <__aeabi_dsub>
    6d38:	e3a06000 	mov	r6, #0
    6d3c:	e5880008 	str	r0, [r8, #8]
    6d40:	e588100c 	str	r1, [r8, #12]
    6d44:	e8880003 	stm	r8, {r0, r1}
    6d48:	eafffff3 	b	6d1c <__ieee754_rem_pio2+0x1b4>
    6d4c:	e28f3f71 	add	r3, pc, #452	; 0x1c4
    6d50:	e893000c 	ldm	r3, {r2, r3}
    6d54:	eb00080b 	bl	8d88 <__aeabi_dsub>
    6d58:	e28f3d07 	add	r3, pc, #448	; 0x1c0
    6d5c:	e893000c 	ldm	r3, {r2, r3}
    6d60:	e1a06000 	mov	r6, r0
    6d64:	e1a07001 	mov	r7, r1
    6d68:	eb000806 	bl	8d88 <__aeabi_dsub>
    6d6c:	e1a02000 	mov	r2, r0
    6d70:	e1a03001 	mov	r3, r1
    6d74:	e8880003 	stm	r8, {r0, r1}
    6d78:	e1a00006 	mov	r0, r6
    6d7c:	e1a01007 	mov	r1, r7
    6d80:	eb000800 	bl	8d88 <__aeabi_dsub>
    6d84:	e28f3f65 	add	r3, pc, #404	; 0x194
    6d88:	e893000c 	ldm	r3, {r2, r3}
    6d8c:	eb0007fd 	bl	8d88 <__aeabi_dsub>
    6d90:	e3a06001 	mov	r6, #1
    6d94:	e5880008 	str	r0, [r8, #8]
    6d98:	e588100c 	str	r1, [r8, #12]
    6d9c:	eaffffde 	b	6d1c <__ieee754_rem_pio2+0x1b4>
    6da0:	e3a03002 	mov	r3, #2
    6da4:	e58d3000 	str	r3, [sp]
    6da8:	e59f3198 	ldr	r3, [pc, #408]	; 6f48 <__ieee754_rem_pio2+0x3e0>
    6dac:	e28d0020 	add	r0, sp, #32
    6db0:	e58d3004 	str	r3, [sp, #4]
    6db4:	e1a01008 	mov	r1, r8
    6db8:	e1a03006 	mov	r3, r6
    6dbc:	e1a0200a 	mov	r2, r10
    6dc0:	eb000260 	bl	7748 <__kernel_rem_pio2>
    6dc4:	e3590000 	cmp	r9, #0
    6dc8:	e1a06000 	mov	r6, r0
    6dcc:	aaffffd2 	bge	6d1c <__ieee754_rem_pio2+0x1b4>
    6dd0:	e5982004 	ldr	r2, [r8, #4]
    6dd4:	e598300c 	ldr	r3, [r8, #12]
    6dd8:	e2822102 	add	r2, r2, #-2147483648	; 0x80000000
    6ddc:	e2833102 	add	r3, r3, #-2147483648	; 0x80000000
    6de0:	e5882004 	str	r2, [r8, #4]
    6de4:	e588300c 	str	r3, [r8, #12]
    6de8:	e2606000 	rsb	r6, r0, #0
    6dec:	eaffffca 	b	6d1c <__ieee754_rem_pio2+0x1b4>
    6df0:	eb0006e4 	bl	8988 <fabs>
    6df4:	e28f3f4b 	add	r3, pc, #300	; 0x12c
    6df8:	e893000c 	ldm	r3, {r2, r3}
    6dfc:	e1a04000 	mov	r4, r0
    6e00:	e1a05001 	mov	r5, r1
    6e04:	eb0008e4 	bl	919c <__aeabi_dmul>
    6e08:	e3a02000 	mov	r2, #0
    6e0c:	e59f3138 	ldr	r3, [pc, #312]	; 6f4c <__ieee754_rem_pio2+0x3e4>
    6e10:	eb0007dd 	bl	8d8c <__adddf3>
    6e14:	eb000a58 	bl	977c <__aeabi_d2iz>
    6e18:	e1a06000 	mov	r6, r0
    6e1c:	eb0008a7 	bl	90c0 <__aeabi_i2d>
    6e20:	e28f30e0 	add	r3, pc, #224	; 0xe0
    6e24:	e893000c 	ldm	r3, {r2, r3}
    6e28:	e58d0010 	str	r0, [sp, #16]
    6e2c:	e58d1014 	str	r1, [sp, #20]
    6e30:	eb0008d9 	bl	919c <__aeabi_dmul>
    6e34:	e1a02000 	mov	r2, r0
    6e38:	e1a03001 	mov	r3, r1
    6e3c:	e1a00004 	mov	r0, r4
    6e40:	e1a01005 	mov	r1, r5
    6e44:	eb0007cf 	bl	8d88 <__aeabi_dsub>
    6e48:	e28f30c0 	add	r3, pc, #192	; 0xc0
    6e4c:	e893000c 	ldm	r3, {r2, r3}
    6e50:	e1a0a000 	mov	r10, r0
    6e54:	e1a0b001 	mov	r11, r1
    6e58:	e28d1010 	add	r1, sp, #16
    6e5c:	e8910003 	ldm	r1, {r0, r1}
    6e60:	eb0008cd 	bl	919c <__aeabi_dmul>
    6e64:	e356001f 	cmp	r6, #31
    6e68:	e58d0008 	str	r0, [sp, #8]
    6e6c:	e58d100c 	str	r1, [sp, #12]
    6e70:	e1a0000a 	mov	r0, r10
    6e74:	e1a0100b 	mov	r1, r11
    6e78:	ca000035 	bgt	6f54 <__ieee754_rem_pio2+0x3ec>
    6e7c:	e59f30cc 	ldr	r3, [pc, #204]	; 6f50 <__ieee754_rem_pio2+0x3e8>
    6e80:	e2462001 	sub	r2, r6, #1
    6e84:	e7933102 	ldr	r3, [r3, r2, lsl #2]
    6e88:	e1530007 	cmp	r3, r7
    6e8c:	0a000030 	beq	6f54 <__ieee754_rem_pio2+0x3ec>
    6e90:	e28d3008 	add	r3, sp, #8
    6e94:	e893000c 	ldm	r3, {r2, r3}
    6e98:	eb0007ba 	bl	8d88 <__aeabi_dsub>
    6e9c:	e1a02000 	mov	r2, r0
    6ea0:	e1a03001 	mov	r3, r1
    6ea4:	e888000c 	stm	r8, {r2, r3}
    6ea8:	e1a05000 	mov	r5, r0
    6eac:	e1a04001 	mov	r4, r1
    6eb0:	e1a02005 	mov	r2, r5
    6eb4:	e1a03004 	mov	r3, r4
    6eb8:	e1a0000a 	mov	r0, r10
    6ebc:	e1a0100b 	mov	r1, r11
    6ec0:	eb0007b0 	bl	8d88 <__aeabi_dsub>
    6ec4:	e28d3008 	add	r3, sp, #8
    6ec8:	e893000c 	ldm	r3, {r2, r3}
    6ecc:	eb0007ad 	bl	8d88 <__aeabi_dsub>
    6ed0:	e3590000 	cmp	r9, #0
    6ed4:	e1a02000 	mov	r2, r0
    6ed8:	e1a03001 	mov	r3, r1
    6edc:	e5882008 	str	r2, [r8, #8]
    6ee0:	e588300c 	str	r3, [r8, #12]
    6ee4:	aaffff8c 	bge	6d1c <__ieee754_rem_pio2+0x1b4>
    6ee8:	e2844102 	add	r4, r4, #-2147483648	; 0x80000000
    6eec:	e2811102 	add	r1, r1, #-2147483648	; 0x80000000
    6ef0:	e5885000 	str	r5, [r8]
    6ef4:	e5884004 	str	r4, [r8, #4]
    6ef8:	e5880008 	str	r0, [r8, #8]
    6efc:	e588100c 	str	r1, [r8, #12]
    6f00:	e2666000 	rsb	r6, r6, #0
    6f04:	eaffff84 	b	6d1c <__ieee754_rem_pio2+0x1b4>
    6f08:	54400000 	.word	0x54400000
    6f0c:	3ff921fb 	.word	0x3ff921fb
    6f10:	1a626331 	.word	0x1a626331
    6f14:	3dd0b461 	.word	0x3dd0b461
    6f18:	1a600000 	.word	0x1a600000
    6f1c:	3dd0b461 	.word	0x3dd0b461
    6f20:	2e037073 	.word	0x2e037073
    6f24:	3ba3198a 	.word	0x3ba3198a
    6f28:	6dc9c883 	.word	0x6dc9c883
    6f2c:	3fe45f30 	.word	0x3fe45f30
    6f30:	3fe921fb 	.word	0x3fe921fb
    6f34:	4002d97b 	.word	0x4002d97b
    6f38:	3ff921fb 	.word	0x3ff921fb
    6f3c:	413921fb 	.word	0x413921fb
    6f40:	7fefffff 	.word	0x7fefffff
    6f44:	41700000 	.word	0x41700000
    6f48:	0000a4f8 	.word	0x0000a4f8
    6f4c:	3fe00000 	.word	0x3fe00000
    6f50:	0000a478 	.word	0x0000a478
    6f54:	e28d3008 	add	r3, sp, #8
    6f58:	e893000c 	ldm	r3, {r2, r3}
    6f5c:	eb000789 	bl	8d88 <__aeabi_dsub>
    6f60:	e1a07a47 	asr	r7, r7, #20
    6f64:	e1a04001 	mov	r4, r1
    6f68:	e1a01081 	lsl	r1, r1, #1
    6f6c:	e1a05000 	mov	r5, r0
    6f70:	e0471aa1 	sub	r1, r7, r1, lsr #21
    6f74:	e1a02005 	mov	r2, r5
    6f78:	e1a03004 	mov	r3, r4
    6f7c:	e3510010 	cmp	r1, #16
    6f80:	e888000c 	stm	r8, {r2, r3}
    6f84:	daffffc9 	ble	6eb0 <__ieee754_rem_pio2+0x348>
    6f88:	e28f3f82 	add	r3, pc, #520	; 0x208
    6f8c:	e893000c 	ldm	r3, {r2, r3}
    6f90:	e28d1010 	add	r1, sp, #16
    6f94:	e8910003 	ldm	r1, {r0, r1}
    6f98:	eb00087f 	bl	919c <__aeabi_dmul>
    6f9c:	e1a04000 	mov	r4, r0
    6fa0:	e1a05001 	mov	r5, r1
    6fa4:	e1a02004 	mov	r2, r4
    6fa8:	e1a03005 	mov	r3, r5
    6fac:	e1a0000a 	mov	r0, r10
    6fb0:	e1a0100b 	mov	r1, r11
    6fb4:	eb000773 	bl	8d88 <__aeabi_dsub>
    6fb8:	e58d0018 	str	r0, [sp, #24]
    6fbc:	e58d101c 	str	r1, [sp, #28]
    6fc0:	e28d3018 	add	r3, sp, #24
    6fc4:	e893000c 	ldm	r3, {r2, r3}
    6fc8:	e1a0000a 	mov	r0, r10
    6fcc:	e1a0100b 	mov	r1, r11
    6fd0:	eb00076c 	bl	8d88 <__aeabi_dsub>
    6fd4:	e1a02004 	mov	r2, r4
    6fd8:	e1a03005 	mov	r3, r5
    6fdc:	eb000769 	bl	8d88 <__aeabi_dsub>
    6fe0:	e28f3f6e 	add	r3, pc, #440	; 0x1b8
    6fe4:	e893000c 	ldm	r3, {r2, r3}
    6fe8:	e1a04000 	mov	r4, r0
    6fec:	e1a05001 	mov	r5, r1
    6ff0:	e28d1010 	add	r1, sp, #16
    6ff4:	e8910003 	ldm	r1, {r0, r1}
    6ff8:	eb000867 	bl	919c <__aeabi_dmul>
    6ffc:	e1a02004 	mov	r2, r4
    7000:	e1a03005 	mov	r3, r5
    7004:	eb00075f 	bl	8d88 <__aeabi_dsub>
    7008:	e58d0008 	str	r0, [sp, #8]
    700c:	e58d100c 	str	r1, [sp, #12]
    7010:	e28d3008 	add	r3, sp, #8
    7014:	e893000c 	ldm	r3, {r2, r3}
    7018:	e28d1018 	add	r1, sp, #24
    701c:	e8910003 	ldm	r1, {r0, r1}
    7020:	eb000758 	bl	8d88 <__aeabi_dsub>
    7024:	e1a04001 	mov	r4, r1
    7028:	e1a01081 	lsl	r1, r1, #1
    702c:	e1a05000 	mov	r5, r0
    7030:	e0477aa1 	sub	r7, r7, r1, lsr #21
    7034:	e1a02005 	mov	r2, r5
    7038:	e1a03004 	mov	r3, r4
    703c:	e3570031 	cmp	r7, #49	; 0x31
    7040:	e888000c 	stm	r8, {r2, r3}
    7044:	da00004f 	ble	7188 <__ieee754_rem_pio2+0x620>
    7048:	e3a0242e 	mov	r2, #771751936	; 0x2e000000
    704c:	e59f3164 	ldr	r3, [pc, #356]	; 71b8 <__ieee754_rem_pio2+0x650>
    7050:	e28d1010 	add	r1, sp, #16
    7054:	e8910003 	ldm	r1, {r0, r1}
    7058:	eb00084f 	bl	919c <__aeabi_dmul>
    705c:	e1a04000 	mov	r4, r0
    7060:	e1a05001 	mov	r5, r1
    7064:	e1a02004 	mov	r2, r4
    7068:	e1a03005 	mov	r3, r5
    706c:	e28d1018 	add	r1, sp, #24
    7070:	e8910003 	ldm	r1, {r0, r1}
    7074:	eb000743 	bl	8d88 <__aeabi_dsub>
    7078:	e1a0a000 	mov	r10, r0
    707c:	e1a0b001 	mov	r11, r1
    7080:	e1a0200a 	mov	r2, r10
    7084:	e1a0300b 	mov	r3, r11
    7088:	e28d1018 	add	r1, sp, #24
    708c:	e8910003 	ldm	r1, {r0, r1}
    7090:	eb00073c 	bl	8d88 <__aeabi_dsub>
    7094:	e1a02004 	mov	r2, r4
    7098:	e1a03005 	mov	r3, r5
    709c:	eb000739 	bl	8d88 <__aeabi_dsub>
    70a0:	e28f3c01 	add	r3, pc, #256	; 0x100
    70a4:	e893000c 	ldm	r3, {r2, r3}
    70a8:	e1a04000 	mov	r4, r0
    70ac:	e1a05001 	mov	r5, r1
    70b0:	e28d1010 	add	r1, sp, #16
    70b4:	e8910003 	ldm	r1, {r0, r1}
    70b8:	eb000837 	bl	919c <__aeabi_dmul>
    70bc:	e1a02004 	mov	r2, r4
    70c0:	e1a03005 	mov	r3, r5
    70c4:	eb00072f 	bl	8d88 <__aeabi_dsub>
    70c8:	e58d0008 	str	r0, [sp, #8]
    70cc:	e58d100c 	str	r1, [sp, #12]
    70d0:	e1a0000a 	mov	r0, r10
    70d4:	e1a0100b 	mov	r1, r11
    70d8:	eaffff6c 	b	6e90 <__ieee754_rem_pio2+0x328>
    70dc:	eb00072a 	bl	8d8c <__adddf3>
    70e0:	e59f30d4 	ldr	r3, [pc, #212]	; 71bc <__ieee754_rem_pio2+0x654>
    70e4:	e1570003 	cmp	r7, r3
    70e8:	e1a0a000 	mov	r10, r0
    70ec:	e1a0b001 	mov	r11, r1
    70f0:	0a00000f 	beq	7134 <__ieee754_rem_pio2+0x5cc>
    70f4:	e28f30b4 	add	r3, pc, #180	; 0xb4
    70f8:	e893000c 	ldm	r3, {r2, r3}
    70fc:	eb000722 	bl	8d8c <__adddf3>
    7100:	e1a02000 	mov	r2, r0
    7104:	e1a03001 	mov	r3, r1
    7108:	e8880003 	stm	r8, {r0, r1}
    710c:	e1a0000a 	mov	r0, r10
    7110:	e1a0100b 	mov	r1, r11
    7114:	eb00071b 	bl	8d88 <__aeabi_dsub>
    7118:	e28f3090 	add	r3, pc, #144	; 0x90
    711c:	e893000c 	ldm	r3, {r2, r3}
    7120:	eb000719 	bl	8d8c <__adddf3>
    7124:	e3e06000 	mvn	r6, #0
    7128:	e5880008 	str	r0, [r8, #8]
    712c:	e588100c 	str	r1, [r8, #12]
    7130:	eafffef9 	b	6d1c <__ieee754_rem_pio2+0x1b4>
    7134:	e28f305c 	add	r3, pc, #92	; 0x5c
    7138:	e893000c 	ldm	r3, {r2, r3}
    713c:	eb000712 	bl	8d8c <__adddf3>
    7140:	e28f3058 	add	r3, pc, #88	; 0x58
    7144:	e893000c 	ldm	r3, {r2, r3}
    7148:	e1a06000 	mov	r6, r0
    714c:	e1a07001 	mov	r7, r1
    7150:	eb00070d 	bl	8d8c <__adddf3>
    7154:	e1a02000 	mov	r2, r0
    7158:	e1a03001 	mov	r3, r1
    715c:	e8880003 	stm	r8, {r0, r1}
    7160:	e1a00006 	mov	r0, r6
    7164:	e1a01007 	mov	r1, r7
    7168:	eb000706 	bl	8d88 <__aeabi_dsub>
    716c:	e28f302c 	add	r3, pc, #44	; 0x2c
    7170:	e893000c 	ldm	r3, {r2, r3}
    7174:	eb000704 	bl	8d8c <__adddf3>
    7178:	e3e06000 	mvn	r6, #0
    717c:	e5880008 	str	r0, [r8, #8]
    7180:	e588100c 	str	r1, [r8, #12]
    7184:	eafffee4 	b	6d1c <__ieee754_rem_pio2+0x1b4>
    7188:	e28db018 	add	r11, sp, #24
    718c:	e89b0c00 	ldm	r11, {r10, r11}
    7190:	eaffff46 	b	6eb0 <__ieee754_rem_pio2+0x348>
    7194:	e1a00000 	nop			; (mov r0, r0)
    7198:	1a600000 	.word	0x1a600000
    719c:	3dd0b461 	.word	0x3dd0b461
    71a0:	2e037073 	.word	0x2e037073
    71a4:	3ba3198a 	.word	0x3ba3198a
    71a8:	252049c1 	.word	0x252049c1
    71ac:	397b839a 	.word	0x397b839a
    71b0:	1a626331 	.word	0x1a626331
    71b4:	3dd0b461 	.word	0x3dd0b461
    71b8:	3ba3198a 	.word	0x3ba3198a
    71bc:	3ff921fb 	.word	0x3ff921fb

000071c0 <__ieee754_sqrt>:
    71c0:	e59fc230 	ldr	r12, [pc, #560]	; 73f8 <__ieee754_sqrt+0x238>
    71c4:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
    71c8:	e59f7228 	ldr	r7, [pc, #552]	; 73f8 <__ieee754_sqrt+0x238>
    71cc:	e001c00c 	and	r12, r1, r12
    71d0:	e15c0007 	cmp	r12, r7
    71d4:	e1a04000 	mov	r4, r0
    71d8:	e1a05001 	mov	r5, r1
    71dc:	e1a02000 	mov	r2, r0
    71e0:	e1a03001 	mov	r3, r1
    71e4:	e1a06001 	mov	r6, r1
    71e8:	e1a0c001 	mov	r12, r1
    71ec:	e1a08000 	mov	r8, r0
    71f0:	0a00006a 	beq	73a0 <__ieee754_sqrt+0x1e0>
    71f4:	e3510000 	cmp	r1, #0
    71f8:	da000051 	ble	7344 <__ieee754_sqrt+0x184>
    71fc:	e1b02a41 	asrs	r2, r1, #20
    7200:	0a00005a 	beq	7370 <__ieee754_sqrt+0x1b0>
    7204:	e3cc34ff 	bic	r3, r12, #-16777216	; 0xff000000
    7208:	e3120001 	tst	r2, #1
    720c:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
    7210:	e2426fff 	sub	r6, r2, #1020	; 0x3fc
    7214:	e3833601 	orr	r3, r3, #1048576	; 0x100000
    7218:	01a02fa8 	lsreq	r2, r8, #31
    721c:	01a08088 	lsleq	r8, r8, #1
    7220:	00823083 	addeq	r3, r2, r3, lsl #1
    7224:	e2466003 	sub	r6, r6, #3
    7228:	e1a02fa8 	lsr	r2, r8, #31
    722c:	e3a07000 	mov	r7, #0
    7230:	e0823083 	add	r3, r2, r3, lsl #1
    7234:	e1a060c6 	asr	r6, r6, #1
    7238:	e1a02088 	lsl	r2, r8, #1
    723c:	e3a0c016 	mov	r12, #22
    7240:	e1a00007 	mov	r0, r7
    7244:	e3a01602 	mov	r1, #2097152	; 0x200000
    7248:	e0804001 	add	r4, r0, r1
    724c:	e1540003 	cmp	r4, r3
    7250:	e1a05fa2 	lsr	r5, r2, #31
    7254:	d0840001 	addle	r0, r4, r1
    7258:	d0643003 	rsble	r3, r4, r3
    725c:	d0877001 	addle	r7, r7, r1
    7260:	e25cc001 	subs	r12, r12, #1
    7264:	e0853083 	add	r3, r5, r3, lsl #1
    7268:	e1a02082 	lsl	r2, r2, #1
    726c:	e1a010a1 	lsr	r1, r1, #1
    7270:	1afffff4 	bne	7248 <__ieee754_sqrt+0x88>
    7274:	e3a05020 	mov	r5, #32
    7278:	e1a0800c 	mov	r8, r12
    727c:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    7280:	ea00000c 	b	72b8 <__ieee754_sqrt+0xf8>
    7284:	e1a0a000 	mov	r10, r0
    7288:	e1540002 	cmp	r4, r2
    728c:	e0603003 	rsb	r3, r0, r3
    7290:	82433001 	subhi	r3, r3, #1
    7294:	e0642002 	rsb	r2, r4, r2
    7298:	e08cc001 	add	r12, r12, r1
    729c:	e1a0000a 	mov	r0, r10
    72a0:	e1a04fa2 	lsr	r4, r2, #31
    72a4:	e2555001 	subs	r5, r5, #1
    72a8:	e0843083 	add	r3, r4, r3, lsl #1
    72ac:	e1a02082 	lsl	r2, r2, #1
    72b0:	e1a010a1 	lsr	r1, r1, #1
    72b4:	0a00000d 	beq	72f0 <__ieee754_sqrt+0x130>
    72b8:	e1500003 	cmp	r0, r3
    72bc:	e0814008 	add	r4, r1, r8
    72c0:	ba000002 	blt	72d0 <__ieee754_sqrt+0x110>
    72c4:	e1540002 	cmp	r4, r2
    72c8:	91530000 	cmpls	r3, r0
    72cc:	1afffff3 	bne	72a0 <__ieee754_sqrt+0xe0>
    72d0:	e2048102 	and	r8, r4, #-2147483648	; 0x80000000
    72d4:	e3580102 	cmp	r8, #-2147483648	; 0x80000000
    72d8:	e0848001 	add	r8, r4, r1
    72dc:	1affffe8 	bne	7284 <__ieee754_sqrt+0xc4>
    72e0:	e3580000 	cmp	r8, #0
    72e4:	a280a001 	addge	r10, r0, #1
    72e8:	aaffffe6 	bge	7288 <__ieee754_sqrt+0xc8>
    72ec:	eaffffe4 	b	7284 <__ieee754_sqrt+0xc4>
    72f0:	e1923003 	orrs	r3, r2, r3
    72f4:	1a00000b 	bne	7328 <__ieee754_sqrt+0x168>
    72f8:	e1a0c0ac 	lsr	r12, r12, #1
    72fc:	e1a030c7 	asr	r3, r7, #1
    7300:	e28335ff 	add	r3, r3, #1069547520	; 0x3fc00000
    7304:	e3170001 	tst	r7, #1
    7308:	e2833602 	add	r3, r3, #2097152	; 0x200000
    730c:	138cc102 	orrne	r12, r12, #-2147483648	; 0x80000000
    7310:	e0835a06 	add	r5, r3, r6, lsl #20
    7314:	e1a0400c 	mov	r4, r12
    7318:	e1a00004 	mov	r0, r4
    731c:	e1a01005 	mov	r1, r5
    7320:	e8bd45f8 	pop	{r3, r4, r5, r6, r7, r8, r10, lr}
    7324:	e12fff1e 	bx	lr
    7328:	e37c0001 	cmn	r12, #1
    732c:	02877001 	addeq	r7, r7, #1
    7330:	01a0c005 	moveq	r12, r5
    7334:	0afffff0 	beq	72fc <__ieee754_sqrt+0x13c>
    7338:	e20c3001 	and	r3, r12, #1
    733c:	e083c00c 	add	r12, r3, r12
    7340:	eaffffec 	b	72f8 <__ieee754_sqrt+0x138>
    7344:	e3c1c102 	bic	r12, r1, #-2147483648	; 0x80000000
    7348:	e19cc000 	orrs	r12, r12, r0
    734c:	0afffff1 	beq	7318 <__ieee754_sqrt+0x158>
    7350:	e3510000 	cmp	r1, #0
    7354:	01a02001 	moveq	r2, r1
    7358:	1a00001d 	bne	73d4 <__ieee754_sqrt+0x214>
    735c:	e1a0c5a8 	lsr	r12, r8, #11
    7360:	e35c0000 	cmp	r12, #0
    7364:	e2422015 	sub	r2, r2, #21
    7368:	e1a08a88 	lsl	r8, r8, #21
    736c:	0afffffa 	beq	735c <__ieee754_sqrt+0x19c>
    7370:	e21c3601 	ands	r3, r12, #1048576	; 0x100000
    7374:	1a000012 	bne	73c4 <__ieee754_sqrt+0x204>
    7378:	e1a0c08c 	lsl	r12, r12, #1
    737c:	e31c0601 	tst	r12, #1048576	; 0x100000
    7380:	e2833001 	add	r3, r3, #1
    7384:	0afffffb 	beq	7378 <__ieee754_sqrt+0x1b8>
    7388:	e2631001 	rsb	r1, r3, #1
    738c:	e2630020 	rsb	r0, r3, #32
    7390:	e18cc038 	orr	r12, r12, r8, lsr r0
    7394:	e0822001 	add	r2, r2, r1
    7398:	e1a08318 	lsl	r8, r8, r3
    739c:	eaffff98 	b	7204 <__ieee754_sqrt+0x44>
    73a0:	eb00077d 	bl	919c <__aeabi_dmul>
    73a4:	e1a02000 	mov	r2, r0
    73a8:	e1a03001 	mov	r3, r1
    73ac:	e1a00004 	mov	r0, r4
    73b0:	e1a01005 	mov	r1, r5
    73b4:	eb000674 	bl	8d8c <__adddf3>
    73b8:	e1a04000 	mov	r4, r0
    73bc:	e1a05001 	mov	r5, r1
    73c0:	eaffffd4 	b	7318 <__ieee754_sqrt+0x158>
    73c4:	e3a00020 	mov	r0, #32
    73c8:	e3a01001 	mov	r1, #1
    73cc:	e3a03000 	mov	r3, #0
    73d0:	eaffffee 	b	7390 <__ieee754_sqrt+0x1d0>
    73d4:	e1a02000 	mov	r2, r0
    73d8:	e1a03001 	mov	r3, r1
    73dc:	eb000669 	bl	8d88 <__aeabi_dsub>
    73e0:	e1a02000 	mov	r2, r0
    73e4:	e1a03001 	mov	r3, r1
    73e8:	eb00080f 	bl	942c <__aeabi_ddiv>
    73ec:	e1a04000 	mov	r4, r0
    73f0:	e1a05001 	mov	r5, r1
    73f4:	eaffffc7 	b	7318 <__ieee754_sqrt+0x158>
    73f8:	7ff00000 	.word	0x7ff00000
    73fc:	00000000 	.word	0x00000000

00007400 <__kernel_cos>:
    7400:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    7404:	e3c19102 	bic	r9, r1, #-2147483648	; 0x80000000
    7408:	e35905f9 	cmp	r9, #1044381696	; 0x3e400000
    740c:	e24dd014 	sub	sp, sp, #20
    7410:	e1a06000 	mov	r6, r0
    7414:	e1a07001 	mov	r7, r1
    7418:	e1a04000 	mov	r4, r0
    741c:	e1a05001 	mov	r5, r1
    7420:	e1a0a002 	mov	r10, r2
    7424:	e1a0b003 	mov	r11, r3
    7428:	aa00004d 	bge	7564 <__kernel_cos+0x164>
    742c:	eb0008d2 	bl	977c <__aeabi_d2iz>
    7430:	e3500000 	cmp	r0, #0
    7434:	0a0000ae 	beq	76f4 <__kernel_cos+0x2f4>
    7438:	e1a02006 	mov	r2, r6
    743c:	e1a03007 	mov	r3, r7
    7440:	e1a00006 	mov	r0, r6
    7444:	e1a01007 	mov	r1, r7
    7448:	eb000753 	bl	919c <__aeabi_dmul>
    744c:	e28f3fab 	add	r3, pc, #684	; 0x2ac
    7450:	e893000c 	ldm	r3, {r2, r3}
    7454:	e1a04000 	mov	r4, r0
    7458:	e1a05001 	mov	r5, r1
    745c:	eb00074e 	bl	919c <__aeabi_dmul>
    7460:	e28f3e2a 	add	r3, pc, #672	; 0x2a0
    7464:	e893000c 	ldm	r3, {r2, r3}
    7468:	eb000647 	bl	8d8c <__adddf3>
    746c:	e1a02004 	mov	r2, r4
    7470:	e1a03005 	mov	r3, r5
    7474:	eb000748 	bl	919c <__aeabi_dmul>
    7478:	e28f3e29 	add	r3, pc, #656	; 0x290
    747c:	e893000c 	ldm	r3, {r2, r3}
    7480:	eb000640 	bl	8d88 <__aeabi_dsub>
    7484:	e1a02004 	mov	r2, r4
    7488:	e1a03005 	mov	r3, r5
    748c:	eb000742 	bl	919c <__aeabi_dmul>
    7490:	e28f3d0a 	add	r3, pc, #640	; 0x280
    7494:	e893000c 	ldm	r3, {r2, r3}
    7498:	eb00063b 	bl	8d8c <__adddf3>
    749c:	e1a02004 	mov	r2, r4
    74a0:	e1a03005 	mov	r3, r5
    74a4:	eb00073c 	bl	919c <__aeabi_dmul>
    74a8:	e28f3e27 	add	r3, pc, #624	; 0x270
    74ac:	e893000c 	ldm	r3, {r2, r3}
    74b0:	eb000634 	bl	8d88 <__aeabi_dsub>
    74b4:	e1a02004 	mov	r2, r4
    74b8:	e1a03005 	mov	r3, r5
    74bc:	eb000736 	bl	919c <__aeabi_dmul>
    74c0:	e28f3e26 	add	r3, pc, #608	; 0x260
    74c4:	e893000c 	ldm	r3, {r2, r3}
    74c8:	eb00062f 	bl	8d8c <__adddf3>
    74cc:	e1a02004 	mov	r2, r4
    74d0:	e1a03005 	mov	r3, r5
    74d4:	eb000730 	bl	919c <__aeabi_dmul>
    74d8:	e88d0003 	stm	sp, {r0, r1}
    74dc:	e1a00004 	mov	r0, r4
    74e0:	e1a01005 	mov	r1, r5
    74e4:	e3a02000 	mov	r2, #0
    74e8:	e59f3240 	ldr	r3, [pc, #576]	; 7730 <__kernel_cos+0x330>
    74ec:	eb00072a 	bl	919c <__aeabi_dmul>
    74f0:	e89d000c 	ldm	sp, {r2, r3}
    74f4:	e1a08000 	mov	r8, r0
    74f8:	e1a09001 	mov	r9, r1
    74fc:	e1a00004 	mov	r0, r4
    7500:	e1a01005 	mov	r1, r5
    7504:	eb000724 	bl	919c <__aeabi_dmul>
    7508:	e1a0200a 	mov	r2, r10
    750c:	e1a04000 	mov	r4, r0
    7510:	e1a05001 	mov	r5, r1
    7514:	e1a0300b 	mov	r3, r11
    7518:	e1a00006 	mov	r0, r6
    751c:	e1a01007 	mov	r1, r7
    7520:	eb00071d 	bl	919c <__aeabi_dmul>
    7524:	e1a02000 	mov	r2, r0
    7528:	e1a03001 	mov	r3, r1
    752c:	e1a00004 	mov	r0, r4
    7530:	e1a01005 	mov	r1, r5
    7534:	eb000613 	bl	8d88 <__aeabi_dsub>
    7538:	e1a02000 	mov	r2, r0
    753c:	e1a03001 	mov	r3, r1
    7540:	e1a00008 	mov	r0, r8
    7544:	e1a01009 	mov	r1, r9
    7548:	eb00060e 	bl	8d88 <__aeabi_dsub>
    754c:	e1a02000 	mov	r2, r0
    7550:	e1a03001 	mov	r3, r1
    7554:	e3a00000 	mov	r0, #0
    7558:	e59f11d4 	ldr	r1, [pc, #468]	; 7734 <__kernel_cos+0x334>
    755c:	eb000609 	bl	8d88 <__aeabi_dsub>
    7560:	ea00005a 	b	76d0 <__kernel_cos+0x2d0>
    7564:	e1a02000 	mov	r2, r0
    7568:	e1a03001 	mov	r3, r1
    756c:	eb00070a 	bl	919c <__aeabi_dmul>
    7570:	e28f3f62 	add	r3, pc, #392	; 0x188
    7574:	e893000c 	ldm	r3, {r2, r3}
    7578:	e1a04000 	mov	r4, r0
    757c:	e1a05001 	mov	r5, r1
    7580:	eb000705 	bl	919c <__aeabi_dmul>
    7584:	e28f3f5f 	add	r3, pc, #380	; 0x17c
    7588:	e893000c 	ldm	r3, {r2, r3}
    758c:	eb0005fe 	bl	8d8c <__adddf3>
    7590:	e1a02004 	mov	r2, r4
    7594:	e1a03005 	mov	r3, r5
    7598:	eb0006ff 	bl	919c <__aeabi_dmul>
    759c:	e28f3f5b 	add	r3, pc, #364	; 0x16c
    75a0:	e893000c 	ldm	r3, {r2, r3}
    75a4:	eb0005f7 	bl	8d88 <__aeabi_dsub>
    75a8:	e1a02004 	mov	r2, r4
    75ac:	e1a03005 	mov	r3, r5
    75b0:	eb0006f9 	bl	919c <__aeabi_dmul>
    75b4:	e28f3f57 	add	r3, pc, #348	; 0x15c
    75b8:	e893000c 	ldm	r3, {r2, r3}
    75bc:	eb0005f2 	bl	8d8c <__adddf3>
    75c0:	e1a02004 	mov	r2, r4
    75c4:	e1a03005 	mov	r3, r5
    75c8:	eb0006f3 	bl	919c <__aeabi_dmul>
    75cc:	e28f3f53 	add	r3, pc, #332	; 0x14c
    75d0:	e893000c 	ldm	r3, {r2, r3}
    75d4:	eb0005eb 	bl	8d88 <__aeabi_dsub>
    75d8:	e1a02004 	mov	r2, r4
    75dc:	e1a03005 	mov	r3, r5
    75e0:	eb0006ed 	bl	919c <__aeabi_dmul>
    75e4:	e28f3f4f 	add	r3, pc, #316	; 0x13c
    75e8:	e893000c 	ldm	r3, {r2, r3}
    75ec:	eb0005e6 	bl	8d8c <__adddf3>
    75f0:	e1a03005 	mov	r3, r5
    75f4:	e1a02004 	mov	r2, r4
    75f8:	eb0006e7 	bl	919c <__aeabi_dmul>
    75fc:	e59f3134 	ldr	r3, [pc, #308]	; 7738 <__kernel_cos+0x338>
    7600:	e1590003 	cmp	r9, r3
    7604:	e88d0003 	stm	sp, {r0, r1}
    7608:	daffffb3 	ble	74dc <__kernel_cos+0xdc>
    760c:	e59f3128 	ldr	r3, [pc, #296]	; 773c <__kernel_cos+0x33c>
    7610:	e1590003 	cmp	r9, r3
    7614:	e3a02000 	mov	r2, #0
    7618:	ca00002f 	bgt	76dc <__kernel_cos+0x2dc>
    761c:	e2493602 	sub	r3, r9, #2097152	; 0x200000
    7620:	e3a02000 	mov	r2, #0
    7624:	e3a00000 	mov	r0, #0
    7628:	e59f1104 	ldr	r1, [pc, #260]	; 7734 <__kernel_cos+0x334>
    762c:	e1a08002 	mov	r8, r2
    7630:	e1a09003 	mov	r9, r3
    7634:	eb0005d3 	bl	8d88 <__aeabi_dsub>
    7638:	e58d0008 	str	r0, [sp, #8]
    763c:	e58d100c 	str	r1, [sp, #12]
    7640:	e1a00004 	mov	r0, r4
    7644:	e1a01005 	mov	r1, r5
    7648:	e3a02000 	mov	r2, #0
    764c:	e59f30dc 	ldr	r3, [pc, #220]	; 7730 <__kernel_cos+0x330>
    7650:	eb0006d1 	bl	919c <__aeabi_dmul>
    7654:	e1a02008 	mov	r2, r8
    7658:	e1a03009 	mov	r3, r9
    765c:	eb0005c9 	bl	8d88 <__aeabi_dsub>
    7660:	e89d000c 	ldm	sp, {r2, r3}
    7664:	e1a08000 	mov	r8, r0
    7668:	e1a09001 	mov	r9, r1
    766c:	e1a00004 	mov	r0, r4
    7670:	e1a01005 	mov	r1, r5
    7674:	eb0006c8 	bl	919c <__aeabi_dmul>
    7678:	e1a0200a 	mov	r2, r10
    767c:	e1a04000 	mov	r4, r0
    7680:	e1a05001 	mov	r5, r1
    7684:	e1a0300b 	mov	r3, r11
    7688:	e1a00006 	mov	r0, r6
    768c:	e1a01007 	mov	r1, r7
    7690:	eb0006c1 	bl	919c <__aeabi_dmul>
    7694:	e1a02000 	mov	r2, r0
    7698:	e1a03001 	mov	r3, r1
    769c:	e1a00004 	mov	r0, r4
    76a0:	e1a01005 	mov	r1, r5
    76a4:	eb0005b7 	bl	8d88 <__aeabi_dsub>
    76a8:	e1a02000 	mov	r2, r0
    76ac:	e1a03001 	mov	r3, r1
    76b0:	e1a00008 	mov	r0, r8
    76b4:	e1a01009 	mov	r1, r9
    76b8:	eb0005b2 	bl	8d88 <__aeabi_dsub>
    76bc:	e1a02000 	mov	r2, r0
    76c0:	e1a03001 	mov	r3, r1
    76c4:	e28d1008 	add	r1, sp, #8
    76c8:	e8910003 	ldm	r1, {r0, r1}
    76cc:	eb0005ad 	bl	8d88 <__aeabi_dsub>
    76d0:	e28dd014 	add	sp, sp, #20
    76d4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    76d8:	e12fff1e 	bx	lr
    76dc:	e59f305c 	ldr	r3, [pc, #92]	; 7740 <__kernel_cos+0x340>
    76e0:	e3a08000 	mov	r8, #0
    76e4:	e58d2008 	str	r2, [sp, #8]
    76e8:	e58d300c 	str	r3, [sp, #12]
    76ec:	e59f9050 	ldr	r9, [pc, #80]	; 7744 <__kernel_cos+0x344>
    76f0:	eaffffd2 	b	7640 <__kernel_cos+0x240>
    76f4:	e3a00000 	mov	r0, #0
    76f8:	e59f1034 	ldr	r1, [pc, #52]	; 7734 <__kernel_cos+0x334>
    76fc:	eafffff3 	b	76d0 <__kernel_cos+0x2d0>
    7700:	be8838d4 	.word	0xbe8838d4
    7704:	bda8fae9 	.word	0xbda8fae9
    7708:	bdb4b1c4 	.word	0xbdb4b1c4
    770c:	3e21ee9e 	.word	0x3e21ee9e
    7710:	809c52ad 	.word	0x809c52ad
    7714:	3e927e4f 	.word	0x3e927e4f
    7718:	19cb1590 	.word	0x19cb1590
    771c:	3efa01a0 	.word	0x3efa01a0
    7720:	16c15177 	.word	0x16c15177
    7724:	3f56c16c 	.word	0x3f56c16c
    7728:	5555554c 	.word	0x5555554c
    772c:	3fa55555 	.word	0x3fa55555
    7730:	3fe00000 	.word	0x3fe00000
    7734:	3ff00000 	.word	0x3ff00000
    7738:	3fd33332 	.word	0x3fd33332
    773c:	3fe90000 	.word	0x3fe90000
    7740:	3fe70000 	.word	0x3fe70000
    7744:	3fd20000 	.word	0x3fd20000

00007748 <__kernel_rem_pio2>:
    7748:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    774c:	e59feb6c 	ldr	lr, [pc, #2924]	; 82c0 <__kernel_rem_pio2+0xb78>
    7750:	e242c003 	sub	r12, r2, #3
    7754:	e0ce4e9c 	smull	r4, lr, r12, lr
    7758:	e1a0cfcc 	asr	r12, r12, #31
    775c:	e06cc14e 	rsb	r12, r12, lr, asr #2
    7760:	e24ddf99 	sub	sp, sp, #612	; 0x264
    7764:	e1cccfcc 	bic	r12, r12, r12, asr #31
    7768:	e58dc028 	str	r12, [sp, #40]	; 0x28
    776c:	e1a0b003 	mov	r11, r3
    7770:	e59dc288 	ldr	r12, [sp, #648]	; 0x288
    7774:	e59f3b48 	ldr	r3, [pc, #2888]	; 82c4 <__kernel_rem_pio2+0xb7c>
    7778:	e793310c 	ldr	r3, [r3, r12, lsl #2]
    777c:	e59dc028 	ldr	r12, [sp, #40]	; 0x28
    7780:	e58d3020 	str	r3, [sp, #32]
    7784:	e59de020 	ldr	lr, [sp, #32]
    7788:	e1e0300c 	mvn	r3, r12
    778c:	e24b4001 	sub	r4, r11, #1
    7790:	e0833083 	add	r3, r3, r3, lsl #1
    7794:	e58d0010 	str	r0, [sp, #16]
    7798:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
    779c:	e0823183 	add	r3, r2, r3, lsl #3
    77a0:	e094c00e 	adds	r12, r4, lr
    77a4:	e58d400c 	str	r4, [sp, #12]
    77a8:	e58d101c 	str	r1, [sp, #28]
    77ac:	e58d3018 	str	r3, [sp, #24]
    77b0:	e0646000 	rsb	r6, r4, r0
    77b4:	4a000012 	bmi	7804 <__kernel_rem_pio2+0xbc>
    77b8:	e086c00c 	add	r12, r6, r12
    77bc:	e28c4001 	add	r4, r12, #1
    77c0:	e59dc28c 	ldr	r12, [sp, #652]	; 0x28c
    77c4:	e28d8080 	add	r8, sp, #128	; 0x80
    77c8:	e08c5106 	add	r5, r12, r6, lsl #2
    77cc:	e3a07000 	mov	r7, #0
    77d0:	ea000006 	b	77f0 <__kernel_rem_pio2+0xa8>
    77d4:	e7950007 	ldr	r0, [r5, r7]
    77d8:	eb000638 	bl	90c0 <__aeabi_i2d>
    77dc:	e2866001 	add	r6, r6, #1
    77e0:	e1560004 	cmp	r6, r4
    77e4:	e8a80003 	stmia	r8!, {r0, r1}
    77e8:	e2877004 	add	r7, r7, #4
    77ec:	0a000004 	beq	7804 <__kernel_rem_pio2+0xbc>
    77f0:	e3560000 	cmp	r6, #0
    77f4:	aafffff6 	bge	77d4 <__kernel_rem_pio2+0x8c>
    77f8:	e3a00000 	mov	r0, #0
    77fc:	e3a01000 	mov	r1, #0
    7800:	eafffff5 	b	77dc <__kernel_rem_pio2+0x94>
    7804:	e59d4020 	ldr	r4, [sp, #32]
    7808:	e3540000 	cmp	r4, #0
    780c:	ba000020 	blt	7894 <__kernel_rem_pio2+0x14c>
    7810:	e59d4020 	ldr	r4, [sp, #32]
    7814:	e28dcf72 	add	r12, sp, #456	; 0x1c8
    7818:	e08cc184 	add	r12, r12, r4, lsl #3
    781c:	e58dc004 	str	r12, [sp, #4]
    7820:	e28dad07 	add	r10, sp, #448	; 0x1c0
    7824:	e1a0800b 	mov	r8, r11
    7828:	e59dc00c 	ldr	r12, [sp, #12]
    782c:	e35c0000 	cmp	r12, #0
    7830:	ba000130 	blt	7cf8 <__kernel_rem_pio2+0x5b0>
    7834:	e28de080 	add	lr, sp, #128	; 0x80
    7838:	e59d9010 	ldr	r9, [sp, #16]
    783c:	e08e7188 	add	r7, lr, r8, lsl #3
    7840:	e3a04000 	mov	r4, #0
    7844:	e3a05000 	mov	r5, #0
    7848:	e3a06000 	mov	r6, #0
    784c:	e937000c 	ldmdb	r7!, {r2, r3}
    7850:	e8b90003 	ldm	r9!, {r0, r1}
    7854:	eb000650 	bl	919c <__aeabi_dmul>
    7858:	e1a02000 	mov	r2, r0
    785c:	e1a03001 	mov	r3, r1
    7860:	e1a00004 	mov	r0, r4
    7864:	e1a01005 	mov	r1, r5
    7868:	eb000547 	bl	8d8c <__adddf3>
    786c:	e2866001 	add	r6, r6, #1
    7870:	e156000b 	cmp	r6, r11
    7874:	e1a04000 	mov	r4, r0
    7878:	e1a05001 	mov	r5, r1
    787c:	1afffff2 	bne	784c <__kernel_rem_pio2+0x104>
    7880:	e8aa0030 	stmia	r10!, {r4, r5}
    7884:	e59d4004 	ldr	r4, [sp, #4]
    7888:	e15a0004 	cmp	r10, r4
    788c:	e2888001 	add	r8, r8, #1
    7890:	1affffe4 	bne	7828 <__kernel_rem_pio2+0xe0>
    7894:	e59dc020 	ldr	r12, [sp, #32]
    7898:	e28d4030 	add	r4, sp, #48	; 0x30
    789c:	e084410c 	add	r4, r4, r12, lsl #2
    78a0:	e58d402c 	str	r4, [sp, #44]	; 0x2c
    78a4:	e58dc004 	str	r12, [sp, #4]
    78a8:	e59d4004 	ldr	r4, [sp, #4]
    78ac:	e28dce26 	add	r12, sp, #608	; 0x260
    78b0:	e1a0a184 	lsl	r10, r4, #3
    78b4:	e08c300a 	add	r3, r12, r10
    78b8:	e3540000 	cmp	r4, #0
    78bc:	e24350a0 	sub	r5, r3, #160	; 0xa0
    78c0:	e8950030 	ldm	r5, {r4, r5}
    78c4:	da00001f 	ble	7948 <__kernel_rem_pio2+0x200>
    78c8:	e59dc004 	ldr	r12, [sp, #4]
    78cc:	e28d802c 	add	r8, sp, #44	; 0x2c
    78d0:	e28ded07 	add	lr, sp, #448	; 0x1c0
    78d4:	e08ea00a 	add	r10, lr, r10
    78d8:	e088910c 	add	r9, r8, r12, lsl #2
    78dc:	e3a02000 	mov	r2, #0
    78e0:	e59f39e0 	ldr	r3, [pc, #2528]	; 82c8 <__kernel_rem_pio2+0xb80>
    78e4:	e1a00004 	mov	r0, r4
    78e8:	e1a01005 	mov	r1, r5
    78ec:	eb00062a 	bl	919c <__aeabi_dmul>
    78f0:	eb0007a1 	bl	977c <__aeabi_d2iz>
    78f4:	eb0005f1 	bl	90c0 <__aeabi_i2d>
    78f8:	e3a02000 	mov	r2, #0
    78fc:	e59f39c8 	ldr	r3, [pc, #2504]	; 82cc <__kernel_rem_pio2+0xb84>
    7900:	e1a06000 	mov	r6, r0
    7904:	e1a07001 	mov	r7, r1
    7908:	eb000623 	bl	919c <__aeabi_dmul>
    790c:	e1a02000 	mov	r2, r0
    7910:	e1a03001 	mov	r3, r1
    7914:	e1a00004 	mov	r0, r4
    7918:	e1a01005 	mov	r1, r5
    791c:	eb000519 	bl	8d88 <__aeabi_dsub>
    7920:	eb000795 	bl	977c <__aeabi_d2iz>
    7924:	e1a02006 	mov	r2, r6
    7928:	e5a80004 	str	r0, [r8, #4]!
    792c:	e1a03007 	mov	r3, r7
    7930:	e93a0003 	ldmdb	r10!, {r0, r1}
    7934:	eb000514 	bl	8d8c <__adddf3>
    7938:	e1580009 	cmp	r8, r9
    793c:	e1a04000 	mov	r4, r0
    7940:	e1a05001 	mov	r5, r1
    7944:	1affffe4 	bne	78dc <__kernel_rem_pio2+0x194>
    7948:	e59d2018 	ldr	r2, [sp, #24]
    794c:	e1a00004 	mov	r0, r4
    7950:	e1a01005 	mov	r1, r5
    7954:	eb00049b 	bl	8bc8 <scalbn>
    7958:	e3a02000 	mov	r2, #0
    795c:	e3a035ff 	mov	r3, #1069547520	; 0x3fc00000
    7960:	e1a04000 	mov	r4, r0
    7964:	e1a05001 	mov	r5, r1
    7968:	eb00060b 	bl	919c <__aeabi_dmul>
    796c:	ebfff577 	bl	4f50 <floor>
    7970:	e3a02000 	mov	r2, #0
    7974:	e59f3954 	ldr	r3, [pc, #2388]	; 82d0 <__kernel_rem_pio2+0xb88>
    7978:	eb000607 	bl	919c <__aeabi_dmul>
    797c:	e1a02000 	mov	r2, r0
    7980:	e1a03001 	mov	r3, r1
    7984:	e1a00004 	mov	r0, r4
    7988:	e1a01005 	mov	r1, r5
    798c:	eb0004fd 	bl	8d88 <__aeabi_dsub>
    7990:	e1a04000 	mov	r4, r0
    7994:	e1a05001 	mov	r5, r1
    7998:	eb000777 	bl	977c <__aeabi_d2iz>
    799c:	e1a08000 	mov	r8, r0
    79a0:	eb0005c6 	bl	90c0 <__aeabi_i2d>
    79a4:	e1a02000 	mov	r2, r0
    79a8:	e1a03001 	mov	r3, r1
    79ac:	e1a00004 	mov	r0, r4
    79b0:	e1a01005 	mov	r1, r5
    79b4:	eb0004f3 	bl	8d88 <__aeabi_dsub>
    79b8:	e59d4018 	ldr	r4, [sp, #24]
    79bc:	e3540000 	cmp	r4, #0
    79c0:	e1a06000 	mov	r6, r0
    79c4:	e1a07001 	mov	r7, r1
    79c8:	da0000ad 	ble	7c84 <__kernel_rem_pio2+0x53c>
    79cc:	e59dc004 	ldr	r12, [sp, #4]
    79d0:	e28dee26 	add	lr, sp, #608	; 0x260
    79d4:	e24c2001 	sub	r2, r12, #1
    79d8:	e08e2102 	add	r2, lr, r2, lsl #2
    79dc:	e5120230 	ldr	r0, [r2, #-560]	; 0xfffffdd0
    79e0:	e2643018 	rsb	r3, r4, #24
    79e4:	e1a01350 	asr	r1, r0, r3
    79e8:	e0403311 	sub	r3, r0, r1, lsl r3
    79ec:	e2645017 	rsb	r5, r4, #23
    79f0:	e1a05553 	asr	r5, r3, r5
    79f4:	e5023230 	str	r3, [r2, #-560]	; 0xfffffdd0
    79f8:	e0888001 	add	r8, r8, r1
    79fc:	e3550000 	cmp	r5, #0
    7a00:	da000027 	ble	7aa4 <__kernel_rem_pio2+0x35c>
    7a04:	e59d4004 	ldr	r4, [sp, #4]
    7a08:	e3540000 	cmp	r4, #0
    7a0c:	e2888001 	add	r8, r8, #1
    7a10:	da0000b6 	ble	7cf0 <__kernel_rem_pio2+0x5a8>
    7a14:	e28d3030 	add	r3, sp, #48	; 0x30
    7a18:	e0830104 	add	r0, r3, r4, lsl #2
    7a1c:	e3a04000 	mov	r4, #0
    7a20:	ea000005 	b	7a3c <__kernel_rem_pio2+0x2f4>
    7a24:	e3520000 	cmp	r2, #0
    7a28:	12622401 	rsbne	r2, r2, #16777216	; 0x1000000
    7a2c:	15032004 	strne	r2, [r3, #-4]
    7a30:	13a04001 	movne	r4, #1
    7a34:	e1530000 	cmp	r3, r0
    7a38:	0a000008 	beq	7a60 <__kernel_rem_pio2+0x318>
    7a3c:	e3540000 	cmp	r4, #0
    7a40:	e4932004 	ldr	r2, [r3], #4
    7a44:	0afffff6 	beq	7a24 <__kernel_rem_pio2+0x2dc>
    7a48:	e3e014ff 	mvn	r1, #-16777216	; 0xff000000
    7a4c:	e0621001 	rsb	r1, r2, r1
    7a50:	e1530000 	cmp	r3, r0
    7a54:	e5031004 	str	r1, [r3, #-4]
    7a58:	e3a04001 	mov	r4, #1
    7a5c:	1afffff6 	bne	7a3c <__kernel_rem_pio2+0x2f4>
    7a60:	e59dc018 	ldr	r12, [sp, #24]
    7a64:	e35c0000 	cmp	r12, #0
    7a68:	da00000b 	ble	7a9c <__kernel_rem_pio2+0x354>
    7a6c:	e35c0001 	cmp	r12, #1
    7a70:	0a00008a 	beq	7ca0 <__kernel_rem_pio2+0x558>
    7a74:	e35c0002 	cmp	r12, #2
    7a78:	1a000007 	bne	7a9c <__kernel_rem_pio2+0x354>
    7a7c:	e59dc004 	ldr	r12, [sp, #4]
    7a80:	e28dee26 	add	lr, sp, #608	; 0x260
    7a84:	e24c3001 	sub	r3, r12, #1
    7a88:	e08e3103 	add	r3, lr, r3, lsl #2
    7a8c:	e5132230 	ldr	r2, [r3, #-560]	; 0xfffffdd0
    7a90:	e3c224ff 	bic	r2, r2, #-16777216	; 0xff000000
    7a94:	e3c22503 	bic	r2, r2, #12582912	; 0xc00000
    7a98:	e5032230 	str	r2, [r3, #-560]	; 0xfffffdd0
    7a9c:	e3550002 	cmp	r5, #2
    7aa0:	0a000062 	beq	7c30 <__kernel_rem_pio2+0x4e8>
    7aa4:	e1a00006 	mov	r0, r6
    7aa8:	e1a01007 	mov	r1, r7
    7aac:	e3a02000 	mov	r2, #0
    7ab0:	e3a03000 	mov	r3, #0
    7ab4:	eb000712 	bl	9704 <__aeabi_dcmpeq>
    7ab8:	e3500000 	cmp	r0, #0
    7abc:	0a000090 	beq	7d04 <__kernel_rem_pio2+0x5bc>
    7ac0:	e59d4004 	ldr	r4, [sp, #4]
    7ac4:	e59dc020 	ldr	r12, [sp, #32]
    7ac8:	e2440001 	sub	r0, r4, #1
    7acc:	e15c0000 	cmp	r12, r0
    7ad0:	ca000009 	bgt	7afc <__kernel_rem_pio2+0x3b4>
    7ad4:	e28de030 	add	lr, sp, #48	; 0x30
    7ad8:	e59dc02c 	ldr	r12, [sp, #44]	; 0x2c
    7adc:	e08e3104 	add	r3, lr, r4, lsl #2
    7ae0:	e3a02000 	mov	r2, #0
    7ae4:	e5331004 	ldr	r1, [r3, #-4]!
    7ae8:	e153000c 	cmp	r3, r12
    7aec:	e1822001 	orr	r2, r2, r1
    7af0:	1afffffb 	bne	7ae4 <__kernel_rem_pio2+0x39c>
    7af4:	e3520000 	cmp	r2, #0
    7af8:	1a0001c9 	bne	8224 <__kernel_rem_pio2+0xadc>
    7afc:	e59d4020 	ldr	r4, [sp, #32]
    7b00:	e2442001 	sub	r2, r4, #1
    7b04:	e1a02102 	lsl	r2, r2, #2
    7b08:	e28dce26 	add	r12, sp, #608	; 0x260
    7b0c:	e08c3002 	add	r3, r12, r2
    7b10:	e5133230 	ldr	r3, [r3, #-560]	; 0xfffffdd0
    7b14:	e3530000 	cmp	r3, #0
    7b18:	1a0001d9 	bne	8284 <__kernel_rem_pio2+0xb3c>
    7b1c:	e28de030 	add	lr, sp, #48	; 0x30
    7b20:	e08e2002 	add	r2, lr, r2
    7b24:	e3a03001 	mov	r3, #1
    7b28:	e5321004 	ldr	r1, [r2, #-4]!
    7b2c:	e3510000 	cmp	r1, #0
    7b30:	e2833001 	add	r3, r3, #1
    7b34:	0afffffb 	beq	7b28 <__kernel_rem_pio2+0x3e0>
    7b38:	e59d4004 	ldr	r4, [sp, #4]
    7b3c:	e0843003 	add	r3, r4, r3
    7b40:	e2848001 	add	r8, r4, #1
    7b44:	e1580003 	cmp	r8, r3
    7b48:	e58d3024 	str	r3, [sp, #36]	; 0x24
    7b4c:	ca000031 	bgt	7c18 <__kernel_rem_pio2+0x4d0>
    7b50:	e59d4004 	ldr	r4, [sp, #4]
    7b54:	e59dc028 	ldr	r12, [sp, #40]	; 0x28
    7b58:	e084300c 	add	r3, r4, r12
    7b5c:	e59dc28c 	ldr	r12, [sp, #652]	; 0x28c
    7b60:	e59d400c 	ldr	r4, [sp, #12]
    7b64:	e08c3103 	add	r3, r12, r3, lsl #2
    7b68:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
    7b6c:	e0849008 	add	r9, r4, r8
    7b70:	e28d4d07 	add	r4, sp, #448	; 0x1c0
    7b74:	e0844188 	add	r4, r4, r8, lsl #3
    7b78:	e28cc001 	add	r12, r12, #1
    7b7c:	e28de080 	add	lr, sp, #128	; 0x80
    7b80:	e98d0018 	stmib	sp, {r3, r4}
    7b84:	e58dc014 	str	r12, [sp, #20]
    7b88:	e08e9189 	add	r9, lr, r9, lsl #3
    7b8c:	e59d4004 	ldr	r4, [sp, #4]
    7b90:	e5b40004 	ldr	r0, [r4, #4]!
    7b94:	e58d4004 	str	r4, [sp, #4]
    7b98:	eb000548 	bl	90c0 <__aeabi_i2d>
    7b9c:	e59dc00c 	ldr	r12, [sp, #12]
    7ba0:	e35c0000 	cmp	r12, #0
    7ba4:	e8a90003 	stmia	r9!, {r0, r1}
    7ba8:	ba00001d 	blt	7c24 <__kernel_rem_pio2+0x4dc>
    7bac:	e088700b 	add	r7, r8, r11
    7bb0:	e28de080 	add	lr, sp, #128	; 0x80
    7bb4:	e59da010 	ldr	r10, [sp, #16]
    7bb8:	e08e7187 	add	r7, lr, r7, lsl #3
    7bbc:	e3a04000 	mov	r4, #0
    7bc0:	e3a05000 	mov	r5, #0
    7bc4:	e3a06000 	mov	r6, #0
    7bc8:	e937000c 	ldmdb	r7!, {r2, r3}
    7bcc:	e8ba0003 	ldm	r10!, {r0, r1}
    7bd0:	eb000571 	bl	919c <__aeabi_dmul>
    7bd4:	e1a02000 	mov	r2, r0
    7bd8:	e1a03001 	mov	r3, r1
    7bdc:	e1a00004 	mov	r0, r4
    7be0:	e1a01005 	mov	r1, r5
    7be4:	eb000468 	bl	8d8c <__adddf3>
    7be8:	e2866001 	add	r6, r6, #1
    7bec:	e156000b 	cmp	r6, r11
    7bf0:	e1a04000 	mov	r4, r0
    7bf4:	e1a05001 	mov	r5, r1
    7bf8:	1afffff2 	bne	7bc8 <__kernel_rem_pio2+0x480>
    7bfc:	e59dc014 	ldr	r12, [sp, #20]
    7c00:	e2888001 	add	r8, r8, #1
    7c04:	e158000c 	cmp	r8, r12
    7c08:	e59dc008 	ldr	r12, [sp, #8]
    7c0c:	e8ac0030 	stmia	r12!, {r4, r5}
    7c10:	e58dc008 	str	r12, [sp, #8]
    7c14:	1affffdc 	bne	7b8c <__kernel_rem_pio2+0x444>
    7c18:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
    7c1c:	e58dc004 	str	r12, [sp, #4]
    7c20:	eaffff20 	b	78a8 <__kernel_rem_pio2+0x160>
    7c24:	e3a04000 	mov	r4, #0
    7c28:	e3a05000 	mov	r5, #0
    7c2c:	eafffff2 	b	7bfc <__kernel_rem_pio2+0x4b4>
    7c30:	e1a02006 	mov	r2, r6
    7c34:	e1a03007 	mov	r3, r7
    7c38:	e3a00000 	mov	r0, #0
    7c3c:	e59f1690 	ldr	r1, [pc, #1680]	; 82d4 <__kernel_rem_pio2+0xb8c>
    7c40:	eb000450 	bl	8d88 <__aeabi_dsub>
    7c44:	e3540000 	cmp	r4, #0
    7c48:	e1a06000 	mov	r6, r0
    7c4c:	e1a07001 	mov	r7, r1
    7c50:	0affff93 	beq	7aa4 <__kernel_rem_pio2+0x35c>
    7c54:	e59d2018 	ldr	r2, [sp, #24]
    7c58:	e3a00000 	mov	r0, #0
    7c5c:	e59f1670 	ldr	r1, [pc, #1648]	; 82d4 <__kernel_rem_pio2+0xb8c>
    7c60:	eb0003d8 	bl	8bc8 <scalbn>
    7c64:	e1a02000 	mov	r2, r0
    7c68:	e1a03001 	mov	r3, r1
    7c6c:	e1a00006 	mov	r0, r6
    7c70:	e1a01007 	mov	r1, r7
    7c74:	eb000443 	bl	8d88 <__aeabi_dsub>
    7c78:	e1a06000 	mov	r6, r0
    7c7c:	e1a07001 	mov	r7, r1
    7c80:	eaffff87 	b	7aa4 <__kernel_rem_pio2+0x35c>
    7c84:	1a00000e 	bne	7cc4 <__kernel_rem_pio2+0x57c>
    7c88:	e59d4004 	ldr	r4, [sp, #4]
    7c8c:	e28dce26 	add	r12, sp, #608	; 0x260
    7c90:	e08c3104 	add	r3, r12, r4, lsl #2
    7c94:	e5135234 	ldr	r5, [r3, #-564]	; 0xfffffdcc
    7c98:	e1a05bc5 	asr	r5, r5, #23
    7c9c:	eaffff56 	b	79fc <__kernel_rem_pio2+0x2b4>
    7ca0:	e59dc004 	ldr	r12, [sp, #4]
    7ca4:	e28dee26 	add	lr, sp, #608	; 0x260
    7ca8:	e24c3001 	sub	r3, r12, #1
    7cac:	e08e3103 	add	r3, lr, r3, lsl #2
    7cb0:	e5132230 	ldr	r2, [r3, #-560]	; 0xfffffdd0
    7cb4:	e3c224ff 	bic	r2, r2, #-16777216	; 0xff000000
    7cb8:	e3c22502 	bic	r2, r2, #8388608	; 0x800000
    7cbc:	e5032230 	str	r2, [r3, #-560]	; 0xfffffdd0
    7cc0:	eaffff75 	b	7a9c <__kernel_rem_pio2+0x354>
    7cc4:	e3a02000 	mov	r2, #0
    7cc8:	e59f3608 	ldr	r3, [pc, #1544]	; 82d8 <__kernel_rem_pio2+0xb90>
    7ccc:	eb00069e 	bl	974c <__aeabi_dcmpge>
    7cd0:	e3500000 	cmp	r0, #0
    7cd4:	03a05000 	moveq	r5, #0
    7cd8:	0affff71 	beq	7aa4 <__kernel_rem_pio2+0x35c>
    7cdc:	e59d4004 	ldr	r4, [sp, #4]
    7ce0:	e3540000 	cmp	r4, #0
    7ce4:	e3a05002 	mov	r5, #2
    7ce8:	e2888001 	add	r8, r8, #1
    7cec:	caffff48 	bgt	7a14 <__kernel_rem_pio2+0x2cc>
    7cf0:	e3a04000 	mov	r4, #0
    7cf4:	eaffff59 	b	7a60 <__kernel_rem_pio2+0x318>
    7cf8:	e3a04000 	mov	r4, #0
    7cfc:	e3a05000 	mov	r5, #0
    7d00:	eafffede 	b	7880 <__kernel_rem_pio2+0x138>
    7d04:	e59d4018 	ldr	r4, [sp, #24]
    7d08:	e1a00006 	mov	r0, r6
    7d0c:	e2642000 	rsb	r2, r4, #0
    7d10:	e1a01007 	mov	r1, r7
    7d14:	e58d500c 	str	r5, [sp, #12]
    7d18:	e58d8010 	str	r8, [sp, #16]
    7d1c:	eb0003a9 	bl	8bc8 <scalbn>
    7d20:	e3a02000 	mov	r2, #0
    7d24:	e59f35a0 	ldr	r3, [pc, #1440]	; 82cc <__kernel_rem_pio2+0xb84>
    7d28:	e1a04000 	mov	r4, r0
    7d2c:	e1a05001 	mov	r5, r1
    7d30:	eb000685 	bl	974c <__aeabi_dcmpge>
    7d34:	e3500000 	cmp	r0, #0
    7d38:	0a000153 	beq	828c <__kernel_rem_pio2+0xb44>
    7d3c:	e3a02000 	mov	r2, #0
    7d40:	e59f3580 	ldr	r3, [pc, #1408]	; 82c8 <__kernel_rem_pio2+0xb80>
    7d44:	e1a00004 	mov	r0, r4
    7d48:	e1a01005 	mov	r1, r5
    7d4c:	eb000512 	bl	919c <__aeabi_dmul>
    7d50:	eb000689 	bl	977c <__aeabi_d2iz>
    7d54:	eb0004d9 	bl	90c0 <__aeabi_i2d>
    7d58:	e3a02000 	mov	r2, #0
    7d5c:	e59f3568 	ldr	r3, [pc, #1384]	; 82cc <__kernel_rem_pio2+0xb84>
    7d60:	e1a06000 	mov	r6, r0
    7d64:	e1a07001 	mov	r7, r1
    7d68:	eb00050b 	bl	919c <__aeabi_dmul>
    7d6c:	e1a02000 	mov	r2, r0
    7d70:	e1a03001 	mov	r3, r1
    7d74:	e1a00004 	mov	r0, r4
    7d78:	e1a01005 	mov	r1, r5
    7d7c:	eb000401 	bl	8d88 <__aeabi_dsub>
    7d80:	eb00067d 	bl	977c <__aeabi_d2iz>
    7d84:	e59d4004 	ldr	r4, [sp, #4]
    7d88:	e28dce26 	add	r12, sp, #608	; 0x260
    7d8c:	e08c3104 	add	r3, r12, r4, lsl #2
    7d90:	e5030230 	str	r0, [r3, #-560]	; 0xfffffdd0
    7d94:	e1a01007 	mov	r1, r7
    7d98:	e1a00006 	mov	r0, r6
    7d9c:	eb000676 	bl	977c <__aeabi_d2iz>
    7da0:	e2844001 	add	r4, r4, #1
    7da4:	e28dee26 	add	lr, sp, #608	; 0x260
    7da8:	e08e3104 	add	r3, lr, r4, lsl #2
    7dac:	e58d4004 	str	r4, [sp, #4]
    7db0:	e59d4018 	ldr	r4, [sp, #24]
    7db4:	e2844018 	add	r4, r4, #24
    7db8:	e58d4018 	str	r4, [sp, #24]
    7dbc:	e5030230 	str	r0, [r3, #-560]	; 0xfffffdd0
    7dc0:	e3a00000 	mov	r0, #0
    7dc4:	e59f1508 	ldr	r1, [pc, #1288]	; 82d4 <__kernel_rem_pio2+0xb8c>
    7dc8:	e59d2018 	ldr	r2, [sp, #24]
    7dcc:	eb00037d 	bl	8bc8 <scalbn>
    7dd0:	e59dc004 	ldr	r12, [sp, #4]
    7dd4:	e35c0000 	cmp	r12, #0
    7dd8:	e1a04000 	mov	r4, r0
    7ddc:	e1a05001 	mov	r5, r1
    7de0:	ba00003b 	blt	7ed4 <__kernel_rem_pio2+0x78c>
    7de4:	e28c6001 	add	r6, r12, #1
    7de8:	e28d9d07 	add	r9, sp, #448	; 0x1c0
    7dec:	e28de030 	add	lr, sp, #48	; 0x30
    7df0:	e08e7106 	add	r7, lr, r6, lsl #2
    7df4:	e0896186 	add	r6, r9, r6, lsl #3
    7df8:	e5370004 	ldr	r0, [r7, #-4]!
    7dfc:	eb0004af 	bl	90c0 <__aeabi_i2d>
    7e00:	e1a02004 	mov	r2, r4
    7e04:	e1a03005 	mov	r3, r5
    7e08:	eb0004e3 	bl	919c <__aeabi_dmul>
    7e0c:	e3a02000 	mov	r2, #0
    7e10:	e9260003 	stmdb	r6!, {r0, r1}
    7e14:	e59f34ac 	ldr	r3, [pc, #1196]	; 82c8 <__kernel_rem_pio2+0xb80>
    7e18:	e1a00004 	mov	r0, r4
    7e1c:	e1a01005 	mov	r1, r5
    7e20:	eb0004dd 	bl	919c <__aeabi_dmul>
    7e24:	e1560009 	cmp	r6, r9
    7e28:	e1a04000 	mov	r4, r0
    7e2c:	e1a05001 	mov	r5, r1
    7e30:	1afffff0 	bne	7df8 <__kernel_rem_pio2+0x6b0>
    7e34:	e59da004 	ldr	r10, [sp, #4]
    7e38:	e59db020 	ldr	r11, [sp, #32]
    7e3c:	e58da008 	str	r10, [sp, #8]
    7e40:	e3a08000 	mov	r8, #0
    7e44:	e35b0000 	cmp	r11, #0
    7e48:	b3a04000 	movlt	r4, #0
    7e4c:	b3a05000 	movlt	r5, #0
    7e50:	ba000015 	blt	7eac <__kernel_rem_pio2+0x764>
    7e54:	e59d4008 	ldr	r4, [sp, #8]
    7e58:	e59fa47c 	ldr	r10, [pc, #1148]	; 82dc <__kernel_rem_pio2+0xb94>
    7e5c:	e0897184 	add	r7, r9, r4, lsl #3
    7e60:	e3a05000 	mov	r5, #0
    7e64:	e3a04000 	mov	r4, #0
    7e68:	e3a06000 	mov	r6, #0
    7e6c:	ea000001 	b	7e78 <__kernel_rem_pio2+0x730>
    7e70:	e1560008 	cmp	r6, r8
    7e74:	ca00000c 	bgt	7eac <__kernel_rem_pio2+0x764>
    7e78:	e8b7000c 	ldm	r7!, {r2, r3}
    7e7c:	e8ba0003 	ldm	r10!, {r0, r1}
    7e80:	eb0004c5 	bl	919c <__aeabi_dmul>
    7e84:	e1a02000 	mov	r2, r0
    7e88:	e1a03001 	mov	r3, r1
    7e8c:	e1a00004 	mov	r0, r4
    7e90:	e1a01005 	mov	r1, r5
    7e94:	eb0003bc 	bl	8d8c <__adddf3>
    7e98:	e2866001 	add	r6, r6, #1
    7e9c:	e15b0006 	cmp	r11, r6
    7ea0:	e1a04000 	mov	r4, r0
    7ea4:	e1a05001 	mov	r5, r1
    7ea8:	aafffff0 	bge	7e70 <__kernel_rem_pio2+0x728>
    7eac:	e59dc008 	ldr	r12, [sp, #8]
    7eb0:	e28d0e26 	add	r0, sp, #608	; 0x260
    7eb4:	e24cc001 	sub	r12, r12, #1
    7eb8:	e0803188 	add	r3, r0, r8, lsl #3
    7ebc:	e37c0001 	cmn	r12, #1
    7ec0:	e58dc008 	str	r12, [sp, #8]
    7ec4:	e5034140 	str	r4, [r3, #-320]	; 0xfffffec0
    7ec8:	e503513c 	str	r5, [r3, #-316]	; 0xfffffec4
    7ecc:	e2888001 	add	r8, r8, #1
    7ed0:	1affffdb 	bne	7e44 <__kernel_rem_pio2+0x6fc>
    7ed4:	e59dc288 	ldr	r12, [sp, #648]	; 0x288
    7ed8:	e35c0003 	cmp	r12, #3
    7edc:	979ff10c 	ldrls	pc, [pc, r12, lsl #2]
    7ee0:	ea000015 	b	7f3c <__kernel_rem_pio2+0x7f4>
    7ee4:	000081c4 	.word	0x000081c4
    7ee8:	000080e0 	.word	0x000080e0
    7eec:	000080e0 	.word	0x000080e0
    7ef0:	00007f50 	.word	0x00007f50
    7ef4:	e59d000c 	ldr	r0, [sp, #12]
    7ef8:	e3a0c000 	mov	r12, #0
    7efc:	e3500000 	cmp	r0, #0
    7f00:	e1a0400c 	mov	r4, r12
    7f04:	0a000068 	beq	80ac <__kernel_rem_pio2+0x964>
    7f08:	e59d2124 	ldr	r2, [sp, #292]	; 0x124
    7f0c:	e59d001c 	ldr	r0, [sp, #28]
    7f10:	e59d1120 	ldr	r1, [sp, #288]	; 0x120
    7f14:	e2822102 	add	r2, r2, #-2147483648	; 0x80000000
    7f18:	e59d312c 	ldr	r3, [sp, #300]	; 0x12c
    7f1c:	e8800006 	stm	r0, {r1, r2}
    7f20:	e59d2128 	ldr	r2, [sp, #296]	; 0x128
    7f24:	e2833102 	add	r3, r3, #-2147483648	; 0x80000000
    7f28:	e2844102 	add	r4, r4, #-2147483648	; 0x80000000
    7f2c:	e5802008 	str	r2, [r0, #8]
    7f30:	e580300c 	str	r3, [r0, #12]
    7f34:	e580c010 	str	r12, [r0, #16]
    7f38:	e5804014 	str	r4, [r0, #20]
    7f3c:	e59d4010 	ldr	r4, [sp, #16]
    7f40:	e2040007 	and	r0, r4, #7
    7f44:	e28ddf99 	add	sp, sp, #612	; 0x264
    7f48:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    7f4c:	e12fff1e 	bx	lr
    7f50:	e59d4004 	ldr	r4, [sp, #4]
    7f54:	e3540000 	cmp	r4, #0
    7f58:	daffffe5 	ble	7ef4 <__kernel_rem_pio2+0x7ac>
    7f5c:	e59d4004 	ldr	r4, [sp, #4]
    7f60:	e28dbe12 	add	r11, sp, #288	; 0x120
    7f64:	e08ba184 	add	r10, r11, r4, lsl #3
    7f68:	e58da008 	str	r10, [sp, #8]
    7f6c:	e58da014 	str	r10, [sp, #20]
    7f70:	e93a0300 	ldmdb	r10!, {r8, r9}
    7f74:	e28a7008 	add	r7, r10, #8
    7f78:	e89700c0 	ldm	r7, {r6, r7}
    7f7c:	e1a00008 	mov	r0, r8
    7f80:	e1a02006 	mov	r2, r6
    7f84:	e1a03007 	mov	r3, r7
    7f88:	e1a01009 	mov	r1, r9
    7f8c:	eb00037e 	bl	8d8c <__adddf3>
    7f90:	e1a04000 	mov	r4, r0
    7f94:	e1a05001 	mov	r5, r1
    7f98:	e1a02004 	mov	r2, r4
    7f9c:	e1a03005 	mov	r3, r5
    7fa0:	e1a00008 	mov	r0, r8
    7fa4:	e1a01009 	mov	r1, r9
    7fa8:	eb000376 	bl	8d88 <__aeabi_dsub>
    7fac:	e1a02000 	mov	r2, r0
    7fb0:	e1a03001 	mov	r3, r1
    7fb4:	e1a00006 	mov	r0, r6
    7fb8:	e1a01007 	mov	r1, r7
    7fbc:	eb000372 	bl	8d8c <__adddf3>
    7fc0:	e59dc008 	ldr	r12, [sp, #8]
    7fc4:	e58a0008 	str	r0, [r10, #8]
    7fc8:	e58a100c 	str	r1, [r10, #12]
    7fcc:	e92c0030 	stmdb	r12!, {r4, r5}
    7fd0:	e15a000b 	cmp	r10, r11
    7fd4:	e58dc008 	str	r12, [sp, #8]
    7fd8:	1affffe4 	bne	7f70 <__kernel_rem_pio2+0x828>
    7fdc:	e59d4004 	ldr	r4, [sp, #4]
    7fe0:	e3540001 	cmp	r4, #1
    7fe4:	e59da014 	ldr	r10, [sp, #20]
    7fe8:	daffffc1 	ble	7ef4 <__kernel_rem_pio2+0x7ac>
    7fec:	e28bc008 	add	r12, r11, #8
    7ff0:	e58dc008 	str	r12, [sp, #8]
    7ff4:	e1a0c00a 	mov	r12, r10
    7ff8:	e93a0300 	ldmdb	r10!, {r8, r9}
    7ffc:	e28a7008 	add	r7, r10, #8
    8000:	e89700c0 	ldm	r7, {r6, r7}
    8004:	e1a00008 	mov	r0, r8
    8008:	e1a02006 	mov	r2, r6
    800c:	e1a03007 	mov	r3, r7
    8010:	e1a01009 	mov	r1, r9
    8014:	e58dc000 	str	r12, [sp]
    8018:	eb00035b 	bl	8d8c <__adddf3>
    801c:	e1a04000 	mov	r4, r0
    8020:	e1a05001 	mov	r5, r1
    8024:	e1a02004 	mov	r2, r4
    8028:	e1a03005 	mov	r3, r5
    802c:	e1a00008 	mov	r0, r8
    8030:	e1a01009 	mov	r1, r9
    8034:	eb000353 	bl	8d88 <__aeabi_dsub>
    8038:	e1a02000 	mov	r2, r0
    803c:	e1a03001 	mov	r3, r1
    8040:	e1a00006 	mov	r0, r6
    8044:	e1a01007 	mov	r1, r7
    8048:	eb00034f 	bl	8d8c <__adddf3>
    804c:	e59de008 	ldr	lr, [sp, #8]
    8050:	e59dc000 	ldr	r12, [sp]
    8054:	e15a000e 	cmp	r10, lr
    8058:	e58a0008 	str	r0, [r10, #8]
    805c:	e58a100c 	str	r1, [r10, #12]
    8060:	e92c0030 	stmdb	r12!, {r4, r5}
    8064:	1affffe3 	bne	7ff8 <__kernel_rem_pio2+0x8b0>
    8068:	e59d4004 	ldr	r4, [sp, #4]
    806c:	e3a0c000 	mov	r12, #0
    8070:	e2845001 	add	r5, r4, #1
    8074:	e08b5185 	add	r5, r11, r5, lsl #3
    8078:	e1a0400c 	mov	r4, r12
    807c:	e28bb010 	add	r11, r11, #16
    8080:	e1a0000c 	mov	r0, r12
    8084:	e1a01004 	mov	r1, r4
    8088:	e935000c 	ldmdb	r5!, {r2, r3}
    808c:	eb00033e 	bl	8d8c <__adddf3>
    8090:	e155000b 	cmp	r5, r11
    8094:	e1a0c000 	mov	r12, r0
    8098:	e1a04001 	mov	r4, r1
    809c:	1afffff7 	bne	8080 <__kernel_rem_pio2+0x938>
    80a0:	e59d000c 	ldr	r0, [sp, #12]
    80a4:	e3500000 	cmp	r0, #0
    80a8:	1affff96 	bne	7f08 <__kernel_rem_pio2+0x7c0>
    80ac:	e1a03004 	mov	r3, r4
    80b0:	e28d1e12 	add	r1, sp, #288	; 0x120
    80b4:	e8910003 	ldm	r1, {r0, r1}
    80b8:	e59d401c 	ldr	r4, [sp, #28]
    80bc:	e8840003 	stm	r4, {r0, r1}
    80c0:	e28d1f4a 	add	r1, sp, #296	; 0x128
    80c4:	e8910003 	ldm	r1, {r0, r1}
    80c8:	e1a0200c 	mov	r2, r12
    80cc:	e5840008 	str	r0, [r4, #8]
    80d0:	e584100c 	str	r1, [r4, #12]
    80d4:	e5842010 	str	r2, [r4, #16]
    80d8:	e5843014 	str	r3, [r4, #20]
    80dc:	eaffff96 	b	7f3c <__kernel_rem_pio2+0x7f4>
    80e0:	e59dc004 	ldr	r12, [sp, #4]
    80e4:	e35c0000 	cmp	r12, #0
    80e8:	b3a0e000 	movlt	lr, #0
    80ec:	b1a0c00e 	movlt	r12, lr
    80f0:	ba00000d 	blt	812c <__kernel_rem_pio2+0x9e4>
    80f4:	e59dc004 	ldr	r12, [sp, #4]
    80f8:	e28d5e12 	add	r5, sp, #288	; 0x120
    80fc:	e28c4001 	add	r4, r12, #1
    8100:	e3a0e000 	mov	lr, #0
    8104:	e0854184 	add	r4, r5, r4, lsl #3
    8108:	e1a0c00e 	mov	r12, lr
    810c:	e1a0000e 	mov	r0, lr
    8110:	e1a0100c 	mov	r1, r12
    8114:	e934000c 	ldmdb	r4!, {r2, r3}
    8118:	eb00031b 	bl	8d8c <__adddf3>
    811c:	e1540005 	cmp	r4, r5
    8120:	e1a0e000 	mov	lr, r0
    8124:	e1a0c001 	mov	r12, r1
    8128:	1afffff7 	bne	810c <__kernel_rem_pio2+0x9c4>
    812c:	e59d400c 	ldr	r4, [sp, #12]
    8130:	e3540000 	cmp	r4, #0
    8134:	128c3102 	addne	r3, r12, #-2147483648	; 0x80000000
    8138:	01a0300c 	moveq	r3, r12
    813c:	e1a01003 	mov	r1, r3
    8140:	e1a0300c 	mov	r3, r12
    8144:	e59dc01c 	ldr	r12, [sp, #28]
    8148:	e1a0000e 	mov	r0, lr
    814c:	e88c0003 	stm	r12, {r0, r1}
    8150:	e1a0200e 	mov	r2, lr
    8154:	e28d1e12 	add	r1, sp, #288	; 0x120
    8158:	e8910003 	ldm	r1, {r0, r1}
    815c:	eb000309 	bl	8d88 <__aeabi_dsub>
    8160:	e59d4004 	ldr	r4, [sp, #4]
    8164:	e3540000 	cmp	r4, #0
    8168:	e1a05000 	mov	r5, r0
    816c:	e1a0c001 	mov	r12, r1
    8170:	da00000a 	ble	81a0 <__kernel_rem_pio2+0xa58>
    8174:	e59de004 	ldr	lr, [sp, #4]
    8178:	e28d4f4a 	add	r4, sp, #296	; 0x128
    817c:	e084618e 	add	r6, r4, lr, lsl #3
    8180:	e1a00005 	mov	r0, r5
    8184:	e1a0100c 	mov	r1, r12
    8188:	e8b4000c 	ldm	r4!, {r2, r3}
    818c:	eb0002fe 	bl	8d8c <__adddf3>
    8190:	e1540006 	cmp	r4, r6
    8194:	e1a05000 	mov	r5, r0
    8198:	e1a0c001 	mov	r12, r1
    819c:	1afffff7 	bne	8180 <__kernel_rem_pio2+0xa38>
    81a0:	e59d400c 	ldr	r4, [sp, #12]
    81a4:	e3540000 	cmp	r4, #0
    81a8:	128cc102 	addne	r12, r12, #-2147483648	; 0x80000000
    81ac:	e1a0300c 	mov	r3, r12
    81b0:	e59dc01c 	ldr	r12, [sp, #28]
    81b4:	e1a02005 	mov	r2, r5
    81b8:	e58c2008 	str	r2, [r12, #8]
    81bc:	e58c300c 	str	r3, [r12, #12]
    81c0:	eaffff5d 	b	7f3c <__kernel_rem_pio2+0x7f4>
    81c4:	e59d4004 	ldr	r4, [sp, #4]
    81c8:	e3540000 	cmp	r4, #0
    81cc:	ba000038 	blt	82b4 <__kernel_rem_pio2+0xb6c>
    81d0:	e2846001 	add	r6, r4, #1
    81d4:	e28d5e12 	add	r5, sp, #288	; 0x120
    81d8:	e3a04000 	mov	r4, #0
    81dc:	e0856186 	add	r6, r5, r6, lsl #3
    81e0:	e1a0c004 	mov	r12, r4
    81e4:	e1a00004 	mov	r0, r4
    81e8:	e1a0100c 	mov	r1, r12
    81ec:	e936000c 	ldmdb	r6!, {r2, r3}
    81f0:	eb0002e5 	bl	8d8c <__adddf3>
    81f4:	e1560005 	cmp	r6, r5
    81f8:	e1a04000 	mov	r4, r0
    81fc:	e1a0c001 	mov	r12, r1
    8200:	1afffff7 	bne	81e4 <__kernel_rem_pio2+0xa9c>
    8204:	e59d000c 	ldr	r0, [sp, #12]
    8208:	e3500000 	cmp	r0, #0
    820c:	e1a02004 	mov	r2, r4
    8210:	128cc102 	addne	r12, r12, #-2147483648	; 0x80000000
    8214:	e59d401c 	ldr	r4, [sp, #28]
    8218:	e1a0300c 	mov	r3, r12
    821c:	e884000c 	stm	r4, {r2, r3}
    8220:	eaffff45 	b	7f3c <__kernel_rem_pio2+0x7f4>
    8224:	e1a03100 	lsl	r3, r0, #2
    8228:	e28dce26 	add	r12, sp, #608	; 0x260
    822c:	e08c2003 	add	r2, r12, r3
    8230:	e59d4018 	ldr	r4, [sp, #24]
    8234:	e5122230 	ldr	r2, [r2, #-560]	; 0xfffffdd0
    8238:	e2444018 	sub	r4, r4, #24
    823c:	e3520000 	cmp	r2, #0
    8240:	e58d8010 	str	r8, [sp, #16]
    8244:	e58d500c 	str	r5, [sp, #12]
    8248:	e58d4018 	str	r4, [sp, #24]
    824c:	1a000016 	bne	82ac <__kernel_rem_pio2+0xb64>
    8250:	e28dc030 	add	r12, sp, #48	; 0x30
    8254:	e58d0004 	str	r0, [sp, #4]
    8258:	e08c3003 	add	r3, r12, r3
    825c:	e1a02000 	mov	r2, r0
    8260:	e1a01004 	mov	r1, r4
    8264:	e5330004 	ldr	r0, [r3, #-4]!
    8268:	e3500000 	cmp	r0, #0
    826c:	e2422001 	sub	r2, r2, #1
    8270:	e2411018 	sub	r1, r1, #24
    8274:	0afffffa 	beq	8264 <__kernel_rem_pio2+0xb1c>
    8278:	e58d2004 	str	r2, [sp, #4]
    827c:	e58d1018 	str	r1, [sp, #24]
    8280:	eafffece 	b	7dc0 <__kernel_rem_pio2+0x678>
    8284:	e3a03001 	mov	r3, #1
    8288:	eafffe2a 	b	7b38 <__kernel_rem_pio2+0x3f0>
    828c:	e1a00004 	mov	r0, r4
    8290:	e1a01005 	mov	r1, r5
    8294:	eb000538 	bl	977c <__aeabi_d2iz>
    8298:	e59dc004 	ldr	r12, [sp, #4]
    829c:	e28dee26 	add	lr, sp, #608	; 0x260
    82a0:	e08e310c 	add	r3, lr, r12, lsl #2
    82a4:	e5030230 	str	r0, [r3, #-560]	; 0xfffffdd0
    82a8:	eafffec4 	b	7dc0 <__kernel_rem_pio2+0x678>
    82ac:	e58d0004 	str	r0, [sp, #4]
    82b0:	eafffec2 	b	7dc0 <__kernel_rem_pio2+0x678>
    82b4:	e3a04000 	mov	r4, #0
    82b8:	e1a0c004 	mov	r12, r4
    82bc:	eaffffd0 	b	8204 <__kernel_rem_pio2+0xabc>
    82c0:	2aaaaaab 	.word	0x2aaaaaab
    82c4:	0000a600 	.word	0x0000a600
    82c8:	3e700000 	.word	0x3e700000
    82cc:	41700000 	.word	0x41700000
    82d0:	40200000 	.word	0x40200000
    82d4:	3ff00000 	.word	0x3ff00000
    82d8:	3fe00000 	.word	0x3fe00000
    82dc:	0000a610 	.word	0x0000a610

000082e0 <__kernel_sin>:
    82e0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    82e4:	e3c1c102 	bic	r12, r1, #-2147483648	; 0x80000000
    82e8:	e35c05f9 	cmp	r12, #1044381696	; 0x3e400000
    82ec:	e24dd014 	sub	sp, sp, #20
    82f0:	e1a04000 	mov	r4, r0
    82f4:	e1a05001 	mov	r5, r1
    82f8:	e1a06000 	mov	r6, r0
    82fc:	e1a07001 	mov	r7, r1
    8300:	e1a08002 	mov	r8, r2
    8304:	e1a09003 	mov	r9, r3
    8308:	aa000002 	bge	8318 <__kernel_sin+0x38>
    830c:	eb00051a 	bl	977c <__aeabi_d2iz>
    8310:	e3500000 	cmp	r0, #0
    8314:	0a000052 	beq	8464 <__kernel_sin+0x184>
    8318:	e1a02004 	mov	r2, r4
    831c:	e1a03005 	mov	r3, r5
    8320:	e1a00004 	mov	r0, r4
    8324:	e1a01005 	mov	r1, r5
    8328:	eb00039b 	bl	919c <__aeabi_dmul>
    832c:	e1a02004 	mov	r2, r4
    8330:	e1a03005 	mov	r3, r5
    8334:	e1a06000 	mov	r6, r0
    8338:	e1a07001 	mov	r7, r1
    833c:	eb000396 	bl	919c <__aeabi_dmul>
    8340:	e28f3d06 	add	r3, pc, #384	; 0x180
    8344:	e893000c 	ldm	r3, {r2, r3}
    8348:	e1a0a000 	mov	r10, r0
    834c:	e1a0b001 	mov	r11, r1
    8350:	e1a00006 	mov	r0, r6
    8354:	e1a01007 	mov	r1, r7
    8358:	eb00038f 	bl	919c <__aeabi_dmul>
    835c:	e28f3f5b 	add	r3, pc, #364	; 0x16c
    8360:	e893000c 	ldm	r3, {r2, r3}
    8364:	eb000287 	bl	8d88 <__aeabi_dsub>
    8368:	e1a02006 	mov	r2, r6
    836c:	e1a03007 	mov	r3, r7
    8370:	eb000389 	bl	919c <__aeabi_dmul>
    8374:	e28f3f57 	add	r3, pc, #348	; 0x15c
    8378:	e893000c 	ldm	r3, {r2, r3}
    837c:	eb000282 	bl	8d8c <__adddf3>
    8380:	e1a02006 	mov	r2, r6
    8384:	e1a03007 	mov	r3, r7
    8388:	eb000383 	bl	919c <__aeabi_dmul>
    838c:	e28f3f53 	add	r3, pc, #332	; 0x14c
    8390:	e893000c 	ldm	r3, {r2, r3}
    8394:	eb00027b 	bl	8d88 <__aeabi_dsub>
    8398:	e1a02006 	mov	r2, r6
    839c:	e1a03007 	mov	r3, r7
    83a0:	eb00037d 	bl	919c <__aeabi_dmul>
    83a4:	e28f3f4f 	add	r3, pc, #316	; 0x13c
    83a8:	e893000c 	ldm	r3, {r2, r3}
    83ac:	eb000276 	bl	8d8c <__adddf3>
    83b0:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
    83b4:	e3530000 	cmp	r3, #0
    83b8:	e88d0003 	stm	sp, {r0, r1}
    83bc:	0a00002d 	beq	8478 <__kernel_sin+0x198>
    83c0:	e3a02000 	mov	r2, #0
    83c4:	e59f312c 	ldr	r3, [pc, #300]	; 84f8 <__kernel_sin+0x218>
    83c8:	e1a00008 	mov	r0, r8
    83cc:	e1a01009 	mov	r1, r9
    83d0:	eb000371 	bl	919c <__aeabi_dmul>
    83d4:	e89d000c 	ldm	sp, {r2, r3}
    83d8:	e58d0008 	str	r0, [sp, #8]
    83dc:	e58d100c 	str	r1, [sp, #12]
    83e0:	e1a0000a 	mov	r0, r10
    83e4:	e1a0100b 	mov	r1, r11
    83e8:	eb00036b 	bl	919c <__aeabi_dmul>
    83ec:	e1a02000 	mov	r2, r0
    83f0:	e1a03001 	mov	r3, r1
    83f4:	e28d1008 	add	r1, sp, #8
    83f8:	e8910003 	ldm	r1, {r0, r1}
    83fc:	eb000261 	bl	8d88 <__aeabi_dsub>
    8400:	e1a02006 	mov	r2, r6
    8404:	e1a03007 	mov	r3, r7
    8408:	eb000363 	bl	919c <__aeabi_dmul>
    840c:	e1a02008 	mov	r2, r8
    8410:	e1a03009 	mov	r3, r9
    8414:	eb00025b 	bl	8d88 <__aeabi_dsub>
    8418:	e28f30d0 	add	r3, pc, #208	; 0xd0
    841c:	e893000c 	ldm	r3, {r2, r3}
    8420:	e1a06000 	mov	r6, r0
    8424:	e1a07001 	mov	r7, r1
    8428:	e1a0000a 	mov	r0, r10
    842c:	e1a0100b 	mov	r1, r11
    8430:	eb000359 	bl	919c <__aeabi_dmul>
    8434:	e1a02000 	mov	r2, r0
    8438:	e1a03001 	mov	r3, r1
    843c:	e1a00006 	mov	r0, r6
    8440:	e1a01007 	mov	r1, r7
    8444:	eb000250 	bl	8d8c <__adddf3>
    8448:	e1a02000 	mov	r2, r0
    844c:	e1a03001 	mov	r3, r1
    8450:	e1a00004 	mov	r0, r4
    8454:	e1a01005 	mov	r1, r5
    8458:	eb00024a 	bl	8d88 <__aeabi_dsub>
    845c:	e1a04000 	mov	r4, r0
    8460:	e1a05001 	mov	r5, r1
    8464:	e1a00004 	mov	r0, r4
    8468:	e1a01005 	mov	r1, r5
    846c:	e28dd014 	add	sp, sp, #20
    8470:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    8474:	e12fff1e 	bx	lr
    8478:	e1a02000 	mov	r2, r0
    847c:	e1a03001 	mov	r3, r1
    8480:	e1a00006 	mov	r0, r6
    8484:	e1a01007 	mov	r1, r7
    8488:	eb000343 	bl	919c <__aeabi_dmul>
    848c:	e28f305c 	add	r3, pc, #92	; 0x5c
    8490:	e893000c 	ldm	r3, {r2, r3}
    8494:	eb00023b 	bl	8d88 <__aeabi_dsub>
    8498:	e1a0200a 	mov	r2, r10
    849c:	e1a0300b 	mov	r3, r11
    84a0:	eb00033d 	bl	919c <__aeabi_dmul>
    84a4:	e1a02000 	mov	r2, r0
    84a8:	e1a03001 	mov	r3, r1
    84ac:	e1a00004 	mov	r0, r4
    84b0:	e1a01005 	mov	r1, r5
    84b4:	eb000234 	bl	8d8c <__adddf3>
    84b8:	e1a04000 	mov	r4, r0
    84bc:	e1a05001 	mov	r5, r1
    84c0:	eaffffe7 	b	8464 <__kernel_sin+0x184>
    84c4:	e1a00000 	nop			; (mov r0, r0)
    84c8:	5acfd57c 	.word	0x5acfd57c
    84cc:	3de5d93a 	.word	0x3de5d93a
    84d0:	8a2b9ceb 	.word	0x8a2b9ceb
    84d4:	3e5ae5e6 	.word	0x3e5ae5e6
    84d8:	57b1fe7d 	.word	0x57b1fe7d
    84dc:	3ec71de3 	.word	0x3ec71de3
    84e0:	19c161d5 	.word	0x19c161d5
    84e4:	3f2a01a0 	.word	0x3f2a01a0
    84e8:	1110f8a6 	.word	0x1110f8a6
    84ec:	3f811111 	.word	0x3f811111
    84f0:	55555549 	.word	0x55555549
    84f4:	3fc55555 	.word	0x3fc55555
    84f8:	3fe00000 	.word	0x3fe00000
    84fc:	e1a00000 	nop			; (mov r0, r0)

00008500 <atan>:
    8500:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
    8504:	e1a02001 	mov	r2, r1
    8508:	e1a0a001 	mov	r10, r1
    850c:	e3c16102 	bic	r6, r1, #-2147483648	; 0x80000000
    8510:	e59f1440 	ldr	r1, [pc, #1088]	; 8958 <atan+0x458>
    8514:	e1560001 	cmp	r6, r1
    8518:	e1a08000 	mov	r8, r0
    851c:	e1a0900a 	mov	r9, r10
    8520:	da00000f 	ble	8564 <atan+0x64>
    8524:	e59f1430 	ldr	r1, [pc, #1072]	; 895c <atan+0x45c>
    8528:	e1560001 	cmp	r6, r1
    852c:	ca00007a 	bgt	871c <atan+0x21c>
    8530:	13a01000 	movne	r1, #0
    8534:	03a01001 	moveq	r1, #1
    8538:	e3500000 	cmp	r0, #0
    853c:	03a03000 	moveq	r3, #0
    8540:	12013001 	andne	r3, r1, #1
    8544:	e3530000 	cmp	r3, #0
    8548:	1a000073 	bne	871c <atan+0x21c>
    854c:	e59f340c 	ldr	r3, [pc, #1036]	; 8960 <atan+0x460>
    8550:	e3520000 	cmp	r2, #0
    8554:	e59fa408 	ldr	r10, [pc, #1032]	; 8964 <atan+0x464>
    8558:	e59f8408 	ldr	r8, [pc, #1032]	; 8968 <atan+0x468>
    855c:	c1a0a003 	movgt	r10, r3
    8560:	ea000074 	b	8738 <atan+0x238>
    8564:	e59f3400 	ldr	r3, [pc, #1024]	; 896c <atan+0x46c>
    8568:	e1560003 	cmp	r6, r3
    856c:	ca00007f 	bgt	8770 <atan+0x270>
    8570:	e243376f 	sub	r3, r3, #29097984	; 0x1bc0000
    8574:	e1560003 	cmp	r6, r3
    8578:	da000072 	ble	8748 <atan+0x248>
    857c:	e3e0b000 	mvn	r11, #0
    8580:	e1a02008 	mov	r2, r8
    8584:	e1a0300a 	mov	r3, r10
    8588:	e1a00008 	mov	r0, r8
    858c:	e1a0100a 	mov	r1, r10
    8590:	eb000301 	bl	919c <__aeabi_dmul>
    8594:	e1a02000 	mov	r2, r0
    8598:	e1a03001 	mov	r3, r1
    859c:	e1a06000 	mov	r6, r0
    85a0:	e1a07001 	mov	r7, r1
    85a4:	eb0002fc 	bl	919c <__aeabi_dmul>
    85a8:	e28f3fd2 	add	r3, pc, #840	; 0x348
    85ac:	e893000c 	ldm	r3, {r2, r3}
    85b0:	e1a04000 	mov	r4, r0
    85b4:	e1a05001 	mov	r5, r1
    85b8:	eb0002f7 	bl	919c <__aeabi_dmul>
    85bc:	e28f3fcf 	add	r3, pc, #828	; 0x33c
    85c0:	e893000c 	ldm	r3, {r2, r3}
    85c4:	eb0001f0 	bl	8d8c <__adddf3>
    85c8:	e1a02004 	mov	r2, r4
    85cc:	e1a03005 	mov	r3, r5
    85d0:	eb0002f1 	bl	919c <__aeabi_dmul>
    85d4:	e28f3fcb 	add	r3, pc, #812	; 0x32c
    85d8:	e893000c 	ldm	r3, {r2, r3}
    85dc:	eb0001ea 	bl	8d8c <__adddf3>
    85e0:	e1a02004 	mov	r2, r4
    85e4:	e1a03005 	mov	r3, r5
    85e8:	eb0002eb 	bl	919c <__aeabi_dmul>
    85ec:	e28f3fc7 	add	r3, pc, #796	; 0x31c
    85f0:	e893000c 	ldm	r3, {r2, r3}
    85f4:	eb0001e4 	bl	8d8c <__adddf3>
    85f8:	e1a02004 	mov	r2, r4
    85fc:	e1a03005 	mov	r3, r5
    8600:	eb0002e5 	bl	919c <__aeabi_dmul>
    8604:	e28f3fc3 	add	r3, pc, #780	; 0x30c
    8608:	e893000c 	ldm	r3, {r2, r3}
    860c:	eb0001de 	bl	8d8c <__adddf3>
    8610:	e1a02004 	mov	r2, r4
    8614:	e1a03005 	mov	r3, r5
    8618:	eb0002df 	bl	919c <__aeabi_dmul>
    861c:	e28f3fbf 	add	r3, pc, #764	; 0x2fc
    8620:	e893000c 	ldm	r3, {r2, r3}
    8624:	eb0001d8 	bl	8d8c <__adddf3>
    8628:	e1a02006 	mov	r2, r6
    862c:	e1a03007 	mov	r3, r7
    8630:	eb0002d9 	bl	919c <__aeabi_dmul>
    8634:	e28f3fbb 	add	r3, pc, #748	; 0x2ec
    8638:	e893000c 	ldm	r3, {r2, r3}
    863c:	e1a06000 	mov	r6, r0
    8640:	e1a07001 	mov	r7, r1
    8644:	e1a00004 	mov	r0, r4
    8648:	e1a01005 	mov	r1, r5
    864c:	eb0002d2 	bl	919c <__aeabi_dmul>
    8650:	e28f3fb6 	add	r3, pc, #728	; 0x2d8
    8654:	e893000c 	ldm	r3, {r2, r3}
    8658:	eb0001ca 	bl	8d88 <__aeabi_dsub>
    865c:	e1a02004 	mov	r2, r4
    8660:	e1a03005 	mov	r3, r5
    8664:	eb0002cc 	bl	919c <__aeabi_dmul>
    8668:	e28f3fb2 	add	r3, pc, #712	; 0x2c8
    866c:	e893000c 	ldm	r3, {r2, r3}
    8670:	eb0001c4 	bl	8d88 <__aeabi_dsub>
    8674:	e1a02004 	mov	r2, r4
    8678:	e1a03005 	mov	r3, r5
    867c:	eb0002c6 	bl	919c <__aeabi_dmul>
    8680:	e28f3fae 	add	r3, pc, #696	; 0x2b8
    8684:	e893000c 	ldm	r3, {r2, r3}
    8688:	eb0001be 	bl	8d88 <__aeabi_dsub>
    868c:	e1a02004 	mov	r2, r4
    8690:	e1a03005 	mov	r3, r5
    8694:	eb0002c0 	bl	919c <__aeabi_dmul>
    8698:	e28f3faa 	add	r3, pc, #680	; 0x2a8
    869c:	e893000c 	ldm	r3, {r2, r3}
    86a0:	eb0001b8 	bl	8d88 <__aeabi_dsub>
    86a4:	e1a02004 	mov	r2, r4
    86a8:	e1a03005 	mov	r3, r5
    86ac:	eb0002ba 	bl	919c <__aeabi_dmul>
    86b0:	e37b0001 	cmn	r11, #1
    86b4:	e1a02000 	mov	r2, r0
    86b8:	e1a03001 	mov	r3, r1
    86bc:	e1a00006 	mov	r0, r6
    86c0:	e1a01007 	mov	r1, r7
    86c4:	0a000049 	beq	87f0 <atan+0x2f0>
    86c8:	e59fc2a0 	ldr	r12, [pc, #672]	; 8970 <atan+0x470>
    86cc:	e08cb18b 	add	r11, r12, r11, lsl #3
    86d0:	eb0001ad 	bl	8d8c <__adddf3>
    86d4:	e1a0300a 	mov	r3, r10
    86d8:	e1a02008 	mov	r2, r8
    86dc:	eb0002ae 	bl	919c <__aeabi_dmul>
    86e0:	e28b3020 	add	r3, r11, #32
    86e4:	e893000c 	ldm	r3, {r2, r3}
    86e8:	eb0001a6 	bl	8d88 <__aeabi_dsub>
    86ec:	e1a0300a 	mov	r3, r10
    86f0:	e1a02008 	mov	r2, r8
    86f4:	eb0001a3 	bl	8d88 <__aeabi_dsub>
    86f8:	e1a02000 	mov	r2, r0
    86fc:	e1a03001 	mov	r3, r1
    8700:	e89b0003 	ldm	r11, {r0, r1}
    8704:	eb00019f 	bl	8d88 <__aeabi_dsub>
    8708:	e3590000 	cmp	r9, #0
    870c:	e1a08000 	mov	r8, r0
    8710:	b281a102 	addlt	r10, r1, #-2147483648	; 0x80000000
    8714:	a1a0a001 	movge	r10, r1
    8718:	ea000006 	b	8738 <atan+0x238>
    871c:	e1a00008 	mov	r0, r8
    8720:	e1a02008 	mov	r2, r8
    8724:	e1a0100a 	mov	r1, r10
    8728:	e1a0300a 	mov	r3, r10
    872c:	eb000196 	bl	8d8c <__adddf3>
    8730:	e1a08000 	mov	r8, r0
    8734:	e1a0a001 	mov	r10, r1
    8738:	e1a00008 	mov	r0, r8
    873c:	e1a0100a 	mov	r1, r10
    8740:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
    8744:	e12fff1e 	bx	lr
    8748:	e28f3c02 	add	r3, pc, #512	; 0x200
    874c:	e893000c 	ldm	r3, {r2, r3}
    8750:	e1a0100a 	mov	r1, r10
    8754:	eb00018c 	bl	8d8c <__adddf3>
    8758:	e3a02000 	mov	r2, #0
    875c:	e59f3210 	ldr	r3, [pc, #528]	; 8974 <atan+0x474>
    8760:	eb0003ff 	bl	9764 <__aeabi_dcmpgt>
    8764:	e3500000 	cmp	r0, #0
    8768:	1afffff2 	bne	8738 <atan+0x238>
    876c:	eaffff82 	b	857c <atan+0x7c>
    8770:	e1a0100a 	mov	r1, r10
    8774:	eb000083 	bl	8988 <fabs>
    8778:	e59f31f8 	ldr	r3, [pc, #504]	; 8978 <atan+0x478>
    877c:	e1560003 	cmp	r6, r3
    8780:	e1a04000 	mov	r4, r0
    8784:	e1a05001 	mov	r5, r1
    8788:	ca000024 	bgt	8820 <atan+0x320>
    878c:	e243380d 	sub	r3, r3, #851968	; 0xd0000
    8790:	e1560003 	cmp	r6, r3
    8794:	ca000043 	bgt	88a8 <atan+0x3a8>
    8798:	e1a02000 	mov	r2, r0
    879c:	e1a03001 	mov	r3, r1
    87a0:	eb000179 	bl	8d8c <__adddf3>
    87a4:	e3a02000 	mov	r2, #0
    87a8:	e59f31c4 	ldr	r3, [pc, #452]	; 8974 <atan+0x474>
    87ac:	eb000175 	bl	8d88 <__aeabi_dsub>
    87b0:	e3a02000 	mov	r2, #0
    87b4:	e1a06000 	mov	r6, r0
    87b8:	e1a07001 	mov	r7, r1
    87bc:	e3a03101 	mov	r3, #1073741824	; 0x40000000
    87c0:	e1a00004 	mov	r0, r4
    87c4:	e1a01005 	mov	r1, r5
    87c8:	eb00016f 	bl	8d8c <__adddf3>
    87cc:	e1a02000 	mov	r2, r0
    87d0:	e1a03001 	mov	r3, r1
    87d4:	e1a00006 	mov	r0, r6
    87d8:	e1a01007 	mov	r1, r7
    87dc:	eb000312 	bl	942c <__aeabi_ddiv>
    87e0:	e3a0b000 	mov	r11, #0
    87e4:	e1a08000 	mov	r8, r0
    87e8:	e1a0a001 	mov	r10, r1
    87ec:	eaffff63 	b	8580 <atan+0x80>
    87f0:	eb000165 	bl	8d8c <__adddf3>
    87f4:	e1a02008 	mov	r2, r8
    87f8:	e1a0300a 	mov	r3, r10
    87fc:	eb000266 	bl	919c <__aeabi_dmul>
    8800:	e1a02000 	mov	r2, r0
    8804:	e1a03001 	mov	r3, r1
    8808:	e1a00008 	mov	r0, r8
    880c:	e1a0100a 	mov	r1, r10
    8810:	eb00015c 	bl	8d88 <__aeabi_dsub>
    8814:	e1a08000 	mov	r8, r0
    8818:	e1a0a001 	mov	r10, r1
    881c:	eaffffc5 	b	8738 <atan+0x238>
    8820:	e59f3154 	ldr	r3, [pc, #340]	; 897c <atan+0x47c>
    8824:	e1560003 	cmp	r6, r3
    8828:	ca000015 	bgt	8884 <atan+0x384>
    882c:	e3a02000 	mov	r2, #0
    8830:	e59f3148 	ldr	r3, [pc, #328]	; 8980 <atan+0x480>
    8834:	eb000153 	bl	8d88 <__aeabi_dsub>
    8838:	e3a02000 	mov	r2, #0
    883c:	e1a06000 	mov	r6, r0
    8840:	e1a07001 	mov	r7, r1
    8844:	e59f3134 	ldr	r3, [pc, #308]	; 8980 <atan+0x480>
    8848:	e1a00004 	mov	r0, r4
    884c:	e1a01005 	mov	r1, r5
    8850:	eb000251 	bl	919c <__aeabi_dmul>
    8854:	e3a02000 	mov	r2, #0
    8858:	e59f3114 	ldr	r3, [pc, #276]	; 8974 <atan+0x474>
    885c:	eb00014a 	bl	8d8c <__adddf3>
    8860:	e1a02000 	mov	r2, r0
    8864:	e1a03001 	mov	r3, r1
    8868:	e1a00006 	mov	r0, r6
    886c:	e1a01007 	mov	r1, r7
    8870:	eb0002ed 	bl	942c <__aeabi_ddiv>
    8874:	e3a0b002 	mov	r11, #2
    8878:	e1a08000 	mov	r8, r0
    887c:	e1a0a001 	mov	r10, r1
    8880:	eaffff3e 	b	8580 <atan+0x80>
    8884:	e3a00000 	mov	r0, #0
    8888:	e59f10f4 	ldr	r1, [pc, #244]	; 8984 <atan+0x484>
    888c:	e1a02004 	mov	r2, r4
    8890:	e1a03005 	mov	r3, r5
    8894:	eb0002e4 	bl	942c <__aeabi_ddiv>
    8898:	e3a0b003 	mov	r11, #3
    889c:	e1a08000 	mov	r8, r0
    88a0:	e1a0a001 	mov	r10, r1
    88a4:	eaffff35 	b	8580 <atan+0x80>
    88a8:	e3a02000 	mov	r2, #0
    88ac:	e59f30c0 	ldr	r3, [pc, #192]	; 8974 <atan+0x474>
    88b0:	eb000134 	bl	8d88 <__aeabi_dsub>
    88b4:	e3a02000 	mov	r2, #0
    88b8:	e1a06000 	mov	r6, r0
    88bc:	e1a07001 	mov	r7, r1
    88c0:	e59f30ac 	ldr	r3, [pc, #172]	; 8974 <atan+0x474>
    88c4:	e1a00004 	mov	r0, r4
    88c8:	e1a01005 	mov	r1, r5
    88cc:	eb00012e 	bl	8d8c <__adddf3>
    88d0:	e1a02000 	mov	r2, r0
    88d4:	e1a03001 	mov	r3, r1
    88d8:	e1a00006 	mov	r0, r6
    88dc:	e1a01007 	mov	r1, r7
    88e0:	eb0002d1 	bl	942c <__aeabi_ddiv>
    88e4:	e3a0b001 	mov	r11, #1
    88e8:	e1a08000 	mov	r8, r0
    88ec:	e1a0a001 	mov	r10, r1
    88f0:	eaffff22 	b	8580 <atan+0x80>
    88f4:	e1a00000 	nop			; (mov r0, r0)
    88f8:	e322da11 	.word	0xe322da11
    88fc:	3f90ad3a 	.word	0x3f90ad3a
    8900:	24760deb 	.word	0x24760deb
    8904:	3fa97b4b 	.word	0x3fa97b4b
    8908:	a0d03d51 	.word	0xa0d03d51
    890c:	3fb10d66 	.word	0x3fb10d66
    8910:	c54c206e 	.word	0xc54c206e
    8914:	3fb745cd 	.word	0x3fb745cd
    8918:	920083ff 	.word	0x920083ff
    891c:	3fc24924 	.word	0x3fc24924
    8920:	5555550d 	.word	0x5555550d
    8924:	3fd55555 	.word	0x3fd55555
    8928:	2c6a6c2f 	.word	0x2c6a6c2f
    892c:	bfa2b444 	.word	0xbfa2b444
    8930:	52defd9a 	.word	0x52defd9a
    8934:	3fadde2d 	.word	0x3fadde2d
    8938:	af749a6d 	.word	0xaf749a6d
    893c:	3fb3b0f2 	.word	0x3fb3b0f2
    8940:	fe231671 	.word	0xfe231671
    8944:	3fbc71c6 	.word	0x3fbc71c6
    8948:	9998ebc4 	.word	0x9998ebc4
    894c:	3fc99999 	.word	0x3fc99999
    8950:	8800759c 	.word	0x8800759c
    8954:	7e37e43c 	.word	0x7e37e43c
    8958:	440fffff 	.word	0x440fffff
    895c:	7ff00000 	.word	0x7ff00000
    8960:	3ff921fb 	.word	0x3ff921fb
    8964:	bff921fb 	.word	0xbff921fb
    8968:	54442d18 	.word	0x54442d18
    896c:	3fdbffff 	.word	0x3fdbffff
    8970:	0000a650 	.word	0x0000a650
    8974:	3ff00000 	.word	0x3ff00000
    8978:	3ff2ffff 	.word	0x3ff2ffff
    897c:	40037fff 	.word	0x40037fff
    8980:	3ff80000 	.word	0x3ff80000
    8984:	bff00000 	.word	0xbff00000

00008988 <fabs>:
    8988:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    898c:	e12fff1e 	bx	lr

00008990 <finite>:
    8990:	e3811102 	orr	r1, r1, #-2147483648	; 0x80000000
    8994:	e2810601 	add	r0, r1, #1048576	; 0x100000
    8998:	e1a00fa0 	lsr	r0, r0, #31
    899c:	e12fff1e 	bx	lr

000089a0 <__fpclassifyd>:
    89a0:	e1902001 	orrs	r2, r0, r1
    89a4:	1a000001 	bne	89b0 <__fpclassifyd+0x10>
    89a8:	e3a00002 	mov	r0, #2
    89ac:	e12fff1e 	bx	lr
    89b0:	e2702001 	rsbs	r2, r0, #1
    89b4:	33a02000 	movcc	r2, #0
    89b8:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    89bc:	03500000 	cmpeq	r0, #0
    89c0:	0afffff8 	beq	89a8 <__fpclassifyd+0x8>
    89c4:	e3c13102 	bic	r3, r1, #-2147483648	; 0x80000000
    89c8:	e59f1034 	ldr	r1, [pc, #52]	; 8a04 <__fpclassifyd+0x64>
    89cc:	e2430601 	sub	r0, r3, #1048576	; 0x100000
    89d0:	e1500001 	cmp	r0, r1
    89d4:	8a000001 	bhi	89e0 <__fpclassifyd+0x40>
    89d8:	e3a00004 	mov	r0, #4
    89dc:	e12fff1e 	bx	lr
    89e0:	e3530601 	cmp	r3, #1048576	; 0x100000
    89e4:	2a000001 	bcs	89f0 <__fpclassifyd+0x50>
    89e8:	e3a00003 	mov	r0, #3
    89ec:	e12fff1e 	bx	lr
    89f0:	e59f0010 	ldr	r0, [pc, #16]	; 8a08 <__fpclassifyd+0x68>
    89f4:	e1530000 	cmp	r3, r0
    89f8:	13a00000 	movne	r0, #0
    89fc:	02020001 	andeq	r0, r2, #1
    8a00:	e12fff1e 	bx	lr
    8a04:	7fdfffff 	.word	0x7fdfffff
    8a08:	7ff00000 	.word	0x7ff00000

00008a0c <matherr>:
    8a0c:	e3a00000 	mov	r0, #0
    8a10:	e12fff1e 	bx	lr

00008a14 <nan>:
    8a14:	e3a00000 	mov	r0, #0
    8a18:	e59f1000 	ldr	r1, [pc]	; 8a20 <nan+0xc>
    8a1c:	e12fff1e 	bx	lr
    8a20:	7ff80000 	.word	0x7ff80000

00008a24 <rint>:
    8a24:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    8a28:	e1a07081 	lsl	r7, r1, #1
    8a2c:	e1a07aa7 	lsr	r7, r7, #21
    8a30:	e247cfff 	sub	r12, r7, #1020	; 0x3fc
    8a34:	e24cc003 	sub	r12, r12, #3
    8a38:	e35c0013 	cmp	r12, #19
    8a3c:	e24dd00c 	sub	sp, sp, #12
    8a40:	e1a02000 	mov	r2, r0
    8a44:	e1a03001 	mov	r3, r1
    8a48:	e1a04000 	mov	r4, r0
    8a4c:	e1a05001 	mov	r5, r1
    8a50:	e1a06001 	mov	r6, r1
    8a54:	e1a08fa1 	lsr	r8, r1, #31
    8a58:	ca000026 	bgt	8af8 <rint+0xd4>
    8a5c:	e35c0000 	cmp	r12, #0
    8a60:	ba000038 	blt	8b48 <rint+0x124>
    8a64:	e59f1150 	ldr	r1, [pc, #336]	; 8bbc <rint+0x198>
    8a68:	e1a01c51 	asr	r1, r1, r12
    8a6c:	e0010003 	and	r0, r1, r3
    8a70:	e1900002 	orrs	r0, r0, r2
    8a74:	0a00001a 	beq	8ae4 <rint+0xc0>
    8a78:	e1a010a1 	lsr	r1, r1, #1
    8a7c:	e0013003 	and	r3, r1, r3
    8a80:	e1934002 	orrs	r4, r3, r2
    8a84:	0a000005 	beq	8aa0 <rint+0x7c>
    8a88:	e1c51001 	bic	r1, r5, r1
    8a8c:	e3a05701 	mov	r5, #262144	; 0x40000
    8a90:	e1815c55 	orr	r5, r1, r5, asr r12
    8a94:	e35c0013 	cmp	r12, #19
    8a98:	03a04102 	moveq	r4, #-2147483648	; 0x80000000
    8a9c:	13a04000 	movne	r4, #0
    8aa0:	e59f3118 	ldr	r3, [pc, #280]	; 8bc0 <rint+0x19c>
    8aa4:	e0838188 	add	r8, r3, r8, lsl #3
    8aa8:	e8980300 	ldm	r8, {r8, r9}
    8aac:	e1a02004 	mov	r2, r4
    8ab0:	e1a03005 	mov	r3, r5
    8ab4:	e1a00008 	mov	r0, r8
    8ab8:	e1a01009 	mov	r1, r9
    8abc:	eb0000b2 	bl	8d8c <__adddf3>
    8ac0:	e88d0003 	stm	sp, {r0, r1}
    8ac4:	e1a02008 	mov	r2, r8
    8ac8:	e1a03009 	mov	r3, r9
    8acc:	e89d0003 	ldm	sp, {r0, r1}
    8ad0:	eb0000ac 	bl	8d88 <__aeabi_dsub>
    8ad4:	e1a07005 	mov	r7, r5
    8ad8:	e1a06004 	mov	r6, r4
    8adc:	e1a02000 	mov	r2, r0
    8ae0:	e1a03001 	mov	r3, r1
    8ae4:	e1a00002 	mov	r0, r2
    8ae8:	e1a01003 	mov	r1, r3
    8aec:	e28dd00c 	add	sp, sp, #12
    8af0:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
    8af4:	e12fff1e 	bx	lr
    8af8:	e35c0033 	cmp	r12, #51	; 0x33
    8afc:	da000005 	ble	8b18 <rint+0xf4>
    8b00:	e35c0b01 	cmp	r12, #1024	; 0x400
    8b04:	1afffff6 	bne	8ae4 <rint+0xc0>
    8b08:	eb00009f 	bl	8d8c <__adddf3>
    8b0c:	e1a02000 	mov	r2, r0
    8b10:	e1a03001 	mov	r3, r1
    8b14:	eafffff2 	b	8ae4 <rint+0xc0>
    8b18:	e2477e41 	sub	r7, r7, #1040	; 0x410
    8b1c:	e2477003 	sub	r7, r7, #3
    8b20:	e3e01000 	mvn	r1, #0
    8b24:	e1a01731 	lsr	r1, r1, r7
    8b28:	e1110000 	tst	r1, r0
    8b2c:	0affffec 	beq	8ae4 <rint+0xc0>
    8b30:	e1a010a1 	lsr	r1, r1, #1
    8b34:	e1110000 	tst	r1, r0
    8b38:	11c04001 	bicne	r4, r0, r1
    8b3c:	13a03101 	movne	r3, #1073741824	; 0x40000000
    8b40:	11844753 	orrne	r4, r4, r3, asr r7
    8b44:	eaffffd5 	b	8aa0 <rint+0x7c>
    8b48:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    8b4c:	e1911000 	orrs	r1, r1, r0
    8b50:	0affffe3 	beq	8ae4 <rint+0xc0>
    8b54:	e3c314ff 	bic	r1, r3, #-16777216	; 0xff000000
    8b58:	e3c1160f 	bic	r1, r1, #15728640	; 0xf00000
    8b5c:	e1814000 	orr	r4, r1, r0
    8b60:	e59f0058 	ldr	r0, [pc, #88]	; 8bc0 <rint+0x19c>
    8b64:	e2641000 	rsb	r1, r4, #0
    8b68:	e1814004 	orr	r4, r1, r4
    8b6c:	e0800188 	add	r0, r0, r8, lsl #3
    8b70:	e1a01624 	lsr	r1, r4, #12
    8b74:	e8900030 	ldm	r0, {r4, r5}
    8b78:	e2011702 	and	r1, r1, #524288	; 0x80000
    8b7c:	e1a068a3 	lsr	r6, r3, #17
    8b80:	e1813886 	orr	r3, r1, r6, lsl #17
    8b84:	e1a00004 	mov	r0, r4
    8b88:	e1a01005 	mov	r1, r5
    8b8c:	eb00007e 	bl	8d8c <__adddf3>
    8b90:	e88d0003 	stm	sp, {r0, r1}
    8b94:	e1a02004 	mov	r2, r4
    8b98:	e1a03005 	mov	r3, r5
    8b9c:	e89d0003 	ldm	sp, {r0, r1}
    8ba0:	eb000078 	bl	8d88 <__aeabi_dsub>
    8ba4:	e1a05001 	mov	r5, r1
    8ba8:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    8bac:	e1a04000 	mov	r4, r0
    8bb0:	e1a02000 	mov	r2, r0
    8bb4:	e1813f88 	orr	r3, r1, r8, lsl #31
    8bb8:	eaffffc9 	b	8ae4 <rint+0xc0>
    8bbc:	000fffff 	.word	0x000fffff
    8bc0:	0000a690 	.word	0x0000a690
    8bc4:	00000000 	.word	0x00000000

00008bc8 <scalbn>:
    8bc8:	e59f3170 	ldr	r3, [pc, #368]	; 8d40 <scalbn+0x178>
    8bcc:	e0013003 	and	r3, r1, r3
    8bd0:	e1b03a43 	asrs	r3, r3, #20
    8bd4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8bd8:	e1a04000 	mov	r4, r0
    8bdc:	e1a05001 	mov	r5, r1
    8be0:	e1a06000 	mov	r6, r0
    8be4:	e1a07001 	mov	r7, r1
    8be8:	e1a08002 	mov	r8, r2
    8bec:	1a000011 	bne	8c38 <scalbn+0x70>
    8bf0:	e3c1c102 	bic	r12, r1, #-2147483648	; 0x80000000
    8bf4:	e19cc000 	orrs	r12, r12, r0
    8bf8:	0a00001d 	beq	8c74 <scalbn+0xac>
    8bfc:	e59f3140 	ldr	r3, [pc, #320]	; 8d44 <scalbn+0x17c>
    8c00:	e3a02000 	mov	r2, #0
    8c04:	eb000164 	bl	919c <__aeabi_dmul>
    8c08:	e59f3138 	ldr	r3, [pc, #312]	; 8d48 <scalbn+0x180>
    8c0c:	e1580003 	cmp	r8, r3
    8c10:	e1a04000 	mov	r4, r0
    8c14:	e1a05001 	mov	r5, r1
    8c18:	e1a06000 	mov	r6, r0
    8c1c:	e1a07001 	mov	r7, r1
    8c20:	ba000021 	blt	8cac <scalbn+0xe4>
    8c24:	e59f3114 	ldr	r3, [pc, #276]	; 8d40 <scalbn+0x178>
    8c28:	e0013003 	and	r3, r1, r3
    8c2c:	e1a03a43 	asr	r3, r3, #20
    8c30:	e2433036 	sub	r3, r3, #54	; 0x36
    8c34:	ea000003 	b	8c48 <scalbn+0x80>
    8c38:	e59f210c 	ldr	r2, [pc, #268]	; 8d4c <scalbn+0x184>
    8c3c:	e1530002 	cmp	r3, r2
    8c40:	11a01001 	movne	r1, r1
    8c44:	0a000027 	beq	8ce8 <scalbn+0x120>
    8c48:	e59f2100 	ldr	r2, [pc, #256]	; 8d50 <scalbn+0x188>
    8c4c:	e0833008 	add	r3, r3, r8
    8c50:	e1530002 	cmp	r3, r2
    8c54:	c1a02004 	movgt	r2, r4
    8c58:	c1a03005 	movgt	r3, r5
    8c5c:	ca000018 	bgt	8cc4 <scalbn+0xfc>
    8c60:	e3530000 	cmp	r3, #0
    8c64:	da000006 	ble	8c84 <scalbn+0xbc>
    8c68:	e3c1147f 	bic	r1, r1, #2130706432	; 0x7f000000
    8c6c:	e3c1160f 	bic	r1, r1, #15728640	; 0xf00000
    8c70:	e1815a03 	orr	r5, r1, r3, lsl #20
    8c74:	e1a00004 	mov	r0, r4
    8c78:	e1a01005 	mov	r1, r5
    8c7c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8c80:	e12fff1e 	bx	lr
    8c84:	e3730035 	cmn	r3, #53	; 0x35
    8c88:	aa00001c 	bge	8d00 <scalbn+0x138>
    8c8c:	e59f30c0 	ldr	r3, [pc, #192]	; 8d54 <scalbn+0x18c>
    8c90:	e1580003 	cmp	r8, r3
    8c94:	e1a02004 	mov	r2, r4
    8c98:	e1a03005 	mov	r3, r5
    8c9c:	ca000008 	bgt	8cc4 <scalbn+0xfc>
    8ca0:	e28f1088 	add	r1, pc, #136	; 0x88
    8ca4:	e8910003 	ldm	r1, {r0, r1}
    8ca8:	eb00002c 	bl	8d60 <copysign>
    8cac:	e28f307c 	add	r3, pc, #124	; 0x7c
    8cb0:	e893000c 	ldm	r3, {r2, r3}
    8cb4:	eb000138 	bl	919c <__aeabi_dmul>
    8cb8:	e1a04000 	mov	r4, r0
    8cbc:	e1a05001 	mov	r5, r1
    8cc0:	eaffffeb 	b	8c74 <scalbn+0xac>
    8cc4:	e28f106c 	add	r1, pc, #108	; 0x6c
    8cc8:	e8910003 	ldm	r1, {r0, r1}
    8ccc:	eb000023 	bl	8d60 <copysign>
    8cd0:	e28f3060 	add	r3, pc, #96	; 0x60
    8cd4:	e893000c 	ldm	r3, {r2, r3}
    8cd8:	eb00012f 	bl	919c <__aeabi_dmul>
    8cdc:	e1a04000 	mov	r4, r0
    8ce0:	e1a05001 	mov	r5, r1
    8ce4:	eaffffe2 	b	8c74 <scalbn+0xac>
    8ce8:	e1a03005 	mov	r3, r5
    8cec:	e1a02000 	mov	r2, r0
    8cf0:	eb000025 	bl	8d8c <__adddf3>
    8cf4:	e1a04000 	mov	r4, r0
    8cf8:	e1a05001 	mov	r5, r1
    8cfc:	eaffffdc 	b	8c74 <scalbn+0xac>
    8d00:	e3c1147f 	bic	r1, r1, #2130706432	; 0x7f000000
    8d04:	e2833036 	add	r3, r3, #54	; 0x36
    8d08:	e3c1160f 	bic	r1, r1, #15728640	; 0xf00000
    8d0c:	e1815a03 	orr	r5, r1, r3, lsl #20
    8d10:	e1a00004 	mov	r0, r4
    8d14:	e1a01005 	mov	r1, r5
    8d18:	e3a02000 	mov	r2, #0
    8d1c:	e59f3034 	ldr	r3, [pc, #52]	; 8d58 <scalbn+0x190>
    8d20:	eb00011d 	bl	919c <__aeabi_dmul>
    8d24:	e1a04000 	mov	r4, r0
    8d28:	e1a05001 	mov	r5, r1
    8d2c:	eaffffd0 	b	8c74 <scalbn+0xac>
    8d30:	c2f8f359 	.word	0xc2f8f359
    8d34:	01a56e1f 	.word	0x01a56e1f
    8d38:	8800759c 	.word	0x8800759c
    8d3c:	7e37e43c 	.word	0x7e37e43c
    8d40:	7ff00000 	.word	0x7ff00000
    8d44:	43500000 	.word	0x43500000
    8d48:	ffff3cb0 	.word	0xffff3cb0
    8d4c:	000007ff 	.word	0x000007ff
    8d50:	000007fe 	.word	0x000007fe
    8d54:	0000c350 	.word	0x0000c350
    8d58:	3c900000 	.word	0x3c900000
    8d5c:	e1a00000 	nop			; (mov r0, r0)

00008d60 <copysign>:
    8d60:	e2033102 	and	r3, r3, #-2147483648	; 0x80000000
    8d64:	e3c12102 	bic	r2, r1, #-2147483648	; 0x80000000
    8d68:	e92d0030 	push	{r4, r5}
    8d6c:	e1a05001 	mov	r5, r1
    8d70:	e1a04000 	mov	r4, r0
    8d74:	e1831002 	orr	r1, r3, r2
    8d78:	e8bd0030 	pop	{r4, r5}
    8d7c:	e12fff1e 	bx	lr

00008d80 <__aeabi_drsub>:
    8d80:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
    8d84:	ea000000 	b	8d8c <__adddf3>

00008d88 <__aeabi_dsub>:
    8d88:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

00008d8c <__adddf3>:
    8d8c:	e92d4030 	push	{r4, r5, lr}
    8d90:	e1a04081 	lsl	r4, r1, #1
    8d94:	e1a05083 	lsl	r5, r3, #1
    8d98:	e1340005 	teq	r4, r5
    8d9c:	01300002 	teqeq	r0, r2
    8da0:	1194c000 	orrsne	r12, r4, r0
    8da4:	1195c002 	orrsne	r12, r5, r2
    8da8:	11f0cac4 	mvnsne	r12, r4, asr #21
    8dac:	11f0cac5 	mvnsne	r12, r5, asr #21
    8db0:	0a00008c 	beq	8fe8 <__adddf3+0x25c>
    8db4:	e1a04aa4 	lsr	r4, r4, #21
    8db8:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
    8dbc:	b2655000 	rsblt	r5, r5, #0
    8dc0:	da000006 	ble	8de0 <__adddf3+0x54>
    8dc4:	e0844005 	add	r4, r4, r5
    8dc8:	e0202002 	eor	r2, r0, r2
    8dcc:	e0213003 	eor	r3, r1, r3
    8dd0:	e0220000 	eor	r0, r2, r0
    8dd4:	e0231001 	eor	r1, r3, r1
    8dd8:	e0202002 	eor	r2, r0, r2
    8ddc:	e0213003 	eor	r3, r1, r3
    8de0:	e3550036 	cmp	r5, #54	; 0x36
    8de4:	88bd4030 	pophi	{r4, r5, lr}
    8de8:	812fff1e 	bxhi	lr
    8dec:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    8df0:	e1a01601 	lsl	r1, r1, #12
    8df4:	e3a0c601 	mov	r12, #1048576	; 0x100000
    8df8:	e18c1621 	orr	r1, r12, r1, lsr #12
    8dfc:	0a000001 	beq	8e08 <__adddf3+0x7c>
    8e00:	e2700000 	rsbs	r0, r0, #0
    8e04:	e2e11000 	rsc	r1, r1, #0
    8e08:	e3130102 	tst	r3, #-2147483648	; 0x80000000
    8e0c:	e1a03603 	lsl	r3, r3, #12
    8e10:	e18c3623 	orr	r3, r12, r3, lsr #12
    8e14:	0a000001 	beq	8e20 <__adddf3+0x94>
    8e18:	e2722000 	rsbs	r2, r2, #0
    8e1c:	e2e33000 	rsc	r3, r3, #0
    8e20:	e1340005 	teq	r4, r5
    8e24:	0a000069 	beq	8fd0 <__adddf3+0x244>
    8e28:	e2444001 	sub	r4, r4, #1
    8e2c:	e275e020 	rsbs	lr, r5, #32
    8e30:	ba000005 	blt	8e4c <__adddf3+0xc0>
    8e34:	e1a0ce12 	lsl	r12, r2, lr
    8e38:	e0900532 	adds	r0, r0, r2, lsr r5
    8e3c:	e2a11000 	adc	r1, r1, #0
    8e40:	e0900e13 	adds	r0, r0, r3, lsl lr
    8e44:	e0b11553 	adcs	r1, r1, r3, asr r5
    8e48:	ea000006 	b	8e68 <__adddf3+0xdc>
    8e4c:	e2455020 	sub	r5, r5, #32
    8e50:	e28ee020 	add	lr, lr, #32
    8e54:	e3520001 	cmp	r2, #1
    8e58:	e1a0ce13 	lsl	r12, r3, lr
    8e5c:	238cc002 	orrcs	r12, r12, #2
    8e60:	e0900553 	adds	r0, r0, r3, asr r5
    8e64:	e0b11fc3 	adcs	r1, r1, r3, asr #31
    8e68:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    8e6c:	5a000002 	bpl	8e7c <__adddf3+0xf0>
    8e70:	e27cc000 	rsbs	r12, r12, #0
    8e74:	e2f00000 	rscs	r0, r0, #0
    8e78:	e2e11000 	rsc	r1, r1, #0
    8e7c:	e3510601 	cmp	r1, #1048576	; 0x100000
    8e80:	3a00000f 	bcc	8ec4 <__adddf3+0x138>
    8e84:	e3510602 	cmp	r1, #2097152	; 0x200000
    8e88:	3a000006 	bcc	8ea8 <__adddf3+0x11c>
    8e8c:	e1b010a1 	lsrs	r1, r1, #1
    8e90:	e1b00060 	rrxs	r0, r0
    8e94:	e1a0c06c 	rrx	r12, r12
    8e98:	e2844001 	add	r4, r4, #1
    8e9c:	e1a02a84 	lsl	r2, r4, #21
    8ea0:	e3720501 	cmn	r2, #4194304	; 0x400000
    8ea4:	2a00006b 	bcs	9058 <__adddf3+0x2cc>
    8ea8:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    8eac:	01b0c0a0 	lsrseq	r12, r0, #1
    8eb0:	e2b00000 	adcs	r0, r0, #0
    8eb4:	e0a11a04 	adc	r1, r1, r4, lsl #20
    8eb8:	e1811005 	orr	r1, r1, r5
    8ebc:	e8bd4030 	pop	{r4, r5, lr}
    8ec0:	e12fff1e 	bx	lr
    8ec4:	e1b0c08c 	lsls	r12, r12, #1
    8ec8:	e0b00000 	adcs	r0, r0, r0
    8ecc:	e0a11001 	adc	r1, r1, r1
    8ed0:	e3110601 	tst	r1, #1048576	; 0x100000
    8ed4:	e2444001 	sub	r4, r4, #1
    8ed8:	1afffff2 	bne	8ea8 <__adddf3+0x11c>
    8edc:	e3310000 	teq	r1, #0
    8ee0:	13a03014 	movne	r3, #20
    8ee4:	03a03034 	moveq	r3, #52	; 0x34
    8ee8:	01a01000 	moveq	r1, r0
    8eec:	03a00000 	moveq	r0, #0
    8ef0:	e1a02001 	mov	r2, r1
    8ef4:	e3520801 	cmp	r2, #65536	; 0x10000
    8ef8:	21a02822 	lsrcs	r2, r2, #16
    8efc:	22433010 	subcs	r3, r3, #16
    8f00:	e3520c01 	cmp	r2, #256	; 0x100
    8f04:	21a02422 	lsrcs	r2, r2, #8
    8f08:	22433008 	subcs	r3, r3, #8
    8f0c:	e3520010 	cmp	r2, #16
    8f10:	21a02222 	lsrcs	r2, r2, #4
    8f14:	22433004 	subcs	r3, r3, #4
    8f18:	e3520004 	cmp	r2, #4
    8f1c:	22433002 	subcs	r3, r3, #2
    8f20:	304330a2 	subcc	r3, r3, r2, lsr #1
    8f24:	e04331a2 	sub	r3, r3, r2, lsr #3
    8f28:	e2532020 	subs	r2, r3, #32
    8f2c:	aa000007 	bge	8f50 <__adddf3+0x1c4>
    8f30:	e292200c 	adds	r2, r2, #12
    8f34:	da000004 	ble	8f4c <__adddf3+0x1c0>
    8f38:	e282c014 	add	r12, r2, #20
    8f3c:	e262200c 	rsb	r2, r2, #12
    8f40:	e1a00c11 	lsl	r0, r1, r12
    8f44:	e1a01231 	lsr	r1, r1, r2
    8f48:	ea000004 	b	8f60 <__adddf3+0x1d4>
    8f4c:	e2822014 	add	r2, r2, #20
    8f50:	d262c020 	rsble	r12, r2, #32
    8f54:	e1a01211 	lsl	r1, r1, r2
    8f58:	d1811c30 	orrle	r1, r1, r0, lsr r12
    8f5c:	d1a00210 	lslle	r0, r0, r2
    8f60:	e0544003 	subs	r4, r4, r3
    8f64:	a0811a04 	addge	r1, r1, r4, lsl #20
    8f68:	a1811005 	orrge	r1, r1, r5
    8f6c:	a8bd4030 	popge	{r4, r5, lr}
    8f70:	a12fff1e 	bxge	lr
    8f74:	e1e04004 	mvn	r4, r4
    8f78:	e254401f 	subs	r4, r4, #31
    8f7c:	aa00000f 	bge	8fc0 <__adddf3+0x234>
    8f80:	e294400c 	adds	r4, r4, #12
    8f84:	ca000006 	bgt	8fa4 <__adddf3+0x218>
    8f88:	e2844014 	add	r4, r4, #20
    8f8c:	e2642020 	rsb	r2, r4, #32
    8f90:	e1a00430 	lsr	r0, r0, r4
    8f94:	e1800211 	orr	r0, r0, r1, lsl r2
    8f98:	e1851431 	orr	r1, r5, r1, lsr r4
    8f9c:	e8bd4030 	pop	{r4, r5, lr}
    8fa0:	e12fff1e 	bx	lr
    8fa4:	e264400c 	rsb	r4, r4, #12
    8fa8:	e2642020 	rsb	r2, r4, #32
    8fac:	e1a00230 	lsr	r0, r0, r2
    8fb0:	e1800411 	orr	r0, r0, r1, lsl r4
    8fb4:	e1a01005 	mov	r1, r5
    8fb8:	e8bd4030 	pop	{r4, r5, lr}
    8fbc:	e12fff1e 	bx	lr
    8fc0:	e1a00431 	lsr	r0, r1, r4
    8fc4:	e1a01005 	mov	r1, r5
    8fc8:	e8bd4030 	pop	{r4, r5, lr}
    8fcc:	e12fff1e 	bx	lr
    8fd0:	e3340000 	teq	r4, #0
    8fd4:	e2233601 	eor	r3, r3, #1048576	; 0x100000
    8fd8:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
    8fdc:	02844001 	addeq	r4, r4, #1
    8fe0:	12455001 	subne	r5, r5, #1
    8fe4:	eaffff8f 	b	8e28 <__adddf3+0x9c>
    8fe8:	e1f0cac4 	mvns	r12, r4, asr #21
    8fec:	11f0cac5 	mvnsne	r12, r5, asr #21
    8ff0:	0a00001d 	beq	906c <__adddf3+0x2e0>
    8ff4:	e1340005 	teq	r4, r5
    8ff8:	01300002 	teqeq	r0, r2
    8ffc:	0a000004 	beq	9014 <__adddf3+0x288>
    9000:	e194c000 	orrs	r12, r4, r0
    9004:	01a01003 	moveq	r1, r3
    9008:	01a00002 	moveq	r0, r2
    900c:	e8bd4030 	pop	{r4, r5, lr}
    9010:	e12fff1e 	bx	lr
    9014:	e1310003 	teq	r1, r3
    9018:	13a01000 	movne	r1, #0
    901c:	13a00000 	movne	r0, #0
    9020:	18bd4030 	popne	{r4, r5, lr}
    9024:	112fff1e 	bxne	lr
    9028:	e1b0caa4 	lsrs	r12, r4, #21
    902c:	1a000004 	bne	9044 <__adddf3+0x2b8>
    9030:	e1b00080 	lsls	r0, r0, #1
    9034:	e0b11001 	adcs	r1, r1, r1
    9038:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
    903c:	e8bd4030 	pop	{r4, r5, lr}
    9040:	e12fff1e 	bx	lr
    9044:	e2944501 	adds	r4, r4, #4194304	; 0x400000
    9048:	32811601 	addcc	r1, r1, #1048576	; 0x100000
    904c:	38bd4030 	popcc	{r4, r5, lr}
    9050:	312fff1e 	bxcc	lr
    9054:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    9058:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
    905c:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    9060:	e3a00000 	mov	r0, #0
    9064:	e8bd4030 	pop	{r4, r5, lr}
    9068:	e12fff1e 	bx	lr
    906c:	e1f0cac4 	mvns	r12, r4, asr #21
    9070:	11a01003 	movne	r1, r3
    9074:	11a00002 	movne	r0, r2
    9078:	01f0cac5 	mvnseq	r12, r5, asr #21
    907c:	11a03001 	movne	r3, r1
    9080:	11a02000 	movne	r2, r0
    9084:	e1904601 	orrs	r4, r0, r1, lsl #12
    9088:	01925603 	orrseq	r5, r2, r3, lsl #12
    908c:	01310003 	teqeq	r1, r3
    9090:	13811702 	orrne	r1, r1, #524288	; 0x80000
    9094:	e8bd4030 	pop	{r4, r5, lr}
    9098:	e12fff1e 	bx	lr

0000909c <__aeabi_ui2d>:
    909c:	e3300000 	teq	r0, #0
    90a0:	03a01000 	moveq	r1, #0
    90a4:	012fff1e 	bxeq	lr
    90a8:	e92d4030 	push	{r4, r5, lr}
    90ac:	e3a04b01 	mov	r4, #1024	; 0x400
    90b0:	e2844032 	add	r4, r4, #50	; 0x32
    90b4:	e3a05000 	mov	r5, #0
    90b8:	e3a01000 	mov	r1, #0
    90bc:	eaffff86 	b	8edc <__adddf3+0x150>

000090c0 <__aeabi_i2d>:
    90c0:	e3300000 	teq	r0, #0
    90c4:	03a01000 	moveq	r1, #0
    90c8:	012fff1e 	bxeq	lr
    90cc:	e92d4030 	push	{r4, r5, lr}
    90d0:	e3a04b01 	mov	r4, #1024	; 0x400
    90d4:	e2844032 	add	r4, r4, #50	; 0x32
    90d8:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
    90dc:	42600000 	rsbmi	r0, r0, #0
    90e0:	e3a01000 	mov	r1, #0
    90e4:	eaffff7c 	b	8edc <__adddf3+0x150>

000090e8 <__aeabi_f2d>:
    90e8:	e1b02080 	lsls	r2, r0, #1
    90ec:	e1a011c2 	asr	r1, r2, #3
    90f0:	e1a01061 	rrx	r1, r1
    90f4:	e1a00e02 	lsl	r0, r2, #28
    90f8:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
    90fc:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    9100:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
    9104:	112fff1e 	bxne	lr
    9108:	e3320000 	teq	r2, #0
    910c:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    9110:	012fff1e 	bxeq	lr
    9114:	e92d4030 	push	{r4, r5, lr}
    9118:	e3a04d0e 	mov	r4, #896	; 0x380
    911c:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    9120:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    9124:	eaffff6c 	b	8edc <__adddf3+0x150>

00009128 <__aeabi_ul2d>:
    9128:	e1902001 	orrs	r2, r0, r1
    912c:	012fff1e 	bxeq	lr
    9130:	e92d4030 	push	{r4, r5, lr}
    9134:	e3a05000 	mov	r5, #0
    9138:	ea000006 	b	9158 <__aeabi_l2d+0x1c>

0000913c <__aeabi_l2d>:
    913c:	e1902001 	orrs	r2, r0, r1
    9140:	012fff1e 	bxeq	lr
    9144:	e92d4030 	push	{r4, r5, lr}
    9148:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
    914c:	5a000001 	bpl	9158 <__aeabi_l2d+0x1c>
    9150:	e2700000 	rsbs	r0, r0, #0
    9154:	e2e11000 	rsc	r1, r1, #0
    9158:	e3a04b01 	mov	r4, #1024	; 0x400
    915c:	e2844032 	add	r4, r4, #50	; 0x32
    9160:	e1b0cb21 	lsrs	r12, r1, #22
    9164:	0affff44 	beq	8e7c <__adddf3+0xf0>
    9168:	e3a02003 	mov	r2, #3
    916c:	e1b0c1ac 	lsrs	r12, r12, #3
    9170:	12822003 	addne	r2, r2, #3
    9174:	e1b0c1ac 	lsrs	r12, r12, #3
    9178:	12822003 	addne	r2, r2, #3
    917c:	e08221ac 	add	r2, r2, r12, lsr #3
    9180:	e2623020 	rsb	r3, r2, #32
    9184:	e1a0c310 	lsl	r12, r0, r3
    9188:	e1a00230 	lsr	r0, r0, r2
    918c:	e1800311 	orr	r0, r0, r1, lsl r3
    9190:	e1a01231 	lsr	r1, r1, r2
    9194:	e0844002 	add	r4, r4, r2
    9198:	eaffff37 	b	8e7c <__adddf3+0xf0>

0000919c <__aeabi_dmul>:
    919c:	e92d4070 	push	{r4, r5, r6, lr}
    91a0:	e3a0c0ff 	mov	r12, #255	; 0xff
    91a4:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    91a8:	e01c4a21 	ands	r4, r12, r1, lsr #20
    91ac:	101c5a23 	andsne	r5, r12, r3, lsr #20
    91b0:	1134000c 	teqne	r4, r12
    91b4:	1135000c 	teqne	r5, r12
    91b8:	0b000075 	bleq	9394 <__aeabi_dmul+0x1f8>
    91bc:	e0844005 	add	r4, r4, r5
    91c0:	e0216003 	eor	r6, r1, r3
    91c4:	e1c11a8c 	bic	r1, r1, r12, lsl #21
    91c8:	e1c33a8c 	bic	r3, r3, r12, lsl #21
    91cc:	e1905601 	orrs	r5, r0, r1, lsl #12
    91d0:	11925603 	orrsne	r5, r2, r3, lsl #12
    91d4:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    91d8:	e3833601 	orr	r3, r3, #1048576	; 0x100000
    91dc:	0a00001d 	beq	9258 <__aeabi_dmul+0xbc>
    91e0:	e08ec290 	umull	r12, lr, r0, r2
    91e4:	e3a05000 	mov	r5, #0
    91e8:	e0a5e291 	umlal	lr, r5, r1, r2
    91ec:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
    91f0:	e0a5e390 	umlal	lr, r5, r0, r3
    91f4:	e3a06000 	mov	r6, #0
    91f8:	e0a65391 	umlal	r5, r6, r1, r3
    91fc:	e33c0000 	teq	r12, #0
    9200:	138ee001 	orrne	lr, lr, #1
    9204:	e24440ff 	sub	r4, r4, #255	; 0xff
    9208:	e3560c02 	cmp	r6, #512	; 0x200
    920c:	e2c44c03 	sbc	r4, r4, #768	; 0x300
    9210:	2a000002 	bcs	9220 <__aeabi_dmul+0x84>
    9214:	e1b0e08e 	lsls	lr, lr, #1
    9218:	e0b55005 	adcs	r5, r5, r5
    921c:	e0a66006 	adc	r6, r6, r6
    9220:	e1821586 	orr	r1, r2, r6, lsl #11
    9224:	e1811aa5 	orr	r1, r1, r5, lsr #21
    9228:	e1a00585 	lsl	r0, r5, #11
    922c:	e1800aae 	orr	r0, r0, lr, lsr #21
    9230:	e1a0e58e 	lsl	lr, lr, #11
    9234:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    9238:	835c0c07 	cmphi	r12, #1792	; 0x700
    923c:	8a000011 	bhi	9288 <__aeabi_dmul+0xec>
    9240:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
    9244:	01b0e0a0 	lsrseq	lr, r0, #1
    9248:	e2b00000 	adcs	r0, r0, #0
    924c:	e0a11a04 	adc	r1, r1, r4, lsl #20
    9250:	e8bd4070 	pop	{r4, r5, r6, lr}
    9254:	e12fff1e 	bx	lr
    9258:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
    925c:	e1861001 	orr	r1, r6, r1
    9260:	e1800002 	orr	r0, r0, r2
    9264:	e0211003 	eor	r1, r1, r3
    9268:	e05440ac 	subs	r4, r4, r12, lsr #1
    926c:	c074500c 	rsbsgt	r5, r4, r12
    9270:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    9274:	c8bd4070 	popgt	{r4, r5, r6, lr}
    9278:	c12fff1e 	bxgt	lr
    927c:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    9280:	e3a0e000 	mov	lr, #0
    9284:	e2544001 	subs	r4, r4, #1
    9288:	ca00005d 	bgt	9404 <__aeabi_dmul+0x268>
    928c:	e3740036 	cmn	r4, #54	; 0x36
    9290:	d3a00000 	movle	r0, #0
    9294:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
    9298:	d8bd4070 	pople	{r4, r5, r6, lr}
    929c:	d12fff1e 	bxle	lr
    92a0:	e2644000 	rsb	r4, r4, #0
    92a4:	e2544020 	subs	r4, r4, #32
    92a8:	aa00001a 	bge	9318 <__aeabi_dmul+0x17c>
    92ac:	e294400c 	adds	r4, r4, #12
    92b0:	ca00000c 	bgt	92e8 <__aeabi_dmul+0x14c>
    92b4:	e2844014 	add	r4, r4, #20
    92b8:	e2645020 	rsb	r5, r4, #32
    92bc:	e1a03510 	lsl	r3, r0, r5
    92c0:	e1a00430 	lsr	r0, r0, r4
    92c4:	e1800511 	orr	r0, r0, r1, lsl r5
    92c8:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
    92cc:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    92d0:	e0900fa3 	adds	r0, r0, r3, lsr #31
    92d4:	e0a21431 	adc	r1, r2, r1, lsr r4
    92d8:	e19ee083 	orrs	lr, lr, r3, lsl #1
    92dc:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    92e0:	e8bd4070 	pop	{r4, r5, r6, lr}
    92e4:	e12fff1e 	bx	lr
    92e8:	e264400c 	rsb	r4, r4, #12
    92ec:	e2645020 	rsb	r5, r4, #32
    92f0:	e1a03410 	lsl	r3, r0, r4
    92f4:	e1a00530 	lsr	r0, r0, r5
    92f8:	e1800411 	orr	r0, r0, r1, lsl r4
    92fc:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    9300:	e0900fa3 	adds	r0, r0, r3, lsr #31
    9304:	e2a11000 	adc	r1, r1, #0
    9308:	e19ee083 	orrs	lr, lr, r3, lsl #1
    930c:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    9310:	e8bd4070 	pop	{r4, r5, r6, lr}
    9314:	e12fff1e 	bx	lr
    9318:	e2645020 	rsb	r5, r4, #32
    931c:	e18ee510 	orr	lr, lr, r0, lsl r5
    9320:	e1a03430 	lsr	r3, r0, r4
    9324:	e1833511 	orr	r3, r3, r1, lsl r5
    9328:	e1a00431 	lsr	r0, r1, r4
    932c:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    9330:	e1c00431 	bic	r0, r0, r1, lsr r4
    9334:	e0800fa3 	add	r0, r0, r3, lsr #31
    9338:	e19ee083 	orrs	lr, lr, r3, lsl #1
    933c:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    9340:	e8bd4070 	pop	{r4, r5, r6, lr}
    9344:	e12fff1e 	bx	lr
    9348:	e3340000 	teq	r4, #0
    934c:	1a000008 	bne	9374 <__aeabi_dmul+0x1d8>
    9350:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
    9354:	e1b00080 	lsls	r0, r0, #1
    9358:	e0a11001 	adc	r1, r1, r1
    935c:	e3110601 	tst	r1, #1048576	; 0x100000
    9360:	02444001 	subeq	r4, r4, #1
    9364:	0afffffa 	beq	9354 <__aeabi_dmul+0x1b8>
    9368:	e1811006 	orr	r1, r1, r6
    936c:	e3350000 	teq	r5, #0
    9370:	112fff1e 	bxne	lr
    9374:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
    9378:	e1b02082 	lsls	r2, r2, #1
    937c:	e0a33003 	adc	r3, r3, r3
    9380:	e3130601 	tst	r3, #1048576	; 0x100000
    9384:	02455001 	subeq	r5, r5, #1
    9388:	0afffffa 	beq	9378 <__aeabi_dmul+0x1dc>
    938c:	e1833006 	orr	r3, r3, r6
    9390:	e12fff1e 	bx	lr
    9394:	e134000c 	teq	r4, r12
    9398:	e00c5a23 	and	r5, r12, r3, lsr #20
    939c:	1135000c 	teqne	r5, r12
    93a0:	0a000007 	beq	93c4 <__aeabi_dmul+0x228>
    93a4:	e1906081 	orrs	r6, r0, r1, lsl #1
    93a8:	11926083 	orrsne	r6, r2, r3, lsl #1
    93ac:	1affffe5 	bne	9348 <__aeabi_dmul+0x1ac>
    93b0:	e0211003 	eor	r1, r1, r3
    93b4:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    93b8:	e3a00000 	mov	r0, #0
    93bc:	e8bd4070 	pop	{r4, r5, r6, lr}
    93c0:	e12fff1e 	bx	lr
    93c4:	e1906081 	orrs	r6, r0, r1, lsl #1
    93c8:	01a00002 	moveq	r0, r2
    93cc:	01a01003 	moveq	r1, r3
    93d0:	11926083 	orrsne	r6, r2, r3, lsl #1
    93d4:	0a000010 	beq	941c <__aeabi_dmul+0x280>
    93d8:	e134000c 	teq	r4, r12
    93dc:	1a000001 	bne	93e8 <__aeabi_dmul+0x24c>
    93e0:	e1906601 	orrs	r6, r0, r1, lsl #12
    93e4:	1a00000c 	bne	941c <__aeabi_dmul+0x280>
    93e8:	e135000c 	teq	r5, r12
    93ec:	1a000003 	bne	9400 <__aeabi_dmul+0x264>
    93f0:	e1926603 	orrs	r6, r2, r3, lsl #12
    93f4:	11a00002 	movne	r0, r2
    93f8:	11a01003 	movne	r1, r3
    93fc:	1a000006 	bne	941c <__aeabi_dmul+0x280>
    9400:	e0211003 	eor	r1, r1, r3
    9404:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    9408:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    940c:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    9410:	e3a00000 	mov	r0, #0
    9414:	e8bd4070 	pop	{r4, r5, r6, lr}
    9418:	e12fff1e 	bx	lr
    941c:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    9420:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
    9424:	e8bd4070 	pop	{r4, r5, r6, lr}
    9428:	e12fff1e 	bx	lr

0000942c <__aeabi_ddiv>:
    942c:	e92d4070 	push	{r4, r5, r6, lr}
    9430:	e3a0c0ff 	mov	r12, #255	; 0xff
    9434:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    9438:	e01c4a21 	ands	r4, r12, r1, lsr #20
    943c:	101c5a23 	andsne	r5, r12, r3, lsr #20
    9440:	1134000c 	teqne	r4, r12
    9444:	1135000c 	teqne	r5, r12
    9448:	0b00005e 	bleq	95c8 <__aeabi_ddiv+0x19c>
    944c:	e0444005 	sub	r4, r4, r5
    9450:	e021e003 	eor	lr, r1, r3
    9454:	e1925603 	orrs	r5, r2, r3, lsl #12
    9458:	e1a01601 	lsl	r1, r1, #12
    945c:	0a00004c 	beq	9594 <__aeabi_ddiv+0x168>
    9460:	e1a03603 	lsl	r3, r3, #12
    9464:	e3a05201 	mov	r5, #268435456	; 0x10000000
    9468:	e1853223 	orr	r3, r5, r3, lsr #4
    946c:	e1833c22 	orr	r3, r3, r2, lsr #24
    9470:	e1a02402 	lsl	r2, r2, #8
    9474:	e1855221 	orr	r5, r5, r1, lsr #4
    9478:	e1855c20 	orr	r5, r5, r0, lsr #24
    947c:	e1a06400 	lsl	r6, r0, #8
    9480:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
    9484:	e1550003 	cmp	r5, r3
    9488:	01560002 	cmpeq	r6, r2
    948c:	e2a440fd 	adc	r4, r4, #253	; 0xfd
    9490:	e2844c03 	add	r4, r4, #768	; 0x300
    9494:	2a000001 	bcs	94a0 <__aeabi_ddiv+0x74>
    9498:	e1b030a3 	lsrs	r3, r3, #1
    949c:	e1a02062 	rrx	r2, r2
    94a0:	e0566002 	subs	r6, r6, r2
    94a4:	e0c55003 	sbc	r5, r5, r3
    94a8:	e1b030a3 	lsrs	r3, r3, #1
    94ac:	e1a02062 	rrx	r2, r2
    94b0:	e3a00601 	mov	r0, #1048576	; 0x100000
    94b4:	e3a0c702 	mov	r12, #524288	; 0x80000
    94b8:	e056e002 	subs	lr, r6, r2
    94bc:	e0d5e003 	sbcs	lr, r5, r3
    94c0:	20466002 	subcs	r6, r6, r2
    94c4:	21a0500e 	movcs	r5, lr
    94c8:	2180000c 	orrcs	r0, r0, r12
    94cc:	e1b030a3 	lsrs	r3, r3, #1
    94d0:	e1a02062 	rrx	r2, r2
    94d4:	e056e002 	subs	lr, r6, r2
    94d8:	e0d5e003 	sbcs	lr, r5, r3
    94dc:	20466002 	subcs	r6, r6, r2
    94e0:	21a0500e 	movcs	r5, lr
    94e4:	218000ac 	orrcs	r0, r0, r12, lsr #1
    94e8:	e1b030a3 	lsrs	r3, r3, #1
    94ec:	e1a02062 	rrx	r2, r2
    94f0:	e056e002 	subs	lr, r6, r2
    94f4:	e0d5e003 	sbcs	lr, r5, r3
    94f8:	20466002 	subcs	r6, r6, r2
    94fc:	21a0500e 	movcs	r5, lr
    9500:	2180012c 	orrcs	r0, r0, r12, lsr #2
    9504:	e1b030a3 	lsrs	r3, r3, #1
    9508:	e1a02062 	rrx	r2, r2
    950c:	e056e002 	subs	lr, r6, r2
    9510:	e0d5e003 	sbcs	lr, r5, r3
    9514:	20466002 	subcs	r6, r6, r2
    9518:	21a0500e 	movcs	r5, lr
    951c:	218001ac 	orrcs	r0, r0, r12, lsr #3
    9520:	e195e006 	orrs	lr, r5, r6
    9524:	0a00000d 	beq	9560 <__aeabi_ddiv+0x134>
    9528:	e1a05205 	lsl	r5, r5, #4
    952c:	e1855e26 	orr	r5, r5, r6, lsr #28
    9530:	e1a06206 	lsl	r6, r6, #4
    9534:	e1a03183 	lsl	r3, r3, #3
    9538:	e1833ea2 	orr	r3, r3, r2, lsr #29
    953c:	e1a02182 	lsl	r2, r2, #3
    9540:	e1b0c22c 	lsrs	r12, r12, #4
    9544:	1affffdb 	bne	94b8 <__aeabi_ddiv+0x8c>
    9548:	e3110601 	tst	r1, #1048576	; 0x100000
    954c:	1a000006 	bne	956c <__aeabi_ddiv+0x140>
    9550:	e1811000 	orr	r1, r1, r0
    9554:	e3a00000 	mov	r0, #0
    9558:	e3a0c102 	mov	r12, #-2147483648	; 0x80000000
    955c:	eaffffd5 	b	94b8 <__aeabi_ddiv+0x8c>
    9560:	e3110601 	tst	r1, #1048576	; 0x100000
    9564:	01811000 	orreq	r1, r1, r0
    9568:	03a00000 	moveq	r0, #0
    956c:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    9570:	835c0c07 	cmphi	r12, #1792	; 0x700
    9574:	8affff43 	bhi	9288 <__aeabi_dmul+0xec>
    9578:	e055c003 	subs	r12, r5, r3
    957c:	0056c002 	subseq	r12, r6, r2
    9580:	01b0c0a0 	lsrseq	r12, r0, #1
    9584:	e2b00000 	adcs	r0, r0, #0
    9588:	e0a11a04 	adc	r1, r1, r4, lsl #20
    958c:	e8bd4070 	pop	{r4, r5, r6, lr}
    9590:	e12fff1e 	bx	lr
    9594:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
    9598:	e18e1621 	orr	r1, lr, r1, lsr #12
    959c:	e09440ac 	adds	r4, r4, r12, lsr #1
    95a0:	c074500c 	rsbsgt	r5, r4, r12
    95a4:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    95a8:	c8bd4070 	popgt	{r4, r5, r6, lr}
    95ac:	c12fff1e 	bxgt	lr
    95b0:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    95b4:	e3a0e000 	mov	lr, #0
    95b8:	e2544001 	subs	r4, r4, #1
    95bc:	eaffff31 	b	9288 <__aeabi_dmul+0xec>
    95c0:	e185e006 	orr	lr, r5, r6
    95c4:	eaffff2f 	b	9288 <__aeabi_dmul+0xec>
    95c8:	e00c5a23 	and	r5, r12, r3, lsr #20
    95cc:	e134000c 	teq	r4, r12
    95d0:	0135000c 	teqeq	r5, r12
    95d4:	0affff90 	beq	941c <__aeabi_dmul+0x280>
    95d8:	e134000c 	teq	r4, r12
    95dc:	1a000006 	bne	95fc <__aeabi_ddiv+0x1d0>
    95e0:	e1904601 	orrs	r4, r0, r1, lsl #12
    95e4:	1affff8c 	bne	941c <__aeabi_dmul+0x280>
    95e8:	e135000c 	teq	r5, r12
    95ec:	1affff83 	bne	9400 <__aeabi_dmul+0x264>
    95f0:	e1a00002 	mov	r0, r2
    95f4:	e1a01003 	mov	r1, r3
    95f8:	eaffff87 	b	941c <__aeabi_dmul+0x280>
    95fc:	e135000c 	teq	r5, r12
    9600:	1a000004 	bne	9618 <__aeabi_ddiv+0x1ec>
    9604:	e1925603 	orrs	r5, r2, r3, lsl #12
    9608:	0affff68 	beq	93b0 <__aeabi_dmul+0x214>
    960c:	e1a00002 	mov	r0, r2
    9610:	e1a01003 	mov	r1, r3
    9614:	eaffff80 	b	941c <__aeabi_dmul+0x280>
    9618:	e1906081 	orrs	r6, r0, r1, lsl #1
    961c:	11926083 	orrsne	r6, r2, r3, lsl #1
    9620:	1affff48 	bne	9348 <__aeabi_dmul+0x1ac>
    9624:	e1904081 	orrs	r4, r0, r1, lsl #1
    9628:	1affff74 	bne	9400 <__aeabi_dmul+0x264>
    962c:	e1925083 	orrs	r5, r2, r3, lsl #1
    9630:	1affff5e 	bne	93b0 <__aeabi_dmul+0x214>
    9634:	eaffff78 	b	941c <__aeabi_dmul+0x280>

00009638 <__gedf2>:
    9638:	e3e0c000 	mvn	r12, #0
    963c:	ea000002 	b	964c <__cmpdf2+0x4>

00009640 <__ledf2>:
    9640:	e3a0c001 	mov	r12, #1
    9644:	ea000000 	b	964c <__cmpdf2+0x4>

00009648 <__cmpdf2>:
    9648:	e3a0c001 	mov	r12, #1
    964c:	e52dc004 	push	{r12}		; (str r12, [sp, #-4]!)
    9650:	e1a0c081 	lsl	r12, r1, #1
    9654:	e1f0cacc 	mvns	r12, r12, asr #21
    9658:	e1a0c083 	lsl	r12, r3, #1
    965c:	11f0cacc 	mvnsne	r12, r12, asr #21
    9660:	0a00000e 	beq	96a0 <__cmpdf2+0x58>
    9664:	e28dd004 	add	sp, sp, #4
    9668:	e190c081 	orrs	r12, r0, r1, lsl #1
    966c:	0192c083 	orrseq	r12, r2, r3, lsl #1
    9670:	11310003 	teqne	r1, r3
    9674:	01300002 	teqeq	r0, r2
    9678:	03a00000 	moveq	r0, #0
    967c:	012fff1e 	bxeq	lr
    9680:	e3700000 	cmn	r0, #0
    9684:	e1310003 	teq	r1, r3
    9688:	51510003 	cmppl	r1, r3
    968c:	01500002 	cmpeq	r0, r2
    9690:	21a00fc3 	asrcs	r0, r3, #31
    9694:	31e00fc3 	mvncc	r0, r3, asr #31
    9698:	e3800001 	orr	r0, r0, #1
    969c:	e12fff1e 	bx	lr
    96a0:	e1a0c081 	lsl	r12, r1, #1
    96a4:	e1f0cacc 	mvns	r12, r12, asr #21
    96a8:	1a000001 	bne	96b4 <__cmpdf2+0x6c>
    96ac:	e190c601 	orrs	r12, r0, r1, lsl #12
    96b0:	1a000004 	bne	96c8 <__cmpdf2+0x80>
    96b4:	e1a0c083 	lsl	r12, r3, #1
    96b8:	e1f0cacc 	mvns	r12, r12, asr #21
    96bc:	1affffe8 	bne	9664 <__cmpdf2+0x1c>
    96c0:	e192c603 	orrs	r12, r2, r3, lsl #12
    96c4:	0affffe6 	beq	9664 <__cmpdf2+0x1c>
    96c8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    96cc:	e12fff1e 	bx	lr

000096d0 <__aeabi_cdrcmple>:
    96d0:	e1a0c000 	mov	r12, r0
    96d4:	e1a00002 	mov	r0, r2
    96d8:	e1a0200c 	mov	r2, r12
    96dc:	e1a0c001 	mov	r12, r1
    96e0:	e1a01003 	mov	r1, r3
    96e4:	e1a0300c 	mov	r3, r12
    96e8:	eaffffff 	b	96ec <__aeabi_cdcmpeq>

000096ec <__aeabi_cdcmpeq>:
    96ec:	e92d4001 	push	{r0, lr}
    96f0:	ebffffd4 	bl	9648 <__cmpdf2>
    96f4:	e3500000 	cmp	r0, #0
    96f8:	43700000 	cmnmi	r0, #0
    96fc:	e8bd4001 	pop	{r0, lr}
    9700:	e12fff1e 	bx	lr

00009704 <__aeabi_dcmpeq>:
    9704:	e52de008 	str	lr, [sp, #-8]!
    9708:	ebfffff7 	bl	96ec <__aeabi_cdcmpeq>
    970c:	03a00001 	moveq	r0, #1
    9710:	13a00000 	movne	r0, #0
    9714:	e49de008 	ldr	lr, [sp], #8
    9718:	e12fff1e 	bx	lr

0000971c <__aeabi_dcmplt>:
    971c:	e52de008 	str	lr, [sp, #-8]!
    9720:	ebfffff1 	bl	96ec <__aeabi_cdcmpeq>
    9724:	33a00001 	movcc	r0, #1
    9728:	23a00000 	movcs	r0, #0
    972c:	e49de008 	ldr	lr, [sp], #8
    9730:	e12fff1e 	bx	lr

00009734 <__aeabi_dcmple>:
    9734:	e52de008 	str	lr, [sp, #-8]!
    9738:	ebffffeb 	bl	96ec <__aeabi_cdcmpeq>
    973c:	93a00001 	movls	r0, #1
    9740:	83a00000 	movhi	r0, #0
    9744:	e49de008 	ldr	lr, [sp], #8
    9748:	e12fff1e 	bx	lr

0000974c <__aeabi_dcmpge>:
    974c:	e52de008 	str	lr, [sp, #-8]!
    9750:	ebffffde 	bl	96d0 <__aeabi_cdrcmple>
    9754:	93a00001 	movls	r0, #1
    9758:	83a00000 	movhi	r0, #0
    975c:	e49de008 	ldr	lr, [sp], #8
    9760:	e12fff1e 	bx	lr

00009764 <__aeabi_dcmpgt>:
    9764:	e52de008 	str	lr, [sp, #-8]!
    9768:	ebffffd8 	bl	96d0 <__aeabi_cdrcmple>
    976c:	33a00001 	movcc	r0, #1
    9770:	23a00000 	movcs	r0, #0
    9774:	e49de008 	ldr	lr, [sp], #8
    9778:	e12fff1e 	bx	lr

0000977c <__aeabi_d2iz>:
    977c:	e1a02081 	lsl	r2, r1, #1
    9780:	e2922602 	adds	r2, r2, #2097152	; 0x200000
    9784:	2a00000c 	bcs	97bc <__aeabi_d2iz+0x40>
    9788:	5a000009 	bpl	97b4 <__aeabi_d2iz+0x38>
    978c:	e3e03e3e 	mvn	r3, #992	; 0x3e0
    9790:	e0532ac2 	subs	r2, r3, r2, asr #21
    9794:	9a00000a 	bls	97c4 <__aeabi_d2iz+0x48>
    9798:	e1a03581 	lsl	r3, r1, #11
    979c:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    97a0:	e1833aa0 	orr	r3, r3, r0, lsr #21
    97a4:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    97a8:	e1a00233 	lsr	r0, r3, r2
    97ac:	12600000 	rsbne	r0, r0, #0
    97b0:	e12fff1e 	bx	lr
    97b4:	e3a00000 	mov	r0, #0
    97b8:	e12fff1e 	bx	lr
    97bc:	e1900601 	orrs	r0, r0, r1, lsl #12
    97c0:	1a000002 	bne	97d0 <__aeabi_d2iz+0x54>
    97c4:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
    97c8:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    97cc:	e12fff1e 	bx	lr
    97d0:	e3a00000 	mov	r0, #0
    97d4:	e12fff1e 	bx	lr

000097d8 <__aeabi_d2f>:
    97d8:	e1a02081 	lsl	r2, r1, #1
    97dc:	e2523207 	subs	r3, r2, #1879048192	; 0x70000000
    97e0:	2253c602 	subscs	r12, r3, #2097152	; 0x200000
    97e4:	227cc57f 	rsbscs	r12, r12, #532676608	; 0x1fc00000
    97e8:	9a000006 	bls	9808 <__aeabi_d2f+0x30>
    97ec:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
    97f0:	e1a02180 	lsl	r2, r0, #3
    97f4:	e18c0ea0 	orr	r0, r12, r0, lsr #29
    97f8:	e3520102 	cmp	r2, #-2147483648	; 0x80000000
    97fc:	e0a00103 	adc	r0, r0, r3, lsl #2
    9800:	03c00001 	biceq	r0, r0, #1
    9804:	e12fff1e 	bx	lr
    9808:	e3110101 	tst	r1, #1073741824	; 0x40000000
    980c:	1a00000f 	bne	9850 <__aeabi_d2f+0x78>
    9810:	e293262e 	adds	r2, r3, #48234496	; 0x2e00000
    9814:	b2010102 	andlt	r0, r1, #-2147483648	; 0x80000000
    9818:	b12fff1e 	bxlt	lr
    981c:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    9820:	e1a02aa2 	lsr	r2, r2, #21
    9824:	e2622018 	rsb	r2, r2, #24
    9828:	e262c020 	rsb	r12, r2, #32
    982c:	e1b03c10 	lsls	r3, r0, r12
    9830:	e1a00230 	lsr	r0, r0, r2
    9834:	13800001 	orrne	r0, r0, #1
    9838:	e1a03581 	lsl	r3, r1, #11
    983c:	e1a035a3 	lsr	r3, r3, #11
    9840:	e1800c13 	orr	r0, r0, r3, lsl r12
    9844:	e1a03233 	lsr	r3, r3, r2
    9848:	e1a03083 	lsl	r3, r3, #1
    984c:	eaffffe6 	b	97ec <__aeabi_d2f+0x14>
    9850:	e1f03ac2 	mvns	r3, r2, asr #21
    9854:	1a000003 	bne	9868 <__aeabi_d2f+0x90>
    9858:	e1903601 	orrs	r3, r0, r1, lsl #12
    985c:	13a0047f 	movne	r0, #2130706432	; 0x7f000000
    9860:	13800503 	orrne	r0, r0, #12582912	; 0xc00000
    9864:	112fff1e 	bxne	lr
    9868:	e2010102 	and	r0, r1, #-2147483648	; 0x80000000
    986c:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    9870:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    9874:	e12fff1e 	bx	lr

00009878 <__aeabi_frsub>:
    9878:	e2200102 	eor	r0, r0, #-2147483648	; 0x80000000
    987c:	ea000000 	b	9884 <__addsf3>

00009880 <__aeabi_fsub>:
    9880:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000

00009884 <__addsf3>:
    9884:	e1b02080 	lsls	r2, r0, #1
    9888:	11b03081 	lslsne	r3, r1, #1
    988c:	11320003 	teqne	r2, r3
    9890:	11f0cc42 	mvnsne	r12, r2, asr #24
    9894:	11f0cc43 	mvnsne	r12, r3, asr #24
    9898:	0a000047 	beq	99bc <__addsf3+0x138>
    989c:	e1a02c22 	lsr	r2, r2, #24
    98a0:	e0723c23 	rsbs	r3, r2, r3, lsr #24
    98a4:	c0822003 	addgt	r2, r2, r3
    98a8:	c0201001 	eorgt	r1, r0, r1
    98ac:	c0210000 	eorgt	r0, r1, r0
    98b0:	c0201001 	eorgt	r1, r0, r1
    98b4:	b2633000 	rsblt	r3, r3, #0
    98b8:	e3530019 	cmp	r3, #25
    98bc:	812fff1e 	bxhi	lr
    98c0:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    98c4:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    98c8:	e3c004ff 	bic	r0, r0, #-16777216	; 0xff000000
    98cc:	12600000 	rsbne	r0, r0, #0
    98d0:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    98d4:	e3811502 	orr	r1, r1, #8388608	; 0x800000
    98d8:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
    98dc:	12611000 	rsbne	r1, r1, #0
    98e0:	e1320003 	teq	r2, r3
    98e4:	0a00002e 	beq	99a4 <__addsf3+0x120>
    98e8:	e2422001 	sub	r2, r2, #1
    98ec:	e0900351 	adds	r0, r0, r1, asr r3
    98f0:	e2633020 	rsb	r3, r3, #32
    98f4:	e1a01311 	lsl	r1, r1, r3
    98f8:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    98fc:	5a000001 	bpl	9908 <__addsf3+0x84>
    9900:	e2711000 	rsbs	r1, r1, #0
    9904:	e2e00000 	rsc	r0, r0, #0
    9908:	e3500502 	cmp	r0, #8388608	; 0x800000
    990c:	3a00000b 	bcc	9940 <__addsf3+0xbc>
    9910:	e3500401 	cmp	r0, #16777216	; 0x1000000
    9914:	3a000004 	bcc	992c <__addsf3+0xa8>
    9918:	e1b000a0 	lsrs	r0, r0, #1
    991c:	e1a01061 	rrx	r1, r1
    9920:	e2822001 	add	r2, r2, #1
    9924:	e35200fe 	cmp	r2, #254	; 0xfe
    9928:	2a000038 	bcs	9a10 <__addsf3+0x18c>
    992c:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    9930:	e0a00b82 	adc	r0, r0, r2, lsl #23
    9934:	03c00001 	biceq	r0, r0, #1
    9938:	e1800003 	orr	r0, r0, r3
    993c:	e12fff1e 	bx	lr
    9940:	e1b01081 	lsls	r1, r1, #1
    9944:	e0a00000 	adc	r0, r0, r0
    9948:	e3100502 	tst	r0, #8388608	; 0x800000
    994c:	e2422001 	sub	r2, r2, #1
    9950:	1afffff5 	bne	992c <__addsf3+0xa8>
    9954:	e1b0c620 	lsrs	r12, r0, #12
    9958:	01a00600 	lsleq	r0, r0, #12
    995c:	0242200c 	subeq	r2, r2, #12
    9960:	e31008ff 	tst	r0, #16711680	; 0xff0000
    9964:	01a00400 	lsleq	r0, r0, #8
    9968:	02422008 	subeq	r2, r2, #8
    996c:	e310060f 	tst	r0, #15728640	; 0xf00000
    9970:	01a00200 	lsleq	r0, r0, #4
    9974:	02422004 	subeq	r2, r2, #4
    9978:	e3100503 	tst	r0, #12582912	; 0xc00000
    997c:	01a00100 	lsleq	r0, r0, #2
    9980:	02422002 	subeq	r2, r2, #2
    9984:	e3500502 	cmp	r0, #8388608	; 0x800000
    9988:	31a00080 	lslcc	r0, r0, #1
    998c:	e2d22000 	sbcs	r2, r2, #0
    9990:	a0800b82 	addge	r0, r0, r2, lsl #23
    9994:	b2622000 	rsblt	r2, r2, #0
    9998:	a1800003 	orrge	r0, r0, r3
    999c:	b1830230 	orrlt	r0, r3, r0, lsr r2
    99a0:	e12fff1e 	bx	lr
    99a4:	e3320000 	teq	r2, #0
    99a8:	e2211502 	eor	r1, r1, #8388608	; 0x800000
    99ac:	02200502 	eoreq	r0, r0, #8388608	; 0x800000
    99b0:	02822001 	addeq	r2, r2, #1
    99b4:	12433001 	subne	r3, r3, #1
    99b8:	eaffffca 	b	98e8 <__addsf3+0x64>
    99bc:	e1a03081 	lsl	r3, r1, #1
    99c0:	e1f0cc42 	mvns	r12, r2, asr #24
    99c4:	11f0cc43 	mvnsne	r12, r3, asr #24
    99c8:	0a000013 	beq	9a1c <__addsf3+0x198>
    99cc:	e1320003 	teq	r2, r3
    99d0:	0a000002 	beq	99e0 <__addsf3+0x15c>
    99d4:	e3320000 	teq	r2, #0
    99d8:	01a00001 	moveq	r0, r1
    99dc:	e12fff1e 	bx	lr
    99e0:	e1300001 	teq	r0, r1
    99e4:	13a00000 	movne	r0, #0
    99e8:	112fff1e 	bxne	lr
    99ec:	e31204ff 	tst	r2, #-16777216	; 0xff000000
    99f0:	1a000002 	bne	9a00 <__addsf3+0x17c>
    99f4:	e1b00080 	lsls	r0, r0, #1
    99f8:	23800102 	orrcs	r0, r0, #-2147483648	; 0x80000000
    99fc:	e12fff1e 	bx	lr
    9a00:	e2922402 	adds	r2, r2, #33554432	; 0x2000000
    9a04:	32800502 	addcc	r0, r0, #8388608	; 0x800000
    9a08:	312fff1e 	bxcc	lr
    9a0c:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    9a10:	e383047f 	orr	r0, r3, #2130706432	; 0x7f000000
    9a14:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    9a18:	e12fff1e 	bx	lr
    9a1c:	e1f02c42 	mvns	r2, r2, asr #24
    9a20:	11a00001 	movne	r0, r1
    9a24:	01f03c43 	mvnseq	r3, r3, asr #24
    9a28:	11a01000 	movne	r1, r0
    9a2c:	e1b02480 	lsls	r2, r0, #9
    9a30:	01b03481 	lslseq	r3, r1, #9
    9a34:	01300001 	teqeq	r0, r1
    9a38:	13800501 	orrne	r0, r0, #4194304	; 0x400000
    9a3c:	e12fff1e 	bx	lr

00009a40 <__aeabi_ui2f>:
    9a40:	e3a03000 	mov	r3, #0
    9a44:	ea000001 	b	9a50 <__aeabi_i2f+0x8>

00009a48 <__aeabi_i2f>:
    9a48:	e2103102 	ands	r3, r0, #-2147483648	; 0x80000000
    9a4c:	42600000 	rsbmi	r0, r0, #0
    9a50:	e1b0c000 	movs	r12, r0
    9a54:	012fff1e 	bxeq	lr
    9a58:	e383344b 	orr	r3, r3, #1258291200	; 0x4b000000
    9a5c:	e1a01000 	mov	r1, r0
    9a60:	e3a00000 	mov	r0, #0
    9a64:	ea00000f 	b	9aa8 <__aeabi_l2f+0x30>

00009a68 <__aeabi_ul2f>:
    9a68:	e1902001 	orrs	r2, r0, r1
    9a6c:	012fff1e 	bxeq	lr
    9a70:	e3a03000 	mov	r3, #0
    9a74:	ea000005 	b	9a90 <__aeabi_l2f+0x18>

00009a78 <__aeabi_l2f>:
    9a78:	e1902001 	orrs	r2, r0, r1
    9a7c:	012fff1e 	bxeq	lr
    9a80:	e2113102 	ands	r3, r1, #-2147483648	; 0x80000000
    9a84:	5a000001 	bpl	9a90 <__aeabi_l2f+0x18>
    9a88:	e2700000 	rsbs	r0, r0, #0
    9a8c:	e2e11000 	rsc	r1, r1, #0
    9a90:	e1b0c001 	movs	r12, r1
    9a94:	01a0c000 	moveq	r12, r0
    9a98:	01a01000 	moveq	r1, r0
    9a9c:	03a00000 	moveq	r0, #0
    9aa0:	e383345b 	orr	r3, r3, #1526726656	; 0x5b000000
    9aa4:	02433201 	subeq	r3, r3, #268435456	; 0x10000000
    9aa8:	e2433502 	sub	r3, r3, #8388608	; 0x800000
    9aac:	e3a02017 	mov	r2, #23
    9ab0:	e35c0801 	cmp	r12, #65536	; 0x10000
    9ab4:	21a0c82c 	lsrcs	r12, r12, #16
    9ab8:	22422010 	subcs	r2, r2, #16
    9abc:	e35c0c01 	cmp	r12, #256	; 0x100
    9ac0:	21a0c42c 	lsrcs	r12, r12, #8
    9ac4:	22422008 	subcs	r2, r2, #8
    9ac8:	e35c0010 	cmp	r12, #16
    9acc:	21a0c22c 	lsrcs	r12, r12, #4
    9ad0:	22422004 	subcs	r2, r2, #4
    9ad4:	e35c0004 	cmp	r12, #4
    9ad8:	22422002 	subcs	r2, r2, #2
    9adc:	304220ac 	subcc	r2, r2, r12, lsr #1
    9ae0:	e05221ac 	subs	r2, r2, r12, lsr #3
    9ae4:	e0433b82 	sub	r3, r3, r2, lsl #23
    9ae8:	ba000006 	blt	9b08 <__aeabi_l2f+0x90>
    9aec:	e0833211 	add	r3, r3, r1, lsl r2
    9af0:	e1a0c210 	lsl	r12, r0, r2
    9af4:	e2622020 	rsb	r2, r2, #32
    9af8:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    9afc:	e0a30230 	adc	r0, r3, r0, lsr r2
    9b00:	03c00001 	biceq	r0, r0, #1
    9b04:	e12fff1e 	bx	lr
    9b08:	e2822020 	add	r2, r2, #32
    9b0c:	e1a0c211 	lsl	r12, r1, r2
    9b10:	e2622020 	rsb	r2, r2, #32
    9b14:	e190008c 	orrs	r0, r0, r12, lsl #1
    9b18:	e0a30231 	adc	r0, r3, r1, lsr r2
    9b1c:	01c00fac 	biceq	r0, r0, r12, lsr #31
    9b20:	e12fff1e 	bx	lr

00009b24 <__aeabi_fmul>:
    9b24:	e3a0c0ff 	mov	r12, #255	; 0xff
    9b28:	e01c2ba0 	ands	r2, r12, r0, lsr #23
    9b2c:	101c3ba1 	andsne	r3, r12, r1, lsr #23
    9b30:	1132000c 	teqne	r2, r12
    9b34:	1133000c 	teqne	r3, r12
    9b38:	0a00003e 	beq	9c38 <__aeabi_fmul+0x114>
    9b3c:	e0822003 	add	r2, r2, r3
    9b40:	e020c001 	eor	r12, r0, r1
    9b44:	e1b00480 	lsls	r0, r0, #9
    9b48:	11b01481 	lslsne	r1, r1, #9
    9b4c:	0a000010 	beq	9b94 <__aeabi_fmul+0x70>
    9b50:	e3a03302 	mov	r3, #134217728	; 0x8000000
    9b54:	e18302a0 	orr	r0, r3, r0, lsr #5
    9b58:	e18312a1 	orr	r1, r3, r1, lsr #5
    9b5c:	e0813190 	umull	r3, r1, r0, r1
    9b60:	e20c0102 	and	r0, r12, #-2147483648	; 0x80000000
    9b64:	e3510502 	cmp	r1, #8388608	; 0x800000
    9b68:	31a01081 	lslcc	r1, r1, #1
    9b6c:	31811fa3 	orrcc	r1, r1, r3, lsr #31
    9b70:	31a03083 	lslcc	r3, r3, #1
    9b74:	e1800001 	orr	r0, r0, r1
    9b78:	e2c2207f 	sbc	r2, r2, #127	; 0x7f
    9b7c:	e35200fd 	cmp	r2, #253	; 0xfd
    9b80:	8a00000f 	bhi	9bc4 <__aeabi_fmul+0xa0>
    9b84:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    9b88:	e0a00b82 	adc	r0, r0, r2, lsl #23
    9b8c:	03c00001 	biceq	r0, r0, #1
    9b90:	e12fff1e 	bx	lr
    9b94:	e3300000 	teq	r0, #0
    9b98:	e20cc102 	and	r12, r12, #-2147483648	; 0x80000000
    9b9c:	01a01481 	lsleq	r1, r1, #9
    9ba0:	e18c04a0 	orr	r0, r12, r0, lsr #9
    9ba4:	e18004a1 	orr	r0, r0, r1, lsr #9
    9ba8:	e252207f 	subs	r2, r2, #127	; 0x7f
    9bac:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    9bb0:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    9bb4:	c12fff1e 	bxgt	lr
    9bb8:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    9bbc:	e3a03000 	mov	r3, #0
    9bc0:	e2522001 	subs	r2, r2, #1
    9bc4:	ca000035 	bgt	9ca0 <__aeabi_fmul+0x17c>
    9bc8:	e3720019 	cmn	r2, #25
    9bcc:	d2000102 	andle	r0, r0, #-2147483648	; 0x80000000
    9bd0:	d12fff1e 	bxle	lr
    9bd4:	e2622000 	rsb	r2, r2, #0
    9bd8:	e1b01080 	lsls	r1, r0, #1
    9bdc:	e1a01231 	lsr	r1, r1, r2
    9be0:	e2622020 	rsb	r2, r2, #32
    9be4:	e1a0c210 	lsl	r12, r0, r2
    9be8:	e1b00061 	rrxs	r0, r1
    9bec:	e2a00000 	adc	r0, r0, #0
    9bf0:	e193308c 	orrs	r3, r3, r12, lsl #1
    9bf4:	01c00fac 	biceq	r0, r0, r12, lsr #31
    9bf8:	e12fff1e 	bx	lr
    9bfc:	e3320000 	teq	r2, #0
    9c00:	e200c102 	and	r12, r0, #-2147483648	; 0x80000000
    9c04:	01a00080 	lsleq	r0, r0, #1
    9c08:	03100502 	tsteq	r0, #8388608	; 0x800000
    9c0c:	02422001 	subeq	r2, r2, #1
    9c10:	0afffffb 	beq	9c04 <__aeabi_fmul+0xe0>
    9c14:	e180000c 	orr	r0, r0, r12
    9c18:	e3330000 	teq	r3, #0
    9c1c:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
    9c20:	01a01081 	lsleq	r1, r1, #1
    9c24:	03110502 	tsteq	r1, #8388608	; 0x800000
    9c28:	02433001 	subeq	r3, r3, #1
    9c2c:	0afffffb 	beq	9c20 <__aeabi_fmul+0xfc>
    9c30:	e181100c 	orr	r1, r1, r12
    9c34:	eaffffc0 	b	9b3c <__aeabi_fmul+0x18>
    9c38:	e00c3ba1 	and	r3, r12, r1, lsr #23
    9c3c:	e132000c 	teq	r2, r12
    9c40:	1133000c 	teqne	r3, r12
    9c44:	0a000005 	beq	9c60 <__aeabi_fmul+0x13c>
    9c48:	e3d0c102 	bics	r12, r0, #-2147483648	; 0x80000000
    9c4c:	13d1c102 	bicsne	r12, r1, #-2147483648	; 0x80000000
    9c50:	1affffe9 	bne	9bfc <__aeabi_fmul+0xd8>
    9c54:	e0200001 	eor	r0, r0, r1
    9c58:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    9c5c:	e12fff1e 	bx	lr
    9c60:	e3300000 	teq	r0, #0
    9c64:	13300102 	teqne	r0, #-2147483648	; 0x80000000
    9c68:	01a00001 	moveq	r0, r1
    9c6c:	13310000 	teqne	r1, #0
    9c70:	13310102 	teqne	r1, #-2147483648	; 0x80000000
    9c74:	0a00000d 	beq	9cb0 <__aeabi_fmul+0x18c>
    9c78:	e132000c 	teq	r2, r12
    9c7c:	1a000001 	bne	9c88 <__aeabi_fmul+0x164>
    9c80:	e1b02480 	lsls	r2, r0, #9
    9c84:	1a000009 	bne	9cb0 <__aeabi_fmul+0x18c>
    9c88:	e133000c 	teq	r3, r12
    9c8c:	1a000002 	bne	9c9c <__aeabi_fmul+0x178>
    9c90:	e1b03481 	lsls	r3, r1, #9
    9c94:	11a00001 	movne	r0, r1
    9c98:	1a000004 	bne	9cb0 <__aeabi_fmul+0x18c>
    9c9c:	e0200001 	eor	r0, r0, r1
    9ca0:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    9ca4:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    9ca8:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    9cac:	e12fff1e 	bx	lr
    9cb0:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    9cb4:	e3800503 	orr	r0, r0, #12582912	; 0xc00000
    9cb8:	e12fff1e 	bx	lr

00009cbc <__aeabi_fdiv>:
    9cbc:	e3a0c0ff 	mov	r12, #255	; 0xff
    9cc0:	e01c2ba0 	ands	r2, r12, r0, lsr #23
    9cc4:	101c3ba1 	andsne	r3, r12, r1, lsr #23
    9cc8:	1132000c 	teqne	r2, r12
    9ccc:	1133000c 	teqne	r3, r12
    9cd0:	0a00003a 	beq	9dc0 <__aeabi_fdiv+0x104>
    9cd4:	e0422003 	sub	r2, r2, r3
    9cd8:	e020c001 	eor	r12, r0, r1
    9cdc:	e1b01481 	lsls	r1, r1, #9
    9ce0:	e1a00480 	lsl	r0, r0, #9
    9ce4:	0a00001c 	beq	9d5c <__aeabi_fdiv+0xa0>
    9ce8:	e3a03201 	mov	r3, #268435456	; 0x10000000
    9cec:	e1831221 	orr	r1, r3, r1, lsr #4
    9cf0:	e1833220 	orr	r3, r3, r0, lsr #4
    9cf4:	e20c0102 	and	r0, r12, #-2147483648	; 0x80000000
    9cf8:	e1530001 	cmp	r3, r1
    9cfc:	31a03083 	lslcc	r3, r3, #1
    9d00:	e2a2207d 	adc	r2, r2, #125	; 0x7d
    9d04:	e3a0c502 	mov	r12, #8388608	; 0x800000
    9d08:	e1530001 	cmp	r3, r1
    9d0c:	20433001 	subcs	r3, r3, r1
    9d10:	2180000c 	orrcs	r0, r0, r12
    9d14:	e15300a1 	cmp	r3, r1, lsr #1
    9d18:	204330a1 	subcs	r3, r3, r1, lsr #1
    9d1c:	218000ac 	orrcs	r0, r0, r12, lsr #1
    9d20:	e1530121 	cmp	r3, r1, lsr #2
    9d24:	20433121 	subcs	r3, r3, r1, lsr #2
    9d28:	2180012c 	orrcs	r0, r0, r12, lsr #2
    9d2c:	e15301a1 	cmp	r3, r1, lsr #3
    9d30:	204331a1 	subcs	r3, r3, r1, lsr #3
    9d34:	218001ac 	orrcs	r0, r0, r12, lsr #3
    9d38:	e1b03203 	lsls	r3, r3, #4
    9d3c:	11b0c22c 	lsrsne	r12, r12, #4
    9d40:	1afffff0 	bne	9d08 <__aeabi_fdiv+0x4c>
    9d44:	e35200fd 	cmp	r2, #253	; 0xfd
    9d48:	8affff9d 	bhi	9bc4 <__aeabi_fmul+0xa0>
    9d4c:	e1530001 	cmp	r3, r1
    9d50:	e0a00b82 	adc	r0, r0, r2, lsl #23
    9d54:	03c00001 	biceq	r0, r0, #1
    9d58:	e12fff1e 	bx	lr
    9d5c:	e20cc102 	and	r12, r12, #-2147483648	; 0x80000000
    9d60:	e18c04a0 	orr	r0, r12, r0, lsr #9
    9d64:	e292207f 	adds	r2, r2, #127	; 0x7f
    9d68:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    9d6c:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    9d70:	c12fff1e 	bxgt	lr
    9d74:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    9d78:	e3a03000 	mov	r3, #0
    9d7c:	e2522001 	subs	r2, r2, #1
    9d80:	eaffff8f 	b	9bc4 <__aeabi_fmul+0xa0>
    9d84:	e3320000 	teq	r2, #0
    9d88:	e200c102 	and	r12, r0, #-2147483648	; 0x80000000
    9d8c:	01a00080 	lsleq	r0, r0, #1
    9d90:	03100502 	tsteq	r0, #8388608	; 0x800000
    9d94:	02422001 	subeq	r2, r2, #1
    9d98:	0afffffb 	beq	9d8c <__aeabi_fdiv+0xd0>
    9d9c:	e180000c 	orr	r0, r0, r12
    9da0:	e3330000 	teq	r3, #0
    9da4:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
    9da8:	01a01081 	lsleq	r1, r1, #1
    9dac:	03110502 	tsteq	r1, #8388608	; 0x800000
    9db0:	02433001 	subeq	r3, r3, #1
    9db4:	0afffffb 	beq	9da8 <__aeabi_fdiv+0xec>
    9db8:	e181100c 	orr	r1, r1, r12
    9dbc:	eaffffc4 	b	9cd4 <__aeabi_fdiv+0x18>
    9dc0:	e00c3ba1 	and	r3, r12, r1, lsr #23
    9dc4:	e132000c 	teq	r2, r12
    9dc8:	1a000005 	bne	9de4 <__aeabi_fdiv+0x128>
    9dcc:	e1b02480 	lsls	r2, r0, #9
    9dd0:	1affffb6 	bne	9cb0 <__aeabi_fmul+0x18c>
    9dd4:	e133000c 	teq	r3, r12
    9dd8:	1affffaf 	bne	9c9c <__aeabi_fmul+0x178>
    9ddc:	e1a00001 	mov	r0, r1
    9de0:	eaffffb2 	b	9cb0 <__aeabi_fmul+0x18c>
    9de4:	e133000c 	teq	r3, r12
    9de8:	1a000003 	bne	9dfc <__aeabi_fdiv+0x140>
    9dec:	e1b03481 	lsls	r3, r1, #9
    9df0:	0affff97 	beq	9c54 <__aeabi_fmul+0x130>
    9df4:	e1a00001 	mov	r0, r1
    9df8:	eaffffac 	b	9cb0 <__aeabi_fmul+0x18c>
    9dfc:	e3d0c102 	bics	r12, r0, #-2147483648	; 0x80000000
    9e00:	13d1c102 	bicsne	r12, r1, #-2147483648	; 0x80000000
    9e04:	1affffde 	bne	9d84 <__aeabi_fdiv+0xc8>
    9e08:	e3d02102 	bics	r2, r0, #-2147483648	; 0x80000000
    9e0c:	1affffa2 	bne	9c9c <__aeabi_fmul+0x178>
    9e10:	e3d13102 	bics	r3, r1, #-2147483648	; 0x80000000
    9e14:	1affff8e 	bne	9c54 <__aeabi_fmul+0x130>
    9e18:	eaffffa4 	b	9cb0 <__aeabi_fmul+0x18c>

00009e1c <__gesf2>:
    9e1c:	e3e0c000 	mvn	r12, #0
    9e20:	ea000002 	b	9e30 <__cmpsf2+0x4>

00009e24 <__lesf2>:
    9e24:	e3a0c001 	mov	r12, #1
    9e28:	ea000000 	b	9e30 <__cmpsf2+0x4>

00009e2c <__cmpsf2>:
    9e2c:	e3a0c001 	mov	r12, #1
    9e30:	e52dc004 	push	{r12}		; (str r12, [sp, #-4]!)
    9e34:	e1a02080 	lsl	r2, r0, #1
    9e38:	e1a03081 	lsl	r3, r1, #1
    9e3c:	e1f0cc42 	mvns	r12, r2, asr #24
    9e40:	11f0cc43 	mvnsne	r12, r3, asr #24
    9e44:	0a000007 	beq	9e68 <__cmpsf2+0x3c>
    9e48:	e28dd004 	add	sp, sp, #4
    9e4c:	e192c0a3 	orrs	r12, r2, r3, lsr #1
    9e50:	11300001 	teqne	r0, r1
    9e54:	50520003 	subspl	r0, r2, r3
    9e58:	81a00fc1 	asrhi	r0, r1, #31
    9e5c:	31e00fc1 	mvncc	r0, r1, asr #31
    9e60:	13800001 	orrne	r0, r0, #1
    9e64:	e12fff1e 	bx	lr
    9e68:	e1f0cc42 	mvns	r12, r2, asr #24
    9e6c:	1a000001 	bne	9e78 <__cmpsf2+0x4c>
    9e70:	e1b0c480 	lsls	r12, r0, #9
    9e74:	1a000003 	bne	9e88 <__cmpsf2+0x5c>
    9e78:	e1f0cc43 	mvns	r12, r3, asr #24
    9e7c:	1afffff1 	bne	9e48 <__cmpsf2+0x1c>
    9e80:	e1b0c481 	lsls	r12, r1, #9
    9e84:	0affffef 	beq	9e48 <__cmpsf2+0x1c>
    9e88:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    9e8c:	e12fff1e 	bx	lr

00009e90 <__aeabi_cfrcmple>:
    9e90:	e1a0c000 	mov	r12, r0
    9e94:	e1a00001 	mov	r0, r1
    9e98:	e1a0100c 	mov	r1, r12
    9e9c:	eaffffff 	b	9ea0 <__aeabi_cfcmpeq>

00009ea0 <__aeabi_cfcmpeq>:
    9ea0:	e92d400f 	push	{r0, r1, r2, r3, lr}
    9ea4:	ebffffe0 	bl	9e2c <__cmpsf2>
    9ea8:	e3500000 	cmp	r0, #0
    9eac:	43700000 	cmnmi	r0, #0
    9eb0:	e8bd400f 	pop	{r0, r1, r2, r3, lr}
    9eb4:	e12fff1e 	bx	lr

00009eb8 <__aeabi_fcmpeq>:
    9eb8:	e52de008 	str	lr, [sp, #-8]!
    9ebc:	ebfffff7 	bl	9ea0 <__aeabi_cfcmpeq>
    9ec0:	03a00001 	moveq	r0, #1
    9ec4:	13a00000 	movne	r0, #0
    9ec8:	e49de008 	ldr	lr, [sp], #8
    9ecc:	e12fff1e 	bx	lr

00009ed0 <__aeabi_fcmplt>:
    9ed0:	e52de008 	str	lr, [sp, #-8]!
    9ed4:	ebfffff1 	bl	9ea0 <__aeabi_cfcmpeq>
    9ed8:	33a00001 	movcc	r0, #1
    9edc:	23a00000 	movcs	r0, #0
    9ee0:	e49de008 	ldr	lr, [sp], #8
    9ee4:	e12fff1e 	bx	lr

00009ee8 <__aeabi_fcmple>:
    9ee8:	e52de008 	str	lr, [sp, #-8]!
    9eec:	ebffffeb 	bl	9ea0 <__aeabi_cfcmpeq>
    9ef0:	93a00001 	movls	r0, #1
    9ef4:	83a00000 	movhi	r0, #0
    9ef8:	e49de008 	ldr	lr, [sp], #8
    9efc:	e12fff1e 	bx	lr

00009f00 <__aeabi_fcmpge>:
    9f00:	e52de008 	str	lr, [sp, #-8]!
    9f04:	ebffffe1 	bl	9e90 <__aeabi_cfrcmple>
    9f08:	93a00001 	movls	r0, #1
    9f0c:	83a00000 	movhi	r0, #0
    9f10:	e49de008 	ldr	lr, [sp], #8
    9f14:	e12fff1e 	bx	lr

00009f18 <__aeabi_fcmpgt>:
    9f18:	e52de008 	str	lr, [sp, #-8]!
    9f1c:	ebffffdb 	bl	9e90 <__aeabi_cfrcmple>
    9f20:	33a00001 	movcc	r0, #1
    9f24:	23a00000 	movcs	r0, #0
    9f28:	e49de008 	ldr	lr, [sp], #8
    9f2c:	e12fff1e 	bx	lr

00009f30 <__aeabi_f2iz>:
    9f30:	e1a02080 	lsl	r2, r0, #1
    9f34:	e352047f 	cmp	r2, #2130706432	; 0x7f000000
    9f38:	3a000008 	bcc	9f60 <__aeabi_f2iz+0x30>
    9f3c:	e3a0309e 	mov	r3, #158	; 0x9e
    9f40:	e0532c22 	subs	r2, r3, r2, lsr #24
    9f44:	9a000007 	bls	9f68 <__aeabi_f2iz+0x38>
    9f48:	e1a03400 	lsl	r3, r0, #8
    9f4c:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    9f50:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    9f54:	e1a00233 	lsr	r0, r3, r2
    9f58:	12600000 	rsbne	r0, r0, #0
    9f5c:	e12fff1e 	bx	lr
    9f60:	e3a00000 	mov	r0, #0
    9f64:	e12fff1e 	bx	lr
    9f68:	e3720061 	cmn	r2, #97	; 0x61
    9f6c:	1a000001 	bne	9f78 <__aeabi_f2iz+0x48>
    9f70:	e1b02480 	lsls	r2, r0, #9
    9f74:	1a000002 	bne	9f84 <__aeabi_f2iz+0x54>
    9f78:	e2100102 	ands	r0, r0, #-2147483648	; 0x80000000
    9f7c:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    9f80:	e12fff1e 	bx	lr
    9f84:	e3a00000 	mov	r0, #0
    9f88:	e12fff1e 	bx	lr

00009f8c <atexit>:
    9f8c:	e1a01000 	mov	r1, r0
    9f90:	e3a00000 	mov	r0, #0
    9f94:	e92d4008 	push	{r3, lr}
    9f98:	e1a02000 	mov	r2, r0
    9f9c:	e1a03000 	mov	r3, r0
    9fa0:	eb000030 	bl	a068 <__register_exitproc>
    9fa4:	e8bd4008 	pop	{r3, lr}
    9fa8:	e12fff1e 	bx	lr

00009fac <__errno>:
    9fac:	e59f3004 	ldr	r3, [pc, #4]	; 9fb8 <__errno+0xc>
    9fb0:	e5930000 	ldr	r0, [r3]
    9fb4:	e12fff1e 	bx	lr
    9fb8:	0000b3c8 	.word	0x0000b3c8

00009fbc <exit>:
    9fbc:	e92d4008 	push	{r3, lr}
    9fc0:	e3a01000 	mov	r1, #0
    9fc4:	e1a04000 	mov	r4, r0
    9fc8:	eb000063 	bl	a15c <__call_exitprocs>
    9fcc:	e59f3018 	ldr	r3, [pc, #24]	; 9fec <exit+0x30>
    9fd0:	e5930000 	ldr	r0, [r3]
    9fd4:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    9fd8:	e3530000 	cmp	r3, #0
    9fdc:	11a0e00f 	movne	lr, pc
    9fe0:	112fff13 	bxne	r3
    9fe4:	e1a00004 	mov	r0, r4
    9fe8:	eb0000e7 	bl	a38c <_exit>
    9fec:	0000a6a0 	.word	0x0000a6a0

00009ff0 <srand>:
    9ff0:	e59f3010 	ldr	r3, [pc, #16]	; a008 <srand+0x18>
    9ff4:	e5933000 	ldr	r3, [r3]
    9ff8:	e3a02000 	mov	r2, #0
    9ffc:	e58300a8 	str	r0, [r3, #168]	; 0xa8
    a000:	e58320ac 	str	r2, [r3, #172]	; 0xac
    a004:	e12fff1e 	bx	lr
    a008:	0000b3c8 	.word	0x0000b3c8

0000a00c <rand>:
    a00c:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    a010:	e59f3044 	ldr	r3, [pc, #68]	; a05c <rand+0x50>
    a014:	e593c000 	ldr	r12, [r3]
    a018:	e59f4040 	ldr	r4, [pc, #64]	; a060 <rand+0x54>
    a01c:	e59c20a8 	ldr	r2, [r12, #168]	; 0xa8
    a020:	e0040492 	mul	r4, r2, r4
    a024:	e59c10ac 	ldr	r1, [r12, #172]	; 0xac
    a028:	e59f3034 	ldr	r3, [pc, #52]	; a064 <rand+0x58>
    a02c:	e0244193 	mla	r4, r3, r1, r4
    a030:	e0810392 	umull	r0, r1, r2, r3
    a034:	e3a02001 	mov	r2, #1
    a038:	e0922000 	adds	r2, r2, r0
    a03c:	e0841001 	add	r1, r4, r1
    a040:	e3a03000 	mov	r3, #0
    a044:	e0a33001 	adc	r3, r3, r1
    a048:	e58c20a8 	str	r2, [r12, #168]	; 0xa8
    a04c:	e58c30ac 	str	r3, [r12, #172]	; 0xac
    a050:	e3c30102 	bic	r0, r3, #-2147483648	; 0x80000000
    a054:	e8bd0010 	ldmfd	sp!, {r4}
    a058:	e12fff1e 	bx	lr
    a05c:	0000b3c8 	.word	0x0000b3c8
    a060:	5851f42d 	.word	0x5851f42d
    a064:	4c957f2d 	.word	0x4c957f2d

0000a068 <__register_exitproc>:
    a068:	e59fc0e4 	ldr	r12, [pc, #228]	; a154 <__register_exitproc+0xec>
    a06c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a070:	e59c4000 	ldr	r4, [r12]
    a074:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    a078:	e35c0000 	cmp	r12, #0
    a07c:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    a080:	e59c5004 	ldr	r5, [r12, #4]
    a084:	0584c148 	streq	r12, [r4, #328]	; 0x148
    a088:	e355001f 	cmp	r5, #31
    a08c:	e24dd010 	sub	sp, sp, #16
    a090:	e1a06000 	mov	r6, r0
    a094:	da000015 	ble	a0f0 <__register_exitproc+0x88>
    a098:	e59f00b8 	ldr	r0, [pc, #184]	; a158 <__register_exitproc+0xf0>
    a09c:	e3500000 	cmp	r0, #0
    a0a0:	1a000001 	bne	a0ac <__register_exitproc+0x44>
    a0a4:	e3e00000 	mvn	r0, #0
    a0a8:	ea000018 	b	a110 <__register_exitproc+0xa8>
    a0ac:	e3a00e19 	mov	r0, #400	; 0x190
    a0b0:	e58d100c 	str	r1, [sp, #12]
    a0b4:	e58d2008 	str	r2, [sp, #8]
    a0b8:	e58d3004 	str	r3, [sp, #4]
    a0bc:	e320f000 	nop	{0}
    a0c0:	e250c000 	subs	r12, r0, #0
    a0c4:	e59d100c 	ldr	r1, [sp, #12]
    a0c8:	e59d2008 	ldr	r2, [sp, #8]
    a0cc:	e59d3004 	ldr	r3, [sp, #4]
    a0d0:	0afffff3 	beq	a0a4 <__register_exitproc+0x3c>
    a0d4:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    a0d8:	e3a00000 	mov	r0, #0
    a0dc:	e58c0004 	str	r0, [r12, #4]
    a0e0:	e58c5000 	str	r5, [r12]
    a0e4:	e584c148 	str	r12, [r4, #328]	; 0x148
    a0e8:	e58c0188 	str	r0, [r12, #392]	; 0x188
    a0ec:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    a0f0:	e3560000 	cmp	r6, #0
    a0f4:	e59c4004 	ldr	r4, [r12, #4]
    a0f8:	1a000007 	bne	a11c <__register_exitproc+0xb4>
    a0fc:	e2843002 	add	r3, r4, #2
    a100:	e2844001 	add	r4, r4, #1
    a104:	e78c1103 	str	r1, [r12, r3, lsl #2]
    a108:	e58c4004 	str	r4, [r12, #4]
    a10c:	e3a00000 	mov	r0, #0
    a110:	e28dd010 	add	sp, sp, #16
    a114:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    a118:	e12fff1e 	bx	lr
    a11c:	e3a00001 	mov	r0, #1
    a120:	e1a00410 	lsl	r0, r0, r4
    a124:	e08c8104 	add	r8, r12, r4, lsl #2
    a128:	e3560002 	cmp	r6, #2
    a12c:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    a130:	e5883108 	str	r3, [r8, #264]	; 0x108
    a134:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    a138:	e1877000 	orr	r7, r7, r0
    a13c:	01830000 	orreq	r0, r3, r0
    a140:	e1a05008 	mov	r5, r8
    a144:	e5882088 	str	r2, [r8, #136]	; 0x88
    a148:	e58c7188 	str	r7, [r12, #392]	; 0x188
    a14c:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    a150:	eaffffe9 	b	a0fc <__register_exitproc+0x94>
    a154:	0000a6a0 	.word	0x0000a6a0
    a158:	00000000 	.word	0x00000000

0000a15c <__call_exitprocs>:
    a15c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    a160:	e59f3168 	ldr	r3, [pc, #360]	; a2d0 <__call_exitprocs+0x174>
    a164:	e5933000 	ldr	r3, [r3]
    a168:	e24dd014 	sub	sp, sp, #20
    a16c:	e58d3004 	str	r3, [sp, #4]
    a170:	e2833f52 	add	r3, r3, #328	; 0x148
    a174:	e58d0008 	str	r0, [sp, #8]
    a178:	e58d300c 	str	r3, [sp, #12]
    a17c:	e1a07001 	mov	r7, r1
    a180:	e3a08001 	mov	r8, #1
    a184:	e59d3004 	ldr	r3, [sp, #4]
    a188:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    a18c:	e3560000 	cmp	r6, #0
    a190:	e59db00c 	ldr	r11, [sp, #12]
    a194:	0a000033 	beq	a268 <__call_exitprocs+0x10c>
    a198:	e5965004 	ldr	r5, [r6, #4]
    a19c:	e2554001 	subs	r4, r5, #1
    a1a0:	5286a088 	addpl	r10, r6, #136	; 0x88
    a1a4:	5285501f 	addpl	r5, r5, #31
    a1a8:	508a5105 	addpl	r5, r10, r5, lsl #2
    a1ac:	5a000007 	bpl	a1d0 <__call_exitprocs+0x74>
    a1b0:	ea000029 	b	a25c <__call_exitprocs+0x100>
    a1b4:	e5953000 	ldr	r3, [r5]
    a1b8:	e1530007 	cmp	r3, r7
    a1bc:	0a000005 	beq	a1d8 <__call_exitprocs+0x7c>
    a1c0:	e2444001 	sub	r4, r4, #1
    a1c4:	e3740001 	cmn	r4, #1
    a1c8:	e2455004 	sub	r5, r5, #4
    a1cc:	0a000022 	beq	a25c <__call_exitprocs+0x100>
    a1d0:	e3570000 	cmp	r7, #0
    a1d4:	1afffff6 	bne	a1b4 <__call_exitprocs+0x58>
    a1d8:	e5963004 	ldr	r3, [r6, #4]
    a1dc:	e06a2005 	rsb	r2, r10, r5
    a1e0:	e2433001 	sub	r3, r3, #1
    a1e4:	e0862002 	add	r2, r6, r2
    a1e8:	e1530004 	cmp	r3, r4
    a1ec:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    a1f0:	13a01000 	movne	r1, #0
    a1f4:	05864004 	streq	r4, [r6, #4]
    a1f8:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    a1fc:	e3530000 	cmp	r3, #0
    a200:	0affffee 	beq	a1c0 <__call_exitprocs+0x64>
    a204:	e1a02418 	lsl	r2, r8, r4
    a208:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    a20c:	e1120001 	tst	r2, r1
    a210:	e5969004 	ldr	r9, [r6, #4]
    a214:	0a000016 	beq	a274 <__call_exitprocs+0x118>
    a218:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    a21c:	e1120001 	tst	r2, r1
    a220:	1a000016 	bne	a280 <__call_exitprocs+0x124>
    a224:	e59d0008 	ldr	r0, [sp, #8]
    a228:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    a22c:	e1a0e00f 	mov	lr, pc
    a230:	e12fff13 	bx	r3
    a234:	e5963004 	ldr	r3, [r6, #4]
    a238:	e1530009 	cmp	r3, r9
    a23c:	1affffd0 	bne	a184 <__call_exitprocs+0x28>
    a240:	e59b3000 	ldr	r3, [r11]
    a244:	e1530006 	cmp	r3, r6
    a248:	1affffcd 	bne	a184 <__call_exitprocs+0x28>
    a24c:	e2444001 	sub	r4, r4, #1
    a250:	e3740001 	cmn	r4, #1
    a254:	e2455004 	sub	r5, r5, #4
    a258:	1affffdc 	bne	a1d0 <__call_exitprocs+0x74>
    a25c:	e59f1070 	ldr	r1, [pc, #112]	; a2d4 <__call_exitprocs+0x178>
    a260:	e3510000 	cmp	r1, #0
    a264:	1a000009 	bne	a290 <__call_exitprocs+0x134>
    a268:	e28dd014 	add	sp, sp, #20
    a26c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    a270:	e12fff1e 	bx	lr
    a274:	e1a0e00f 	mov	lr, pc
    a278:	e12fff13 	bx	r3
    a27c:	eaffffec 	b	a234 <__call_exitprocs+0xd8>
    a280:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    a284:	e1a0e00f 	mov	lr, pc
    a288:	e12fff13 	bx	r3
    a28c:	eaffffe8 	b	a234 <__call_exitprocs+0xd8>
    a290:	e5963004 	ldr	r3, [r6, #4]
    a294:	e3530000 	cmp	r3, #0
    a298:	e5963000 	ldr	r3, [r6]
    a29c:	1a000008 	bne	a2c4 <__call_exitprocs+0x168>
    a2a0:	e3530000 	cmp	r3, #0
    a2a4:	0a000006 	beq	a2c4 <__call_exitprocs+0x168>
    a2a8:	e1a00006 	mov	r0, r6
    a2ac:	e58b3000 	str	r3, [r11]
    a2b0:	e320f000 	nop	{0}
    a2b4:	e59b6000 	ldr	r6, [r11]
    a2b8:	e3560000 	cmp	r6, #0
    a2bc:	1affffb5 	bne	a198 <__call_exitprocs+0x3c>
    a2c0:	eaffffe8 	b	a268 <__call_exitprocs+0x10c>
    a2c4:	e1a0b006 	mov	r11, r6
    a2c8:	e1a06003 	mov	r6, r3
    a2cc:	eafffff9 	b	a2b8 <__call_exitprocs+0x15c>
    a2d0:	0000a6a0 	.word	0x0000a6a0
    a2d4:	00000000 	.word	0x00000000

0000a2d8 <register_fini>:
    a2d8:	e92d4008 	push	{r3, lr}
    a2dc:	e59f3010 	ldr	r3, [pc, #16]	; a2f4 <register_fini+0x1c>
    a2e0:	e3530000 	cmp	r3, #0
    a2e4:	159f000c 	ldrne	r0, [pc, #12]	; a2f8 <register_fini+0x20>
    a2e8:	1bffff27 	blne	9f8c <atexit>
    a2ec:	e8bd4008 	pop	{r3, lr}
    a2f0:	e12fff1e 	bx	lr
    a2f4:	0000a6c8 	.word	0x0000a6c8
    a2f8:	0000a2fc 	.word	0x0000a2fc

0000a2fc <__libc_fini_array>:
    a2fc:	e92d4038 	push	{r3, r4, r5, lr}
    a300:	e59f5030 	ldr	r5, [pc, #48]	; a338 <__libc_fini_array+0x3c>
    a304:	e59f4030 	ldr	r4, [pc, #48]	; a33c <__libc_fini_array+0x40>
    a308:	e0654004 	rsb	r4, r5, r4
    a30c:	e1b04144 	asrs	r4, r4, #2
    a310:	10855104 	addne	r5, r5, r4, lsl #2
    a314:	0a000004 	beq	a32c <__libc_fini_array+0x30>
    a318:	e5353004 	ldr	r3, [r5, #-4]!
    a31c:	e1a0e00f 	mov	lr, pc
    a320:	e12fff13 	bx	r3
    a324:	e2544001 	subs	r4, r4, #1
    a328:	1afffffa 	bne	a318 <__libc_fini_array+0x1c>
    a32c:	eb0000e5 	bl	a6c8 <__libc_fini>
    a330:	e8bd4038 	pop	{r3, r4, r5, lr}
    a334:	e12fff1e 	bx	lr
    a338:	0000a6e0 	.word	0x0000a6e0
    a33c:	0000a6e4 	.word	0x0000a6e4

0000a340 <__cs3_premain>:
    a340:	e92d4008 	push	{r3, lr}
    a344:	eb000017 	bl	a3a8 <__libc_init_array>
    a348:	e59f3030 	ldr	r3, [pc, #48]	; a380 <__cs3_premain+0x40>
    a34c:	e3530000 	cmp	r3, #0
    a350:	15930000 	ldrne	r0, [r3]
    a354:	01a00003 	moveq	r0, r3
    a358:	e59f3024 	ldr	r3, [pc, #36]	; a384 <__cs3_premain+0x44>
    a35c:	e3530000 	cmp	r3, #0
    a360:	15931000 	ldrne	r1, [r3]
    a364:	01a01003 	moveq	r1, r3
    a368:	e3a02000 	mov	r2, #0
    a36c:	ebffea78 	bl	4d54 <main>
    a370:	e59f3010 	ldr	r3, [pc, #16]	; a388 <__cs3_premain+0x48>
    a374:	e3530000 	cmp	r3, #0
    a378:	1bffff0f 	blne	9fbc <exit>
    a37c:	eafffffe 	b	a37c <__cs3_premain+0x3c>
	...
    a388:	00009fbc 	.word	0x00009fbc

0000a38c <_exit>:
    a38c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a390:	e3a00018 	mov	r0, #24
    a394:	e59f1004 	ldr	r1, [pc, #4]	; a3a0 <_exit+0x14>
    a398:	ef123456 	svc	0x00123456
    a39c:	eafffffe 	b	a39c <_exit+0x10>
    a3a0:	00020026 	.word	0x00020026

0000a3a4 <__cs3_isr_interrupt>:
    a3a4:	eafffffe 	b	a3a4 <__cs3_isr_interrupt>

0000a3a8 <__libc_init_array>:
    a3a8:	e92d4070 	push	{r4, r5, r6, lr}
    a3ac:	e59f506c 	ldr	r5, [pc, #108]	; a420 <__libc_init_array+0x78>
    a3b0:	e59f606c 	ldr	r6, [pc, #108]	; a424 <__libc_init_array+0x7c>
    a3b4:	e0656006 	rsb	r6, r5, r6
    a3b8:	e1b06146 	asrs	r6, r6, #2
    a3bc:	12455004 	subne	r5, r5, #4
    a3c0:	13a04000 	movne	r4, #0
    a3c4:	0a000005 	beq	a3e0 <__libc_init_array+0x38>
    a3c8:	e5b53004 	ldr	r3, [r5, #4]!
    a3cc:	e2844001 	add	r4, r4, #1
    a3d0:	e1a0e00f 	mov	lr, pc
    a3d4:	e12fff13 	bx	r3
    a3d8:	e1560004 	cmp	r6, r4
    a3dc:	1afffff9 	bne	a3c8 <__libc_init_array+0x20>
    a3e0:	e59f5040 	ldr	r5, [pc, #64]	; a428 <__libc_init_array+0x80>
    a3e4:	e59f6040 	ldr	r6, [pc, #64]	; a42c <__libc_init_array+0x84>
    a3e8:	e0656006 	rsb	r6, r5, r6
    a3ec:	eb0000ad 	bl	a6a8 <_init>
    a3f0:	e1b06146 	asrs	r6, r6, #2
    a3f4:	12455004 	subne	r5, r5, #4
    a3f8:	13a04000 	movne	r4, #0
    a3fc:	0a000005 	beq	a418 <__libc_init_array+0x70>
    a400:	e5b53004 	ldr	r3, [r5, #4]!
    a404:	e2844001 	add	r4, r4, #1
    a408:	e1a0e00f 	mov	lr, pc
    a40c:	e12fff13 	bx	r3
    a410:	e1560004 	cmp	r6, r4
    a414:	1afffff9 	bne	a400 <__libc_init_array+0x58>
    a418:	e8bd4070 	pop	{r4, r5, r6, lr}
    a41c:	e12fff1e 	bx	lr
    a420:	0000a6c0 	.word	0x0000a6c0
    a424:	0000a6c0 	.word	0x0000a6c0
    a428:	0000a6c0 	.word	0x0000a6c0
    a42c:	0000a6c8 	.word	0x0000a6c8

Disassembly of section .rodata:

0000a438 <bp-0x10>:
    a438:	00776f70 	.word	0x00776f70
    a43c:	74727173 	.word	0x74727173
	...

0000a448 <bp>:
    a448:	00000000 3ff00000 00000000 3ff80000     .......?.......?

0000a458 <dp_l>:
	...
    a460:	43cfd006 3e4cfdeb                       ...C..L>

0000a468 <dp_h>:
	...
    a470:	40000000 3fe2b803                       ...@...?

0000a478 <npio2_hw>:
    a478:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
    a488:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
    a498:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
    a4a8:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
    a4b8:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
    a4c8:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
    a4d8:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
    a4e8:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

0000a4f8 <two_over_pi>:
    a4f8:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
    a508:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
    a518:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
    a528:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
    a538:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
    a548:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
    a558:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
    a568:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
    a578:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
    a588:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
    a598:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
    a5a8:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
    a5b8:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
    a5c8:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
    a5d8:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
    a5e8:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
    a5f8:	0060e27b 00c08c6b                       {.`.k...

0000a600 <init_jk>:
    a600:	00000002 00000003 00000004 00000006     ................

0000a610 <PIo2>:
    a610:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
    a620:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
    a630:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
    a640:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

0000a650 <atanhi>:
    a650:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
    a660:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?

0000a670 <atanlo>:
    a670:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
    a680:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

0000a690 <TWO52>:
    a690:	00000000 43300000 00000000 c3300000     ......0C......0.

0000a6a0 <_global_impure_ptr>:
    a6a0:	0000b3d0 00000043                       ....C...

0000a6a8 <_init>:
    a6a8:	e1a0c00d 	mov	r12, sp
    a6ac:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    a6b0:	e24cb004 	sub	r11, r12, #4
    a6b4:	e24bd028 	sub	sp, r11, #40	; 0x28
    a6b8:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    a6bc:	e12fff1e 	bx	lr

0000a6c0 <__init_array_start>:
    a6c0:	0000a2d8 	.word	0x0000a2d8

0000a6c4 <__frame_dummy_init_array_entry>:
    a6c4:	00000208                                ....

0000a6c8 <__libc_fini>:
    a6c8:	e1a0c00d 	mov	r12, sp
    a6cc:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    a6d0:	e24cb004 	sub	r11, r12, #4
    a6d4:	e24bd028 	sub	sp, r11, #40	; 0x28
    a6d8:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    a6dc:	e12fff1e 	bx	lr

0000a6e0 <__fini_array_start>:
    a6e0:	000001c4 	.word	0x000001c4

0000a6e4 <__cs3_regions>:
    a6e4:	00000000 	.word	0x00000000
    a6e8:	00000040 	.word	0x00000040
    a6ec:	00000040 	.word	0x00000040
    a6f0:	0000b7c0 	.word	0x0000b7c0
    a6f4:	00124a90 	.word	0x00124a90
