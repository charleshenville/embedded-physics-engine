
C:/Users/henvill1/project/fluid_simulator.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 74 08 00 00 78 08 00 00 7c 08 00 00     @...t...x...|...
  30:	80 08 00 00 c4 90 00 00 58 3a 00 00 84 08 00 00     ........X:......

Disassembly of section .text:

00000040 <__cs3_reset>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb0023e1 	bl	9060 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	00009418 	.word	0x00009418

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	000099c0 	.word	0x000099c0

00000124 <__cs3_heap_start_ptr>:
     124:	000c4e80 	.word	0x000c4e80

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	000099c8 	.word	0x000099c8
     170:	000099cb 	.word	0x000099cb
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	000099c8 	.word	0x000099c8
     1bc:	000099c8 	.word	0x000099c8
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	000099c8 	.word	0x000099c8
     200:	00000000 	.word	0x00000000
     204:	00009150 	.word	0x00009150

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00009150 	.word	0x00009150
     250:	000099cc 	.word	0x000099cc
     254:	00009418 	.word	0x00009418
     258:	00000000 	.word	0x00000000

0000025c <hueToRGB565>:
	return 0;
	
}

// Function to convert a hue to an R(5)G(6)B(5) bit scheme
short int hueToRGB565(float hue) {
     25c:	e92d4070 	push	{r4, r5, r6, lr}
     260:	e1a04000 	mov	r4, r0

    if (hue<0.0) hue = 0.0;
     264:	e3a01000 	mov	r1, #0
     268:	eb002260 	bl	8bf0 <__aeabi_fcmplt>
     26c:	e3500000 	cmp	r0, #0
     270:	1a000046 	bne	390 <hueToRGB565+0x134>
    if (hue>1.0) hue = 1.0;
     274:	e1a00004 	mov	r0, r4
     278:	e3a015fe 	mov	r1, #1065353216	; 0x3f800000
     27c:	eb00226d 	bl	8c38 <__aeabi_fcmpgt>
     280:	e3500000 	cmp	r0, #0
    int sector = floor(hue * 6);

    // Calculate the fractional part to transition
    float f = hue * 6 - sector;
    // Invert the fractional part in some cases
    float nf = 1 - f;
     284:	13a005fe 	movne	r0, #1065353216	; 0x3f800000

// Function to convert a hue to an R(5)G(6)B(5) bit scheme
short int hueToRGB565(float hue) {

    if (hue<0.0) hue = 0.0;
    if (hue>1.0) hue = 1.0;
     288:	1a000027 	bne	32c <hueToRGB565+0xd0>
    // Declare variables to store red, green, and blue components (initially floats for calculations)
    float r, g, b;

    // Calculate the sector of the color wheel (shown in the case statement below)
    int sector = floor(hue * 6);
     28c:	e1a00004 	mov	r0, r4
     290:	e3a01000 	mov	r1, #0
     294:	e34410c0 	movt	r1, #16576	; 0x40c0
     298:	eb002169 	bl	8844 <__aeabi_fmul>
     29c:	e1a05000 	mov	r5, r0
     2a0:	eb001ed8 	bl	7e08 <__aeabi_f2d>
     2a4:	eb000e87 	bl	3cc8 <floor>
     2a8:	eb00207b 	bl	849c <__aeabi_d2iz>
     2ac:	e1a04000 	mov	r4, r0

    // Calculate the fractional part to transition
    float f = hue * 6 - sector;
     2b0:	eb00212c 	bl	8768 <__aeabi_i2f>
     2b4:	e1a01000 	mov	r1, r0
     2b8:	e1a00005 	mov	r0, r5
     2bc:	eb0020b7 	bl	85a0 <__aeabi_fsub>
     2c0:	e1a05000 	mov	r5, r0
    // Invert the fractional part in some cases
    float nf = 1 - f;
     2c4:	e3a005fe 	mov	r0, #1065353216	; 0x3f800000
     2c8:	e1a01005 	mov	r1, r5
     2cc:	eb0020b3 	bl	85a0 <__aeabi_fsub>

    // Determine the RGB values based on the sector
    switch (sector) {
     2d0:	e3540004 	cmp	r4, #4
     2d4:	979ff104 	ldrls	pc, [pc, r4, lsl #2]
     2d8:	ea000013 	b	32c <hueToRGB565+0xd0>
     2dc:	000002f0 	.word	0x000002f0
     2e0:	0000033c 	.word	0x0000033c
     2e4:	00000300 	.word	0x00000300
     2e8:	0000030c 	.word	0x0000030c
     2ec:	0000031c 	.word	0x0000031c
    int sector = floor(hue * 6);

    // Calculate the fractional part to transition
    float f = hue * 6 - sector;
    // Invert the fractional part in some cases
    float nf = 1 - f;
     2f0:	e1a06005 	mov	r6, r5

    // Determine the RGB values based on the sector
    switch (sector) {
        case 0:  // Red
            r = 1.0; g = f; b = 0.0; break;
     2f4:	e3a05000 	mov	r5, #0
     2f8:	e3a005fe 	mov	r0, #1065353216	; 0x3f800000
     2fc:	ea000010 	b	344 <hueToRGB565+0xe8>
        case 1:  // Red -> Green
            r = nf; g = 1.0; b = 0.0; break;
        case 2:  // Green
            r = 0.0; g = 1.0; b = f; break;
     300:	e3a065fe 	mov	r6, #1065353216	; 0x3f800000
     304:	e3a00000 	mov	r0, #0
     308:	ea00000d 	b	344 <hueToRGB565+0xe8>
    int sector = floor(hue * 6);

    // Calculate the fractional part to transition
    float f = hue * 6 - sector;
    // Invert the fractional part in some cases
    float nf = 1 - f;
     30c:	e1a06000 	mov	r6, r0
        case 1:  // Red -> Green
            r = nf; g = 1.0; b = 0.0; break;
        case 2:  // Green
            r = 0.0; g = 1.0; b = f; break;
        case 3:  // Green -> Blue
            r = 0.0; g = nf; b = 1.0; break;
     310:	e3a055fe 	mov	r5, #1065353216	; 0x3f800000
     314:	e3a00000 	mov	r0, #0
     318:	ea000009 	b	344 <hueToRGB565+0xe8>

    // Calculate the sector of the color wheel (shown in the case statement below)
    int sector = floor(hue * 6);

    // Calculate the fractional part to transition
    float f = hue * 6 - sector;
     31c:	e1a00005 	mov	r0, r5
        case 2:  // Green
            r = 0.0; g = 1.0; b = f; break;
        case 3:  // Green -> Blue
            r = 0.0; g = nf; b = 1.0; break;
        case 4:  // Blue
            r = f; g = 0.0; b = 1.0; break;
     320:	e3a055fe 	mov	r5, #1065353216	; 0x3f800000
     324:	e3a06000 	mov	r6, #0
     328:	ea000005 	b	344 <hueToRGB565+0xe8>
        default: // Blue -> Red
            r = 1.0; g = 0.0; b = nf; break;
     32c:	e1a05000 	mov	r5, r0
     330:	e3a06000 	mov	r6, #0
     334:	e3a005fe 	mov	r0, #1065353216	; 0x3f800000
     338:	ea000001 	b	344 <hueToRGB565+0xe8>
    // Determine the RGB values based on the sector
    switch (sector) {
        case 0:  // Red
            r = 1.0; g = f; b = 0.0; break;
        case 1:  // Red -> Green
            r = nf; g = 1.0; b = 0.0; break;
     33c:	e3a05000 	mov	r5, #0
     340:	e3a065fe 	mov	r6, #1065353216	; 0x3f800000
        default: // Blue -> Red
            r = 1.0; g = 0.0; b = nf; break;
    }

    // Scale the RGB values to fit 5, 6, 5 bit col channels
    r *= 31;
     344:	e3a01000 	mov	r1, #0
     348:	e34411f8 	movt	r1, #16888	; 0x41f8
     34c:	eb00213c 	bl	8844 <__aeabi_fmul>
    g *= 63;
    b *= 31;

    // Combine the RGB values into a single RGB565 value
    return ((int)r << 11) | ((int)g << 5) | (int)b;
     350:	eb00223e 	bl	8c50 <__aeabi_f2iz>
     354:	e1a04580 	lsl	r4, r0, #11
            r = 1.0; g = 0.0; b = nf; break;
    }

    // Scale the RGB values to fit 5, 6, 5 bit col channels
    r *= 31;
    g *= 63;
     358:	e1a00006 	mov	r0, r6
     35c:	e3a01000 	mov	r1, #0
     360:	e344127c 	movt	r1, #17020	; 0x427c
     364:	eb002136 	bl	8844 <__aeabi_fmul>
    b *= 31;

    // Combine the RGB values into a single RGB565 value
    return ((int)r << 11) | ((int)g << 5) | (int)b;
     368:	eb002238 	bl	8c50 <__aeabi_f2iz>
     36c:	e1844280 	orr	r4, r4, r0, lsl #5
    }

    // Scale the RGB values to fit 5, 6, 5 bit col channels
    r *= 31;
    g *= 63;
    b *= 31;
     370:	e1a00005 	mov	r0, r5
     374:	e3a01000 	mov	r1, #0
     378:	e34411f8 	movt	r1, #16888	; 0x41f8
     37c:	eb002130 	bl	8844 <__aeabi_fmul>

    // Combine the RGB values into a single RGB565 value
    return ((int)r << 11) | ((int)g << 5) | (int)b;
     380:	eb002232 	bl	8c50 <__aeabi_f2iz>
     384:	e1840000 	orr	r0, r4, r0
     388:	e6bf0070 	sxth	r0, r0
     38c:	e8bd8070 	pop	{r4, r5, r6, pc}
    if (hue>1.0) hue = 1.0;
    // Declare variables to store red, green, and blue components (initially floats for calculations)
    float r, g, b;

    // Calculate the sector of the color wheel (shown in the case statement below)
    int sector = floor(hue * 6);
     390:	e3a00000 	mov	r0, #0
     394:	e3a01000 	mov	r1, #0
     398:	eb00203f 	bl	849c <__aeabi_d2iz>

    // Calculate the fractional part to transition
    float f = hue * 6 - sector;
     39c:	eb0020f1 	bl	8768 <__aeabi_i2f>
     3a0:	e1a05000 	mov	r5, r0
     3a4:	eaffffd1 	b	2f0 <hueToRGB565+0x94>

000003a8 <abs>:

// Finds the absolue value of an int
int abs(int in){
	if (in>0) return in;
	return (0-in);
}
     3a8:	e3500000 	cmp	r0, #0
     3ac:	b2600000 	rsblt	r0, r0, #0
     3b0:	e12fff1e 	bx	lr

000003b4 <swap>:

// Swaps two ints
void swap(int *a, int*b){
	int temp = *a;
     3b4:	e5903000 	ldr	r3, [r0]
	*a = *b;
     3b8:	e5912000 	ldr	r2, [r1]
     3bc:	e5802000 	str	r2, [r0]
	*b = temp;
     3c0:	e5813000 	str	r3, [r1]
     3c4:	e12fff1e 	bx	lr

000003c8 <waitForVsync>:
}

void waitForVsync(){

	volatile int *vgaCtlPtr = (volatile int*)VGA_CONTROLLER_BASE;
	*vgaCtlPtr = 1; // 1->Front Buffer Address. Kickstarts our swap/rendering process
     3c8:	e3033fff 	movw	r3, #16383	; 0x3fff
     3cc:	e34f3f20 	movt	r3, #65312	; 0xff20
     3d0:	e3a02001 	mov	r2, #1
     3d4:	e5032fdf 	str	r2, [r3, #-4063]	; 0xfffff021
	
	// Poll status bit for a 0
	while ((*(vgaCtlPtr + 3) & 0x01)!=0);
     3d8:	e3032fff 	movw	r2, #16383	; 0x3fff
     3dc:	e34f2f20 	movt	r2, #65312	; 0xff20
     3e0:	e5123fd3 	ldr	r3, [r2, #-4051]	; 0xfffff02d
     3e4:	e3130001 	tst	r3, #1
     3e8:	1afffffc 	bne	3e0 <waitForVsync+0x18>
		
}
     3ec:	e12fff1e 	bx	lr

000003f0 <drawIndividualPixel>:

// Draws just one pixel to the appropriate frame buffer.
void drawIndividualPixel(int x, int y, short int colour){
	volatile short int *pixelAddress;
	pixelAddress = (volatile short int *) (CURRENT_BACK_BUFFER_ADDRESS + (y << 10) + (x << 1)); 
     3f0:	e30939e4 	movw	r3, #39396	; 0x99e4
     3f4:	e3403000 	movt	r3, #0
     3f8:	e5933000 	ldr	r3, [r3]
     3fc:	e0831501 	add	r1, r3, r1, lsl #10
     400:	e1a00080 	lsl	r0, r0, #1
	*pixelAddress = colour;
     404:	e18120b0 	strh	r2, [r1, r0]
     408:	e12fff1e 	bx	lr

0000040c <clearWholeScreen>:
}

// Writes black to every pixel in the pixel buffer
void clearWholeScreen(){
     40c:	e92d4070 	push	{r4, r5, r6, lr}
	
	for(int x = 0; x < MAX_X; x++){ // 320px
     410:	e3a05000 	mov	r5, #0
	pixelAddress = (volatile short int *) (CURRENT_BACK_BUFFER_ADDRESS + (y << 10) + (x << 1)); 
	*pixelAddress = colour;
}

// Writes black to every pixel in the pixel buffer
void clearWholeScreen(){
     414:	e1a06005 	mov	r6, r5
     418:	ea000009 	b	444 <clearWholeScreen+0x38>
	
	for(int x = 0; x < MAX_X; x++){ // 320px
		for(int y = 0; y < MAX_Y; y++) { // by 240px
			drawIndividualPixel(x, y, 0); // draw a black pixel
     41c:	e1a00005 	mov	r0, r5
     420:	e1a01004 	mov	r1, r4
     424:	e1a02006 	mov	r2, r6
     428:	ebfffff0 	bl	3f0 <drawIndividualPixel>

// Writes black to every pixel in the pixel buffer
void clearWholeScreen(){
	
	for(int x = 0; x < MAX_X; x++){ // 320px
		for(int y = 0; y < MAX_Y; y++) { // by 240px
     42c:	e2844001 	add	r4, r4, #1
     430:	e35400f0 	cmp	r4, #240	; 0xf0
     434:	1afffff8 	bne	41c <clearWholeScreen+0x10>
}

// Writes black to every pixel in the pixel buffer
void clearWholeScreen(){
	
	for(int x = 0; x < MAX_X; x++){ // 320px
     438:	e2855001 	add	r5, r5, #1
     43c:	e3550d05 	cmp	r5, #320	; 0x140
     440:	08bd8070 	popeq	{r4, r5, r6, pc}
	pixelAddress = (volatile short int *) (CURRENT_BACK_BUFFER_ADDRESS + (y << 10) + (x << 1)); 
	*pixelAddress = colour;
}

// Writes black to every pixel in the pixel buffer
void clearWholeScreen(){
     444:	e1a04006 	mov	r4, r6
     448:	eafffff3 	b	41c <clearWholeScreen+0x10>

0000044c <vgaSetup>:

// Global telling us the starting address of the Pixel Buffer
int CURRENT_BACK_BUFFER_ADDRESS;

// Setup the vga Display for drawing to the back buffer.
int vgaSetup(void) {
     44c:	e92d4008 	push	{r3, lr}
	
	waitForVsync();
     450:	ebffffdc 	bl	3c8 <waitForVsync>

	volatile int *vgaCtlPtr = (volatile int *)VGA_CONTROLLER_BASE;
	CURRENT_BACK_BUFFER_ADDRESS = *vgaCtlPtr;
     454:	e3033fff 	movw	r3, #16383	; 0x3fff
     458:	e34f3f20 	movt	r3, #65312	; 0xff20
     45c:	e5132fdf 	ldr	r2, [r3, #-4063]	; 0xfffff021
     460:	e30939e4 	movw	r3, #39396	; 0x99e4
     464:	e3403000 	movt	r3, #0
     468:	e5832000 	str	r2, [r3]
	
	clearWholeScreen();
     46c:	ebffffe6 	bl	40c <clearWholeScreen>
	
	return 0;
	
}
     470:	e3a00000 	mov	r0, #0
     474:	e8bd8008 	pop	{r3, pc}

00000478 <drawBox>:
	}

}

// Draws a nxn box centered at the pixel x,y
void drawBox(int x, int y, short int colour){
     478:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
     47c:	e1a08002 	mov	r8, r2
     480:	e3a05003 	mov	r5, #3
     484:	e3a09000 	mov	r9, #0
     488:	e280a002 	add	r10, r0, #2
     48c:	e2417001 	sub	r7, r1, #1
     490:	ea000008 	b	4b8 <drawBox+0x40>
	int n = 3;
	int shift = floor(n/2);
	for(int i = 0; i < n; i++){
		for(int j = 0; j < n; j++){
			drawIndividualPixel(x+(i-shift), y+(j-shift), colour);
     494:	e1a00006 	mov	r0, r6
     498:	e0871004 	add	r1, r7, r4
     49c:	e1a02008 	mov	r2, r8
     4a0:	ebffffd2 	bl	3f0 <drawIndividualPixel>
// Draws a nxn box centered at the pixel x,y
void drawBox(int x, int y, short int colour){
	int n = 3;
	int shift = floor(n/2);
	for(int i = 0; i < n; i++){
		for(int j = 0; j < n; j++){
     4a4:	e2844001 	add	r4, r4, #1
     4a8:	e3540003 	cmp	r4, #3
     4ac:	1afffff8 	bne	494 <drawBox+0x1c>

// Draws a nxn box centered at the pixel x,y
void drawBox(int x, int y, short int colour){
	int n = 3;
	int shift = floor(n/2);
	for(int i = 0; i < n; i++){
     4b0:	e2555001 	subs	r5, r5, #1
     4b4:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, r10, pc}
	}

}

// Draws a nxn box centered at the pixel x,y
void drawBox(int x, int y, short int colour){
     4b8:	e1a04009 	mov	r4, r9
     4bc:	e065600a 	rsb	r6, r5, r10
     4c0:	eafffff3 	b	494 <drawBox+0x1c>

000004c4 <drawBresenhamLine>:
			drawIndividualPixel(x+(i-shift), y+(j-shift), colour);
		}
	}
}
// Draws a line between the two points specified on screen. 
void drawBresenhamLine(int x0, int y0, int x1, int y1, short int colour){
     4c4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     4c8:	e24dd014 	sub	sp, sp, #20
     4cc:	e58d000c 	str	r0, [sp, #12]
     4d0:	e58d1008 	str	r1, [sp, #8]
     4d4:	e58d2004 	str	r2, [sp, #4]
     4d8:	e58d3000 	str	r3, [sp]
     4dc:	e1dda3f8 	ldrsh	r10, [sp, #56]	; 0x38
	
	bool isSteep = abs(x0-x1) < abs(y0-y1);
     4e0:	e0622000 	rsb	r2, r2, r0
     4e4:	e3520000 	cmp	r2, #0
     4e8:	b2622000 	rsblt	r2, r2, #0
     4ec:	e0633001 	rsb	r3, r3, r1
     4f0:	e0237fc3 	eor	r7, r3, r3, asr #31
     4f4:	e0477fc3 	sub	r7, r7, r3, asr #31
     4f8:	e1520007 	cmp	r2, r7
     4fc:	a3a07000 	movge	r7, #0
     500:	b3a07001 	movlt	r7, #1
	
	if(isSteep){
     504:	e3570000 	cmp	r7, #0
     508:	0a000005 	beq	524 <drawBresenhamLine+0x60>
		swap(&x0, &y0);
     50c:	e28d000c 	add	r0, sp, #12
     510:	e28d1008 	add	r1, sp, #8
     514:	ebffffa6 	bl	3b4 <swap>
		swap(&x1, &y1);
     518:	e28d0004 	add	r0, sp, #4
     51c:	e1a0100d 	mov	r1, sp
     520:	ebffffa3 	bl	3b4 <swap>
	}
	if(x0>x1){
     524:	e59d3004 	ldr	r3, [sp, #4]
     528:	e59d200c 	ldr	r2, [sp, #12]
     52c:	e1520003 	cmp	r2, r3
     530:	da000005 	ble	54c <drawBresenhamLine+0x88>
		swap(&x0, &x1);
     534:	e28d000c 	add	r0, sp, #12
     538:	e28d1004 	add	r1, sp, #4
     53c:	ebffff9c 	bl	3b4 <swap>
		swap(&y0, &y1);
     540:	e28d0008 	add	r0, sp, #8
     544:	e1a0100d 	mov	r1, sp
     548:	ebffff99 	bl	3b4 <swap>
	}
	
	int dx = x1 - x0;
     54c:	e59d3004 	ldr	r3, [sp, #4]
     550:	e59d500c 	ldr	r5, [sp, #12]
     554:	e0659003 	rsb	r9, r5, r3
	int dy = abs(y1 - y0);
     558:	e59d2000 	ldr	r2, [sp]
     55c:	e59d6008 	ldr	r6, [sp, #8]
     560:	e0668002 	rsb	r8, r6, r2
     564:	e3580000 	cmp	r8, #0
     568:	b2688000 	rsblt	r8, r8, #0
	int error = -dx/2;
     56c:	e2694000 	rsb	r4, r9, #0
     570:	e0844fa4 	add	r4, r4, r4, lsr #31
     574:	e1a040c4 	asr	r4, r4, #1
	
	int moveY = y1>y0 ? 1 : -1;
     578:	e1520006 	cmp	r2, r6
     57c:	d3e0b000 	mvnle	r11, #0
     580:	c3a0b001 	movgt	r11, #1
	
	int y = y0;
	int x = x0;
	
	while(x<=x1) {
     584:	e1530005 	cmp	r3, r5
     588:	ba00000e 	blt	5c8 <drawBresenhamLine+0x104>
		
		if (isSteep) drawIndividualPixel(y,x, colour);
     58c:	e3570000 	cmp	r7, #0
     590:	11a00006 	movne	r0, r6
     594:	11a01005 	movne	r1, r5
		else drawIndividualPixel(x,y,colour);
     598:	01a00005 	moveq	r0, r5
     59c:	01a01006 	moveq	r1, r6
     5a0:	e1a0200a 	mov	r2, r10
     5a4:	ebffff91 	bl	3f0 <drawIndividualPixel>
		
		error = error + dy;
     5a8:	e0844008 	add	r4, r4, r8
		if (error > 0){
     5ac:	e3540000 	cmp	r4, #0
			y = y + moveY;
     5b0:	c086600b 	addgt	r6, r6, r11
			error = error - dx;
     5b4:	c0694004 	rsbgt	r4, r9, r4
		}
		
		x++;
     5b8:	e2855001 	add	r5, r5, #1
	int moveY = y1>y0 ? 1 : -1;
	
	int y = y0;
	int x = x0;
	
	while(x<=x1) {
     5bc:	e59d3004 	ldr	r3, [sp, #4]
     5c0:	e1530005 	cmp	r3, r5
     5c4:	aafffff0 	bge	58c <drawBresenhamLine+0xc8>
		
		x++;
		
	}

}
     5c8:	e28dd014 	add	sp, sp, #20
     5cc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

000005d0 <updateMouse>:
} mouseData;

mouseData mData;
mouseData prevmData;

void updateMouse() {
     5d0:	e24dd008 	sub	sp, sp, #8
  int PS2_data, RVALID;
  signed char inputData[3];

  int i = 0;
  while(!i){
    PS2_data = *(PS2_ptr);
     5d4:	e3a03000 	mov	r3, #0
     5d8:	e34f3f20 	movt	r3, #65312	; 0xff20
     5dc:	e5933100 	ldr	r3, [r3, #256]	; 0x100
    RVALID = PS2_data & 0x8000;
    if(RVALID){
     5e0:	e3130902 	tst	r3, #32768	; 0x8000
     5e4:	1a000004 	bne	5fc <updateMouse+0x2c>
  int PS2_data, RVALID;
  signed char inputData[3];

  int i = 0;
  while(!i){
    PS2_data = *(PS2_ptr);
     5e8:	e3a02000 	mov	r2, #0
     5ec:	e34f2f20 	movt	r2, #65312	; 0xff20
     5f0:	e5923100 	ldr	r3, [r2, #256]	; 0x100
    RVALID = PS2_data & 0x8000;
    if(RVALID){
     5f4:	e3130902 	tst	r3, #32768	; 0x8000
     5f8:	0afffffc 	beq	5f0 <updateMouse+0x20>
      inputData[0] = PS2_data & 0xFF;
     5fc:	e28d2008 	add	r2, sp, #8
     600:	e5623004 	strb	r3, [r2, #-4]!
} mouseData;

mouseData mData;
mouseData prevmData;

void updateMouse() {
     604:	e28d0006 	add	r0, sp, #6
      i++;
    }
  }

  while(i < 3){
    PS2_data = *(PS2_ptr);
     608:	e3a03000 	mov	r3, #0
     60c:	e34f3f20 	movt	r3, #65312	; 0xff20
     610:	ea000003 	b	624 <updateMouse+0x54>
     614:	e5931100 	ldr	r1, [r3, #256]	; 0x100
    RVALID = PS2_data & 0x8000;
    if(RVALID){
     618:	e3110902 	tst	r1, #32768	; 0x8000
     61c:	0afffffc 	beq	614 <updateMouse+0x44>
      inputData[i] = PS2_data & 0xFF;
     620:	e5e21001 	strb	r1, [r2, #1]!
      inputData[0] = PS2_data & 0xFF;
      i++;
    }
  }

  while(i < 3){
     624:	e1520000 	cmp	r2, r0
     628:	0a000003 	beq	63c <updateMouse+0x6c>
    PS2_data = *(PS2_ptr);
     62c:	e5931100 	ldr	r1, [r3, #256]	; 0x100
    RVALID = PS2_data & 0x8000;
    if(RVALID){
     630:	e3110902 	tst	r1, #32768	; 0x8000
     634:	0afffff6 	beq	614 <updateMouse+0x44>
     638:	eafffff8 	b	620 <updateMouse+0x50>
      inputData[i] = PS2_data & 0xFF;
      i++;
    }
  }

  mData.left = inputData[0] & 1;
     63c:	e5dd2004 	ldrb	r2, [sp, #4]
     640:	e30939e4 	movw	r3, #39396	; 0x99e4
     644:	e3403000 	movt	r3, #0
     648:	e2021001 	and	r1, r2, #1
     64c:	e5c3100c 	strb	r1, [r3, #12]
  mData.middle = inputData[0] & 4;
     650:	e6ef2072 	uxtb	r2, r2
     654:	e7e01152 	ubfx	r1, r2, #2, #1
     658:	e5c3100e 	strb	r1, [r3, #14]
  mData.right = inputData[0] & 2;
     65c:	e7e020d2 	ubfx	r2, r2, #1, #1
     660:	e5c3200d 	strb	r2, [r3, #13]

  mData.x += inputData[1];
     664:	e1dd10d5 	ldrsb	r1, [sp, #5]
     668:	e5932004 	ldr	r2, [r3, #4]
     66c:	e0811002 	add	r1, r1, r2
     670:	e5831004 	str	r1, [r3, #4]
  mData.y -= inputData[2];
     674:	e1dd20d6 	ldrsb	r2, [sp, #6]
     678:	e5930008 	ldr	r0, [r3, #8]
     67c:	e0622000 	rsb	r2, r2, r0
     680:	e5832008 	str	r2, [r3, #8]

  if (mData.x >= MAX_X) mData.x = MAX_X - 1;
     684:	e3510d05 	cmp	r1, #320	; 0x140
     688:	a30939e4 	movwge	r3, #39396	; 0x99e4
     68c:	a3403000 	movtge	r3, #0
     690:	a300113f 	movwge	r1, #319	; 0x13f
     694:	a5831004 	strge	r1, [r3, #4]
  if (mData.y >= MAX_Y) mData.y = MAX_Y - 1;
     698:	e35200ef 	cmp	r2, #239	; 0xef
     69c:	c30939e4 	movwgt	r3, #39396	; 0x99e4
     6a0:	c3403000 	movtgt	r3, #0
     6a4:	c3a020ef 	movgt	r2, #239	; 0xef
     6a8:	c5832008 	strgt	r2, [r3, #8]

  if (mData.x < 0) mData.x = 0;
     6ac:	e30939e4 	movw	r3, #39396	; 0x99e4
     6b0:	e3403000 	movt	r3, #0
     6b4:	e5933004 	ldr	r3, [r3, #4]
     6b8:	e3530000 	cmp	r3, #0
     6bc:	b30939e4 	movwlt	r3, #39396	; 0x99e4
     6c0:	b3403000 	movtlt	r3, #0
     6c4:	b3a02000 	movlt	r2, #0
     6c8:	b5832004 	strlt	r2, [r3, #4]
  if (mData.y < 0) mData.y = 0;
     6cc:	e30939e4 	movw	r3, #39396	; 0x99e4
     6d0:	e3403000 	movt	r3, #0
     6d4:	e5933008 	ldr	r3, [r3, #8]
     6d8:	e3530000 	cmp	r3, #0
     6dc:	b30939e4 	movwlt	r3, #39396	; 0x99e4
     6e0:	b3403000 	movtlt	r3, #0
     6e4:	b3a02000 	movlt	r2, #0
     6e8:	b5832008 	strlt	r2, [r3, #8]
  
}
     6ec:	e28dd008 	add	sp, sp, #8
     6f0:	e12fff1e 	bx	lr

000006f4 <drawMouse>:

void drawMouse(mouseData *data, short int colour) {
     6f4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     6f8:	e24dd01c 	sub	sp, sp, #28
     6fc:	e58d0010 	str	r0, [sp, #16]
     700:	e1a05001 	mov	r5, r1
    
    int x = data -> x;
     704:	e5903000 	ldr	r3, [r0]
    int y = data -> y;
     708:	e5908004 	ldr	r8, [r0, #4]

    if(x<MOUSE_RADIUS) x=MOUSE_RADIUS;
     70c:	e3530001 	cmp	r3, #1
     710:	d3a03002 	movle	r3, #2
     714:	da000003 	ble	728 <drawMouse+0x34>
     718:	e300213d 	movw	r2, #317	; 0x13d
     71c:	e1530002 	cmp	r3, r2
     720:	a1a03002 	movge	r3, r2
     724:	eaffffff 	b	728 <drawMouse+0x34>
    else if (x>MAX_X-1-MOUSE_RADIUS) x = MAX_X-1-MOUSE_RADIUS;
    if(y<MOUSE_RADIUS) y=MOUSE_RADIUS;
     728:	e3580001 	cmp	r8, #1
     72c:	d3a08002 	movle	r8, #2
     730:	da000002 	ble	740 <drawMouse+0x4c>
     734:	e35800ed 	cmp	r8, #237	; 0xed
     738:	a3a080ed 	movge	r8, #237	; 0xed
     73c:	eaffffff 	b	740 <drawMouse+0x4c>
  if (mData.x < 0) mData.x = 0;
  if (mData.y < 0) mData.y = 0;
  
}

void drawMouse(mouseData *data, short int colour) {
     740:	e2434001 	sub	r4, r3, #1
     744:	e58d3014 	str	r3, [sp, #20]
     748:	e283b002 	add	r11, r3, #2
    else if (x>MAX_X-1-MOUSE_RADIUS) x = MAX_X-1-MOUSE_RADIUS;
    if(y<MOUSE_RADIUS) y=MOUSE_RADIUS;
    else if (y>MAX_Y-1-MOUSE_RADIUS) y = MAX_Y-1-MOUSE_RADIUS;

    for(int i = -1; i<2; i++) {
        drawIndividualPixel(x + i, y + MOUSE_RADIUS, colour);
     74c:	e2889002 	add	r9, r8, #2
        drawIndividualPixel(x + i, y - MOUSE_RADIUS, colour);
     750:	e2482002 	sub	r2, r8, #2
     754:	e58d2004 	str	r2, [sp, #4]
  if (mData.x < 0) mData.x = 0;
  if (mData.y < 0) mData.y = 0;
  
}

void drawMouse(mouseData *data, short int colour) {
     758:	e063a008 	rsb	r10, r3, r8
    else if (y>MAX_Y-1-MOUSE_RADIUS) y = MAX_Y-1-MOUSE_RADIUS;

    for(int i = -1; i<2; i++) {
        drawIndividualPixel(x + i, y + MOUSE_RADIUS, colour);
        drawIndividualPixel(x + i, y - MOUSE_RADIUS, colour);
        drawIndividualPixel(x + MOUSE_RADIUS, y + i, colour);
     75c:	e58db008 	str	r11, [sp, #8]
        drawIndividualPixel(x - MOUSE_RADIUS, y + i, colour);
     760:	e2433002 	sub	r3, r3, #2
     764:	e58d300c 	str	r3, [sp, #12]
    else if (x>MAX_X-1-MOUSE_RADIUS) x = MAX_X-1-MOUSE_RADIUS;
    if(y<MOUSE_RADIUS) y=MOUSE_RADIUS;
    else if (y>MAX_Y-1-MOUSE_RADIUS) y = MAX_Y-1-MOUSE_RADIUS;

    for(int i = -1; i<2; i++) {
        drawIndividualPixel(x + i, y + MOUSE_RADIUS, colour);
     768:	e1a00004 	mov	r0, r4
     76c:	e1a01009 	mov	r1, r9
     770:	e1a02005 	mov	r2, r5
     774:	ebffff1d 	bl	3f0 <drawIndividualPixel>
        drawIndividualPixel(x + i, y - MOUSE_RADIUS, colour);
     778:	e1a00004 	mov	r0, r4
     77c:	e59d1004 	ldr	r1, [sp, #4]
     780:	e1a02005 	mov	r2, r5
     784:	ebffff19 	bl	3f0 <drawIndividualPixel>
  if (mData.x < 0) mData.x = 0;
  if (mData.y < 0) mData.y = 0;
  
}

void drawMouse(mouseData *data, short int colour) {
     788:	e1a07008 	mov	r7, r8
     78c:	e08a6004 	add	r6, r10, r4
    else if (y>MAX_Y-1-MOUSE_RADIUS) y = MAX_Y-1-MOUSE_RADIUS;

    for(int i = -1; i<2; i++) {
        drawIndividualPixel(x + i, y + MOUSE_RADIUS, colour);
        drawIndividualPixel(x + i, y - MOUSE_RADIUS, colour);
        drawIndividualPixel(x + MOUSE_RADIUS, y + i, colour);
     790:	e59d0008 	ldr	r0, [sp, #8]
     794:	e1a01006 	mov	r1, r6
     798:	e1a02005 	mov	r2, r5
     79c:	ebffff13 	bl	3f0 <drawIndividualPixel>
        drawIndividualPixel(x - MOUSE_RADIUS, y + i, colour);
     7a0:	e59d000c 	ldr	r0, [sp, #12]
     7a4:	e1a01006 	mov	r1, r6
     7a8:	e1a02005 	mov	r2, r5
     7ac:	ebffff0f 	bl	3f0 <drawIndividualPixel>
     7b0:	e2844001 	add	r4, r4, #1
    if(x<MOUSE_RADIUS) x=MOUSE_RADIUS;
    else if (x>MAX_X-1-MOUSE_RADIUS) x = MAX_X-1-MOUSE_RADIUS;
    if(y<MOUSE_RADIUS) y=MOUSE_RADIUS;
    else if (y>MAX_Y-1-MOUSE_RADIUS) y = MAX_Y-1-MOUSE_RADIUS;

    for(int i = -1; i<2; i++) {
     7b4:	e154000b 	cmp	r4, r11
     7b8:	1affffea 	bne	768 <drawMouse+0x74>
        drawIndividualPixel(x + i, y + MOUSE_RADIUS, colour);
        drawIndividualPixel(x + i, y - MOUSE_RADIUS, colour);
        drawIndividualPixel(x + MOUSE_RADIUS, y + i, colour);
        drawIndividualPixel(x - MOUSE_RADIUS, y + i, colour);
    }
    if(data -> left){
     7bc:	e59d2010 	ldr	r2, [sp, #16]
     7c0:	e5d23008 	ldrb	r3, [r2, #8]
     7c4:	e3530000 	cmp	r3, #0
     7c8:	1a00000b 	bne	7fc <drawMouse+0x108>
     7cc:	ea000010 	b	814 <drawMouse+0x120>
      for(int i = -1; i < 2; i++) {
        for(int j = -1; j < 2; j++){
          drawIndividualPixel(x + i, y+j, colour);
     7d0:	e1a00008 	mov	r0, r8
     7d4:	e0841007 	add	r1, r4, r7
     7d8:	e1a02005 	mov	r2, r5
     7dc:	ebffff03 	bl	3f0 <drawIndividualPixel>
        drawIndividualPixel(x + MOUSE_RADIUS, y + i, colour);
        drawIndividualPixel(x - MOUSE_RADIUS, y + i, colour);
    }
    if(data -> left){
      for(int i = -1; i < 2; i++) {
        for(int j = -1; j < 2; j++){
     7e0:	e2844001 	add	r4, r4, #1
     7e4:	e3540002 	cmp	r4, #2
     7e8:	1afffff8 	bne	7d0 <drawMouse+0xdc>
        drawIndividualPixel(x + i, y - MOUSE_RADIUS, colour);
        drawIndividualPixel(x + MOUSE_RADIUS, y + i, colour);
        drawIndividualPixel(x - MOUSE_RADIUS, y + i, colour);
    }
    if(data -> left){
      for(int i = -1; i < 2; i++) {
     7ec:	e2866001 	add	r6, r6, #1
     7f0:	e3560002 	cmp	r6, #2
     7f4:	1a000003 	bne	808 <drawMouse+0x114>
     7f8:	ea000005 	b	814 <drawMouse+0x120>
        drawIndividualPixel(x + i, y + MOUSE_RADIUS, colour);
        drawIndividualPixel(x + i, y - MOUSE_RADIUS, colour);
        drawIndividualPixel(x + MOUSE_RADIUS, y + i, colour);
        drawIndividualPixel(x - MOUSE_RADIUS, y + i, colour);
    }
    if(data -> left){
     7fc:	e3e06000 	mvn	r6, #0
    int x = data -> x;
    int y = data -> y;

    if(x<MOUSE_RADIUS) x=MOUSE_RADIUS;
    else if (x>MAX_X-1-MOUSE_RADIUS) x = MAX_X-1-MOUSE_RADIUS;
    if(y<MOUSE_RADIUS) y=MOUSE_RADIUS;
     800:	e1a0a006 	mov	r10, r6
     804:	e59d9014 	ldr	r9, [sp, #20]
     808:	e1a0400a 	mov	r4, r10
  if (mData.x < 0) mData.x = 0;
  if (mData.y < 0) mData.y = 0;
  
}

void drawMouse(mouseData *data, short int colour) {
     80c:	e0868009 	add	r8, r6, r9
     810:	eaffffee 	b	7d0 <drawMouse+0xdc>
          drawIndividualPixel(x + i, y+j, colour);
        }
      }
    }
    
}
     814:	e28dd01c 	add	sp, sp, #28
     818:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

0000081c <setA9stack>:

void setA9stack(){
  int stack,mode;
  stack = 0xFFFFFFFF - 7;
  mode = 0b11010010;
  __asm__ volatile ("msr cpsr, %0":: "r"(mode));
     81c:	e3a030d2 	mov	r3, #210	; 0xd2
     820:	e129f003 	msr	CPSR_fc, r3
  __asm__ volatile ("mov sp, %0":: "r"(stack));
     824:	e3e03007 	mvn	r3, #7
     828:	e1a0d003 	mov	sp, r3

  mode = 0b11010011;
  __asm__ volatile("msr cpsr, %0":: "r"(mode));
     82c:	e3a030d3 	mov	r3, #211	; 0xd3
     830:	e129f003 	msr	CPSR_fc, r3
     834:	e12fff1e 	bx	lr

00000838 <enableInterrupt>:
}

void enableInterrupt(){
  int status = 0b01010011;
  __asm__ volatile("msr cpsr, %0":: "r"(status));
     838:	e3a03053 	mov	r3, #83	; 0x53
     83c:	e129f003 	msr	CPSR_fc, r3
     840:	e12fff1e 	bx	lr

00000844 <configGIC>:
}

void configGIC(){
  *((volatile int*) 0xFFFED84C) = 0x01000000;
     844:	e3e03a12 	mvn	r3, #73728	; 0x12000
     848:	e3a02401 	mov	r2, #16777216	; 0x1000000
     84c:	e50327b3 	str	r2, [r3, #-1971]	; 0xfffff84d
  *((volatile int*) 0xFFFED108) = 0x00008000;
     850:	e3a02902 	mov	r2, #32768	; 0x8000
     854:	e5032ef7 	str	r2, [r3, #-3831]	; 0xfffff109

// all priority interupts enbaled
  *((volatile int*) 0xFFFEC104) = 0xFFFF;
     858:	e3e01a13 	mvn	r1, #77824	; 0x13000
     85c:	e30f2fff 	movw	r2, #65535	; 0xffff
     860:	e5012efb 	str	r2, [r1, #-3835]	; 0xfffff105

  *((volatile int*) 0xFFFEC100) = 1;
     864:	e3a02001 	mov	r2, #1
     868:	e5012eff 	str	r2, [r1, #-3839]	; 0xfffff101

  *((volatile int*) 0xFFFED000) = 1;
     86c:	e5032fff 	str	r2, [r3, #-4095]	; 0xfffff001
     870:	e12fff1e 	bx	lr

00000874 <__cs3_isr_undef>:

  *((volatile int*) 0xFFFEC110) = interruptID;
  return;
}

void __attribute__ ((interrupt)) __cs3_isr_undef(void){while(1);}
     874:	eafffffe 	b	874 <__cs3_isr_undef>

00000878 <__cs3_isr_swi>:

void __attribute__ ((interrupt)) __cs3_isr_swi(void){while(1);}
     878:	eafffffe 	b	878 <__cs3_isr_swi>

0000087c <__cs3_isr_pabort>:

void __attribute__ ((interrupt)) __cs3_isr_pabort(void){while(1);}
     87c:	eafffffe 	b	87c <__cs3_isr_pabort>

00000880 <__cs3_isr_dabort>:

void __attribute__ ((interrupt)) __cs3_isr_dabort(void){while(1);}
     880:	eafffffe 	b	880 <__cs3_isr_dabort>

00000884 <__cs3_isr_fiq>:

void __attribute__ ((interrupt)) __cs3_isr_fiq(void){while(1);}
     884:	eafffffe 	b	884 <__cs3_isr_fiq>

00000888 <intializeMouse>:

void intializeMouse() {
     888:	e92d4010 	push	{r4, lr}
  volatile int * PS2_ptr = (volatile int *)0xFF200100;
  int PS2_data, RVALID;
  char byte1 = 0, byte2 = 0;

  mData.x = MAX_X / 2;
     88c:	e30939e4 	movw	r3, #39396	; 0x99e4
     890:	e3403000 	movt	r3, #0
     894:	e3a020a0 	mov	r2, #160	; 0xa0
     898:	e5832004 	str	r2, [r3, #4]
  mData.y = MAX_Y / 2;
     89c:	e3a02078 	mov	r2, #120	; 0x78
     8a0:	e5832008 	str	r2, [r3, #8]

  mData.left = false;
     8a4:	e3a04000 	mov	r4, #0
     8a8:	e5c3400c 	strb	r4, [r3, #12]
  mData.middle = false;
     8ac:	e5c3400e 	strb	r4, [r3, #14]
  mData.right = false;
     8b0:	e5c3400d 	strb	r4, [r3, #13]

  setA9stack();
     8b4:	ebffffd8 	bl	81c <setA9stack>

  configGIC();
     8b8:	ebffffe1 	bl	844 <configGIC>

  // PS/2 mouse needs to be reset (must be already plugged in)
  *(PS2_ptr) = 0xFF; // reset
     8bc:	e1a03004 	mov	r3, r4
     8c0:	e34f3f20 	movt	r3, #65312	; 0xff20
     8c4:	e3a020ff 	mov	r2, #255	; 0xff
     8c8:	e5832100 	str	r2, [r3, #256]	; 0x100
void __attribute__ ((interrupt)) __cs3_isr_fiq(void){while(1);}

void intializeMouse() {
  volatile int * PS2_ptr = (volatile int *)0xFF200100;
  int PS2_data, RVALID;
  char byte1 = 0, byte2 = 0;
     8cc:	e1a01004 	mov	r1, r4
     8d0:	e1a02004 	mov	r2, r4
  configGIC();

  // PS/2 mouse needs to be reset (must be already plugged in)
  *(PS2_ptr) = 0xFF; // reset
  while((byte2 != (char) 0xAA) || (byte1 != (char)0x00)){
    PS2_data = *(PS2_ptr);
     8d4:	e1a00004 	mov	r0, r4
     8d8:	e34f0f20 	movt	r0, #65312	; 0xff20

  configGIC();

  // PS/2 mouse needs to be reset (must be already plugged in)
  *(PS2_ptr) = 0xFF; // reset
  while((byte2 != (char) 0xAA) || (byte1 != (char)0x00)){
     8dc:	ea000003 	b	8f0 <intializeMouse+0x68>
    PS2_data = *(PS2_ptr);
     8e0:	e5903100 	ldr	r3, [r0, #256]	; 0x100
    RVALID = PS2_data & 0x8000;
    if(RVALID){
     8e4:	e3130902 	tst	r3, #32768	; 0x8000
      byte2 = byte1;
     8e8:	11a01002 	movne	r1, r2
      byte1 = PS2_data & 0xFF;
     8ec:	16ef2073 	uxtbne	r2, r3

  configGIC();

  // PS/2 mouse needs to be reset (must be already plugged in)
  *(PS2_ptr) = 0xFF; // reset
  while((byte2 != (char) 0xAA) || (byte1 != (char)0x00)){
     8f0:	e35100aa 	cmp	r1, #170	; 0xaa
     8f4:	03520000 	cmpeq	r2, #0
     8f8:	1afffff8 	bne	8e0 <intializeMouse+0x58>
      byte2 = byte1;
      byte1 = PS2_data & 0xFF;
    }
  }

  *(PS2_ptr) = 0xF3;
     8fc:	e3a03000 	mov	r3, #0
     900:	e34f3f20 	movt	r3, #65312	; 0xff20
     904:	e3a020f3 	mov	r2, #243	; 0xf3
     908:	e5832100 	str	r2, [r3, #256]	; 0x100
  byte1 = 0;
  while(byte1 != (char)0xFA){
    PS2_data = *(PS2_ptr);
     90c:	e3a02000 	mov	r2, #0
     910:	e34f2f20 	movt	r2, #65312	; 0xff20
     914:	ea000005 	b	930 <intializeMouse+0xa8>
     918:	e5923100 	ldr	r3, [r2, #256]	; 0x100
    RVALID = PS2_data & 0x8000;
    if(RVALID){
     91c:	e3130902 	tst	r3, #32768	; 0x8000
     920:	0afffffc 	beq	918 <intializeMouse+0x90>
    }
  }

  *(PS2_ptr) = 0xF3;
  byte1 = 0;
  while(byte1 != (char)0xFA){
     924:	e6ef3073 	uxtb	r3, r3
     928:	e35300fa 	cmp	r3, #250	; 0xfa
     92c:	0a000003 	beq	940 <intializeMouse+0xb8>
    PS2_data = *(PS2_ptr);
     930:	e5923100 	ldr	r3, [r2, #256]	; 0x100
    RVALID = PS2_data & 0x8000;
    if(RVALID){
     934:	e3130902 	tst	r3, #32768	; 0x8000
     938:	0afffff6 	beq	918 <intializeMouse+0x90>
     93c:	eafffff8 	b	924 <intializeMouse+0x9c>
      byte1 = PS2_data & 0xFF;
    }
  }

    //SAMPLE RATE
  *(PS2_ptr) = 40;
     940:	e3a03000 	mov	r3, #0
     944:	e34f3f20 	movt	r3, #65312	; 0xff20
     948:	e3a02028 	mov	r2, #40	; 0x28
     94c:	e5832100 	str	r2, [r3, #256]	; 0x100
  byte1 = 0;
  while(byte1 != (char)0xFA){
    PS2_data = *(PS2_ptr);
     950:	e3a02000 	mov	r2, #0
     954:	e34f2f20 	movt	r2, #65312	; 0xff20
     958:	ea000005 	b	974 <intializeMouse+0xec>
     95c:	e5923100 	ldr	r3, [r2, #256]	; 0x100
    RVALID = PS2_data & 0x8000;
    if(RVALID)
     960:	e3130902 	tst	r3, #32768	; 0x8000
     964:	0afffffc 	beq	95c <intializeMouse+0xd4>
  }

    //SAMPLE RATE
  *(PS2_ptr) = 40;
  byte1 = 0;
  while(byte1 != (char)0xFA){
     968:	e6ef3073 	uxtb	r3, r3
     96c:	e35300fa 	cmp	r3, #250	; 0xfa
     970:	0a000003 	beq	984 <intializeMouse+0xfc>
    PS2_data = *(PS2_ptr);
     974:	e5923100 	ldr	r3, [r2, #256]	; 0x100
    RVALID = PS2_data & 0x8000;
    if(RVALID)
     978:	e3130902 	tst	r3, #32768	; 0x8000
     97c:	0afffff6 	beq	95c <intializeMouse+0xd4>
     980:	eafffff8 	b	968 <intializeMouse+0xe0>
      byte1 = PS2_data & 0xFF;
  }

  *(PS2_ptr) = 0xF4;
     984:	e3a03000 	mov	r3, #0
     988:	e34f3f20 	movt	r3, #65312	; 0xff20
     98c:	e3a020f4 	mov	r2, #244	; 0xf4
     990:	e5832100 	str	r2, [r3, #256]	; 0x100
  byte1 = 0;
  while(byte1 != (char)0xFA){
    PS2_data = *(PS2_ptr);
     994:	e3a02000 	mov	r2, #0
     998:	e34f2f20 	movt	r2, #65312	; 0xff20
     99c:	ea000005 	b	9b8 <intializeMouse+0x130>
     9a0:	e5923100 	ldr	r3, [r2, #256]	; 0x100
    RVALID = PS2_data & 0x8000;
    if(RVALID)
     9a4:	e3130902 	tst	r3, #32768	; 0x8000
     9a8:	0afffffc 	beq	9a0 <intializeMouse+0x118>
      byte1 = PS2_data & 0xFF;
  }

  *(PS2_ptr) = 0xF4;
  byte1 = 0;
  while(byte1 != (char)0xFA){
     9ac:	e6ef3073 	uxtb	r3, r3
     9b0:	e35300fa 	cmp	r3, #250	; 0xfa
     9b4:	0a000003 	beq	9c8 <intializeMouse+0x140>
    PS2_data = *(PS2_ptr);
     9b8:	e5923100 	ldr	r3, [r2, #256]	; 0x100
    RVALID = PS2_data & 0x8000;
    if(RVALID)
     9bc:	e3130902 	tst	r3, #32768	; 0x8000
     9c0:	0afffff6 	beq	9a0 <intializeMouse+0x118>
     9c4:	eafffff8 	b	9ac <intializeMouse+0x124>
      byte1 = PS2_data & 0xFF;
  }

  *(PS2_ptr + 1) = 1;
     9c8:	e3a03000 	mov	r3, #0
     9cc:	e34f3f20 	movt	r3, #65312	; 0xff20
     9d0:	e3a02001 	mov	r2, #1
     9d4:	e5832104 	str	r2, [r3, #260]	; 0x104

  enableInterrupt();
     9d8:	ebffff96 	bl	838 <enableInterrupt>
     9dc:	e8bd8010 	pop	{r4, pc}

000009e0 <drawButton>:
                                 0xD6DA, 0xD6DA, 0x001F, 0x001F, 0x001F, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0x001F, 0x001F, 0xD6DA, 0xD6DA, 
                                 0xD6DA, 0xD6DA, 0x001F, 0xD6DA, 0x001F, 0x001F, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0x001F, 0x001F, 0xD6DA, 0xD6DA, 0xD6DA, 
                                 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0x001F, 0x001F, 0x001F, 0x001F, 0x001F, 0x001F, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 
                                 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA};

void drawButton(){
     9e0:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
     9e4:	e3a06004 	mov	r6, #4
     9e8:	e3e07000 	mvn	r7, #0
     9ec:	e3098420 	movw	r8, #37920	; 0x9420
     9f0:	e3408000 	movt	r8, #0
     9f4:	e300a12d 	movw	r10, #301	; 0x12d
     9f8:	ea00000a 	b	a28 <drawButton+0x48>
  int x = BUTTON_X;
  int y = BUTTON_Y;
  
  for(int i = 0; i < 12; i++){
    for(int j = 0; j < 15; j++){
      drawIndividualPixel(x+j,y+i,switchButton[15*i + j]);
     9fc:	e1a00004 	mov	r0, r4
     a00:	e1a01006 	mov	r1, r6
     a04:	e1f520f2 	ldrsh	r2, [r5, #2]!
     a08:	ebfffe78 	bl	3f0 <drawIndividualPixel>
     a0c:	e2844001 	add	r4, r4, #1
void drawButton(){
  int x = BUTTON_X;
  int y = BUTTON_Y;
  
  for(int i = 0; i < 12; i++){
    for(int j = 0; j < 15; j++){
     a10:	e3540f4f 	cmp	r4, #316	; 0x13c
     a14:	1afffff8 	bne	9fc <drawButton+0x1c>
     a18:	e287700f 	add	r7, r7, #15
     a1c:	e2866001 	add	r6, r6, #1

void drawButton(){
  int x = BUTTON_X;
  int y = BUTTON_Y;
  
  for(int i = 0; i < 12; i++){
     a20:	e35700b3 	cmp	r7, #179	; 0xb3
     a24:	08bd85f8 	popeq	{r3, r4, r5, r6, r7, r8, r10, pc}
                                 0xD6DA, 0xD6DA, 0x001F, 0x001F, 0x001F, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0x001F, 0x001F, 0xD6DA, 0xD6DA, 
                                 0xD6DA, 0xD6DA, 0x001F, 0xD6DA, 0x001F, 0x001F, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0x001F, 0x001F, 0xD6DA, 0xD6DA, 0xD6DA, 
                                 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0x001F, 0x001F, 0x001F, 0x001F, 0x001F, 0x001F, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 
                                 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA, 0xD6DA};

void drawButton(){
     a28:	e0885087 	add	r5, r8, r7, lsl #1
     a2c:	e1a0400a 	mov	r4, r10
     a30:	eafffff1 	b	9fc <drawButton+0x1c>

00000a34 <initParticles>:
} Particle;

Particle allParticles[NUM_PARTICLES];
drawParticle allEraseParticles[NUM_PARTICLES];

void initParticles() {
     a34:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
    int stepX = MAX_X/amtColumns;
    int stepY = MAX_Y/amtRows;
    int initX = stepX/2;
    int initY = stepY/2;

    hpx = (stepX + stepY) / 2.0;
     a38:	e30949e4 	movw	r4, #39396	; 0x99e4
     a3c:	e3404000 	movt	r4, #0
     a40:	e3a03015 	mov	r3, #21
     a44:	e5843010 	str	r3, [r4, #16]
    // h = M_PER_PX * (stepX + stepY) / 2.0;
    h = M_PER_PX * H_H;
     a48:	e30d370a 	movw	r3, #55050	; 0xd70a
     a4c:	e3433da3 	movt	r3, #15779	; 0x3da3
     a50:	e5843014 	str	r3, [r4, #20]

    // alpha = 5.0/(14.0*M_PI*h*h);
    alpha = 5.0/(14.0*3.14159265*h*h);
     a54:	e3013a46 	movw	r3, #6726	; 0x1a46
     a58:	e344318e 	movt	r3, #16782	; 0x418e
     a5c:	e5843018 	str	r3, [r4, #24]
    inv_rho_naught = 1.0/(float)DENSITY_RESTING;
     a60:	e301326f 	movw	r3, #4719	; 0x126f
     a64:	e3433a03 	movt	r3, #14851	; 0x3a03
     a68:	e584301c 	str	r3, [r4, #28]
    nu = h*h/100.0;
     a6c:	e30337bd 	movw	r3, #14269	; 0x37bd
     a70:	e3433886 	movt	r3, #14470	; 0x3886
     a74:	e5843020 	str	r3, [r4, #32]
     a78:	e2844034 	add	r4, r4, #52	; 0x34
     a7c:	e3a07000 	mov	r7, #0
     a80:	e1a0a007 	mov	r10, r7
    // printf("\ninv density: %f", inv_rho_naught);

    int xStepCount = 0;
    int yStepCount = 0;
	
    for (int i = 0; i < NUM_PARTICLES; i++) {
     a84:	e1a08007 	mov	r8, r7
    // printf("\nh: %f", h);
    // printf("\nalpha: %f", alpha);
    // printf("\ninv density: %f", inv_rho_naught);

    int xStepCount = 0;
    int yStepCount = 0;
     a88:	e1a05007 	mov	r5, r7
    // DEBUG
    // printf("\nh: %f", h);
    // printf("\nalpha: %f", alpha);
    // printf("\ninv density: %f", inv_rho_naught);

    int xStepCount = 0;
     a8c:	e1a06007 	mov	r6, r7
     a90:	ea000048 	b	bb8 <initParticles+0x184>
    int yStepCount = 0;
	
    for (int i = 0; i < NUM_PARTICLES; i++) {
		
        for(int j = 0; j < NUM_PARTICLES; j++){
            lastSeen[i][j] = -1;
     a94:	e7802003 	str	r2, [r0, r3]
            lastSeen2[i][j] = -1;
     a98:	e7812003 	str	r2, [r1, r3]
     a9c:	e2833004 	add	r3, r3, #4
    int xStepCount = 0;
    int yStepCount = 0;
	
    for (int i = 0; i < NUM_PARTICLES; i++) {
		
        for(int j = 0; j < NUM_PARTICLES; j++){
     aa0:	e3530f96 	cmp	r3, #600	; 0x258
     aa4:	1afffffa 	bne	a94 <initParticles+0x60>
            lastSeen[i][j] = -1;
            lastSeen2[i][j] = -1;
        }
		srand(i);
     aa8:	e1a00008 	mov	r0, r8
     aac:	eb002097 	bl	8d10 <srand>
        if(xStepCount >= amtColumns) {
     ab0:	e356000e 	cmp	r6, #14
            xStepCount = 0;
            yStepCount++;
     ab4:	c2855001 	addgt	r5, r5, #1
            lastSeen[i][j] = -1;
            lastSeen2[i][j] = -1;
        }
		srand(i);
        if(xStepCount >= amtColumns) {
            xStepCount = 0;
     ab8:	c3a06000 	movgt	r6, #0
            yStepCount++;
        }
        if(yStepCount >= amtRows) {
            yStepCount = 0;
     abc:	e355000a 	cmp	r5, #10
     ac0:	c3a05000 	movgt	r5, #0
        }
        allParticles[i].x = initX + xStepCount*stepX + (rand() % INIT_VAR) - (INIT_VAR>>1);
     ac4:	eb002098 	bl	8d2c <rand>
     ac8:	e0863086 	add	r3, r6, r6, lsl #1
     acc:	e0632183 	rsb	r2, r3, r3, lsl #3
     ad0:	e3089e39 	movw	r9, #36409	; 0x8e39
     ad4:	e34398e3 	movt	r9, #14563	; 0x38e3
     ad8:	e0c13099 	smull	r3, r1, r9, r0
     adc:	e1a03fc0 	asr	r3, r0, #31
     ae0:	e06330c1 	rsb	r3, r3, r1, asr #1
     ae4:	e0833183 	add	r3, r3, r3, lsl #3
     ae8:	e0630000 	rsb	r0, r3, r0
     aec:	e0823000 	add	r3, r2, r0
     af0:	e2833006 	add	r3, r3, #6
     af4:	e5043010 	str	r3, [r4, #-16]
        allParticles[i].y = initY + yStepCount*stepY + (rand() % INIT_VAR) - (INIT_VAR>>1);
     af8:	eb00208b 	bl	8d2c <rand>
     afc:	e0853085 	add	r3, r5, r5, lsl #1
     b00:	e0632183 	rsb	r2, r3, r3, lsl #3
     b04:	e0c9c099 	smull	r12, r9, r9, r0
     b08:	e1a03fc0 	asr	r3, r0, #31
     b0c:	e06330c9 	rsb	r3, r3, r9, asr #1
     b10:	e0833183 	add	r3, r3, r3, lsl #3
     b14:	e0630000 	rsb	r0, r3, r0
     b18:	e0823000 	add	r3, r2, r0
     b1c:	e2833006 	add	r3, r3, #6
     b20:	e1a0b003 	mov	r11, r3
     b24:	e1a09003 	mov	r9, r3
     b28:	e504300c 	str	r3, [r4, #-12]
        allParticles[i].vx = 0;
     b2c:	e3a03000 	mov	r3, #0
     b30:	e5843000 	str	r3, [r4]
        allParticles[i].vy = 0;
     b34:	e5843004 	str	r3, [r4, #4]
} Particle;

Particle allParticles[NUM_PARTICLES];
drawParticle allEraseParticles[NUM_PARTICLES];

void initParticles() {
     b38:	e2843ea1 	add	r3, r4, #2576	; 0xa10
        }
        allParticles[i].x = initX + xStepCount*stepX + (rand() % INIT_VAR) - (INIT_VAR>>1);
        allParticles[i].y = initY + yStepCount*stepY + (rand() % INIT_VAR) - (INIT_VAR>>1);
        allParticles[i].vx = 0;
        allParticles[i].vy = 0;
        allParticles[i].colour = WATER_COLOUR;
     b3c:	e3062c5f 	movw	r2, #27743	; 0x6c5f
     b40:	e1c320b0 	strh	r2, [r3]

        xStepCount++;
     b44:	e2866001 	add	r6, r6, #1

        allParticles[i].pX = M_PER_PX * allParticles[i].x;
     b48:	e5140010 	ldr	r0, [r4, #-16]
     b4c:	eb001ca3 	bl	7de0 <__aeabi_i2d>
     b50:	e301247b 	movw	r2, #5243	; 0x147b
     b54:	e34427ae 	movt	r2, #18350	; 0x47ae
     b58:	e3073ae1 	movw	r3, #31457	; 0x7ae1
     b5c:	e3433f94 	movt	r3, #16276	; 0x3f94
     b60:	eb001cd5 	bl	7ebc <__aeabi_dmul>
     b64:	eb001e63 	bl	84f8 <__aeabi_d2f>
     b68:	e5040008 	str	r0, [r4, #-8]
        allParticles[i].pY = M_PER_PX * allParticles[i].y;
     b6c:	e1a0000b 	mov	r0, r11
     b70:	eb001c9a 	bl	7de0 <__aeabi_i2d>
     b74:	e301247b 	movw	r2, #5243	; 0x147b
     b78:	e34427ae 	movt	r2, #18350	; 0x47ae
     b7c:	e3073ae1 	movw	r3, #31457	; 0x7ae1
     b80:	e3433f94 	movt	r3, #16276	; 0x3f94
     b84:	eb001ccc 	bl	7ebc <__aeabi_dmul>
     b88:	eb001e5a 	bl	84f8 <__aeabi_d2f>
     b8c:	e5040004 	str	r0, [r4, #-4]
        allEraseParticles[i].x = allParticles[i].x;
     b90:	e5142010 	ldr	r2, [r4, #-16]
     b94:	e59f3038 	ldr	r3, [pc, #56]	; bd4 <initParticles+0x1a0>
     b98:	e7a3200a 	str	r2, [r3, r10]!
        allEraseParticles[i].y = allParticles[i].y;
     b9c:	e583b004 	str	r11, [r3, #4]
    // printf("\ninv density: %f", inv_rho_naught);

    int xStepCount = 0;
    int yStepCount = 0;
	
    for (int i = 0; i < NUM_PARTICLES; i++) {
     ba0:	e2888001 	add	r8, r8, #1
     ba4:	e2844ea3 	add	r4, r4, #2608	; 0xa30
     ba8:	e28aa008 	add	r10, r10, #8
     bac:	e2877f96 	add	r7, r7, #600	; 0x258
     bb0:	e3580096 	cmp	r8, #150	; 0x96
     bb4:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
} Particle;

Particle allParticles[NUM_PARTICLES];
drawParticle allEraseParticles[NUM_PARTICLES];

void initParticles() {
     bb8:	e3a03000 	mov	r3, #0
     bbc:	e59f2014 	ldr	r2, [pc, #20]	; bd8 <initParticles+0x1a4>
     bc0:	e0870002 	add	r0, r7, r2
    int yStepCount = 0;
	
    for (int i = 0; i < NUM_PARTICLES; i++) {
		
        for(int j = 0; j < NUM_PARTICLES; j++){
            lastSeen[i][j] = -1;
     bc4:	e3e02000 	mvn	r2, #0
} Particle;

Particle allParticles[NUM_PARTICLES];
drawParticle allEraseParticles[NUM_PARTICLES];

void initParticles() {
     bc8:	e59fc00c 	ldr	r12, [pc, #12]	; bdc <initParticles+0x1a8>
     bcc:	e087100c 	add	r1, r7, r12
     bd0:	eaffffaf 	b	a94 <initParticles+0x60>
     bd4:	00095148 	.word	0x00095148
     bd8:	00069228 	.word	0x00069228
     bdc:	0007f1b8 	.word	0x0007f1b8

00000be0 <eraseParticles>:
        allEraseParticles[i].x = allParticles[i].x;
        allEraseParticles[i].y = allParticles[i].y;
    }
}

void eraseParticles() {
     be0:	e92d4070 	push	{r4, r5, r6, lr}
     be4:	e3a04000 	mov	r4, #0
    for (int i = 0; i < NUM_PARTICLES; i++) {
        drawIndividualPixel(allEraseParticles[i].x, allEraseParticles[i].y, BLACK);
     be8:	e59f6024 	ldr	r6, [pc, #36]	; c14 <eraseParticles+0x34>
     bec:	e1a05004 	mov	r5, r4
     bf0:	e1a03006 	mov	r3, r6
     bf4:	e7b30004 	ldr	r0, [r3, r4]!
     bf8:	e5931004 	ldr	r1, [r3, #4]
     bfc:	e1a02005 	mov	r2, r5
     c00:	ebfffdfa 	bl	3f0 <drawIndividualPixel>
     c04:	e2844008 	add	r4, r4, #8
        allEraseParticles[i].y = allParticles[i].y;
    }
}

void eraseParticles() {
    for (int i = 0; i < NUM_PARTICLES; i++) {
     c08:	e3540e4b 	cmp	r4, #1200	; 0x4b0
     c0c:	1afffff7 	bne	bf0 <eraseParticles+0x10>
        drawIndividualPixel(allEraseParticles[i].x, allEraseParticles[i].y, BLACK);
    }
}
     c10:	e8bd8070 	pop	{r4, r5, r6, pc}
     c14:	00095148 	.word	0x00095148

00000c18 <drawParticles>:
void drawParticles() {
     c18:	e92d4070 	push	{r4, r5, r6, lr}
     c1c:	e3a04000 	mov	r4, #0
     c20:	e59f502c 	ldr	r5, [pc, #44]	; c54 <drawParticles+0x3c>
    for (int i = 0; i < NUM_PARTICLES; i++) {
     c24:	e30f6820 	movw	r6, #63520	; 0xf820
     c28:	e3406005 	movt	r6, #5
void eraseParticles() {
    for (int i = 0; i < NUM_PARTICLES; i++) {
        drawIndividualPixel(allEraseParticles[i].x, allEraseParticles[i].y, BLACK);
    }
}
void drawParticles() {
     c2c:	e0853004 	add	r3, r5, r4
     c30:	e2832ea2 	add	r2, r3, #2592	; 0xa20
    for (int i = 0; i < NUM_PARTICLES; i++) {
        drawIndividualPixel(allParticles[i].x, allParticles[i].y, allParticles[i].colour);
     c34:	e7950004 	ldr	r0, [r5, r4]
     c38:	e5931004 	ldr	r1, [r3, #4]
     c3c:	e1d220f0 	ldrsh	r2, [r2]
     c40:	ebfffdea 	bl	3f0 <drawIndividualPixel>
     c44:	e2844ea3 	add	r4, r4, #2608	; 0xa30
    for (int i = 0; i < NUM_PARTICLES; i++) {
        drawIndividualPixel(allEraseParticles[i].x, allEraseParticles[i].y, BLACK);
    }
}
void drawParticles() {
    for (int i = 0; i < NUM_PARTICLES; i++) {
     c48:	e1540006 	cmp	r4, r6
     c4c:	1afffff6 	bne	c2c <drawParticles+0x14>
        drawIndividualPixel(allParticles[i].x, allParticles[i].y, allParticles[i].colour);
    }
}
     c50:	e8bd8070 	pop	{r4, r5, r6, pc}
     c54:	00009a08 	.word	0x00009a08

00000c58 <stepSPHPositions>:

// Reference:
// https://cg.informatik.uni-freiburg.de/course_notes/sim_10_sph.pdf

void stepSPHPositions(int i) {
     c58:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
     c5c:	e1a07000 	mov	r7, r0

    allParticles[i].pX += allParticles[i].vx * SPF;
     c60:	e30939e4 	movw	r3, #39396	; 0x99e4
     c64:	e3403000 	movt	r3, #0
     c68:	e3a06ea3 	mov	r6, #2608	; 0xa30
     c6c:	e0263096 	mla	r6, r6, r0, r3
     c70:	e596002c 	ldr	r0, [r6, #44]	; 0x2c
     c74:	eb001c63 	bl	7e08 <__aeabi_f2d>
     c78:	e1a04000 	mov	r4, r0
     c7c:	e1a05001 	mov	r5, r1
     c80:	e5960034 	ldr	r0, [r6, #52]	; 0x34
     c84:	eb001c5f 	bl	7e08 <__aeabi_f2d>
     c88:	e301247b 	movw	r2, #5243	; 0x147b
     c8c:	e34427ae 	movt	r2, #18350	; 0x47ae
     c90:	e3073ae1 	movw	r3, #31457	; 0x7ae1
     c94:	e3433f84 	movt	r3, #16260	; 0x3f84
     c98:	eb001c87 	bl	7ebc <__aeabi_dmul>
     c9c:	e1a02000 	mov	r2, r0
     ca0:	e1a03001 	mov	r3, r1
     ca4:	e1a00004 	mov	r0, r4
     ca8:	e1a01005 	mov	r1, r5
     cac:	eb001b7e 	bl	7aac <__adddf3>
     cb0:	eb001e10 	bl	84f8 <__aeabi_d2f>
     cb4:	e1a08000 	mov	r8, r0
     cb8:	e586002c 	str	r0, [r6, #44]	; 0x2c
    allParticles[i].pY += allParticles[i].vy * SPF;
     cbc:	e5960030 	ldr	r0, [r6, #48]	; 0x30
     cc0:	eb001c50 	bl	7e08 <__aeabi_f2d>
     cc4:	e1a04000 	mov	r4, r0
     cc8:	e1a05001 	mov	r5, r1
     ccc:	e5960038 	ldr	r0, [r6, #56]	; 0x38
     cd0:	eb001c4c 	bl	7e08 <__aeabi_f2d>
     cd4:	e301247b 	movw	r2, #5243	; 0x147b
     cd8:	e34427ae 	movt	r2, #18350	; 0x47ae
     cdc:	e3073ae1 	movw	r3, #31457	; 0x7ae1
     ce0:	e3433f84 	movt	r3, #16260	; 0x3f84
     ce4:	eb001c74 	bl	7ebc <__aeabi_dmul>
     ce8:	e1a02000 	mov	r2, r0
     cec:	e1a03001 	mov	r3, r1
     cf0:	e1a00004 	mov	r0, r4
     cf4:	e1a01005 	mov	r1, r5
     cf8:	eb001b6b 	bl	7aac <__adddf3>
     cfc:	eb001dfd 	bl	84f8 <__aeabi_d2f>
     d00:	e1a05000 	mov	r5, r0
     d04:	e5860030 	str	r0, [r6, #48]	; 0x30
    allParticles[i].x = PX_PER_M * allParticles[i].pX;
     d08:	e1a00008 	mov	r0, r8
     d0c:	eb001c3d 	bl	7e08 <__aeabi_f2d>
     d10:	e3a02000 	mov	r2, #0
     d14:	e3a03000 	mov	r3, #0
     d18:	e3443049 	movt	r3, #16457	; 0x4049
     d1c:	eb001c66 	bl	7ebc <__aeabi_dmul>
     d20:	eb001ddd 	bl	849c <__aeabi_d2iz>
     d24:	e1a04000 	mov	r4, r0
     d28:	e5860024 	str	r0, [r6, #36]	; 0x24
    allParticles[i].y = PX_PER_M * allParticles[i].pY;
     d2c:	e1a00005 	mov	r0, r5
     d30:	eb001c34 	bl	7e08 <__aeabi_f2d>
     d34:	e3a02000 	mov	r2, #0
     d38:	e3a03000 	mov	r3, #0
     d3c:	e3443049 	movt	r3, #16457	; 0x4049
     d40:	eb001c5d 	bl	7ebc <__aeabi_dmul>
     d44:	eb001dd4 	bl	849c <__aeabi_d2iz>
     d48:	e5860028 	str	r0, [r6, #40]	; 0x28

    // If, for whatever reason, we went out of bounds after velocity application, fix them manually.
	if (allParticles[i].x <= 0){
     d4c:	e3540000 	cmp	r4, #0
		allParticles[i].x = 0;
     d50:	d1a03006 	movle	r3, r6
     d54:	d3a02000 	movle	r2, #0
     d58:	d5832024 	strle	r2, [r3, #36]	; 0x24
    allParticles[i].pY += allParticles[i].vy * SPF;
    allParticles[i].x = PX_PER_M * allParticles[i].pX;
    allParticles[i].y = PX_PER_M * allParticles[i].pY;

    // If, for whatever reason, we went out of bounds after velocity application, fix them manually.
	if (allParticles[i].x <= 0){
     d5c:	da000007 	ble	d80 <stepSPHPositions+0x128>
		allParticles[i].x = 0;
	} else if (allParticles[i].x > (MAX_X - 1)) {
     d60:	e3540d05 	cmp	r4, #320	; 0x140
     d64:	ba000005 	blt	d80 <stepSPHPositions+0x128>
		allParticles[i].x = MAX_X-1;
     d68:	e30939e4 	movw	r3, #39396	; 0x99e4
     d6c:	e3403000 	movt	r3, #0
     d70:	e3a02ea3 	mov	r2, #2608	; 0xa30
     d74:	e0233792 	mla	r3, r2, r7, r3
     d78:	e300213f 	movw	r2, #319	; 0x13f
     d7c:	e5832024 	str	r2, [r3, #36]	; 0x24
	}
	if (allParticles[i].y < 0){
     d80:	e30939e4 	movw	r3, #39396	; 0x99e4
     d84:	e3403000 	movt	r3, #0
     d88:	e3a02ea3 	mov	r2, #2608	; 0xa30
     d8c:	e0233792 	mla	r3, r2, r7, r3
     d90:	e5933028 	ldr	r3, [r3, #40]	; 0x28
     d94:	e3530000 	cmp	r3, #0
     d98:	aa000005 	bge	db4 <stepSPHPositions+0x15c>
		allParticles[i].y = 0;
     d9c:	e30939e4 	movw	r3, #39396	; 0x99e4
     da0:	e3403000 	movt	r3, #0
     da4:	e0273792 	mla	r7, r2, r7, r3
     da8:	e3a03000 	mov	r3, #0
     dac:	e5873028 	str	r3, [r7, #40]	; 0x28
     db0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	} else if (allParticles[i].y > (MAX_Y -1)){
     db4:	e35300ef 	cmp	r3, #239	; 0xef
     db8:	d8bd81f0 	pople	{r4, r5, r6, r7, r8, pc}
		allParticles[i].y = MAX_Y-1;
     dbc:	e30939e4 	movw	r3, #39396	; 0x99e4
     dc0:	e3403000 	movt	r3, #0
     dc4:	e3a02ea3 	mov	r2, #2608	; 0xa30
     dc8:	e0273792 	mla	r7, r2, r7, r3
     dcc:	e3a030ef 	mov	r3, #239	; 0xef
     dd0:	e5873028 	str	r3, [r7, #40]	; 0x28
     dd4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00000dd8 <doVelocityStepCheck>:
	}
    
}

void doVelocityStepCheck(int i) {
     dd8:	e92d4070 	push	{r4, r5, r6, lr}
     ddc:	e1a04000 	mov	r4, r0
    // Container collision handling and application of TUG Accelerations.
    if((allParticles[i].x >= (MAX_X-1) && allParticles[i].vx > 0) || (allParticles[i].x <= 0 && allParticles[i].vx < 0)) {
     de0:	e30939e4 	movw	r3, #39396	; 0x99e4
     de4:	e3403000 	movt	r3, #0
     de8:	e3a02ea3 	mov	r2, #2608	; 0xa30
     dec:	e0233092 	mla	r3, r2, r0, r3
     df0:	e5935024 	ldr	r5, [r3, #36]	; 0x24
     df4:	e300313e 	movw	r3, #318	; 0x13e
     df8:	e1550003 	cmp	r5, r3
     dfc:	da000007 	ble	e20 <doVelocityStepCheck+0x48>
     e00:	e30939e4 	movw	r3, #39396	; 0x99e4
     e04:	e3403000 	movt	r3, #0
     e08:	e0233092 	mla	r3, r2, r0, r3
     e0c:	e5930034 	ldr	r0, [r3, #52]	; 0x34
     e10:	e3a01000 	mov	r1, #0
     e14:	eb001f87 	bl	8c38 <__aeabi_fcmpgt>
     e18:	e3500000 	cmp	r0, #0
     e1c:	1a00000a 	bne	e4c <doVelocityStepCheck+0x74>
     e20:	e3550000 	cmp	r5, #0
     e24:	ca000012 	bgt	e74 <doVelocityStepCheck+0x9c>
     e28:	e30939e4 	movw	r3, #39396	; 0x99e4
     e2c:	e3403000 	movt	r3, #0
     e30:	e3a02ea3 	mov	r2, #2608	; 0xa30
     e34:	e0233492 	mla	r3, r2, r4, r3
     e38:	e5930034 	ldr	r0, [r3, #52]	; 0x34
     e3c:	e3a01000 	mov	r1, #0
     e40:	eb001f6a 	bl	8bf0 <__aeabi_fcmplt>
     e44:	e3500000 	cmp	r0, #0
     e48:	0a000009 	beq	e74 <doVelocityStepCheck+0x9c>
        allParticles[i].vx = -allParticles[i].vx*ELASTICITY;
     e4c:	e30939e4 	movw	r3, #39396	; 0x99e4
     e50:	e3403000 	movt	r3, #0
     e54:	e3a05ea3 	mov	r5, #2608	; 0xa30
     e58:	e0253495 	mla	r5, r5, r4, r3
     e5c:	e5950034 	ldr	r0, [r5, #52]	; 0x34
     e60:	e2800102 	add	r0, r0, #-2147483648	; 0x80000000
     e64:	e3a015fa 	mov	r1, #1048576000	; 0x3e800000
     e68:	eb001e75 	bl	8844 <__aeabi_fmul>
     e6c:	e5850034 	str	r0, [r5, #52]	; 0x34
     e70:	ea000035 	b	f4c <doVelocityStepCheck+0x174>
    }
    else if(allParticles[i].x <= hpx && allParticles[i].vx < TUG_VELOCITY) {
     e74:	e30939e4 	movw	r3, #39396	; 0x99e4
     e78:	e3403000 	movt	r3, #0
     e7c:	e5936010 	ldr	r6, [r3, #16]
     e80:	e1550006 	cmp	r5, r6
     e84:	ca000016 	bgt	ee4 <doVelocityStepCheck+0x10c>
     e88:	e30939e4 	movw	r3, #39396	; 0x99e4
     e8c:	e3403000 	movt	r3, #0
     e90:	e3a02ea3 	mov	r2, #2608	; 0xa30
     e94:	e0233492 	mla	r3, r2, r4, r3
     e98:	e5930034 	ldr	r0, [r3, #52]	; 0x34
     e9c:	eb001bd9 	bl	7e08 <__aeabi_f2d>
     ea0:	e30a29fc 	movw	r2, #43516	; 0xa9fc
     ea4:	e34d22f1 	movt	r2, #54001	; 0xd2f1
     ea8:	e306324d 	movw	r3, #25165	; 0x624d
     eac:	e3433f50 	movt	r3, #16208	; 0x3f50
     eb0:	eb001d61 	bl	843c <__aeabi_dcmplt>
     eb4:	e3500000 	cmp	r0, #0
     eb8:	0a000009 	beq	ee4 <doVelocityStepCheck+0x10c>
        allParticles[i].ax += TUG_ACCELERATION;
     ebc:	e30939e4 	movw	r3, #39396	; 0x99e4
     ec0:	e3403000 	movt	r3, #0
     ec4:	e3a05ea3 	mov	r5, #2608	; 0xa30
     ec8:	e0253495 	mla	r5, r5, r4, r3
     ecc:	e595003c 	ldr	r0, [r5, #60]	; 0x3c
     ed0:	e3a01000 	mov	r1, #0
     ed4:	e3441120 	movt	r1, #16672	; 0x4120
     ed8:	eb001db1 	bl	85a4 <__addsf3>
     edc:	e585003c 	str	r0, [r5, #60]	; 0x3c
     ee0:	ea000019 	b	f4c <doVelocityStepCheck+0x174>
    }
    else if(allParticles[i].x >= (MAX_X-1-hpx) && allParticles[i].vx > -TUG_VELOCITY) {
     ee4:	e2663f4f 	rsb	r3, r6, #316	; 0x13c
     ee8:	e2833003 	add	r3, r3, #3
     eec:	e1530005 	cmp	r3, r5
     ef0:	ca000015 	bgt	f4c <doVelocityStepCheck+0x174>
     ef4:	e30939e4 	movw	r3, #39396	; 0x99e4
     ef8:	e3403000 	movt	r3, #0
     efc:	e3a02ea3 	mov	r2, #2608	; 0xa30
     f00:	e0233492 	mla	r3, r2, r4, r3
     f04:	e5930034 	ldr	r0, [r3, #52]	; 0x34
     f08:	eb001bbe 	bl	7e08 <__aeabi_f2d>
     f0c:	e30a29fc 	movw	r2, #43516	; 0xa9fc
     f10:	e34d22f1 	movt	r2, #54001	; 0xd2f1
     f14:	e306324d 	movw	r3, #25165	; 0x624d
     f18:	e34b3f50 	movt	r3, #48976	; 0xbf50
     f1c:	eb001d58 	bl	8484 <__aeabi_dcmpgt>
     f20:	e3500000 	cmp	r0, #0
     f24:	0a000008 	beq	f4c <doVelocityStepCheck+0x174>
        allParticles[i].ax -= TUG_ACCELERATION;
     f28:	e30939e4 	movw	r3, #39396	; 0x99e4
     f2c:	e3403000 	movt	r3, #0
     f30:	e3a05ea3 	mov	r5, #2608	; 0xa30
     f34:	e0253495 	mla	r5, r5, r4, r3
     f38:	e595003c 	ldr	r0, [r5, #60]	; 0x3c
     f3c:	e3a01000 	mov	r1, #0
     f40:	e3441120 	movt	r1, #16672	; 0x4120
     f44:	eb001d95 	bl	85a0 <__aeabi_fsub>
     f48:	e585003c 	str	r0, [r5, #60]	; 0x3c
    }

    if((allParticles[i].y >= (MAX_Y-1) && allParticles[i].vy > 0) || (allParticles[i].y <= 0 && allParticles[i].vy < 0)) {
     f4c:	e30939e4 	movw	r3, #39396	; 0x99e4
     f50:	e3403000 	movt	r3, #0
     f54:	e3a02ea3 	mov	r2, #2608	; 0xa30
     f58:	e0233492 	mla	r3, r2, r4, r3
     f5c:	e5935028 	ldr	r5, [r3, #40]	; 0x28
     f60:	e35500ee 	cmp	r5, #238	; 0xee
     f64:	da000007 	ble	f88 <doVelocityStepCheck+0x1b0>
     f68:	e30939e4 	movw	r3, #39396	; 0x99e4
     f6c:	e3403000 	movt	r3, #0
     f70:	e0233492 	mla	r3, r2, r4, r3
     f74:	e5930038 	ldr	r0, [r3, #56]	; 0x38
     f78:	e3a01000 	mov	r1, #0
     f7c:	eb001f2d 	bl	8c38 <__aeabi_fcmpgt>
     f80:	e3500000 	cmp	r0, #0
     f84:	1a00000a 	bne	fb4 <doVelocityStepCheck+0x1dc>
     f88:	e3550000 	cmp	r5, #0
     f8c:	ca000012 	bgt	fdc <doVelocityStepCheck+0x204>
     f90:	e30939e4 	movw	r3, #39396	; 0x99e4
     f94:	e3403000 	movt	r3, #0
     f98:	e3a02ea3 	mov	r2, #2608	; 0xa30
     f9c:	e0233492 	mla	r3, r2, r4, r3
     fa0:	e5930038 	ldr	r0, [r3, #56]	; 0x38
     fa4:	e3a01000 	mov	r1, #0
     fa8:	eb001f10 	bl	8bf0 <__aeabi_fcmplt>
     fac:	e3500000 	cmp	r0, #0
     fb0:	0a000009 	beq	fdc <doVelocityStepCheck+0x204>
        allParticles[i].vy = -allParticles[i].vy*ELASTICITY;
     fb4:	e30939e4 	movw	r3, #39396	; 0x99e4
     fb8:	e3403000 	movt	r3, #0
     fbc:	e3a02ea3 	mov	r2, #2608	; 0xa30
     fc0:	e0243492 	mla	r4, r2, r4, r3
     fc4:	e5940038 	ldr	r0, [r4, #56]	; 0x38
     fc8:	e2800102 	add	r0, r0, #-2147483648	; 0x80000000
     fcc:	e3a015fa 	mov	r1, #1048576000	; 0x3e800000
     fd0:	eb001e1b 	bl	8844 <__aeabi_fmul>
     fd4:	e5840038 	str	r0, [r4, #56]	; 0x38
     fd8:	e8bd8070 	pop	{r4, r5, r6, pc}
    }
    else if(allParticles[i].y <= hpx && allParticles[i].vy < TUG_VELOCITY) {
     fdc:	e30939e4 	movw	r3, #39396	; 0x99e4
     fe0:	e3403000 	movt	r3, #0
     fe4:	e5936010 	ldr	r6, [r3, #16]
     fe8:	e1550006 	cmp	r5, r6
     fec:	ca000016 	bgt	104c <doVelocityStepCheck+0x274>
     ff0:	e30939e4 	movw	r3, #39396	; 0x99e4
     ff4:	e3403000 	movt	r3, #0
     ff8:	e3a02ea3 	mov	r2, #2608	; 0xa30
     ffc:	e0233492 	mla	r3, r2, r4, r3
    1000:	e5930038 	ldr	r0, [r3, #56]	; 0x38
    1004:	eb001b7f 	bl	7e08 <__aeabi_f2d>
    1008:	e30a29fc 	movw	r2, #43516	; 0xa9fc
    100c:	e34d22f1 	movt	r2, #54001	; 0xd2f1
    1010:	e306324d 	movw	r3, #25165	; 0x624d
    1014:	e3433f50 	movt	r3, #16208	; 0x3f50
    1018:	eb001d07 	bl	843c <__aeabi_dcmplt>
    101c:	e3500000 	cmp	r0, #0
    1020:	0a000009 	beq	104c <doVelocityStepCheck+0x274>
        allParticles[i].ay += TUG_ACCELERATION;
    1024:	e30939e4 	movw	r3, #39396	; 0x99e4
    1028:	e3403000 	movt	r3, #0
    102c:	e3a02ea3 	mov	r2, #2608	; 0xa30
    1030:	e0243492 	mla	r4, r2, r4, r3
    1034:	e5940040 	ldr	r0, [r4, #64]	; 0x40
    1038:	e3a01000 	mov	r1, #0
    103c:	e3441120 	movt	r1, #16672	; 0x4120
    1040:	eb001d57 	bl	85a4 <__addsf3>
    1044:	e5840040 	str	r0, [r4, #64]	; 0x40
    1048:	e8bd8070 	pop	{r4, r5, r6, pc}
    }
    else if(allParticles[i].y >= (MAX_Y-1-hpx) && allParticles[i].vy > -TUG_VELOCITY) {
    104c:	e26660ef 	rsb	r6, r6, #239	; 0xef
    1050:	e1550006 	cmp	r5, r6
    1054:	b8bd8070 	poplt	{r4, r5, r6, pc}
    1058:	e30939e4 	movw	r3, #39396	; 0x99e4
    105c:	e3403000 	movt	r3, #0
    1060:	e3a02ea3 	mov	r2, #2608	; 0xa30
    1064:	e0233492 	mla	r3, r2, r4, r3
    1068:	e5930038 	ldr	r0, [r3, #56]	; 0x38
    106c:	eb001b65 	bl	7e08 <__aeabi_f2d>
    1070:	e30a29fc 	movw	r2, #43516	; 0xa9fc
    1074:	e34d22f1 	movt	r2, #54001	; 0xd2f1
    1078:	e306324d 	movw	r3, #25165	; 0x624d
    107c:	e34b3f50 	movt	r3, #48976	; 0xbf50
    1080:	eb001cff 	bl	8484 <__aeabi_dcmpgt>
    1084:	e3500000 	cmp	r0, #0
    1088:	08bd8070 	popeq	{r4, r5, r6, pc}
        allParticles[i].ay -= TUG_ACCELERATION;
    108c:	e30939e4 	movw	r3, #39396	; 0x99e4
    1090:	e3403000 	movt	r3, #0
    1094:	e3a02ea3 	mov	r2, #2608	; 0xa30
    1098:	e0243492 	mla	r4, r2, r4, r3
    109c:	e5940040 	ldr	r0, [r4, #64]	; 0x40
    10a0:	e3a01000 	mov	r1, #0
    10a4:	e3441120 	movt	r1, #16672	; 0x4120
    10a8:	eb001d3c 	bl	85a0 <__aeabi_fsub>
    10ac:	e5840040 	str	r0, [r4, #64]	; 0x40
    10b0:	e8bd8070 	pop	{r4, r5, r6, pc}

000010b4 <floatAbs>:
    }
}

float floatAbs(float in){
    10b4:	e92d4010 	push	{r4, lr}
    10b8:	e1a04000 	mov	r4, r0
    return in > 0 ? in : -in;
    10bc:	e3a01000 	mov	r1, #0
    10c0:	eb001edc 	bl	8c38 <__aeabi_fcmpgt>
    10c4:	e3500000 	cmp	r0, #0
    10c8:	02844102 	addeq	r4, r4, #-2147483648	; 0x80000000
}
    10cc:	e1a00004 	mov	r0, r4
    10d0:	e8bd8010 	pop	{r4, pc}

000010d4 <stepSPHVelocities>:
void stepSPHVelocities(int i) {
    10d4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    10d8:	e1a06000 	mov	r6, r0
    
    if(floatAbs(allParticles[i].vx) < VELOCITY_COLOUR_SENSITIVITY/2){
    10dc:	e30939e4 	movw	r3, #39396	; 0x99e4
    10e0:	e3403000 	movt	r3, #0
    10e4:	e3a02ea3 	mov	r2, #2608	; 0xa30
    10e8:	e0233092 	mla	r3, r2, r0, r3
    10ec:	e5934034 	ldr	r4, [r3, #52]	; 0x34
    10f0:	e1a00004 	mov	r0, r4
    10f4:	ebffffee 	bl	10b4 <floatAbs>
    10f8:	e3a01000 	mov	r1, #0
    10fc:	e3441120 	movt	r1, #16672	; 0x4120
    1100:	eb001eba 	bl	8bf0 <__aeabi_fcmplt>
    1104:	e3500000 	cmp	r0, #0
    1108:	0a000016 	beq	1168 <stepSPHVelocities+0x94>
        allParticles[i].vx += allParticles[i].ax*SPF;
    110c:	e30939e4 	movw	r3, #39396	; 0x99e4
    1110:	e3403000 	movt	r3, #0
    1114:	e3a07ea3 	mov	r7, #2608	; 0xa30
    1118:	e0273697 	mla	r7, r7, r6, r3
    111c:	e1a00004 	mov	r0, r4
    1120:	eb001b38 	bl	7e08 <__aeabi_f2d>
    1124:	e1a04000 	mov	r4, r0
    1128:	e1a05001 	mov	r5, r1
    112c:	e597003c 	ldr	r0, [r7, #60]	; 0x3c
    1130:	eb001b34 	bl	7e08 <__aeabi_f2d>
    1134:	e301247b 	movw	r2, #5243	; 0x147b
    1138:	e34427ae 	movt	r2, #18350	; 0x47ae
    113c:	e3073ae1 	movw	r3, #31457	; 0x7ae1
    1140:	e3433f84 	movt	r3, #16260	; 0x3f84
    1144:	eb001b5c 	bl	7ebc <__aeabi_dmul>
    1148:	e1a02000 	mov	r2, r0
    114c:	e1a03001 	mov	r3, r1
    1150:	e1a00004 	mov	r0, r4
    1154:	e1a01005 	mov	r1, r5
    1158:	eb001a53 	bl	7aac <__adddf3>
    115c:	eb001ce5 	bl	84f8 <__aeabi_d2f>
    1160:	e5870034 	str	r0, [r7, #52]	; 0x34
    1164:	ea000029 	b	1210 <stepSPHVelocities+0x13c>
    } else if ((allParticles[i].vx > 0) != (allParticles[i].ax > 0)) {
    1168:	e30939e4 	movw	r3, #39396	; 0x99e4
    116c:	e3403000 	movt	r3, #0
    1170:	e3a02ea3 	mov	r2, #2608	; 0xa30
    1174:	e0233692 	mla	r3, r2, r6, r3
    1178:	e593703c 	ldr	r7, [r3, #60]	; 0x3c
    117c:	e3a08001 	mov	r8, #1
    1180:	e1a00007 	mov	r0, r7
    1184:	e3a01000 	mov	r1, #0
    1188:	eb001eaa 	bl	8c38 <__aeabi_fcmpgt>
    118c:	e3500000 	cmp	r0, #0
    1190:	03a08000 	moveq	r8, #0
    1194:	e3a05001 	mov	r5, #1
    1198:	e1a00004 	mov	r0, r4
    119c:	e3a01000 	mov	r1, #0
    11a0:	eb001ea4 	bl	8c38 <__aeabi_fcmpgt>
    11a4:	e3500000 	cmp	r0, #0
    11a8:	03a05000 	moveq	r5, #0
    11ac:	e0285005 	eor	r5, r8, r5
    11b0:	e3150001 	tst	r5, #1
    11b4:	0a000015 	beq	1210 <stepSPHVelocities+0x13c>
        allParticles[i].vx += allParticles[i].ax*SPF;
    11b8:	e30939e4 	movw	r3, #39396	; 0x99e4
    11bc:	e3403000 	movt	r3, #0
    11c0:	e3a08ea3 	mov	r8, #2608	; 0xa30
    11c4:	e0283698 	mla	r8, r8, r6, r3
    11c8:	e1a00004 	mov	r0, r4
    11cc:	eb001b0d 	bl	7e08 <__aeabi_f2d>
    11d0:	e1a04000 	mov	r4, r0
    11d4:	e1a05001 	mov	r5, r1
    11d8:	e1a00007 	mov	r0, r7
    11dc:	eb001b09 	bl	7e08 <__aeabi_f2d>
    11e0:	e301247b 	movw	r2, #5243	; 0x147b
    11e4:	e34427ae 	movt	r2, #18350	; 0x47ae
    11e8:	e3073ae1 	movw	r3, #31457	; 0x7ae1
    11ec:	e3433f84 	movt	r3, #16260	; 0x3f84
    11f0:	eb001b31 	bl	7ebc <__aeabi_dmul>
    11f4:	e1a02000 	mov	r2, r0
    11f8:	e1a03001 	mov	r3, r1
    11fc:	e1a00004 	mov	r0, r4
    1200:	e1a01005 	mov	r1, r5
    1204:	eb001a28 	bl	7aac <__adddf3>
    1208:	eb001cba 	bl	84f8 <__aeabi_d2f>
    120c:	e5880034 	str	r0, [r8, #52]	; 0x34
    }
    if(floatAbs(allParticles[i].vy) < VELOCITY_COLOUR_SENSITIVITY/2){
    1210:	e30939e4 	movw	r3, #39396	; 0x99e4
    1214:	e3403000 	movt	r3, #0
    1218:	e3a02ea3 	mov	r2, #2608	; 0xa30
    121c:	e0233692 	mla	r3, r2, r6, r3
    1220:	e5934038 	ldr	r4, [r3, #56]	; 0x38
    1224:	e1a00004 	mov	r0, r4
    1228:	ebffffa1 	bl	10b4 <floatAbs>
    122c:	e3a01000 	mov	r1, #0
    1230:	e3441120 	movt	r1, #16672	; 0x4120
    1234:	eb001e6d 	bl	8bf0 <__aeabi_fcmplt>
    1238:	e3500000 	cmp	r0, #0
    123c:	0a000016 	beq	129c <stepSPHVelocities+0x1c8>
        allParticles[i].vy += allParticles[i].ay*SPF;
    1240:	e30939e4 	movw	r3, #39396	; 0x99e4
    1244:	e3403000 	movt	r3, #0
    1248:	e3a07ea3 	mov	r7, #2608	; 0xa30
    124c:	e0273697 	mla	r7, r7, r6, r3
    1250:	e1a00004 	mov	r0, r4
    1254:	eb001aeb 	bl	7e08 <__aeabi_f2d>
    1258:	e1a04000 	mov	r4, r0
    125c:	e1a05001 	mov	r5, r1
    1260:	e5970040 	ldr	r0, [r7, #64]	; 0x40
    1264:	eb001ae7 	bl	7e08 <__aeabi_f2d>
    1268:	e301247b 	movw	r2, #5243	; 0x147b
    126c:	e34427ae 	movt	r2, #18350	; 0x47ae
    1270:	e3073ae1 	movw	r3, #31457	; 0x7ae1
    1274:	e3433f84 	movt	r3, #16260	; 0x3f84
    1278:	eb001b0f 	bl	7ebc <__aeabi_dmul>
    127c:	e1a02000 	mov	r2, r0
    1280:	e1a03001 	mov	r3, r1
    1284:	e1a00004 	mov	r0, r4
    1288:	e1a01005 	mov	r1, r5
    128c:	eb001a06 	bl	7aac <__adddf3>
    1290:	eb001c98 	bl	84f8 <__aeabi_d2f>
    1294:	e5870038 	str	r0, [r7, #56]	; 0x38
    1298:	ea000029 	b	1344 <stepSPHVelocities+0x270>
    } else if ((allParticles[i].vy > 0) != (allParticles[i].ay > 0)) {
    129c:	e30939e4 	movw	r3, #39396	; 0x99e4
    12a0:	e3403000 	movt	r3, #0
    12a4:	e3a02ea3 	mov	r2, #2608	; 0xa30
    12a8:	e0233692 	mla	r3, r2, r6, r3
    12ac:	e5937040 	ldr	r7, [r3, #64]	; 0x40
    12b0:	e3a08001 	mov	r8, #1
    12b4:	e1a00007 	mov	r0, r7
    12b8:	e3a01000 	mov	r1, #0
    12bc:	eb001e5d 	bl	8c38 <__aeabi_fcmpgt>
    12c0:	e3500000 	cmp	r0, #0
    12c4:	03a08000 	moveq	r8, #0
    12c8:	e3a05001 	mov	r5, #1
    12cc:	e1a00004 	mov	r0, r4
    12d0:	e3a01000 	mov	r1, #0
    12d4:	eb001e57 	bl	8c38 <__aeabi_fcmpgt>
    12d8:	e3500000 	cmp	r0, #0
    12dc:	03a05000 	moveq	r5, #0
    12e0:	e0285005 	eor	r5, r8, r5
    12e4:	e3150001 	tst	r5, #1
    12e8:	0a000015 	beq	1344 <stepSPHVelocities+0x270>
        allParticles[i].vy += allParticles[i].ay*SPF;
    12ec:	e30939e4 	movw	r3, #39396	; 0x99e4
    12f0:	e3403000 	movt	r3, #0
    12f4:	e3a08ea3 	mov	r8, #2608	; 0xa30
    12f8:	e0283698 	mla	r8, r8, r6, r3
    12fc:	e1a00004 	mov	r0, r4
    1300:	eb001ac0 	bl	7e08 <__aeabi_f2d>
    1304:	e1a04000 	mov	r4, r0
    1308:	e1a05001 	mov	r5, r1
    130c:	e1a00007 	mov	r0, r7
    1310:	eb001abc 	bl	7e08 <__aeabi_f2d>
    1314:	e301247b 	movw	r2, #5243	; 0x147b
    1318:	e34427ae 	movt	r2, #18350	; 0x47ae
    131c:	e3073ae1 	movw	r3, #31457	; 0x7ae1
    1320:	e3433f84 	movt	r3, #16260	; 0x3f84
    1324:	eb001ae4 	bl	7ebc <__aeabi_dmul>
    1328:	e1a02000 	mov	r2, r0
    132c:	e1a03001 	mov	r3, r1
    1330:	e1a00004 	mov	r0, r4
    1334:	e1a01005 	mov	r1, r5
    1338:	eb0019db 	bl	7aac <__adddf3>
    133c:	eb001c6d 	bl	84f8 <__aeabi_d2f>
    1340:	e5880038 	str	r0, [r8, #56]	; 0x38
    }
    allParticles[i].colour = hueToRGB565(WATER_HUE-sqrt(allParticles[i].vx*allParticles[i].vx + allParticles[i].vy*allParticles[i].vy)/VELOCITY_COLOUR_SENSITIVITY);
    1344:	e30939e4 	movw	r3, #39396	; 0x99e4
    1348:	e3403000 	movt	r3, #0
    134c:	e3a02ea3 	mov	r2, #2608	; 0xa30
    1350:	e0263692 	mla	r6, r2, r6, r3
    1354:	e5961034 	ldr	r1, [r6, #52]	; 0x34
    1358:	e5964038 	ldr	r4, [r6, #56]	; 0x38
    135c:	e1a00001 	mov	r0, r1
    1360:	eb001d37 	bl	8844 <__aeabi_fmul>
    1364:	e1a05000 	mov	r5, r0
    1368:	e1a00004 	mov	r0, r4
    136c:	e1a01004 	mov	r1, r4
    1370:	eb001d33 	bl	8844 <__aeabi_fmul>
    1374:	e1a01000 	mov	r1, r0
    1378:	e1a00005 	mov	r0, r5
    137c:	eb001c88 	bl	85a4 <__addsf3>
    1380:	eb001aa0 	bl	7e08 <__aeabi_f2d>
    1384:	eb000c39 	bl	4470 <sqrt>
    1388:	e3a02000 	mov	r2, #0
    138c:	e3a03000 	mov	r3, #0
    1390:	e3443034 	movt	r3, #16436	; 0x4034
    1394:	eb001b6c 	bl	814c <__aeabi_ddiv>
    1398:	e1a02000 	mov	r2, r0
    139c:	e1a03001 	mov	r3, r1
    13a0:	e30a03d7 	movw	r0, #41943	; 0xa3d7
    13a4:	e3430d70 	movt	r0, #15728	; 0x3d70
    13a8:	e30d170a 	movw	r1, #55050	; 0xd70a
    13ac:	e3431fe3 	movt	r1, #16355	; 0x3fe3
    13b0:	eb0019bc 	bl	7aa8 <__aeabi_dsub>
    13b4:	eb001c4f 	bl	84f8 <__aeabi_d2f>
    13b8:	ebfffba7 	bl	25c <hueToRGB565>
    13bc:	e3003a44 	movw	r3, #2628	; 0xa44
    13c0:	e18600b3 	strh	r0, [r6, r3]
    13c4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000013c8 <calculateSPHAccelerations>:

}

void calculateSPHAccelerations(int i) {
    13c8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    13cc:	e24dd05c 	sub	sp, sp, #92	; 0x5c
    13d0:	e1a0b000 	mov	r11, r0

	allParticles[i].ax = 0;
    13d4:	e30939e4 	movw	r3, #39396	; 0x99e4
    13d8:	e3403000 	movt	r3, #0
    13dc:	e3a04ea3 	mov	r4, #2608	; 0xa30
    13e0:	e0243094 	mla	r4, r4, r0, r3
    13e4:	e3a03000 	mov	r3, #0
    13e8:	e584303c 	str	r3, [r4, #60]	; 0x3c
    allParticles[i].ay = G; // Gravitational Acceleration
    13ec:	e3a03000 	mov	r3, #0
    13f0:	e34430c0 	movt	r3, #16576	; 0x40c0
    13f4:	e5843040 	str	r3, [r4, #64]	; 0x40
    float dx, dy;
    float dvx, dvy;
    float x_ij2, viscosScale;
    float x_ij, q;

    float pressureRatio_i = allParticles[i].pressure / (allParticles[i].density * allParticles[i].density);
    13f8:	e5941048 	ldr	r1, [r4, #72]	; 0x48
    13fc:	e1a00001 	mov	r0, r1
    1400:	eb001d0f 	bl	8844 <__aeabi_fmul>
    1404:	e1a01000 	mov	r1, r0
    1408:	e5940044 	ldr	r0, [r4, #68]	; 0x44
    140c:	eb001d72 	bl	89dc <__aeabi_fdiv>
    1410:	e58d003c 	str	r0, [sp, #60]	; 0x3c

    // doVelocityStepCheck(i);
    // if (allParticles[i].ax != 0 || allParticles[i].ay != G) return;
    for(int nbIdx = 0; nbIdx < 3; nbIdx++){

        int buck = allParticles[i].bucketIndexes[nbIdx];
    1414:	e5943a48 	ldr	r3, [r4, #2632]	; 0xa48
        if (buck<0 || buck>=NUM_BUCKETS) break;
    1418:	e353001f 	cmp	r3, #31
    141c:	8a0000f0 	bhi	17e4 <calculateSPHAccelerations+0x41c>
        for (int pos_j = 0; pos_j < numElementsInBucket_even[buck]; pos_j++) {
        
            int j = buckets_even[buck][pos_j];
            // int j = buckets_odd[allParticles[i].bucketIndex][pos_j];

            if (lastSeen[i][j] == timeStep || lastSeen[j][i] == timeStep) continue;
    1420:	e30527b4 	movw	r2, #22452	; 0x57b4
    1424:	e3402009 	movt	r2, #9
    1428:	e51271bc 	ldr	r7, [r2, #-444]	; 0xfffffe44
            //     q = - 3 * pow((2-q), 2);
            // } else {
            //     continue; // q is zero so save calcs by continuing
            // }
            
            GRADW_ijx = alpha * dx * q / (x_ij * h);
    142c:	e30929e4 	movw	r2, #39396	; 0x99e4
    1430:	e3402000 	movt	r2, #0
    1434:	e5920018 	ldr	r0, [r2, #24]
    1438:	e58d0038 	str	r0, [sp, #56]	; 0x38
    143c:	e5921014 	ldr	r1, [r2, #20]
    1440:	e58d1040 	str	r1, [sp, #64]	; 0x40
            // Viscosity Acceleration

            dvx = allParticles[i].vx - allParticles[j].vx;
            dvy = allParticles[i].vy - allParticles[j].vy;

            viscosScale = VISCOSITY * inv_rho_j * (dx*GRADW_ijx + dy*GRADW_ijy) / (x_ij2+nu);
    1444:	e5920020 	ldr	r0, [r2, #32]
    1448:	e58d0044 	str	r0, [sp, #68]	; 0x44
    }
    allParticles[i].colour = hueToRGB565(WATER_HUE-sqrt(allParticles[i].vx*allParticles[i].vx + allParticles[i].vy*allParticles[i].vy)/VELOCITY_COLOUR_SENSITIVITY);

}

void calculateSPHAccelerations(int i) {
    144c:	e2822024 	add	r2, r2, #36	; 0x24
    1450:	e3a01ea3 	mov	r1, #2608	; 0xa30
    1454:	e0010b91 	mul	r1, r1, r11
    1458:	e0820001 	add	r0, r2, r1
    145c:	e2800ea2 	add	r0, r0, #2592	; 0xa20
    1460:	e2800004 	add	r0, r0, #4
    1464:	e58d0048 	str	r0, [sp, #72]	; 0x48
    1468:	e2822ea2 	add	r2, r2, #2592	; 0xa20
    146c:	e282200c 	add	r2, r2, #12
    1470:	e0822001 	add	r2, r2, r1
    1474:	e58d2050 	str	r2, [sp, #80]	; 0x50
    for(int nbIdx = 0; nbIdx < 3; nbIdx++){

        int buck = allParticles[i].bucketIndexes[nbIdx];
        if (buck<0 || buck>=NUM_BUCKETS) break;

        for (int pos_j = 0; pos_j < numElementsInBucket_even[buck]; pos_j++) {
    1478:	e30517b4 	movw	r1, #22452	; 0x57b4
    147c:	e3401009 	movt	r1, #9
    1480:	e58d104c 	str	r1, [sp, #76]	; 0x4c
    }
    allParticles[i].colour = hueToRGB565(WATER_HUE-sqrt(allParticles[i].vx*allParticles[i].vx + allParticles[i].vy*allParticles[i].vy)/VELOCITY_COLOUR_SENSITIVITY);

}

void calculateSPHAccelerations(int i) {
    1484:	e2412f4e 	sub	r2, r1, #312	; 0x138
    1488:	e58d2054 	str	r2, [sp, #84]	; 0x54
        for (int pos_j = 0; pos_j < numElementsInBucket_even[buck]; pos_j++) {
        
            int j = buckets_even[buck][pos_j];
            // int j = buckets_odd[allParticles[i].bucketIndex][pos_j];

            if (lastSeen[i][j] == timeStep || lastSeen[j][i] == timeStep) continue;
    148c:	e309a864 	movw	r10, #39012	; 0x9864
    1490:	e340a006 	movt	r10, #6
    1494:	e3a00096 	mov	r0, #150	; 0x96
    1498:	e0080b90 	mul	r8, r0, r11
    149c:	e30f99c4 	movw	r9, #63940	; 0xf9c4
    14a0:	e34f9fff 	movt	r9, #65535	; 0xffff
            lastSeen[i][j] = timeStep;
            lastSeen[j][i] = timeStep;

            if (!allParticles[i].neighbours[j]) continue; // Dont check non-neighbours
    14a4:	e30919e4 	movw	r1, #39396	; 0x99e4
    14a8:	e3401000 	movt	r1, #0
    14ac:	e58d1010 	str	r1, [sp, #16]
    14b0:	e58d4000 	str	r4, [sp]
    14b4:	e1a0200a 	mov	r2, r10
    14b8:	e1a0a00b 	mov	r10, r11
    14bc:	e1a05009 	mov	r5, r9
    14c0:	e1a09008 	mov	r9, r8
    14c4:	e1a08007 	mov	r8, r7
    14c8:	e1a0b002 	mov	r11, r2
    14cc:	ea000004 	b	14e4 <calculateSPHAccelerations+0x11c>

    // doVelocityStepCheck(i);
    // if (allParticles[i].ax != 0 || allParticles[i].ay != G) return;
    for(int nbIdx = 0; nbIdx < 3; nbIdx++){

        int buck = allParticles[i].bucketIndexes[nbIdx];
    14d0:	e59d0048 	ldr	r0, [sp, #72]	; 0x48
    14d4:	e5b03004 	ldr	r3, [r0, #4]!
    14d8:	e58d0048 	str	r0, [sp, #72]	; 0x48
        if (buck<0 || buck>=NUM_BUCKETS) break;
    14dc:	e353001f 	cmp	r3, #31
    14e0:	8a0000be 	bhi	17e0 <calculateSPHAccelerations+0x418>

        for (int pos_j = 0; pos_j < numElementsInBucket_even[buck]; pos_j++) {
    14e4:	e59d104c 	ldr	r1, [sp, #76]	; 0x4c
    14e8:	e0812103 	add	r2, r1, r3, lsl #2
    14ec:	e51221b8 	ldr	r2, [r2, #-440]	; 0xfffffe48
    14f0:	e58d2004 	str	r2, [sp, #4]
    14f4:	e3520000 	cmp	r2, #0
    14f8:	da0000b2 	ble	17c8 <calculateSPHAccelerations+0x400>
    }
    allParticles[i].colour = hueToRGB565(WATER_HUE-sqrt(allParticles[i].vx*allParticles[i].vx + allParticles[i].vy*allParticles[i].vy)/VELOCITY_COLOUR_SENSITIVITY);

}

void calculateSPHAccelerations(int i) {
    14fc:	e3a02f96 	mov	r2, #600	; 0x258
    1500:	e59d0054 	ldr	r0, [sp, #84]	; 0x54
    1504:	e0230392 	mla	r3, r2, r3, r0
    1508:	e2436004 	sub	r6, r3, #4
    150c:	e3a04000 	mov	r4, #0
            if (lastSeen[i][j] == timeStep || lastSeen[j][i] == timeStep) continue;
            lastSeen[i][j] = timeStep;
            lastSeen[j][i] = timeStep;

            if (!allParticles[i].neighbours[j]) continue; // Dont check non-neighbours
            if (allParticles[i].neighbourDistances[j] == 0) continue; // Everything goes to zero if no distance
    1510:	e3a03fa3 	mov	r3, #652	; 0x28c
    1514:	e0030a93 	mul	r3, r3, r10
    1518:	e58d3014 	str	r3, [sp, #20]
        int buck = allParticles[i].bucketIndexes[nbIdx];
        if (buck<0 || buck>=NUM_BUCKETS) break;

        for (int pos_j = 0; pos_j < numElementsInBucket_even[buck]; pos_j++) {
        
            int j = buckets_even[buck][pos_j];
    151c:	e5b67004 	ldr	r7, [r6, #4]!
            // int j = buckets_odd[allParticles[i].bucketIndex][pos_j];

            if (lastSeen[i][j] == timeStep || lastSeen[j][i] == timeStep) continue;
    1520:	e0893007 	add	r3, r9, r7
    1524:	e08b3103 	add	r3, r11, r3, lsl #2
    1528:	e7933005 	ldr	r3, [r3, r5]
    152c:	e1530008 	cmp	r3, r8
    1530:	0a0000a0 	beq	17b8 <calculateSPHAccelerations+0x3f0>
    1534:	e3a01096 	mov	r1, #150	; 0x96
    1538:	e023a791 	mla	r3, r1, r7, r10
    153c:	e08b3103 	add	r3, r11, r3, lsl #2
    1540:	e7933005 	ldr	r3, [r3, r5]
    1544:	e1580003 	cmp	r8, r3
    1548:	0a00009a 	beq	17b8 <calculateSPHAccelerations+0x3f0>
            lastSeen[i][j] = timeStep;
    154c:	e0893007 	add	r3, r9, r7
    1550:	e08b3103 	add	r3, r11, r3, lsl #2
    1554:	e7838005 	str	r8, [r3, r5]
            lastSeen[j][i] = timeStep;
    1558:	e023a791 	mla	r3, r1, r7, r10
    155c:	e08b3103 	add	r3, r11, r3, lsl #2
    1560:	e7838005 	str	r8, [r3, r5]

            if (!allParticles[i].neighbours[j]) continue; // Dont check non-neighbours
    1564:	e59d2000 	ldr	r2, [sp]
    1568:	e0823007 	add	r3, r2, r7
    156c:	e5d3304c 	ldrb	r3, [r3, #76]	; 0x4c
    1570:	e3530000 	cmp	r3, #0
    1574:	0a00008f 	beq	17b8 <calculateSPHAccelerations+0x3f0>
            if (allParticles[i].neighbourDistances[j] == 0) continue; // Everything goes to zero if no distance
    1578:	e59d0014 	ldr	r0, [sp, #20]
    157c:	e0803007 	add	r3, r0, r7
    1580:	e59d1010 	ldr	r1, [sp, #16]
    1584:	e0813103 	add	r3, r1, r3, lsl #2
    1588:	e59337ec 	ldr	r3, [r3, #2028]	; 0x7ec
    158c:	e58d3008 	str	r3, [sp, #8]
    1590:	e1a00003 	mov	r0, r3
    1594:	e3a01000 	mov	r1, #0
    1598:	eb001d8e 	bl	8bd8 <__aeabi_fcmpeq>
    159c:	e3500000 	cmp	r0, #0
    15a0:	1a000084 	bne	17b8 <calculateSPHAccelerations+0x3f0>

            q = allParticles[i].gradQ[j];
    15a4:	e59d2014 	ldr	r2, [sp, #20]
    15a8:	e0823007 	add	r3, r2, r7
    15ac:	e59d0010 	ldr	r0, [sp, #16]
    15b0:	e0803103 	add	r3, r0, r3, lsl #2
    15b4:	e59330e4 	ldr	r3, [r3, #228]	; 0xe4
    15b8:	e58d300c 	str	r3, [sp, #12]
            if(!q) continue;
    15bc:	e1a00003 	mov	r0, r3
    15c0:	e3a01000 	mov	r1, #0
    15c4:	eb001d83 	bl	8bd8 <__aeabi_fcmpeq>
    15c8:	e3500000 	cmp	r0, #0
    15cc:	1a000079 	bne	17b8 <calculateSPHAccelerations+0x3f0>

            dx = allParticles[i].neighbourDXs[j];
    15d0:	e59d1014 	ldr	r1, [sp, #20]
    15d4:	e0813007 	add	r3, r1, r7
    15d8:	e59d0010 	ldr	r0, [sp, #16]
    15dc:	e0802103 	add	r2, r0, r3, lsl #2
    15e0:	e592233c 	ldr	r2, [r2, #828]	; 0x33c
    15e4:	e58d2018 	str	r2, [sp, #24]
            dy = allParticles[i].neighbourDYs[j];
    15e8:	e0803103 	add	r3, r0, r3, lsl #2
    15ec:	e5933594 	ldr	r3, [r3, #1428]	; 0x594
    15f0:	e58d3028 	str	r3, [sp, #40]	; 0x28
            //     q = - 3 * pow((2-q), 2);
            // } else {
            //     continue; // q is zero so save calcs by continuing
            // }
            
            GRADW_ijx = alpha * dx * q / (x_ij * h);
    15f4:	e59d0008 	ldr	r0, [sp, #8]
    15f8:	e59d1040 	ldr	r1, [sp, #64]	; 0x40
    15fc:	eb001c90 	bl	8844 <__aeabi_fmul>
    1600:	e58d0020 	str	r0, [sp, #32]
    1604:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
    1608:	e59d1018 	ldr	r1, [sp, #24]
    160c:	eb001c8c 	bl	8844 <__aeabi_fmul>
    1610:	e59d100c 	ldr	r1, [sp, #12]
    1614:	eb001c8a 	bl	8844 <__aeabi_fmul>
    1618:	e59d1020 	ldr	r1, [sp, #32]
    161c:	eb001cee 	bl	89dc <__aeabi_fdiv>
    1620:	e58d002c 	str	r0, [sp, #44]	; 0x2c
            GRADW_ijy = alpha * dy * q / (x_ij * h);
    1624:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
    1628:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
    162c:	eb001c84 	bl	8844 <__aeabi_fmul>
    1630:	e59d100c 	ldr	r1, [sp, #12]
    1634:	eb001c82 	bl	8844 <__aeabi_fmul>
    1638:	e59d1020 	ldr	r1, [sp, #32]
    163c:	eb001ce6 	bl	89dc <__aeabi_fdiv>
    1640:	e58d0020 	str	r0, [sp, #32]

            // Pressure Acceleration

            inv_rho_j = 1/allParticles[j].density;
    1644:	e3a01ea3 	mov	r1, #2608	; 0xa30
    1648:	e59d2010 	ldr	r2, [sp, #16]
    164c:	e0272791 	mla	r7, r1, r7, r2
    1650:	e58d700c 	str	r7, [sp, #12]
    1654:	e3a005fe 	mov	r0, #1065353216	; 0x3f800000
    1658:	e5971048 	ldr	r1, [r7, #72]	; 0x48
    165c:	eb001cde 	bl	89dc <__aeabi_fdiv>
    1660:	e1a07000 	mov	r7, r0
            pressureRatio_j = allParticles[j].pressure * inv_rho_j * inv_rho_j;
    1664:	e59d300c 	ldr	r3, [sp, #12]
    1668:	e5931044 	ldr	r1, [r3, #68]	; 0x44
    166c:	eb001c74 	bl	8844 <__aeabi_fmul>
    1670:	e1a01007 	mov	r1, r7
    1674:	eb001c72 	bl	8844 <__aeabi_fmul>
    1678:	e1a01000 	mov	r1, r0
            allParticles[i].ax -= (pressureRatio_i + pressureRatio_j) * GRADW_ijx;
    167c:	e59d003c 	ldr	r0, [sp, #60]	; 0x3c
    1680:	eb001bc7 	bl	85a4 <__addsf3>
    1684:	e58d0024 	str	r0, [sp, #36]	; 0x24
    1688:	e59d102c 	ldr	r1, [sp, #44]	; 0x2c
    168c:	eb001c6c 	bl	8844 <__aeabi_fmul>
    1690:	e1a01000 	mov	r1, r0
    1694:	e59d2000 	ldr	r2, [sp]
    1698:	e592003c 	ldr	r0, [r2, #60]	; 0x3c
    169c:	eb001bbf 	bl	85a0 <__aeabi_fsub>
    16a0:	e59d3000 	ldr	r3, [sp]
    16a4:	e583003c 	str	r0, [r3, #60]	; 0x3c
            allParticles[i].ay -= (pressureRatio_i + pressureRatio_j) * GRADW_ijy;
    16a8:	e59d0020 	ldr	r0, [sp, #32]
    16ac:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
    16b0:	eb001c63 	bl	8844 <__aeabi_fmul>
    16b4:	e1a01000 	mov	r1, r0
    16b8:	e59d2000 	ldr	r2, [sp]
    16bc:	e5920040 	ldr	r0, [r2, #64]	; 0x40
    16c0:	eb001bb6 	bl	85a0 <__aeabi_fsub>
    16c4:	e59d3000 	ldr	r3, [sp]
    16c8:	e5830040 	str	r0, [r3, #64]	; 0x40

            // Viscosity Acceleration

            dvx = allParticles[i].vx - allParticles[j].vx;
            dvy = allParticles[i].vy - allParticles[j].vy;
    16cc:	e5930038 	ldr	r0, [r3, #56]	; 0x38
    16d0:	e59d200c 	ldr	r2, [sp, #12]
    16d4:	e5921038 	ldr	r1, [r2, #56]	; 0x38
    16d8:	eb001bb0 	bl	85a0 <__aeabi_fsub>
    16dc:	e58d0024 	str	r0, [sp, #36]	; 0x24

            viscosScale = VISCOSITY * inv_rho_j * (dx*GRADW_ijx + dy*GRADW_ijy) / (x_ij2+nu);
    16e0:	e1a00007 	mov	r0, r7
    16e4:	eb0019c7 	bl	7e08 <__aeabi_f2d>
    16e8:	e1cd03f0 	strd	r0, [sp, #48]	; 0x30
    16ec:	e59d0018 	ldr	r0, [sp, #24]
    16f0:	e59d102c 	ldr	r1, [sp, #44]	; 0x2c
    16f4:	eb001c52 	bl	8844 <__aeabi_fmul>
    16f8:	e1a07000 	mov	r7, r0
    16fc:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
    1700:	e59d1020 	ldr	r1, [sp, #32]
    1704:	eb001c4e 	bl	8844 <__aeabi_fmul>
    1708:	e1a01000 	mov	r1, r0
    170c:	e1a00007 	mov	r0, r7
    1710:	eb001ba3 	bl	85a4 <__addsf3>
    1714:	eb0019bb 	bl	7e08 <__aeabi_f2d>
    1718:	e1a02000 	mov	r2, r0
    171c:	e1a03001 	mov	r3, r1
    1720:	e1cd03d0 	ldrd	r0, [sp, #48]	; 0x30
    1724:	eb0019e4 	bl	7ebc <__aeabi_dmul>
    1728:	e1cd01f8 	strd	r0, [sp, #24]

            dx = allParticles[i].neighbourDXs[j];
            dy = allParticles[i].neighbourDYs[j];

            x_ij = allParticles[i].neighbourDistances[j];
            x_ij2 = x_ij*x_ij;
    172c:	e59d0008 	ldr	r0, [sp, #8]
    1730:	e1a01000 	mov	r1, r0
    1734:	eb001c42 	bl	8844 <__aeabi_fmul>
            // Viscosity Acceleration

            dvx = allParticles[i].vx - allParticles[j].vx;
            dvy = allParticles[i].vy - allParticles[j].vy;

            viscosScale = VISCOSITY * inv_rho_j * (dx*GRADW_ijx + dy*GRADW_ijy) / (x_ij2+nu);
    1738:	e59d1044 	ldr	r1, [sp, #68]	; 0x44
    173c:	eb001b98 	bl	85a4 <__addsf3>
    1740:	eb0019b0 	bl	7e08 <__aeabi_f2d>
    1744:	e1a02000 	mov	r2, r0
    1748:	e1a03001 	mov	r3, r1
    174c:	e1cd01d8 	ldrd	r0, [sp, #24]
    1750:	eb001a7d 	bl	814c <__aeabi_ddiv>
    1754:	eb001b67 	bl	84f8 <__aeabi_d2f>
    1758:	e1a07000 	mov	r7, r0
            allParticles[i].ax -= (pressureRatio_i + pressureRatio_j) * GRADW_ijx;
            allParticles[i].ay -= (pressureRatio_i + pressureRatio_j) * GRADW_ijy;

            // Viscosity Acceleration

            dvx = allParticles[i].vx - allParticles[j].vx;
    175c:	e59d3000 	ldr	r3, [sp]
    1760:	e5930034 	ldr	r0, [r3, #52]	; 0x34
    1764:	e59d200c 	ldr	r2, [sp, #12]
    1768:	e5921034 	ldr	r1, [r2, #52]	; 0x34
    176c:	eb001b8b 	bl	85a0 <__aeabi_fsub>
    1770:	e1a01000 	mov	r1, r0
            dvy = allParticles[i].vy - allParticles[j].vy;

            viscosScale = VISCOSITY * inv_rho_j * (dx*GRADW_ijx + dy*GRADW_ijy) / (x_ij2+nu);
            allParticles[i].ax += viscosScale * dvx;
    1774:	e1a00007 	mov	r0, r7
    1778:	eb001c31 	bl	8844 <__aeabi_fmul>
    177c:	e1a01000 	mov	r1, r0
    1780:	e59d3000 	ldr	r3, [sp]
    1784:	e593003c 	ldr	r0, [r3, #60]	; 0x3c
    1788:	eb001b85 	bl	85a4 <__addsf3>
    178c:	e59d1000 	ldr	r1, [sp]
    1790:	e581003c 	str	r0, [r1, #60]	; 0x3c
            allParticles[i].ay += viscosScale * dvy;
    1794:	e1a00007 	mov	r0, r7
    1798:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
    179c:	eb001c28 	bl	8844 <__aeabi_fmul>
    17a0:	e1a01000 	mov	r1, r0
    17a4:	e59d2000 	ldr	r2, [sp]
    17a8:	e5920040 	ldr	r0, [r2, #64]	; 0x40
    17ac:	eb001b7c 	bl	85a4 <__addsf3>
    17b0:	e59d3000 	ldr	r3, [sp]
    17b4:	e5830040 	str	r0, [r3, #64]	; 0x40
    for(int nbIdx = 0; nbIdx < 3; nbIdx++){

        int buck = allParticles[i].bucketIndexes[nbIdx];
        if (buck<0 || buck>=NUM_BUCKETS) break;

        for (int pos_j = 0; pos_j < numElementsInBucket_even[buck]; pos_j++) {
    17b8:	e2844001 	add	r4, r4, #1
    17bc:	e59d0004 	ldr	r0, [sp, #4]
    17c0:	e1540000 	cmp	r4, r0
    17c4:	baffff54 	blt	151c <calculateSPHAccelerations+0x154>
    float pressureRatio_i = allParticles[i].pressure / (allParticles[i].density * allParticles[i].density);
    float inv_rho_j, pressureRatio_j;

    // doVelocityStepCheck(i);
    // if (allParticles[i].ax != 0 || allParticles[i].ay != G) return;
    for(int nbIdx = 0; nbIdx < 3; nbIdx++){
    17c8:	e59d1048 	ldr	r1, [sp, #72]	; 0x48
    17cc:	e59d2050 	ldr	r2, [sp, #80]	; 0x50
    17d0:	e1510002 	cmp	r1, r2
    17d4:	1affff3d 	bne	14d0 <calculateSPHAccelerations+0x108>
    17d8:	e1a0b00a 	mov	r11, r10
    17dc:	ea000000 	b	17e4 <calculateSPHAccelerations+0x41c>
    17e0:	e1a0b00a 	mov	r11, r10

        }
    }

    // Mouse Acceleration
    if(!mData.left) return;
    17e4:	e30939e4 	movw	r3, #39396	; 0x99e4
    17e8:	e3403000 	movt	r3, #0
    17ec:	e5d3300c 	ldrb	r3, [r3, #12]
    17f0:	e3530000 	cmp	r3, #0
    17f4:	0a000066 	beq	1994 <calculateSPHAccelerations+0x5cc>
    // printf("HERE");
    dx = (float)allParticles[i].x - (float)mData.x;
    17f8:	e309a9e4 	movw	r10, #39396	; 0x99e4
    17fc:	e340a000 	movt	r10, #0
    1800:	e3a04ea3 	mov	r4, #2608	; 0xa30
    1804:	e024ab94 	mla	r4, r4, r11, r10
    1808:	e5940024 	ldr	r0, [r4, #36]	; 0x24
    180c:	eb001bd5 	bl	8768 <__aeabi_i2f>
    1810:	e1a05000 	mov	r5, r0
    1814:	e59a0004 	ldr	r0, [r10, #4]
    1818:	eb001bd2 	bl	8768 <__aeabi_i2f>
    181c:	e1a01000 	mov	r1, r0
    1820:	e1a00005 	mov	r0, r5
    1824:	eb001b5d 	bl	85a0 <__aeabi_fsub>
    1828:	e1a07000 	mov	r7, r0
    dy = (float)allParticles[i].y - (float)mData.y;
    182c:	e5940028 	ldr	r0, [r4, #40]	; 0x28
    1830:	eb001bcc 	bl	8768 <__aeabi_i2f>
    1834:	e1a04000 	mov	r4, r0
    1838:	e59a0008 	ldr	r0, [r10, #8]
    183c:	eb001bc9 	bl	8768 <__aeabi_i2f>
    1840:	e1a01000 	mov	r1, r0
    1844:	e1a00004 	mov	r0, r4
    1848:	eb001b54 	bl	85a0 <__aeabi_fsub>
    184c:	e1a06000 	mov	r6, r0
    float mag = sqrt(dx*dx+dy*dy);
    1850:	e1a00007 	mov	r0, r7
    1854:	e1a01007 	mov	r1, r7
    1858:	eb001bf9 	bl	8844 <__aeabi_fmul>
    185c:	e1a04000 	mov	r4, r0
    1860:	e1a00006 	mov	r0, r6
    1864:	e1a01006 	mov	r1, r6
    1868:	eb001bf5 	bl	8844 <__aeabi_fmul>
    186c:	e1a01000 	mov	r1, r0
    1870:	e1a00004 	mov	r0, r4
    1874:	eb001b4a 	bl	85a4 <__addsf3>
    1878:	eb001962 	bl	7e08 <__aeabi_f2d>
    187c:	eb000afb 	bl	4470 <sqrt>
    1880:	eb001b1c 	bl	84f8 <__aeabi_d2f>
    1884:	e1a08000 	mov	r8, r0
    if (mag < 2*h*PX_PER_M) {
    1888:	eb00195e 	bl	7e08 <__aeabi_f2d>
    188c:	e1a04000 	mov	r4, r0
    1890:	e1a05001 	mov	r5, r1
    1894:	e59a1014 	ldr	r1, [r10, #20]
    1898:	e1a00001 	mov	r0, r1
    189c:	eb001b40 	bl	85a4 <__addsf3>
    18a0:	eb001958 	bl	7e08 <__aeabi_f2d>
    18a4:	e3a02000 	mov	r2, #0
    18a8:	e3a03000 	mov	r3, #0
    18ac:	e3443049 	movt	r3, #16457	; 0x4049
    18b0:	eb001981 	bl	7ebc <__aeabi_dmul>
    18b4:	e1a02000 	mov	r2, r0
    18b8:	e1a03001 	mov	r3, r1
    18bc:	e1a00004 	mov	r0, r4
    18c0:	e1a01005 	mov	r1, r5
    18c4:	eb001adc 	bl	843c <__aeabi_dcmplt>
    18c8:	e3500000 	cmp	r0, #0
    18cc:	0a000030 	beq	1994 <calculateSPHAccelerations+0x5cc>
        allParticles[i].ax += MOUSE_A_MAG * dx/(mag*mag);
    18d0:	e1a00008 	mov	r0, r8
    18d4:	e1a01008 	mov	r1, r8
    18d8:	eb001bd9 	bl	8844 <__aeabi_fmul>
    18dc:	eb001949 	bl	7e08 <__aeabi_f2d>
    18e0:	e1a04000 	mov	r4, r0
    18e4:	e1a05001 	mov	r5, r1
    18e8:	e1a0300a 	mov	r3, r10
    18ec:	e3a0aea3 	mov	r10, #2608	; 0xa30
    18f0:	e02a3b9a 	mla	r10, r10, r11, r3
    18f4:	e59a003c 	ldr	r0, [r10, #60]	; 0x3c
    18f8:	eb001942 	bl	7e08 <__aeabi_f2d>
    18fc:	e1a08000 	mov	r8, r0
    1900:	e1a09001 	mov	r9, r1
    1904:	e1a00007 	mov	r0, r7
    1908:	eb00193e 	bl	7e08 <__aeabi_f2d>
    190c:	e3a02000 	mov	r2, #0
    1910:	e3a03901 	mov	r3, #16384	; 0x4000
    1914:	e344308f 	movt	r3, #16527	; 0x408f
    1918:	eb001967 	bl	7ebc <__aeabi_dmul>
    191c:	e1a02004 	mov	r2, r4
    1920:	e1a03005 	mov	r3, r5
    1924:	eb001a08 	bl	814c <__aeabi_ddiv>
    1928:	e1a02000 	mov	r2, r0
    192c:	e1a03001 	mov	r3, r1
    1930:	e1a00008 	mov	r0, r8
    1934:	e1a01009 	mov	r1, r9
    1938:	eb00185b 	bl	7aac <__adddf3>
    193c:	eb001aed 	bl	84f8 <__aeabi_d2f>
    1940:	e58a003c 	str	r0, [r10, #60]	; 0x3c
        allParticles[i].ay += MOUSE_A_MAG * dy/(mag*mag);
    1944:	e59a0040 	ldr	r0, [r10, #64]	; 0x40
    1948:	eb00192e 	bl	7e08 <__aeabi_f2d>
    194c:	e1a08000 	mov	r8, r0
    1950:	e1a09001 	mov	r9, r1
    1954:	e1a00006 	mov	r0, r6
    1958:	eb00192a 	bl	7e08 <__aeabi_f2d>
    195c:	e3a02000 	mov	r2, #0
    1960:	e3a03901 	mov	r3, #16384	; 0x4000
    1964:	e344308f 	movt	r3, #16527	; 0x408f
    1968:	eb001953 	bl	7ebc <__aeabi_dmul>
    196c:	e1a02004 	mov	r2, r4
    1970:	e1a03005 	mov	r3, r5
    1974:	eb0019f4 	bl	814c <__aeabi_ddiv>
    1978:	e1a02000 	mov	r2, r0
    197c:	e1a03001 	mov	r3, r1
    1980:	e1a00008 	mov	r0, r8
    1984:	e1a01009 	mov	r1, r9
    1988:	eb001847 	bl	7aac <__adddf3>
    198c:	eb001ad9 	bl	84f8 <__aeabi_d2f>
    1990:	e58a0040 	str	r0, [r10, #64]	; 0x40
    }

} 
    1994:	e28dd05c 	add	sp, sp, #92	; 0x5c
    1998:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

0000199c <timeStepSPHApproximation>:

void timeStepSPHApproximation(int i, int j) {
    199c:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
    19a0:	e1a06000 	mov	r6, r0
    19a4:	e1a07001 	mov	r7, r1

    float dx, dy;
    float x_ij, q, rho;
    float fp, sp, gradQ;

    dx = allParticles[i].pX - allParticles[j].pX;
    19a8:	e30949e4 	movw	r4, #39396	; 0x99e4
    19ac:	e3404000 	movt	r4, #0
    19b0:	e3a05ea3 	mov	r5, #2608	; 0xa30
    19b4:	e0284095 	mla	r8, r5, r0, r4
    19b8:	e0254195 	mla	r5, r5, r1, r4
    19bc:	e598002c 	ldr	r0, [r8, #44]	; 0x2c
    19c0:	e595102c 	ldr	r1, [r5, #44]	; 0x2c
    19c4:	eb001af5 	bl	85a0 <__aeabi_fsub>
    19c8:	e1a0a000 	mov	r10, r0
    dy = allParticles[i].pY - allParticles[j].pY;
    19cc:	e5980030 	ldr	r0, [r8, #48]	; 0x30
    19d0:	e5951030 	ldr	r1, [r5, #48]	; 0x30
    19d4:	eb001af1 	bl	85a0 <__aeabi_fsub>
    19d8:	e1a08000 	mov	r8, r0
    x_ij = sqrt(dx*dx+dy*dy);
    19dc:	e1a0000a 	mov	r0, r10
    19e0:	e1a0100a 	mov	r1, r10
    19e4:	eb001b96 	bl	8844 <__aeabi_fmul>
    19e8:	e1a05000 	mov	r5, r0
    19ec:	e1a00008 	mov	r0, r8
    19f0:	e1a01008 	mov	r1, r8
    19f4:	eb001b92 	bl	8844 <__aeabi_fmul>
    19f8:	e1a01000 	mov	r1, r0
    19fc:	e1a00005 	mov	r0, r5
    1a00:	eb001ae7 	bl	85a4 <__addsf3>
    1a04:	eb0018ff 	bl	7e08 <__aeabi_f2d>
    1a08:	eb000a98 	bl	4470 <sqrt>
    1a0c:	eb001ab9 	bl	84f8 <__aeabi_d2f>
    1a10:	e1a0b000 	mov	r11, r0
    
    if (x_ij<ROOT_TWO_SCALE*h) {
    1a14:	e5949014 	ldr	r9, [r4, #20]
    1a18:	eb0018fa 	bl	7e08 <__aeabi_f2d>
    1a1c:	e1a04000 	mov	r4, r0
    1a20:	e1a05001 	mov	r5, r1
    1a24:	e1a00009 	mov	r0, r9
    1a28:	eb0018f6 	bl	7e08 <__aeabi_f2d>
    1a2c:	e30b2439 	movw	r2, #46137	; 0xb439
    1a30:	e34726c8 	movt	r2, #30408	; 0x76c8
    1a34:	e3093fbe 	movw	r3, #40894	; 0x9fbe
    1a38:	e3433ff6 	movt	r3, #16374	; 0x3ff6
    1a3c:	eb00191e 	bl	7ebc <__aeabi_dmul>
    1a40:	e1a02000 	mov	r2, r0
    1a44:	e1a03001 	mov	r3, r1
    1a48:	e1a00004 	mov	r0, r4
    1a4c:	e1a01005 	mov	r1, r5
    1a50:	eb001a79 	bl	843c <__aeabi_dcmplt>
    1a54:	e3500000 	cmp	r0, #0
    1a58:	0a000092 	beq	1ca8 <timeStepSPHApproximation+0x30c>

        allParticles[i].neighbourDXs[j] = dx;
    1a5c:	e30939e4 	movw	r3, #39396	; 0x99e4
    1a60:	e3403000 	movt	r3, #0
    1a64:	e3a02fa3 	mov	r2, #652	; 0x28c
    1a68:	e0217692 	mla	r1, r2, r6, r7
    1a6c:	e0830101 	add	r0, r3, r1, lsl #2
    1a70:	e580a33c 	str	r10, [r0, #828]	; 0x33c
        allParticles[i].neighbourDYs[j] = dy;
    1a74:	e5808594 	str	r8, [r0, #1428]	; 0x594
        allParticles[i].neighbourDistances[j] = x_ij;
    1a78:	e580b7ec 	str	r11, [r0, #2028]	; 0x7ec

        allParticles[j].neighbourDXs[i] = -dx;
    1a7c:	e0226792 	mla	r2, r2, r7, r6
    1a80:	e0831102 	add	r1, r3, r2, lsl #2
    1a84:	e28aa102 	add	r10, r10, #-2147483648	; 0x80000000
    1a88:	e581a33c 	str	r10, [r1, #828]	; 0x33c
        allParticles[j].neighbourDYs[i] = -dy;
    1a8c:	e2888102 	add	r8, r8, #-2147483648	; 0x80000000
    1a90:	e5818594 	str	r8, [r1, #1428]	; 0x594
        allParticles[j].neighbourDistances[i] = x_ij;
    1a94:	e581b7ec 	str	r11, [r1, #2028]	; 0x7ec

        allParticles[i].neighbours[j] = true;
    1a98:	e3a01ea3 	mov	r1, #2608	; 0xa30
    1a9c:	e0203691 	mla	r0, r1, r6, r3
    1aa0:	e0800007 	add	r0, r0, r7
    1aa4:	e3a02001 	mov	r2, #1
    1aa8:	e5c0204c 	strb	r2, [r0, #76]	; 0x4c
        allParticles[j].neighbours[i] = true;
    1aac:	e0233791 	mla	r3, r1, r7, r3
    1ab0:	e0833006 	add	r3, r3, r6
    1ab4:	e5c3204c 	strb	r2, [r3, #76]	; 0x4c

        q = x_ij/h;
    1ab8:	e1a0000b 	mov	r0, r11
    1abc:	e1a01009 	mov	r1, r9
    1ac0:	eb001bc5 	bl	89dc <__aeabi_fdiv>
    1ac4:	e1a04000 	mov	r4, r0

        if(q < 1){
    1ac8:	e3a015fe 	mov	r1, #1065353216	; 0x3f800000
    1acc:	eb001c47 	bl	8bf0 <__aeabi_fcmplt>
    1ad0:	e3500000 	cmp	r0, #0
    1ad4:	0a000038 	beq	1bbc <timeStepSPHApproximation+0x220>
            fp = pow((2-q), 2);
    1ad8:	e3a00101 	mov	r0, #1073741824	; 0x40000000
    1adc:	e1a01004 	mov	r1, r4
    1ae0:	eb001aae 	bl	85a0 <__aeabi_fsub>
    1ae4:	e1a08000 	mov	r8, r0
    1ae8:	eb0018c6 	bl	7e08 <__aeabi_f2d>
    1aec:	e1a02000 	mov	r2, r0
    1af0:	e1a03001 	mov	r3, r1
    1af4:	eb0018f0 	bl	7ebc <__aeabi_dmul>
    1af8:	eb001a7e 	bl	84f8 <__aeabi_d2f>
    1afc:	e1a05000 	mov	r5, r0
            sp = pow((1-q), 2);
    1b00:	e3a005fe 	mov	r0, #1065353216	; 0x3f800000
    1b04:	e1a01004 	mov	r1, r4
    1b08:	eb001aa4 	bl	85a0 <__aeabi_fsub>
    1b0c:	e1a0a000 	mov	r10, r0
    1b10:	eb0018bc 	bl	7e08 <__aeabi_f2d>
    1b14:	e1a02000 	mov	r2, r0
    1b18:	e1a03001 	mov	r3, r1
    1b1c:	eb0018e6 	bl	7ebc <__aeabi_dmul>
    1b20:	eb001a74 	bl	84f8 <__aeabi_d2f>
    1b24:	e1a04000 	mov	r4, r0

            gradQ = -3 * fp + 12 * sp;
    1b28:	e1a00005 	mov	r0, r5
    1b2c:	e3a01000 	mov	r1, #0
    1b30:	e34c1040 	movt	r1, #49216	; 0xc040
    1b34:	eb001b42 	bl	8844 <__aeabi_fmul>
    1b38:	e1a09000 	mov	r9, r0
    1b3c:	e1a00004 	mov	r0, r4
    1b40:	e3a01000 	mov	r1, #0
    1b44:	e3441140 	movt	r1, #16704	; 0x4140
    1b48:	eb001b3d 	bl	8844 <__aeabi_fmul>
    1b4c:	e1a01000 	mov	r1, r0
    1b50:	e1a00009 	mov	r0, r9
    1b54:	eb001a92 	bl	85a4 <__addsf3>
    1b58:	e1a02000 	mov	r2, r0
            allParticles[i].gradQ[j] = gradQ;
    1b5c:	e30939e4 	movw	r3, #39396	; 0x99e4
    1b60:	e3403000 	movt	r3, #0
    1b64:	e3a01fa3 	mov	r1, #652	; 0x28c
    1b68:	e0207691 	mla	r0, r1, r6, r7
    1b6c:	e0830100 	add	r0, r3, r0, lsl #2
    1b70:	e58020e4 	str	r2, [r0, #228]	; 0xe4
            allParticles[j].gradQ[i] = gradQ;
    1b74:	e0216791 	mla	r1, r1, r7, r6
    1b78:	e0833101 	add	r3, r3, r1, lsl #2
    1b7c:	e58320e4 	str	r2, [r3, #228]	; 0xe4

            q = fp*(2-q) - 4 * sp*(1-q);
    1b80:	e1a00008 	mov	r0, r8
    1b84:	e1a01005 	mov	r1, r5
    1b88:	eb001b2d 	bl	8844 <__aeabi_fmul>
    1b8c:	e1a05000 	mov	r5, r0
    1b90:	e1a00004 	mov	r0, r4
    1b94:	e3a01000 	mov	r1, #0
    1b98:	e3441080 	movt	r1, #16512	; 0x4080
    1b9c:	eb001b28 	bl	8844 <__aeabi_fmul>
    1ba0:	e1a01000 	mov	r1, r0
    1ba4:	e1a0000a 	mov	r0, r10
    1ba8:	eb001b25 	bl	8844 <__aeabi_fmul>
    1bac:	e1a01000 	mov	r1, r0
    1bb0:	e1a00005 	mov	r0, r5
    1bb4:	eb001a79 	bl	85a0 <__aeabi_fsub>
    1bb8:	ea000029 	b	1c64 <timeStepSPHApproximation+0x2c8>
        } else if (q < 2) {
    1bbc:	e1a00004 	mov	r0, r4
    1bc0:	e3a01101 	mov	r1, #1073741824	; 0x40000000
    1bc4:	eb001c09 	bl	8bf0 <__aeabi_fcmplt>
    1bc8:	e3500000 	cmp	r0, #0
    1bcc:	0a000019 	beq	1c38 <timeStepSPHApproximation+0x29c>
            fp = pow((2-q), 2);
    1bd0:	e3a00101 	mov	r0, #1073741824	; 0x40000000
    1bd4:	e1a01004 	mov	r1, r4
    1bd8:	eb001a70 	bl	85a0 <__aeabi_fsub>
    1bdc:	e1a05000 	mov	r5, r0
    1be0:	eb001888 	bl	7e08 <__aeabi_f2d>
    1be4:	e1a02000 	mov	r2, r0
    1be8:	e1a03001 	mov	r3, r1
    1bec:	eb0018b2 	bl	7ebc <__aeabi_dmul>
    1bf0:	eb001a40 	bl	84f8 <__aeabi_d2f>
    1bf4:	e1a04000 	mov	r4, r0

            gradQ = -3 * fp;
    1bf8:	e3a01000 	mov	r1, #0
    1bfc:	e34c1040 	movt	r1, #49216	; 0xc040
    1c00:	eb001b0f 	bl	8844 <__aeabi_fmul>
            allParticles[i].gradQ[j] = gradQ;
    1c04:	e30939e4 	movw	r3, #39396	; 0x99e4
    1c08:	e3403000 	movt	r3, #0
    1c0c:	e3a0cfa3 	mov	r12, #652	; 0x28c
    1c10:	e021769c 	mla	r1, r12, r6, r7
    1c14:	e0831101 	add	r1, r3, r1, lsl #2
    1c18:	e58100e4 	str	r0, [r1, #228]	; 0xe4
            allParticles[j].gradQ[i] = gradQ;
    1c1c:	e02c679c 	mla	r12, r12, r7, r6
    1c20:	e083310c 	add	r3, r3, r12, lsl #2
    1c24:	e58300e4 	str	r0, [r3, #228]	; 0xe4

            q = fp*(2-q);
    1c28:	e1a00005 	mov	r0, r5
    1c2c:	e1a01004 	mov	r1, r4
    1c30:	eb001b03 	bl	8844 <__aeabi_fmul>
    1c34:	ea00000a 	b	1c64 <timeStepSPHApproximation+0x2c8>
        } else {
            allParticles[i].gradQ[j] = 0;
    1c38:	e30939e4 	movw	r3, #39396	; 0x99e4
    1c3c:	e3403000 	movt	r3, #0
    1c40:	e3a01fa3 	mov	r1, #652	; 0x28c
    1c44:	e0207691 	mla	r0, r1, r6, r7
    1c48:	e0830100 	add	r0, r3, r0, lsl #2
    1c4c:	e3a02000 	mov	r2, #0
    1c50:	e58020e4 	str	r2, [r0, #228]	; 0xe4
            allParticles[j].gradQ[i] = 0;
    1c54:	e0266791 	mla	r6, r1, r7, r6
    1c58:	e0833106 	add	r3, r3, r6, lsl #2
    1c5c:	e58320e4 	str	r2, [r3, #228]	; 0xe4
            return; // q is zero so save calcs by continuing
    1c60:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
        }

        
        rho = alpha*q;
    1c64:	e30949e4 	movw	r4, #39396	; 0x99e4
    1c68:	e3404000 	movt	r4, #0
    1c6c:	e5941018 	ldr	r1, [r4, #24]
    1c70:	eb001af3 	bl	8844 <__aeabi_fmul>
    1c74:	e1a05000 	mov	r5, r0
        //printf("\nrho: %f", rho);
        allParticles[i].density += rho;
    1c78:	e3a08ea3 	mov	r8, #2608	; 0xa30
    1c7c:	e0264698 	mla	r6, r8, r6, r4
    1c80:	e5960048 	ldr	r0, [r6, #72]	; 0x48
    1c84:	e1a01005 	mov	r1, r5
    1c88:	eb001a45 	bl	85a4 <__addsf3>
    1c8c:	e5860048 	str	r0, [r6, #72]	; 0x48
        allParticles[j].density += rho;
    1c90:	e0274798 	mla	r7, r8, r7, r4
    1c94:	e5970048 	ldr	r0, [r7, #72]	; 0x48
    1c98:	e1a01005 	mov	r1, r5
    1c9c:	eb001a40 	bl	85a4 <__addsf3>
    1ca0:	e5870048 	str	r0, [r7, #72]	; 0x48
    1ca4:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}

    } else {
        allParticles[i].neighbours[j] = false;
    1ca8:	e30939e4 	movw	r3, #39396	; 0x99e4
    1cac:	e3403000 	movt	r3, #0
    1cb0:	e3a01ea3 	mov	r1, #2608	; 0xa30
    1cb4:	e0203691 	mla	r0, r1, r6, r3
    1cb8:	e0800007 	add	r0, r0, r7
    1cbc:	e3a02000 	mov	r2, #0
    1cc0:	e5c0204c 	strb	r2, [r0, #76]	; 0x4c
        allParticles[j].neighbours[i] = false;
    1cc4:	e0273791 	mla	r7, r1, r7, r3
    1cc8:	e0876006 	add	r6, r7, r6
    1ccc:	e5c6204c 	strb	r2, [r6, #76]	; 0x4c
    1cd0:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}

00001cd4 <generalParticleUpdate>:
    }

}

void generalParticleUpdate(int i) {
    1cd4:	e92d4038 	push	{r3, r4, r5, lr}
    1cd8:	e1a04000 	mov	r4, r0
    
    allParticles[i].pressure = K * pow((allParticles[i].density*inv_rho_naught), 7) - K;
    1cdc:	e30939e4 	movw	r3, #39396	; 0x99e4
    1ce0:	e3403000 	movt	r3, #0
    1ce4:	e3a05ea3 	mov	r5, #2608	; 0xa30
    1ce8:	e0253095 	mla	r5, r5, r0, r3
    1cec:	e5950048 	ldr	r0, [r5, #72]	; 0x48
    1cf0:	e593101c 	ldr	r1, [r3, #28]
    1cf4:	eb001ad2 	bl	8844 <__aeabi_fmul>
    1cf8:	eb001842 	bl	7e08 <__aeabi_f2d>
    1cfc:	e3a02000 	mov	r2, #0
    1d00:	e3a03000 	mov	r3, #0
    1d04:	e344301c 	movt	r3, #16412	; 0x401c
    1d08:	eb000898 	bl	3f70 <pow>
    1d0c:	e3a02000 	mov	r2, #0
    1d10:	e3a03000 	mov	r3, #0
    1d14:	e344301e 	movt	r3, #16414	; 0x401e
    1d18:	eb001867 	bl	7ebc <__aeabi_dmul>
    1d1c:	e3a02000 	mov	r2, #0
    1d20:	e3a03000 	mov	r3, #0
    1d24:	e344301e 	movt	r3, #16414	; 0x401e
    1d28:	eb00175e 	bl	7aa8 <__aeabi_dsub>
    1d2c:	eb0019f1 	bl	84f8 <__aeabi_d2f>
    1d30:	e5850044 	str	r0, [r5, #68]	; 0x44

    // 3. Calculate Accelearations (Approx)
    calculateSPHAccelerations(i);
    1d34:	e1a00004 	mov	r0, r4
    1d38:	ebfffda2 	bl	13c8 <calculateSPHAccelerations>

    // 4. Step Velocities and then positions.
    doVelocityStepCheck(i);
    1d3c:	e1a00004 	mov	r0, r4
    1d40:	ebfffc24 	bl	dd8 <doVelocityStepCheck>
    stepSPHVelocities(i);
    1d44:	e1a00004 	mov	r0, r4
    1d48:	ebfffce1 	bl	10d4 <stepSPHVelocities>
    stepSPHPositions(i);
    1d4c:	e1a00004 	mov	r0, r4
    1d50:	ebfffbc0 	bl	c58 <stepSPHPositions>
    1d54:	e8bd8038 	pop	{r3, r4, r5, pc}

00001d58 <timeStepBucketwiseParticleUpdate>:

}

void timeStepBucketwiseParticleUpdate() {
    1d58:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1d5c:	e24dd034 	sub	sp, sp, #52	; 0x34
    1d60:	e30537b4 	movw	r3, #22452	; 0x57b4
    1d64:	e3403009 	movt	r3, #9
    1d68:	e2432f6f 	sub	r2, r3, #444	; 0x1bc
    1d6c:	e2433f4f 	sub	r3, r3, #316	; 0x13c
    
    // clean buckets
    for (int bucket = 0; bucket < NUM_BUCKETS; bucket++) {
        numElementsInBucket_even[bucket] = 0;
    1d70:	e3a01000 	mov	r1, #0
    1d74:	e5a21004 	str	r1, [r2, #4]!
}

void timeStepBucketwiseParticleUpdate() {
    
    // clean buckets
    for (int bucket = 0; bucket < NUM_BUCKETS; bucket++) {
    1d78:	e1520003 	cmp	r2, r3
    1d7c:	1afffffc 	bne	1d74 <timeStepBucketwiseParticleUpdate+0x1c>
    1d80:	e3a01000 	mov	r1, #0
    1d84:	e1a06001 	mov	r6, r1
    1d88:	e1a02001 	mov	r2, r1
    }

    // Populate all buckets with particle indicies appropriately
    for (int i = 0; i < NUM_PARTICLES; i++) {

        allEraseParticles[i].x = allParticles[i].x;
    1d8c:	e59fa300 	ldr	r10, [pc, #768]	; 2094 <timeStepBucketwiseParticleUpdate+0x33c>
    1d90:	e30537b4 	movw	r3, #22452	; 0x57b4
    1d94:	e3403009 	movt	r3, #9
    1d98:	e2438e66 	sub	r8, r3, #1632	; 0x660
    1d9c:	e248800c 	sub	r8, r8, #12
        allEraseParticles[i].y = allParticles[i].y;

        int evenBucket = (allParticles[i].x/BUCKET_WIDTH);
    1da0:	e3065667 	movw	r5, #26215	; 0x6667
    1da4:	e3465666 	movt	r5, #26214	; 0x6666
        // assert(evenBucket >= 0 && evenBucket < NUM_BUCKETS);
        buckets_even[evenBucket][numElementsInBucket_even[evenBucket]] = i;
    1da8:	e3a07096 	mov	r7, #150	; 0x96
    }

    // Populate all buckets with particle indicies appropriately
    for (int i = 0; i < NUM_PARTICLES; i++) {

        allEraseParticles[i].x = allParticles[i].x;
    1dac:	e1a0400a 	mov	r4, r10
    1db0:	e7b40006 	ldr	r0, [r4, r6]!
    1db4:	e1a0c008 	mov	r12, r8
    1db8:	e7ac0001 	str	r0, [r12, r1]!
        allEraseParticles[i].y = allParticles[i].y;
    1dbc:	e5944004 	ldr	r4, [r4, #4]
    1dc0:	e58c4004 	str	r4, [r12, #4]

        int evenBucket = (allParticles[i].x/BUCKET_WIDTH);
    1dc4:	e0c4c095 	smull	r12, r4, r5, r0
    1dc8:	e1a00fc0 	asr	r0, r0, #31
    1dcc:	e0604144 	rsb	r4, r0, r4, asr #2
        // assert(evenBucket >= 0 && evenBucket < NUM_BUCKETS);
        buckets_even[evenBucket][numElementsInBucket_even[evenBucket]] = i;
    1dd0:	e0830104 	add	r0, r3, r4, lsl #2
    1dd4:	e510c1b8 	ldr	r12, [r0, #-440]	; 0xfffffe48
    1dd8:	e024c497 	mla	r4, r7, r4, r12
    1ddc:	e0834104 	add	r4, r3, r4, lsl #2
    1de0:	e5042138 	str	r2, [r4, #-312]	; 0xfffffec8
        numElementsInBucket_even[evenBucket]++;
    1de4:	e28cc001 	add	r12, r12, #1
    1de8:	e500c1b8 	str	r12, [r0, #-440]	; 0xfffffe48
        numElementsInBucket_even[bucket] = 0;
        // numElementsInBucket_odd[bucket] = 0;
    }

    // Populate all buckets with particle indicies appropriately
    for (int i = 0; i < NUM_PARTICLES; i++) {
    1dec:	e2822001 	add	r2, r2, #1
    1df0:	e2866ea3 	add	r6, r6, #2608	; 0xa30
    1df4:	e2811008 	add	r1, r1, #8
    1df8:	e3520096 	cmp	r2, #150	; 0x96
    1dfc:	1affffea 	bne	1dac <timeStepBucketwiseParticleUpdate+0x54>
    1e00:	e59f0290 	ldr	r0, [pc, #656]	; 2098 <timeStepBucketwiseParticleUpdate+0x340>
    1e04:	e58d0024 	str	r0, [sp, #36]	; 0x24
    1e08:	e3a01000 	mov	r1, #0
    1e0c:	e58d1018 	str	r1, [sp, #24]
        } else if(bucket == (NUM_BUCKETS - 1)) {
            neighbourBucketIndexes[0] = bucket-1;
            neighbourBucketIndexes[1] = bucket;
            neighbourBucketIndexes[2] = -1;
        } else {
            neighbourBucketIndexes[0] = bucket-1;
    1e10:	e30927a4 	movw	r2, #38820	; 0x97a4
    1e14:	e3402009 	movt	r2, #9
    1e18:	e58d2008 	str	r2, [sp, #8]
    stepSPHVelocities(i);
    stepSPHPositions(i);

}

void timeStepBucketwiseParticleUpdate() {
    1e1c:	e30597b4 	movw	r9, #22452	; 0x57b4
    1e20:	e3409009 	movt	r9, #9
    1e24:	e2493f4e 	sub	r3, r9, #312	; 0x138
    1e28:	e58d3010 	str	r3, [sp, #16]
    1e2c:	e282ce9d 	add	r12, r2, #2512	; 0x9d0
    1e30:	e28cc008 	add	r12, r12, #8
    1e34:	e58dc028 	str	r12, [sp, #40]	; 0x28
    1e38:	e28c0008 	add	r0, r12, #8
    1e3c:	e58d0014 	str	r0, [sp, #20]

    }

    for (int bucket = 0; bucket < NUM_BUCKETS; bucket++) {

        if(bucket == 0){
    1e40:	e59d1018 	ldr	r1, [sp, #24]
    1e44:	e3510000 	cmp	r1, #0
    1e48:	1a00000c 	bne	1e80 <timeStepBucketwiseParticleUpdate+0x128>
            neighbourBucketIndexes[0] = bucket;
    1e4c:	e3a03000 	mov	r3, #0
    1e50:	e59d2008 	ldr	r2, [sp, #8]
    1e54:	e58239d8 	str	r3, [r2, #2520]	; 0x9d8
            neighbourBucketIndexes[1] = bucket+1;
    1e58:	e3a03001 	mov	r3, #1
    1e5c:	e58239dc 	str	r3, [r2, #2524]	; 0x9dc
            neighbourBucketIndexes[2] = -1;
    1e60:	e3e03000 	mvn	r3, #0
    1e64:	e58239e0 	str	r3, [r2, #2528]	; 0x9e0

        //     }
        //     // generalParticleUpdate(i, numElementsInBucket_odd[bucket]);
        // }

        for (int pos_i = 0; pos_i < numElementsInBucket_even[bucket]; pos_i++) {
    1e68:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
    1e6c:	e49c3004 	ldr	r3, [r12], #4
    1e70:	e58dc024 	str	r12, [sp, #36]	; 0x24
    1e74:	e3530000 	cmp	r3, #0
    1e78:	ca000013 	bgt	1ecc <timeStepBucketwiseParticleUpdate+0x174>
    1e7c:	ea000078 	b	2064 <timeStepBucketwiseParticleUpdate+0x30c>

        if(bucket == 0){
            neighbourBucketIndexes[0] = bucket;
            neighbourBucketIndexes[1] = bucket+1;
            neighbourBucketIndexes[2] = -1;
        } else if(bucket == (NUM_BUCKETS - 1)) {
    1e80:	e59d0018 	ldr	r0, [sp, #24]
    1e84:	e350001f 	cmp	r0, #31
    1e88:	1a000007 	bne	1eac <timeStepBucketwiseParticleUpdate+0x154>
            neighbourBucketIndexes[0] = bucket-1;
    1e8c:	e3a0301e 	mov	r3, #30
    1e90:	e59d1008 	ldr	r1, [sp, #8]
    1e94:	e58139d8 	str	r3, [r1, #2520]	; 0x9d8
            neighbourBucketIndexes[1] = bucket;
    1e98:	e3a0301f 	mov	r3, #31
    1e9c:	e58139dc 	str	r3, [r1, #2524]	; 0x9dc
            neighbourBucketIndexes[2] = -1;
    1ea0:	e3e03000 	mvn	r3, #0
    1ea4:	e58139e0 	str	r3, [r1, #2528]	; 0x9e0
    1ea8:	eaffffee 	b	1e68 <timeStepBucketwiseParticleUpdate+0x110>
    stepSPHVelocities(i);
    stepSPHPositions(i);

}

void timeStepBucketwiseParticleUpdate() {
    1eac:	e59d2018 	ldr	r2, [sp, #24]
    1eb0:	e2423001 	sub	r3, r2, #1
        } else if(bucket == (NUM_BUCKETS - 1)) {
            neighbourBucketIndexes[0] = bucket-1;
            neighbourBucketIndexes[1] = bucket;
            neighbourBucketIndexes[2] = -1;
        } else {
            neighbourBucketIndexes[0] = bucket-1;
    1eb4:	e59dc008 	ldr	r12, [sp, #8]
    1eb8:	e58c39d8 	str	r3, [r12, #2520]	; 0x9d8
            neighbourBucketIndexes[1] = bucket;
    1ebc:	e58c29dc 	str	r2, [r12, #2524]	; 0x9dc
    stepSPHVelocities(i);
    stepSPHPositions(i);

}

void timeStepBucketwiseParticleUpdate() {
    1ec0:	e2823001 	add	r3, r2, #1
            neighbourBucketIndexes[1] = bucket;
            neighbourBucketIndexes[2] = -1;
        } else {
            neighbourBucketIndexes[0] = bucket-1;
            neighbourBucketIndexes[1] = bucket;
            neighbourBucketIndexes[2] = bucket+1;
    1ec4:	e58c39e0 	str	r3, [r12, #2528]	; 0x9e0
    1ec8:	eaffffe6 	b	1e68 <timeStepBucketwiseParticleUpdate+0x110>
    stepSPHVelocities(i);
    stepSPHPositions(i);

}

void timeStepBucketwiseParticleUpdate() {
    1ecc:	e3a03f96 	mov	r3, #600	; 0x258
    1ed0:	e59d0018 	ldr	r0, [sp, #24]
    1ed4:	e59d1010 	ldr	r1, [sp, #16]
    1ed8:	e0231093 	mla	r3, r3, r0, r1
    1edc:	e2433004 	sub	r3, r3, #4
    1ee0:	e58d301c 	str	r3, [sp, #28]
    1ee4:	e3a02000 	mov	r2, #0
    1ee8:	e58d200c 	str	r2, [sp, #12]
            int i = buckets_even[bucket][pos_i];

            for(int nbIdx = 0; nbIdx < 3; nbIdx++){
                
                int buck = neighbourBucketIndexes[nbIdx];
                allParticles[i].bucketIndexes[nbIdx] = buck;
    1eec:	e30939e4 	movw	r3, #39396	; 0x99e4
    1ef0:	e3403000 	movt	r3, #0
    1ef4:	e58d3020 	str	r3, [sp, #32]
    stepSPHVelocities(i);
    stepSPHPositions(i);

}

void timeStepBucketwiseParticleUpdate() {
    1ef8:	e283c024 	add	r12, r3, #36	; 0x24
    1efc:	e58dc02c 	str	r12, [sp, #44]	; 0x2c
        //     }
        //     // generalParticleUpdate(i, numElementsInBucket_odd[bucket]);
        // }

        for (int pos_i = 0; pos_i < numElementsInBucket_even[bucket]; pos_i++) {
            int i = buckets_even[bucket][pos_i];
    1f00:	e59d001c 	ldr	r0, [sp, #28]
    1f04:	e5b08004 	ldr	r8, [r0, #4]!
    1f08:	e58d001c 	str	r0, [sp, #28]

            for(int nbIdx = 0; nbIdx < 3; nbIdx++){
                
                int buck = neighbourBucketIndexes[nbIdx];
    1f0c:	e59d1008 	ldr	r1, [sp, #8]
    1f10:	e591b9d8 	ldr	r11, [r1, #2520]	; 0x9d8
                allParticles[i].bucketIndexes[nbIdx] = buck;
    1f14:	e3a03ea3 	mov	r3, #2608	; 0xa30
    1f18:	e59d2020 	ldr	r2, [sp, #32]
    1f1c:	e0232893 	mla	r3, r3, r8, r2
    1f20:	e583ba48 	str	r11, [r3, #2632]	; 0xa48

                if (buck<0 || buck>=NUM_BUCKETS) break;
    1f24:	e35b001f 	cmp	r11, #31
    1f28:	8a00003e 	bhi	2028 <timeStepBucketwiseParticleUpdate+0x2d0>
    1f2c:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    1f30:	e58d3000 	str	r3, [sp]
    stepSPHVelocities(i);
    stepSPHPositions(i);

}

void timeStepBucketwiseParticleUpdate() {
    1f34:	e3a03ea3 	mov	r3, #2608	; 0xa30
    1f38:	e59dc02c 	ldr	r12, [sp, #44]	; 0x2c
    1f3c:	e023c893 	mla	r3, r3, r8, r12
    1f40:	e2833ea2 	add	r3, r3, #2592	; 0xa20
    1f44:	e2833004 	add	r3, r3, #4
    1f48:	e58d3004 	str	r3, [sp, #4]
                for (int pos_j = 0; pos_j < numElementsInBucket_even[buck]; pos_j++) {

                    int j = buckets_even[buck][pos_j];
                    // if(j<(i+1)) continue;

                    if (lastSeen[i][j] == timeStep || lastSeen[j][i] == timeStep) continue;
    1f4c:	e3095864 	movw	r5, #39012	; 0x9864
    1f50:	e3405006 	movt	r5, #6
    1f54:	e3a00096 	mov	r0, #150	; 0x96
    1f58:	e00a0890 	mul	r10, r0, r8
    1f5c:	e30f69c4 	movw	r6, #63940	; 0xf9c4
    1f60:	e34f6fff 	movt	r6, #65535	; 0xffff
    1f64:	ea000007 	b	1f88 <timeStepBucketwiseParticleUpdate+0x230>
        for (int pos_i = 0; pos_i < numElementsInBucket_even[bucket]; pos_i++) {
            int i = buckets_even[bucket][pos_i];

            for(int nbIdx = 0; nbIdx < 3; nbIdx++){
                
                int buck = neighbourBucketIndexes[nbIdx];
    1f68:	e59d1000 	ldr	r1, [sp]
    1f6c:	e5b1b004 	ldr	r11, [r1, #4]!
    1f70:	e58d1000 	str	r1, [sp]
                allParticles[i].bucketIndexes[nbIdx] = buck;
    1f74:	e59d2004 	ldr	r2, [sp, #4]
    1f78:	e5a2b004 	str	r11, [r2, #4]!
    1f7c:	e58d2004 	str	r2, [sp, #4]

                if (buck<0 || buck>=NUM_BUCKETS) break;
    1f80:	e35b001f 	cmp	r11, #31
    1f84:	8a000027 	bhi	2028 <timeStepBucketwiseParticleUpdate+0x2d0>

                for (int pos_j = 0; pos_j < numElementsInBucket_even[buck]; pos_j++) {
    1f88:	e089310b 	add	r3, r9, r11, lsl #2
    1f8c:	e51331b8 	ldr	r3, [r3, #-440]	; 0xfffffe48
    1f90:	e3530000 	cmp	r3, #0
    1f94:	da00001f 	ble	2018 <timeStepBucketwiseParticleUpdate+0x2c0>
    stepSPHVelocities(i);
    stepSPHPositions(i);

}

void timeStepBucketwiseParticleUpdate() {
    1f98:	e3a07f96 	mov	r7, #600	; 0x258
    1f9c:	e59d3010 	ldr	r3, [sp, #16]
    1fa0:	e0273b97 	mla	r7, r7, r11, r3
    1fa4:	e2477004 	sub	r7, r7, #4
    1fa8:	e3a04000 	mov	r4, #0
                int buck = neighbourBucketIndexes[nbIdx];
                allParticles[i].bucketIndexes[nbIdx] = buck;

                if (buck<0 || buck>=NUM_BUCKETS) break;

                for (int pos_j = 0; pos_j < numElementsInBucket_even[buck]; pos_j++) {
    1fac:	e089b10b 	add	r11, r9, r11, lsl #2

                    int j = buckets_even[buck][pos_j];
    1fb0:	e5b71004 	ldr	r1, [r7, #4]!
                    // if(j<(i+1)) continue;

                    if (lastSeen[i][j] == timeStep || lastSeen[j][i] == timeStep) continue;
    1fb4:	e51931bc 	ldr	r3, [r9, #-444]	; 0xfffffe44
    1fb8:	e08a2001 	add	r2, r10, r1
    1fbc:	e0852102 	add	r2, r5, r2, lsl #2
    1fc0:	e7922006 	ldr	r2, [r2, r6]
    1fc4:	e1520003 	cmp	r2, r3
    1fc8:	0a00000e 	beq	2008 <timeStepBucketwiseParticleUpdate+0x2b0>
    1fcc:	e3a0c096 	mov	r12, #150	; 0x96
    1fd0:	e022819c 	mla	r2, r12, r1, r8
    1fd4:	e0852102 	add	r2, r5, r2, lsl #2
    1fd8:	e7922006 	ldr	r2, [r2, r6]
    1fdc:	e1530002 	cmp	r3, r2
    1fe0:	0a000008 	beq	2008 <timeStepBucketwiseParticleUpdate+0x2b0>
                    lastSeen[i][j] = timeStep; 
    1fe4:	e08a2001 	add	r2, r10, r1
    1fe8:	e0852102 	add	r2, r5, r2, lsl #2
    1fec:	e7823006 	str	r3, [r2, r6]
                    lastSeen[j][i] = timeStep; 
    1ff0:	e023819c 	mla	r3, r12, r1, r8
    1ff4:	e0853103 	add	r3, r5, r3, lsl #2
    1ff8:	e51921bc 	ldr	r2, [r9, #-444]	; 0xfffffe44
    1ffc:	e7832006 	str	r2, [r3, r6]

                    // Call helper function to actually process i/j collision
                    timeStepSPHApproximation(i,j);
    2000:	e1a00008 	mov	r0, r8
    2004:	ebfffe64 	bl	199c <timeStepSPHApproximation>
                int buck = neighbourBucketIndexes[nbIdx];
                allParticles[i].bucketIndexes[nbIdx] = buck;

                if (buck<0 || buck>=NUM_BUCKETS) break;

                for (int pos_j = 0; pos_j < numElementsInBucket_even[buck]; pos_j++) {
    2008:	e2844001 	add	r4, r4, #1
    200c:	e51b31b8 	ldr	r3, [r11, #-440]	; 0xfffffe48
    2010:	e1530004 	cmp	r3, r4
    2014:	caffffe5 	bgt	1fb0 <timeStepBucketwiseParticleUpdate+0x258>
        // }

        for (int pos_i = 0; pos_i < numElementsInBucket_even[bucket]; pos_i++) {
            int i = buckets_even[bucket][pos_i];

            for(int nbIdx = 0; nbIdx < 3; nbIdx++){
    2018:	e59d0000 	ldr	r0, [sp]
    201c:	e59d1014 	ldr	r1, [sp, #20]
    2020:	e1500001 	cmp	r0, r1
    2024:	1affffcf 	bne	1f68 <timeStepBucketwiseParticleUpdate+0x210>

                }

            }
            
            timeStep++;
    2028:	e51931bc 	ldr	r3, [r9, #-444]	; 0xfffffe44
    202c:	e2833001 	add	r3, r3, #1
    2030:	e50931bc 	str	r3, [r9, #-444]	; 0xfffffe44
            generalParticleUpdate(i);
    2034:	e1a00008 	mov	r0, r8
    2038:	ebffff25 	bl	1cd4 <generalParticleUpdate>
            timeStep--;
    203c:	e51931bc 	ldr	r3, [r9, #-444]	; 0xfffffe44
    2040:	e2433001 	sub	r3, r3, #1
    2044:	e50931bc 	str	r3, [r9, #-444]	; 0xfffffe44

        //     }
        //     // generalParticleUpdate(i, numElementsInBucket_odd[bucket]);
        // }

        for (int pos_i = 0; pos_i < numElementsInBucket_even[bucket]; pos_i++) {
    2048:	e59d200c 	ldr	r2, [sp, #12]
    204c:	e2822001 	add	r2, r2, #1
    2050:	e58d200c 	str	r2, [sp, #12]
    2054:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
    2058:	e51c3004 	ldr	r3, [r12, #-4]
    205c:	e1530002 	cmp	r3, r2
    2060:	caffffa6 	bgt	1f00 <timeStepBucketwiseParticleUpdate+0x1a8>
        //     numElementsInBucket_odd[oddBucket]++;
        // }

    }

    for (int bucket = 0; bucket < NUM_BUCKETS; bucket++) {
    2064:	e59d0018 	ldr	r0, [sp, #24]
    2068:	e2800001 	add	r0, r0, #1
    206c:	e58d0018 	str	r0, [sp, #24]
    2070:	e3500020 	cmp	r0, #32
    2074:	1affff71 	bne	1e40 <timeStepBucketwiseParticleUpdate+0xe8>
            timeStep--;
        }

        
    }
    timeStep++;
    2078:	e30537b4 	movw	r3, #22452	; 0x57b4
    207c:	e3403009 	movt	r3, #9
    2080:	e51321bc 	ldr	r2, [r3, #-444]	; 0xfffffe44
    2084:	e2822001 	add	r2, r2, #1
    2088:	e50321bc 	str	r2, [r3, #-444]	; 0xfffffe44
}
    208c:	e28dd034 	add	sp, sp, #52	; 0x34
    2090:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    2094:	00009a08 	.word	0x00009a08
    2098:	000955fc 	.word	0x000955fc

0000209c <dotProd2D>:
short int collisionMap [MAX_X][MAX_Y];
bool bookMarkedCollisions[NUM_BODIES][NUM_BODIES];
DrawBody eraseRBs [NUM_BODIES];
RigidBody allBodies [NUM_BODIES];

float dotProd2D(Vector2D * a, Vector2D * b){
    209c:	e92d4070 	push	{r4, r5, r6, lr}
    20a0:	e1a05000 	mov	r5, r0
    20a4:	e1a04001 	mov	r4, r1
    return a->x * b->x + a->y * b->y;
    20a8:	e5900000 	ldr	r0, [r0]
    20ac:	e5911000 	ldr	r1, [r1]
    20b0:	eb0019e3 	bl	8844 <__aeabi_fmul>
    20b4:	e1a06000 	mov	r6, r0
    20b8:	e5950004 	ldr	r0, [r5, #4]
    20bc:	e5941004 	ldr	r1, [r4, #4]
    20c0:	eb0019df 	bl	8844 <__aeabi_fmul>
    20c4:	e1a01000 	mov	r1, r0
    20c8:	e1a00006 	mov	r0, r6
    20cc:	eb001934 	bl	85a4 <__addsf3>
}
    20d0:	e8bd8070 	pop	{r4, r5, r6, pc}

000020d4 <magnitudeCrossProd2D>:
float magnitudeCrossProd2D(Vector2D * a, Vector2D * b){
    20d4:	e92d4070 	push	{r4, r5, r6, lr}
    20d8:	e1a05000 	mov	r5, r0
    20dc:	e1a04001 	mov	r4, r1
    return a->x * b->y - a->y * b->x;
    20e0:	e5900000 	ldr	r0, [r0]
    20e4:	e5911004 	ldr	r1, [r1, #4]
    20e8:	eb0019d5 	bl	8844 <__aeabi_fmul>
    20ec:	e1a06000 	mov	r6, r0
    20f0:	e5950004 	ldr	r0, [r5, #4]
    20f4:	e5941000 	ldr	r1, [r4]
    20f8:	eb0019d1 	bl	8844 <__aeabi_fmul>
    20fc:	e1a01000 	mov	r1, r0
    2100:	e1a00006 	mov	r0, r6
    2104:	eb001925 	bl	85a0 <__aeabi_fsub>
}
    2108:	e8bd8070 	pop	{r4, r5, r6, pc}

0000210c <floatMin>:
float floatMin(float a, float b){
    210c:	e92d4038 	push	{r3, r4, r5, lr}
    2110:	e1a04000 	mov	r4, r0
    2114:	e1a05001 	mov	r5, r1
    return a < b? a : b;
    2118:	eb001ab4 	bl	8bf0 <__aeabi_fcmplt>
    211c:	e3500000 	cmp	r0, #0
    2120:	01a04005 	moveq	r4, r5
}
    2124:	e1a00004 	mov	r0, r4
    2128:	e8bd8038 	pop	{r3, r4, r5, pc}

0000212c <checkSATInterBodyCollision>:
// Check if rigid body I has coillided with any rigid body j
// Credit to the SAT. (Seperating Axis Theorem).
void checkSATInterBodyCollision(int i){
    212c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2130:	e24dd06c 	sub	sp, sp, #108	; 0x6c
    2134:	e58d002c 	str	r0, [sp, #44]	; 0x2c
    2138:	e0802080 	add	r2, r0, r0, lsl #1
    213c:	e59f3804 	ldr	r3, [pc, #2052]	; 2948 <checkSATInterBodyCollision+0x81c>
    2140:	e0832082 	add	r2, r3, r2, lsl #1
    2144:	e58d2048 	str	r2, [sp, #72]	; 0x48
    float maxiDot, miniDot;
    float maxjDot, minjDot;

    int forceIndex = VERTICIES_PER_BODY - 1;

    for(int j = 0; j < NUM_BODIES; j++){
    2148:	e3a04000 	mov	r4, #0
    214c:	e58d4008 	str	r4, [sp, #8]
            int startIdxi = (vertIdx % 4)? (vertIdx % 4)-1 : VERTICIES_PER_BODY - 1;
            int endIdxi = (vertIdx % 4);
            
            // dx and dy here define our current edge on either i or j (and the vector parallel to it).
            if(vertIdx < VERTICIES_PER_BODY){
                dx = allBodies[i].xs[endIdxi] - allBodies[i].xs[startIdxi];
    2150:	e30947a4 	movw	r4, #38820	; 0x97a4
    2154:	e3404009 	movt	r4, #9
    2158:	e58d4004 	str	r4, [sp, #4]
float floatMin(float a, float b){
    return a < b? a : b;
}
// Check if rigid body I has coillided with any rigid body j
// Credit to the SAT. (Seperating Axis Theorem).
void checkSATInterBodyCollision(int i){
    215c:	e2844c0a 	add	r4, r4, #2560	; 0xa00
    2160:	e2844008 	add	r4, r4, #8
    2164:	e58d4038 	str	r4, [sp, #56]	; 0x38
    2168:	e59d4008 	ldr	r4, [sp, #8]
    216c:	e58d403c 	str	r4, [sp, #60]	; 0x3c
    2170:	e2844004 	add	r4, r4, #4
    2174:	e58d4034 	str	r4, [sp, #52]	; 0x34
    int forceIndex = VERTICIES_PER_BODY - 1;

    for(int j = 0; j < NUM_BODIES; j++){

        forceIndex += 1;
        if (j==i) continue;
    2178:	e59d4008 	ldr	r4, [sp, #8]
    217c:	e59dc02c 	ldr	r12, [sp, #44]	; 0x2c
    2180:	e154000c 	cmp	r4, r12
    2184:	0a0001b7 	beq	2868 <checkSATInterBodyCollision+0x73c>
        if (bookMarkedCollisions[i][j]) continue;
    2188:	e59d0048 	ldr	r0, [sp, #72]	; 0x48
    218c:	e7d03004 	ldrb	r3, [r0, r4]
    2190:	e3530000 	cmp	r3, #0
    2194:	1a0001b3 	bne	2868 <checkSATInterBodyCollision+0x73c>
    2198:	e3a0b000 	mov	r11, #0
    219c:	e58db04c 	str	r11, [sp, #76]	; 0x4c
    21a0:	e58db040 	str	r11, [sp, #64]	; 0x40
    21a4:	e58db044 	str	r11, [sp, #68]	; 0x44
    21a8:	e3074699 	movw	r4, #30361	; 0x7699
    21ac:	e3474e96 	movt	r4, #32406	; 0x7e96
    21b0:	e58d4030 	str	r4, [sp, #48]	; 0x30
        bool hasCollided = true;

        // Loop over edge normals of both shapes.
        for(int vertIdx = 0; vertIdx < (VERTICIES_PER_BODY<<1); vertIdx++) {
            
            int startIdxi = (vertIdx % 4)? (vertIdx % 4)-1 : VERTICIES_PER_BODY - 1;
    21b4:	e3a04003 	mov	r4, #3
            int endIdxi = (vertIdx % 4);
            
            // dx and dy here define our current edge on either i or j (and the vector parallel to it).
            if(vertIdx < VERTICIES_PER_BODY){
                dx = allBodies[i].xs[endIdxi] - allBodies[i].xs[startIdxi];
    21b8:	e3a0005b 	mov	r0, #91	; 0x5b
    21bc:	e00c0c90 	mul	r12, r0, r12
    21c0:	e58dc020 	str	r12, [sp, #32]
float floatMin(float a, float b){
    return a < b? a : b;
}
// Check if rigid body I has coillided with any rigid body j
// Credit to the SAT. (Seperating Axis Theorem).
void checkSATInterBodyCollision(int i){
    21c4:	e3a03f5b 	mov	r3, #364	; 0x16c
    21c8:	e59d102c 	ldr	r1, [sp, #44]	; 0x2c
    21cc:	e59dc038 	ldr	r12, [sp, #56]	; 0x38
    21d0:	e022c193 	mla	r2, r3, r1, r12
    21d4:	e2422004 	sub	r2, r2, #4
    21d8:	e58d2024 	str	r2, [sp, #36]	; 0x24
    21dc:	e59d0008 	ldr	r0, [sp, #8]
    21e0:	e023c093 	mla	r3, r3, r0, r12
    21e4:	e2433004 	sub	r3, r3, #4
    21e8:	e58d3028 	str	r3, [sp, #40]	; 0x28
    21ec:	ea000007 	b	2210 <checkSATInterBodyCollision+0xe4>
        bool hasCollided = true;

        // Loop over edge normals of both shapes.
        for(int vertIdx = 0; vertIdx < (VERTICIES_PER_BODY<<1); vertIdx++) {
            
            int startIdxi = (vertIdx % 4)? (vertIdx % 4)-1 : VERTICIES_PER_BODY - 1;
    21f0:	e31b0003 	tst	r11, #3
    21f4:	11a03fcb 	asrne	r3, r11, #31
    21f8:	11a03f23 	lsrne	r3, r3, #30
    21fc:	108b4003 	addne	r4, r11, r3
    2200:	12044003 	andne	r4, r4, #3
    2204:	10634004 	rsbne	r4, r3, r4
    2208:	12444001 	subne	r4, r4, #1
    220c:	03a04003 	moveq	r4, #3
            int endIdxi = (vertIdx % 4);
    2210:	e1a03fcb 	asr	r3, r11, #31
    2214:	e1a03f23 	lsr	r3, r3, #30
    2218:	e08b2003 	add	r2, r11, r3
    221c:	e2022003 	and	r2, r2, #3
    2220:	e0633002 	rsb	r3, r3, r2
            
            // dx and dy here define our current edge on either i or j (and the vector parallel to it).
            if(vertIdx < VERTICIES_PER_BODY){
    2224:	e35b0003 	cmp	r11, #3
    2228:	ca000013 	bgt	227c <checkSATInterBodyCollision+0x150>
                dx = allBodies[i].xs[endIdxi] - allBodies[i].xs[startIdxi];
    222c:	e59d1020 	ldr	r1, [sp, #32]
    2230:	e0815003 	add	r5, r1, r3
    2234:	e59d3004 	ldr	r3, [sp, #4]
    2238:	e0832105 	add	r2, r3, r5, lsl #2
    223c:	e0814004 	add	r4, r1, r4
    2240:	e0833104 	add	r3, r3, r4, lsl #2
    2244:	e5920a08 	ldr	r0, [r2, #2568]	; 0xa08
    2248:	e5933a08 	ldr	r3, [r3, #2568]	; 0xa08
    224c:	e0630000 	rsb	r0, r3, r0
    2250:	eb001944 	bl	8768 <__aeabi_i2f>
    2254:	e58d0014 	str	r0, [sp, #20]
                dy = allBodies[i].ys[endIdxi] - allBodies[i].ys[startIdxi];
    2258:	e59dc004 	ldr	r12, [sp, #4]
    225c:	e08c5105 	add	r5, r12, r5, lsl #2
    2260:	e08c4104 	add	r4, r12, r4, lsl #2
    2264:	e5950a18 	ldr	r0, [r5, #2584]	; 0xa18
    2268:	e5943a18 	ldr	r3, [r4, #2584]	; 0xa18
    226c:	e0630000 	rsb	r0, r3, r0
    2270:	eb00193c 	bl	8768 <__aeabi_i2f>
    2274:	e58d0010 	str	r0, [sp, #16]
    2278:	ea000014 	b	22d0 <checkSATInterBodyCollision+0x1a4>
            } else {
                dx = allBodies[j].xs[endIdxi] - allBodies[j].xs[startIdxi];
    227c:	e3a0005b 	mov	r0, #91	; 0x5b
    2280:	e59d1008 	ldr	r1, [sp, #8]
    2284:	e0020190 	mul	r2, r0, r1
    2288:	e0825003 	add	r5, r2, r3
    228c:	e59d3004 	ldr	r3, [sp, #4]
    2290:	e0831105 	add	r1, r3, r5, lsl #2
    2294:	e0824004 	add	r4, r2, r4
    2298:	e0833104 	add	r3, r3, r4, lsl #2
    229c:	e5910a08 	ldr	r0, [r1, #2568]	; 0xa08
    22a0:	e5933a08 	ldr	r3, [r3, #2568]	; 0xa08
    22a4:	e0630000 	rsb	r0, r3, r0
    22a8:	eb00192e 	bl	8768 <__aeabi_i2f>
    22ac:	e58d0014 	str	r0, [sp, #20]
                dy = allBodies[j].ys[endIdxi] - allBodies[j].ys[startIdxi];
    22b0:	e59dc004 	ldr	r12, [sp, #4]
    22b4:	e08c5105 	add	r5, r12, r5, lsl #2
    22b8:	e08c4104 	add	r4, r12, r4, lsl #2
    22bc:	e5950a18 	ldr	r0, [r5, #2584]	; 0xa18
    22c0:	e5943a18 	ldr	r3, [r4, #2584]	; 0xa18
    22c4:	e0630000 	rsb	r0, r3, r0
    22c8:	eb001926 	bl	8768 <__aeabi_i2f>
    22cc:	e58d0010 	str	r0, [sp, #16]
            }

            Vector2D normalVec, cVec;
            float testDot;
            normalVec.x = -dy;
    22d0:	e59d0010 	ldr	r0, [sp, #16]
    22d4:	e2803102 	add	r3, r0, #-2147483648	; 0x80000000
    22d8:	e58d3058 	str	r3, [sp, #88]	; 0x58
            normalVec.y = dx;
    22dc:	e59d4014 	ldr	r4, [sp, #20]
    22e0:	e58d405c 	str	r4, [sp, #92]	; 0x5c
float floatMin(float a, float b){
    return a < b? a : b;
}
// Check if rigid body I has coillided with any rigid body j
// Credit to the SAT. (Seperating Axis Theorem).
void checkSATInterBodyCollision(int i){
    22e4:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
            miniDot = 1.0e38;
            minjDot = 1.0e38;
            maxiDot = -1.0e38;
            maxjDot = -1.0e38;

            for(int vertIdxi = 0; vertIdxi < VERTICIES_PER_BODY; vertIdxi++) {
    22e8:	e3a04000 	mov	r4, #0
            Vector2D normalVec, cVec;
            float testDot;
            normalVec.x = -dy;
            normalVec.y = dx;

            miniDot = 1.0e38;
    22ec:	e3077699 	movw	r7, #30361	; 0x7699
    22f0:	e3477e96 	movt	r7, #32406	; 0x7e96
            minjDot = 1.0e38;
            maxiDot = -1.0e38;
    22f4:	e3079699 	movw	r9, #30361	; 0x7699
    22f8:	e34f9e96 	movt	r9, #65174	; 0xfe96
            maxjDot = -1.0e38;

            for(int vertIdxi = 0; vertIdxi < VERTICIES_PER_BODY; vertIdxi++) {
                cVec.x = allBodies[i].xs[vertIdxi];
                cVec.y = allBodies[i].ys[vertIdxi];
                testDot = dotProd2D(&normalVec, &cVec);
    22fc:	e59d8018 	ldr	r8, [sp, #24]
    2300:	e59da00c 	ldr	r10, [sp, #12]
            minjDot = 1.0e38;
            maxiDot = -1.0e38;
            maxjDot = -1.0e38;

            for(int vertIdxi = 0; vertIdxi < VERTICIES_PER_BODY; vertIdxi++) {
                cVec.x = allBodies[i].xs[vertIdxi];
    2304:	e5b50004 	ldr	r0, [r5, #4]!
    2308:	eb001916 	bl	8768 <__aeabi_i2f>
    230c:	e58d0060 	str	r0, [sp, #96]	; 0x60
                cVec.y = allBodies[i].ys[vertIdxi];
    2310:	e5950010 	ldr	r0, [r5, #16]
    2314:	eb001913 	bl	8768 <__aeabi_i2f>
    2318:	e58d0064 	str	r0, [sp, #100]	; 0x64
                testDot = dotProd2D(&normalVec, &cVec);
    231c:	e28d0058 	add	r0, sp, #88	; 0x58
    2320:	e28d1060 	add	r1, sp, #96	; 0x60
    2324:	ebffff5c 	bl	209c <dotProd2D>
    2328:	e1a06000 	mov	r6, r0
                if(testDot < miniDot){miniDot = testDot; testiIdxMin = vertIdxi;}
    232c:	e1a01007 	mov	r1, r7
    2330:	eb001a2e 	bl	8bf0 <__aeabi_fcmplt>
    2334:	e3500000 	cmp	r0, #0
    2338:	11a08004 	movne	r8, r4
    233c:	11a07006 	movne	r7, r6
                if(testDot > maxiDot){maxiDot = testDot; testiIdxMax = vertIdxi;}
    2340:	e1a00006 	mov	r0, r6
    2344:	e1a01009 	mov	r1, r9
    2348:	eb001a3a 	bl	8c38 <__aeabi_fcmpgt>
    234c:	e3500000 	cmp	r0, #0
    2350:	11a0a004 	movne	r10, r4
    2354:	11a09006 	movne	r9, r6
            miniDot = 1.0e38;
            minjDot = 1.0e38;
            maxiDot = -1.0e38;
            maxjDot = -1.0e38;

            for(int vertIdxi = 0; vertIdxi < VERTICIES_PER_BODY; vertIdxi++) {
    2358:	e2844001 	add	r4, r4, #1
    235c:	e3540004 	cmp	r4, #4
    2360:	1affffe7 	bne	2304 <checkSATInterBodyCollision+0x1d8>
    2364:	e58d8018 	str	r8, [sp, #24]
    2368:	e58da00c 	str	r10, [sp, #12]
float floatMin(float a, float b){
    return a < b? a : b;
}
// Check if rigid body I has coillided with any rigid body j
// Credit to the SAT. (Seperating Axis Theorem).
void checkSATInterBodyCollision(int i){
    236c:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
    2370:	e3a04000 	mov	r4, #0
    2374:	e307a699 	movw	r10, #30361	; 0x7699
    2378:	e347ae96 	movt	r10, #32406	; 0x7e96
    237c:	e3078699 	movw	r8, #30361	; 0x7699
    2380:	e34f8e96 	movt	r8, #65174	; 0xfe96
                testDot = dotProd2D(&normalVec, &cVec);
                if(testDot < miniDot){miniDot = testDot; testiIdxMin = vertIdxi;}
                if(testDot > maxiDot){maxiDot = testDot; testiIdxMax = vertIdxi;}
            }
            for(int vertIdxj = 0; vertIdxj < VERTICIES_PER_BODY; vertIdxj++) {
                cVec.x = allBodies[j].xs[vertIdxj];
    2384:	e5b50004 	ldr	r0, [r5, #4]!
    2388:	eb0018f6 	bl	8768 <__aeabi_i2f>
    238c:	e58d0060 	str	r0, [sp, #96]	; 0x60
                cVec.y = allBodies[j].ys[vertIdxj];
    2390:	e5950010 	ldr	r0, [r5, #16]
    2394:	eb0018f3 	bl	8768 <__aeabi_i2f>
    2398:	e58d0064 	str	r0, [sp, #100]	; 0x64
                testDot = dotProd2D(&normalVec, &cVec);
    239c:	e28d0058 	add	r0, sp, #88	; 0x58
    23a0:	e28d1060 	add	r1, sp, #96	; 0x60
    23a4:	ebffff3c 	bl	209c <dotProd2D>
    23a8:	e1a06000 	mov	r6, r0
                if(testDot < minjDot){minjDot = testDot; testjIdxMin = vertIdxj;}
    23ac:	e1a0100a 	mov	r1, r10
    23b0:	eb001a0e 	bl	8bf0 <__aeabi_fcmplt>
    23b4:	e3500000 	cmp	r0, #0
    23b8:	158d401c 	strne	r4, [sp, #28]
    23bc:	11a0a006 	movne	r10, r6
                if(testDot > maxjDot){maxjDot = testDot; testiIdxMax = vertIdxj;}
    23c0:	e1a00006 	mov	r0, r6
    23c4:	e1a01008 	mov	r1, r8
    23c8:	eb001a1a 	bl	8c38 <__aeabi_fcmpgt>
    23cc:	e3500000 	cmp	r0, #0
    23d0:	158d400c 	strne	r4, [sp, #12]
    23d4:	11a08006 	movne	r8, r6
                cVec.y = allBodies[i].ys[vertIdxi];
                testDot = dotProd2D(&normalVec, &cVec);
                if(testDot < miniDot){miniDot = testDot; testiIdxMin = vertIdxi;}
                if(testDot > maxiDot){maxiDot = testDot; testiIdxMax = vertIdxi;}
            }
            for(int vertIdxj = 0; vertIdxj < VERTICIES_PER_BODY; vertIdxj++) {
    23d8:	e2844001 	add	r4, r4, #1
    23dc:	e3540004 	cmp	r4, #4
    23e0:	1affffe7 	bne	2384 <checkSATInterBodyCollision+0x258>
                if(testDot < minjDot){minjDot = testDot; testjIdxMin = vertIdxj;}
                if(testDot > maxjDot){maxjDot = testDot; testiIdxMax = vertIdxj;}
            }

            // Test to see if we have found a seperating axis
            if(miniDot>=maxjDot || maxiDot<=minjDot) {hasCollided = false; break;}
    23e4:	e1a00007 	mov	r0, r7
    23e8:	e1a01008 	mov	r1, r8
    23ec:	eb001a0b 	bl	8c20 <__aeabi_fcmpge>
    23f0:	e3500000 	cmp	r0, #0
    23f4:	1a000004 	bne	240c <checkSATInterBodyCollision+0x2e0>
    23f8:	e1a00009 	mov	r0, r9
    23fc:	e1a0100a 	mov	r1, r10
    2400:	eb001a00 	bl	8c08 <__aeabi_fcmple>
    2404:	e3500000 	cmp	r0, #0
    2408:	0a000017 	beq	246c <checkSATInterBodyCollision+0x340>
            allBodies[minSepVertBodyIdx].collidedLastStep = true;
            allBodies[minSepEdgeBodyIdx].collidedLastStep = true;

        } else if (!hasCollided) {
            // printf("ELSE\n");
            allBodies[minSepVertBodyIdx].collidedLastStep = false;
    240c:	e3a02f5b 	mov	r2, #364	; 0x16c
    2410:	e59d4040 	ldr	r4, [sp, #64]	; 0x40
    2414:	e0000492 	mul	r0, r2, r4
    2418:	e59d4004 	ldr	r4, [sp, #4]
    241c:	e0841000 	add	r1, r4, r0
    2420:	e3a03000 	mov	r3, #0
    2424:	e5c13aa4 	strb	r3, [r1, #2724]	; 0xaa4
            allBodies[minSepEdgeBodyIdx].collidedLastStep = false;
    2428:	e59d4044 	ldr	r4, [sp, #68]	; 0x44
    242c:	e0020492 	mul	r2, r2, r4
    2430:	e59d4004 	ldr	r4, [sp, #4]
    2434:	e0841002 	add	r1, r4, r2
    2438:	e5c13aa4 	strb	r3, [r1, #2724]	; 0xaa4

            allBodies[minSepVertBodyIdx].extForces[forceIndex].isActive = false;
    243c:	e59d4034 	ldr	r4, [sp, #52]	; 0x34
    2440:	e1a01104 	lsl	r1, r4, #2
    2444:	e081c004 	add	r12, r1, r4
    2448:	e080010c 	add	r0, r0, r12, lsl #2
    244c:	e59d4004 	ldr	r4, [sp, #4]
    2450:	e0840000 	add	r0, r4, r0
    2454:	e5c03ab8 	strb	r3, [r0, #2744]	; 0xab8
            allBodies[minSepEdgeBodyIdx].extForces[forceIndex].isActive = false;
    2458:	e082210c 	add	r2, r2, r12, lsl #2
    245c:	e59d4004 	ldr	r4, [sp, #4]
    2460:	e0842002 	add	r2, r4, r2
    2464:	e5c23ab8 	strb	r3, [r2, #2744]	; 0xab8
    2468:	ea0000fe 	b	2868 <checkSATInterBodyCollision+0x73c>

            // Test to see if we have found a seperating axis
            if(miniDot>=maxjDot || maxiDot<=minjDot) {hasCollided = false; break;}

            // If we are still here then we have not found the seperating axis and can still collide.
            float seperation = -floatMin(maxiDot-minjDot, maxjDot-miniDot);
    246c:	e1a00009 	mov	r0, r9
    2470:	e1a0100a 	mov	r1, r10
    2474:	eb001849 	bl	85a0 <__aeabi_fsub>
    2478:	e1a05000 	mov	r5, r0
    247c:	e1a00008 	mov	r0, r8
    2480:	e1a01007 	mov	r1, r7
    2484:	eb001845 	bl	85a0 <__aeabi_fsub>
    2488:	e1a06000 	mov	r6, r0
    248c:	e1a00005 	mov	r0, r5
    2490:	e1a01006 	mov	r1, r6
    2494:	ebffff1c 	bl	210c <floatMin>
    2498:	e2804102 	add	r4, r0, #-2147483648	; 0x80000000
            // printf("SEP: %f\n\n", seperation);
            if (seperation <= minSep) {
    249c:	e59d0030 	ldr	r0, [sp, #48]	; 0x30
    24a0:	e1a01004 	mov	r1, r4
    24a4:	eb0019dd 	bl	8c20 <__aeabi_fcmpge>
    24a8:	e3500000 	cmp	r0, #0
    24ac:	0a000018 	beq	2514 <checkSATInterBodyCollision+0x3e8>
                // printf("we haere\n");
                minSep = seperation;
                minEdgeResponsible.x = dx;
                minEdgeResponsible.y = dy;
                float magPos = sqrt(dx*dx+dy*dy);
    24b0:	e59d0014 	ldr	r0, [sp, #20]
    24b4:	e1a01000 	mov	r1, r0
    24b8:	eb0018e1 	bl	8844 <__aeabi_fmul>
    24bc:	e1a07000 	mov	r7, r0
    24c0:	e59d0010 	ldr	r0, [sp, #16]
    24c4:	e1a01000 	mov	r1, r0
    24c8:	eb0018dd 	bl	8844 <__aeabi_fmul>
    24cc:	e1a01000 	mov	r1, r0
    24d0:	e1a00007 	mov	r0, r7
    24d4:	eb001832 	bl	85a4 <__addsf3>
    24d8:	eb00164a 	bl	7e08 <__aeabi_f2d>
    24dc:	eb0007e3 	bl	4470 <sqrt>
    24e0:	eb001804 	bl	84f8 <__aeabi_d2f>
    24e4:	e1a07000 	mov	r7, r0
                normMinEdgeResponsible.x = dy/magPos;
    24e8:	e59d0010 	ldr	r0, [sp, #16]
    24ec:	e1a01007 	mov	r1, r7
    24f0:	eb001939 	bl	89dc <__aeabi_fdiv>
    24f4:	e58d0050 	str	r0, [sp, #80]	; 0x50
                normMinEdgeResponsible.y = dx/magPos;
    24f8:	e59d0014 	ldr	r0, [sp, #20]
    24fc:	e1a01007 	mov	r1, r7
    2500:	eb001935 	bl	89dc <__aeabi_fdiv>
    2504:	e58d0054 	str	r0, [sp, #84]	; 0x54

                minSepEdgeBodyIdx = vertIdx < VERTICIES_PER_BODY ? i : j;
    2508:	e35b0003 	cmp	r11, #3
    250c:	da0000db 	ble	2880 <checkSATInterBodyCollision+0x754>
    2510:	ea0000e7 	b	28b4 <checkSATInterBodyCollision+0x788>
        Vector2D minEdgeResponsible, normMinEdgeResponsible;

        bool hasCollided = true;

        // Loop over edge normals of both shapes.
        for(int vertIdx = 0; vertIdx < (VERTICIES_PER_BODY<<1); vertIdx++) {
    2514:	e28bb001 	add	r11, r11, #1
    2518:	e35b0008 	cmp	r11, #8
    251c:	1affff33 	bne	21f0 <checkSATInterBodyCollision+0xc4>
    2520:	ea0000f0 	b	28e8 <checkSATInterBodyCollision+0x7bc>
            }
        }

        if (hasCollided && !bookMarkedCollisions[i][j]) {
            
            bookMarkedCollisions[minSepVertBodyIdx][minSepEdgeBodyIdx] = true;
    2524:	e59d4040 	ldr	r4, [sp, #64]	; 0x40
    2528:	e0842084 	add	r2, r4, r4, lsl #1
    252c:	e59d4004 	ldr	r4, [sp, #4]
    2530:	e0842082 	add	r2, r4, r2, lsl #1
    2534:	e59d4044 	ldr	r4, [sp, #68]	; 0x44
    2538:	e0822004 	add	r2, r2, r4
    253c:	e3a03001 	mov	r3, #1
    2540:	e5c239e4 	strb	r3, [r2, #2532]	; 0x9e4
            bookMarkedCollisions[minSepEdgeBodyIdx][minSepVertBodyIdx] = true;
    2544:	e0842084 	add	r2, r4, r4, lsl #1
    2548:	e59d4004 	ldr	r4, [sp, #4]
    254c:	e0842082 	add	r2, r4, r2, lsl #1
    2550:	e59d4040 	ldr	r4, [sp, #64]	; 0x40
    2554:	e0822004 	add	r2, r2, r4
    2558:	e5c239e4 	strb	r3, [r2, #2532]	; 0x9e4

            allBodies[minSepVertBodyIdx].extForces[forceIndex].isActive = true;
    255c:	e59d4034 	ldr	r4, [sp, #52]	; 0x34
    2560:	e0845104 	add	r5, r4, r4, lsl #2
    2564:	e3a06f5b 	mov	r6, #364	; 0x16c
    2568:	e59dc040 	ldr	r12, [sp, #64]	; 0x40
    256c:	e0040c96 	mul	r4, r6, r12
    2570:	e0845105 	add	r5, r4, r5, lsl #2
    2574:	e59d0004 	ldr	r0, [sp, #4]
    2578:	e0805005 	add	r5, r0, r5
    257c:	e5c53ab8 	strb	r3, [r5, #2744]	; 0xab8
            allBodies[minSepVertBodyIdx].extForces[forceIndex].force.x = -allBodies[minSepEdgeBodyIdx].mass * allBodies[minSepVertBodyIdx].a.x;
    2580:	e59d1044 	ldr	r1, [sp, #68]	; 0x44
    2584:	e0260196 	mla	r6, r6, r1, r0
    2588:	e5960a84 	ldr	r0, [r6, #2692]	; 0xa84
    258c:	e2800102 	add	r0, r0, #-2147483648	; 0x80000000
    2590:	e59d2004 	ldr	r2, [sp, #4]
    2594:	e0824004 	add	r4, r2, r4
    2598:	e5941a60 	ldr	r1, [r4, #2656]	; 0xa60
    259c:	eb0018a8 	bl	8844 <__aeabi_fmul>
    25a0:	e5850ab0 	str	r0, [r5, #2736]	; 0xab0
            allBodies[minSepVertBodyIdx].extForces[forceIndex].force.y = -allBodies[minSepEdgeBodyIdx].mass * allBodies[minSepVertBodyIdx].a.y;
    25a4:	e5960a84 	ldr	r0, [r6, #2692]	; 0xa84
    25a8:	e2800102 	add	r0, r0, #-2147483648	; 0x80000000
    25ac:	e5941a64 	ldr	r1, [r4, #2660]	; 0xa64
    25b0:	eb0018a3 	bl	8844 <__aeabi_fmul>
    25b4:	e5850ab4 	str	r0, [r5, #2740]	; 0xab4
            allBodies[minSepVertBodyIdx].extForces[forceIndex].r.x = allBodies[minSepVertBodyIdx].pxs[minSepBodyVertIdx] - allBodies[minSepVertBodyIdx].cx;
    25b8:	e3a0605b 	mov	r6, #91	; 0x5b
    25bc:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
    25c0:	e59dc04c 	ldr	r12, [sp, #76]	; 0x4c
    25c4:	e026c396 	mla	r6, r6, r3, r12
    25c8:	e59d0004 	ldr	r0, [sp, #4]
    25cc:	e0803106 	add	r3, r0, r6, lsl #2
    25d0:	e5930a28 	ldr	r0, [r3, #2600]	; 0xa28
    25d4:	e5941a78 	ldr	r1, [r4, #2680]	; 0xa78
    25d8:	eb0017f0 	bl	85a0 <__aeabi_fsub>
    25dc:	e5850aa8 	str	r0, [r5, #2728]	; 0xaa8
            allBodies[minSepVertBodyIdx].extForces[forceIndex].r.y = allBodies[minSepVertBodyIdx].pys[minSepBodyVertIdx] - allBodies[minSepVertBodyIdx].cy;
    25e0:	e59d1004 	ldr	r1, [sp, #4]
    25e4:	e0816106 	add	r6, r1, r6, lsl #2
    25e8:	e5960a38 	ldr	r0, [r6, #2616]	; 0xa38
    25ec:	e5941a7c 	ldr	r1, [r4, #2684]	; 0xa7c
    25f0:	eb0017ea 	bl	85a0 <__aeabi_fsub>
    25f4:	e5850aac 	str	r0, [r5, #2732]	; 0xaac

            if(!allBodies[minSepVertBodyIdx].collidedLastStep){
    25f8:	e5d43aa4 	ldrb	r3, [r4, #2724]	; 0xaa4
    25fc:	e3530000 	cmp	r3, #0
    2600:	1a000036 	bne	26e0 <checkSATInterBodyCollision+0x5b4>
                float velocityVecMag = sqrt(pow(allBodies[minSepVertBodyIdx].v.x, 2) + pow(allBodies[minSepVertBodyIdx].v.x, 2));
    2604:	e3a07f5b 	mov	r7, #364	; 0x16c
    2608:	e59d2040 	ldr	r2, [sp, #64]	; 0x40
    260c:	e0040297 	mul	r4, r7, r2
    2610:	e59d3004 	ldr	r3, [sp, #4]
    2614:	e0835004 	add	r5, r3, r4
    2618:	e5950a58 	ldr	r0, [r5, #2648]	; 0xa58
    261c:	eb0015f9 	bl	7e08 <__aeabi_f2d>
    2620:	e1a02000 	mov	r2, r0
    2624:	e1a03001 	mov	r3, r1
    2628:	eb001623 	bl	7ebc <__aeabi_dmul>
    262c:	e1a02000 	mov	r2, r0
    2630:	e1a03001 	mov	r3, r1
    2634:	eb00151c 	bl	7aac <__adddf3>
    2638:	eb00078c 	bl	4470 <sqrt>
                float dotMag = dotProd2D(&allBodies[minSepVertBodyIdx].v, &normMinEdgeResponsible);
    263c:	e2840050 	add	r0, r4, #80	; 0x50
    2640:	e59d4038 	ldr	r4, [sp, #56]	; 0x38
    2644:	e0840000 	add	r0, r4, r0
    2648:	e28d1050 	add	r1, sp, #80	; 0x50
    264c:	ebfffe92 	bl	209c <dotProd2D>
    2650:	e1a06000 	mov	r6, r0
                // dotMag = dotMag < 0 ? dotMag : -dotMag;
                allBodies[minSepVertBodyIdx].v.x = -(allBodies[minSepEdgeBodyIdx].mass / allBodies[minSepVertBodyIdx].mass) * dotMag * normMinEdgeResponsible.x * ELASTICITY_RB;
    2654:	e59dc044 	ldr	r12, [sp, #68]	; 0x44
    2658:	e59d0004 	ldr	r0, [sp, #4]
    265c:	e0240c97 	mla	r4, r7, r12, r0
    2660:	e5940a84 	ldr	r0, [r4, #2692]	; 0xa84
    2664:	e5951a84 	ldr	r1, [r5, #2692]	; 0xa84
    2668:	eb0018db 	bl	89dc <__aeabi_fdiv>
    266c:	e2800102 	add	r0, r0, #-2147483648	; 0x80000000
    2670:	e1a01006 	mov	r1, r6
    2674:	eb001872 	bl	8844 <__aeabi_fmul>
    2678:	e59d1050 	ldr	r1, [sp, #80]	; 0x50
    267c:	eb001870 	bl	8844 <__aeabi_fmul>
    2680:	eb0015e0 	bl	7e08 <__aeabi_f2d>
    2684:	e309299a 	movw	r2, #39322	; 0x999a
    2688:	e3492999 	movt	r2, #39321	; 0x9999
    268c:	e3093999 	movw	r3, #39321	; 0x9999
    2690:	e3433fd9 	movt	r3, #16345	; 0x3fd9
    2694:	eb001608 	bl	7ebc <__aeabi_dmul>
    2698:	eb001796 	bl	84f8 <__aeabi_d2f>
    269c:	e5850a58 	str	r0, [r5, #2648]	; 0xa58
                allBodies[minSepVertBodyIdx].v.y = -(allBodies[minSepEdgeBodyIdx].mass / allBodies[minSepVertBodyIdx].mass) * dotMag * normMinEdgeResponsible.y * ELASTICITY_RB;
    26a0:	e5940a84 	ldr	r0, [r4, #2692]	; 0xa84
    26a4:	e5951a84 	ldr	r1, [r5, #2692]	; 0xa84
    26a8:	eb0018cb 	bl	89dc <__aeabi_fdiv>
    26ac:	e2800102 	add	r0, r0, #-2147483648	; 0x80000000
    26b0:	e1a01006 	mov	r1, r6
    26b4:	eb001862 	bl	8844 <__aeabi_fmul>
    26b8:	e59d1054 	ldr	r1, [sp, #84]	; 0x54
    26bc:	eb001860 	bl	8844 <__aeabi_fmul>
    26c0:	eb0015d0 	bl	7e08 <__aeabi_f2d>
    26c4:	e309299a 	movw	r2, #39322	; 0x999a
    26c8:	e3492999 	movt	r2, #39321	; 0x9999
    26cc:	e3093999 	movw	r3, #39321	; 0x9999
    26d0:	e3433fd9 	movt	r3, #16345	; 0x3fd9
    26d4:	eb0015f8 	bl	7ebc <__aeabi_dmul>
    26d8:	eb001786 	bl	84f8 <__aeabi_d2f>
    26dc:	e5850a5c 	str	r0, [r5, #2652]	; 0xa5c
            }

            allBodies[minSepEdgeBodyIdx].extForces[forceIndex].isActive = true;
    26e0:	e59d4034 	ldr	r4, [sp, #52]	; 0x34
    26e4:	e0845104 	add	r5, r4, r4, lsl #2
    26e8:	e3a04f5b 	mov	r4, #364	; 0x16c
    26ec:	e59dc044 	ldr	r12, [sp, #68]	; 0x44
    26f0:	e0040c94 	mul	r4, r4, r12
    26f4:	e0845105 	add	r5, r4, r5, lsl #2
    26f8:	e59d0004 	ldr	r0, [sp, #4]
    26fc:	e0805005 	add	r5, r0, r5
    2700:	e3a03001 	mov	r3, #1
    2704:	e5c53ab8 	strb	r3, [r5, #2744]	; 0xab8
            allBodies[minSepEdgeBodyIdx].extForces[forceIndex].force.x = -allBodies[minSepEdgeBodyIdx].mass * allBodies[minSepEdgeBodyIdx].a.x;
    2708:	e0804004 	add	r4, r0, r4
    270c:	e5940a84 	ldr	r0, [r4, #2692]	; 0xa84
    2710:	e2800102 	add	r0, r0, #-2147483648	; 0x80000000
    2714:	e5941a60 	ldr	r1, [r4, #2656]	; 0xa60
    2718:	eb001849 	bl	8844 <__aeabi_fmul>
    271c:	e5850ab0 	str	r0, [r5, #2736]	; 0xab0
            allBodies[minSepEdgeBodyIdx].extForces[forceIndex].force.y = -allBodies[minSepEdgeBodyIdx].mass * allBodies[minSepEdgeBodyIdx].a.y;
    2720:	e5940a84 	ldr	r0, [r4, #2692]	; 0xa84
    2724:	e2800102 	add	r0, r0, #-2147483648	; 0x80000000
    2728:	e5941a64 	ldr	r1, [r4, #2660]	; 0xa64
    272c:	eb001844 	bl	8844 <__aeabi_fmul>
    2730:	e5850ab4 	str	r0, [r5, #2740]	; 0xab4
            allBodies[minSepEdgeBodyIdx].extForces[forceIndex].r.x = allBodies[minSepVertBodyIdx].pxs[minSepBodyVertIdx] - allBodies[minSepEdgeBodyIdx].cx;
    2734:	e3a0605b 	mov	r6, #91	; 0x5b
    2738:	e59d1040 	ldr	r1, [sp, #64]	; 0x40
    273c:	e59d204c 	ldr	r2, [sp, #76]	; 0x4c
    2740:	e0262196 	mla	r6, r6, r1, r2
    2744:	e59dc004 	ldr	r12, [sp, #4]
    2748:	e08c3106 	add	r3, r12, r6, lsl #2
    274c:	e5930a28 	ldr	r0, [r3, #2600]	; 0xa28
    2750:	e5941a78 	ldr	r1, [r4, #2680]	; 0xa78
    2754:	eb001791 	bl	85a0 <__aeabi_fsub>
    2758:	e5850aa8 	str	r0, [r5, #2728]	; 0xaa8
            allBodies[minSepEdgeBodyIdx].extForces[forceIndex].r.y = allBodies[minSepVertBodyIdx].pys[minSepBodyVertIdx] - allBodies[minSepEdgeBodyIdx].cy;
    275c:	e59d0004 	ldr	r0, [sp, #4]
    2760:	e0806106 	add	r6, r0, r6, lsl #2
    2764:	e5960a38 	ldr	r0, [r6, #2616]	; 0xa38
    2768:	e5941a7c 	ldr	r1, [r4, #2684]	; 0xa7c
    276c:	eb00178b 	bl	85a0 <__aeabi_fsub>
    2770:	e5850aac 	str	r0, [r5, #2732]	; 0xaac
            
            if(!allBodies[minSepEdgeBodyIdx].collidedLastStep){
    2774:	e5d43aa4 	ldrb	r3, [r4, #2724]	; 0xaa4
    2778:	e3530000 	cmp	r3, #0
    277c:	1a000030 	bne	2844 <checkSATInterBodyCollision+0x718>
                allBodies[minSepEdgeBodyIdx].v.x *= -(allBodies[minSepVertBodyIdx].mass / allBodies[minSepEdgeBodyIdx].mass) * ELASTICITY_RB;
    2780:	e3a05f5b 	mov	r5, #364	; 0x16c
    2784:	e59d1044 	ldr	r1, [sp, #68]	; 0x44
    2788:	e59d2004 	ldr	r2, [sp, #4]
    278c:	e0242195 	mla	r4, r5, r1, r2
    2790:	e5940a58 	ldr	r0, [r4, #2648]	; 0xa58
    2794:	eb00159b 	bl	7e08 <__aeabi_f2d>
    2798:	e1a06000 	mov	r6, r0
    279c:	e1a07001 	mov	r7, r1
    27a0:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
    27a4:	e59dc004 	ldr	r12, [sp, #4]
    27a8:	e025c395 	mla	r5, r5, r3, r12
    27ac:	e5950a84 	ldr	r0, [r5, #2692]	; 0xa84
    27b0:	e5941a84 	ldr	r1, [r4, #2692]	; 0xa84
    27b4:	eb001888 	bl	89dc <__aeabi_fdiv>
    27b8:	e2800102 	add	r0, r0, #-2147483648	; 0x80000000
    27bc:	eb001591 	bl	7e08 <__aeabi_f2d>
    27c0:	e309299a 	movw	r2, #39322	; 0x999a
    27c4:	e3492999 	movt	r2, #39321	; 0x9999
    27c8:	e3093999 	movw	r3, #39321	; 0x9999
    27cc:	e3433fd9 	movt	r3, #16345	; 0x3fd9
    27d0:	eb0015b9 	bl	7ebc <__aeabi_dmul>
    27d4:	e1a02000 	mov	r2, r0
    27d8:	e1a03001 	mov	r3, r1
    27dc:	e1a00006 	mov	r0, r6
    27e0:	e1a01007 	mov	r1, r7
    27e4:	eb0015b4 	bl	7ebc <__aeabi_dmul>
    27e8:	eb001742 	bl	84f8 <__aeabi_d2f>
    27ec:	e5840a58 	str	r0, [r4, #2648]	; 0xa58
                allBodies[minSepEdgeBodyIdx].v.y *= -(allBodies[minSepVertBodyIdx].mass / allBodies[minSepEdgeBodyIdx].mass) * ELASTICITY_RB;
    27f0:	e5940a5c 	ldr	r0, [r4, #2652]	; 0xa5c
    27f4:	eb001583 	bl	7e08 <__aeabi_f2d>
    27f8:	e1a06000 	mov	r6, r0
    27fc:	e1a07001 	mov	r7, r1
    2800:	e5950a84 	ldr	r0, [r5, #2692]	; 0xa84
    2804:	e5941a84 	ldr	r1, [r4, #2692]	; 0xa84
    2808:	eb001873 	bl	89dc <__aeabi_fdiv>
    280c:	e2800102 	add	r0, r0, #-2147483648	; 0x80000000
    2810:	eb00157c 	bl	7e08 <__aeabi_f2d>
    2814:	e309299a 	movw	r2, #39322	; 0x999a
    2818:	e3492999 	movt	r2, #39321	; 0x9999
    281c:	e3093999 	movw	r3, #39321	; 0x9999
    2820:	e3433fd9 	movt	r3, #16345	; 0x3fd9
    2824:	eb0015a4 	bl	7ebc <__aeabi_dmul>
    2828:	e1a02000 	mov	r2, r0
    282c:	e1a03001 	mov	r3, r1
    2830:	e1a00006 	mov	r0, r6
    2834:	e1a01007 	mov	r1, r7
    2838:	eb00159f 	bl	7ebc <__aeabi_dmul>
    283c:	eb00172d 	bl	84f8 <__aeabi_d2f>
    2840:	e5840a5c 	str	r0, [r4, #2652]	; 0xa5c
            }

            // printf("Collision detected between bodies %d ", minSepEdgeBodyIdx);
            // printf("and %d\n", minSepVertBodyIdx);

            allBodies[minSepVertBodyIdx].collidedLastStep = true;
    2844:	e3a02f5b 	mov	r2, #364	; 0x16c
    2848:	e59d4040 	ldr	r4, [sp, #64]	; 0x40
    284c:	e59dc004 	ldr	r12, [sp, #4]
    2850:	e021c492 	mla	r1, r2, r4, r12
    2854:	e3a03001 	mov	r3, #1
    2858:	e5c13aa4 	strb	r3, [r1, #2724]	; 0xaa4
            allBodies[minSepEdgeBodyIdx].collidedLastStep = true;
    285c:	e59d4044 	ldr	r4, [sp, #68]	; 0x44
    2860:	e022c492 	mla	r2, r2, r4, r12
    2864:	e5c23aa4 	strb	r3, [r2, #2724]	; 0xaa4
    float maxiDot, miniDot;
    float maxjDot, minjDot;

    int forceIndex = VERTICIES_PER_BODY - 1;

    for(int j = 0; j < NUM_BODIES; j++){
    2868:	e59d4008 	ldr	r4, [sp, #8]
    286c:	e2844001 	add	r4, r4, #1
    2870:	e58d4008 	str	r4, [sp, #8]
    2874:	e3540006 	cmp	r4, #6
    2878:	1afffe3a 	bne	2168 <checkSATInterBodyCollision+0x3c>
    287c:	ea00002f 	b	2940 <checkSATInterBodyCollision+0x814>

                minSepEdgeBodyIdx = vertIdx < VERTICIES_PER_BODY ? i : j;
                minSepVertBodyIdx = minSepEdgeBodyIdx == i ? j : i;
                
                // Which vert of the vert body is responsible:
                if(maxiDot-minjDot < maxjDot-miniDot) {
    2880:	e1a00005 	mov	r0, r5
    2884:	e1a01006 	mov	r1, r6
    2888:	eb0018d8 	bl	8bf0 <__aeabi_fcmplt>
    288c:	e3500000 	cmp	r0, #0
    2890:	1a000022 	bne	2920 <checkSATInterBodyCollision+0x7f4>
                    }
                } else {
                    if (minSepVertBodyIdx==i){
                        minSepBodyVertIdx = testiIdxMin;
                    } else {
                        minSepBodyVertIdx = testjIdxMax;
    2894:	e3a0c000 	mov	r12, #0
    2898:	e58dc04c 	str	r12, [sp, #76]	; 0x4c

                minSepEdgeBodyIdx = vertIdx < VERTICIES_PER_BODY ? i : j;
                minSepVertBodyIdx = minSepEdgeBodyIdx == i ? j : i;
                
                // Which vert of the vert body is responsible:
                if(maxiDot-minjDot < maxjDot-miniDot) {
    289c:	e59d0008 	ldr	r0, [sp, #8]
    28a0:	e58d0040 	str	r0, [sp, #64]	; 0x40
                minEdgeResponsible.y = dy;
                float magPos = sqrt(dx*dx+dy*dy);
                normMinEdgeResponsible.x = dy/magPos;
                normMinEdgeResponsible.y = dx/magPos;

                minSepEdgeBodyIdx = vertIdx < VERTICIES_PER_BODY ? i : j;
    28a4:	e59d102c 	ldr	r1, [sp, #44]	; 0x2c
    28a8:	e58d1044 	str	r1, [sp, #68]	; 0x44
            // If we are still here then we have not found the seperating axis and can still collide.
            float seperation = -floatMin(maxiDot-minjDot, maxjDot-miniDot);
            // printf("SEP: %f\n\n", seperation);
            if (seperation <= minSep) {
                // printf("we haere\n");
                minSep = seperation;
    28ac:	e58d4030 	str	r4, [sp, #48]	; 0x30
    28b0:	eaffff17 	b	2514 <checkSATInterBodyCollision+0x3e8>

                minSepEdgeBodyIdx = vertIdx < VERTICIES_PER_BODY ? i : j;
                minSepVertBodyIdx = minSepEdgeBodyIdx == i ? j : i;
                
                // Which vert of the vert body is responsible:
                if(maxiDot-minjDot < maxjDot-miniDot) {
    28b4:	e1a00005 	mov	r0, r5
    28b8:	e1a01006 	mov	r1, r6
    28bc:	eb0018cb 	bl	8bf0 <__aeabi_fcmplt>
    28c0:	e3500000 	cmp	r0, #0
    28c4:	1a00000d 	bne	2900 <checkSATInterBodyCollision+0x7d4>
    28c8:	e59d2018 	ldr	r2, [sp, #24]
    28cc:	e58d204c 	str	r2, [sp, #76]	; 0x4c
                float magPos = sqrt(dx*dx+dy*dy);
                normMinEdgeResponsible.x = dy/magPos;
                normMinEdgeResponsible.y = dx/magPos;

                minSepEdgeBodyIdx = vertIdx < VERTICIES_PER_BODY ? i : j;
                minSepVertBodyIdx = minSepEdgeBodyIdx == i ? j : i;
    28d0:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
    28d4:	e58d3040 	str	r3, [sp, #64]	; 0x40
                
                // Which vert of the vert body is responsible:
                if(maxiDot-minjDot < maxjDot-miniDot) {
    28d8:	e59dc008 	ldr	r12, [sp, #8]
    28dc:	e58dc044 	str	r12, [sp, #68]	; 0x44
            // If we are still here then we have not found the seperating axis and can still collide.
            float seperation = -floatMin(maxiDot-minjDot, maxjDot-miniDot);
            // printf("SEP: %f\n\n", seperation);
            if (seperation <= minSep) {
                // printf("we haere\n");
                minSep = seperation;
    28e0:	e58d4030 	str	r4, [sp, #48]	; 0x30
    28e4:	eaffff0a 	b	2514 <checkSATInterBodyCollision+0x3e8>
                }

            }
        }

        if (hasCollided && !bookMarkedCollisions[i][j]) {
    28e8:	e59dc048 	ldr	r12, [sp, #72]	; 0x48
    28ec:	e59d403c 	ldr	r4, [sp, #60]	; 0x3c
    28f0:	e7dc3004 	ldrb	r3, [r12, r4]
    28f4:	e3530000 	cmp	r3, #0
    28f8:	1affffda 	bne	2868 <checkSATInterBodyCollision+0x73c>
    28fc:	eaffff08 	b	2524 <checkSATInterBodyCollision+0x3f8>

                minSepEdgeBodyIdx = vertIdx < VERTICIES_PER_BODY ? i : j;
                minSepVertBodyIdx = minSepEdgeBodyIdx == i ? j : i;
                
                // Which vert of the vert body is responsible:
                if(maxiDot-minjDot < maxjDot-miniDot) {
    2900:	e59d000c 	ldr	r0, [sp, #12]
    2904:	e58d004c 	str	r0, [sp, #76]	; 0x4c
    2908:	e59d102c 	ldr	r1, [sp, #44]	; 0x2c
    290c:	e58d1040 	str	r1, [sp, #64]	; 0x40
    2910:	e59d2008 	ldr	r2, [sp, #8]
    2914:	e58d2044 	str	r2, [sp, #68]	; 0x44
            // If we are still here then we have not found the seperating axis and can still collide.
            float seperation = -floatMin(maxiDot-minjDot, maxjDot-miniDot);
            // printf("SEP: %f\n\n", seperation);
            if (seperation <= minSep) {
                // printf("we haere\n");
                minSep = seperation;
    2918:	e58d4030 	str	r4, [sp, #48]	; 0x30
    291c:	eafffefc 	b	2514 <checkSATInterBodyCollision+0x3e8>

                minSepEdgeBodyIdx = vertIdx < VERTICIES_PER_BODY ? i : j;
                minSepVertBodyIdx = minSepEdgeBodyIdx == i ? j : i;
                
                // Which vert of the vert body is responsible:
                if(maxiDot-minjDot < maxjDot-miniDot) {
    2920:	e59d301c 	ldr	r3, [sp, #28]
    2924:	e58d304c 	str	r3, [sp, #76]	; 0x4c
    2928:	e59dc008 	ldr	r12, [sp, #8]
    292c:	e58dc040 	str	r12, [sp, #64]	; 0x40
                minEdgeResponsible.y = dy;
                float magPos = sqrt(dx*dx+dy*dy);
                normMinEdgeResponsible.x = dy/magPos;
                normMinEdgeResponsible.y = dx/magPos;

                minSepEdgeBodyIdx = vertIdx < VERTICIES_PER_BODY ? i : j;
    2930:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
    2934:	e58d0044 	str	r0, [sp, #68]	; 0x44
            // If we are still here then we have not found the seperating axis and can still collide.
            float seperation = -floatMin(maxiDot-minjDot, maxjDot-miniDot);
            // printf("SEP: %f\n\n", seperation);
            if (seperation <= minSep) {
                // printf("we haere\n");
                minSep = seperation;
    2938:	e58d4030 	str	r4, [sp, #48]	; 0x30
    293c:	eafffef4 	b	2514 <checkSATInterBodyCollision+0x3e8>
            allBodies[minSepVertBodyIdx].extForces[forceIndex].isActive = false;
            allBodies[minSepEdgeBodyIdx].extForces[forceIndex].isActive = false;
        }

    }
}
    2940:	e28dd06c 	add	sp, sp, #108	; 0x6c
    2944:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    2948:	0009a188 	.word	0x0009a188

0000294c <initRigidBodies>:
//             else drawIndividualPixel(x, y, BLACK);
//         }
//     }
// }

void initRigidBodies() {
    294c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2950:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    int xStepCount = 0;
    int yStepCount = 0;

    for (int i = 0; i < NUM_BODIES; i++) {

        allBodies[i].colour = RB_COLOUR;
    2954:	e30937a4 	movw	r3, #38820	; 0x97a4
    2958:	e3403009 	movt	r3, #9
    295c:	e3a01e7e 	mov	r1, #2016	; 0x7e0
    2960:	e3a02eb7 	mov	r2, #2928	; 0xb70
    2964:	e18310b2 	strh	r1, [r3, r2]
    2968:	e2833ecd 	add	r3, r3, #3280	; 0xcd0
    296c:	e283300c 	add	r3, r3, #12
    2970:	e58d301c 	str	r3, [sp, #28]
    int initY = stepY/2;

    int xStepCount = 0;
    int yStepCount = 0;

    for (int i = 0; i < NUM_BODIES; i++) {
    2974:	e3a01000 	mov	r1, #0
    2978:	e58d1010 	str	r1, [sp, #16]

    int initX = stepX/2;
    int initY = stepY/2;

    int xStepCount = 0;
    int yStepCount = 0;
    297c:	e58d1020 	str	r1, [sp, #32]
    int avgStepParam =  (stepX + stepY) >> 3;

    int initX = stepX/2;
    int initY = stepY/2;

    int xStepCount = 0;
    2980:	e58d1024 	str	r1, [sp, #36]	; 0x24
        float sumY = 0;

        float runningAreaCount = 0;

        allBodies[i].v.x = 0;
        allBodies[i].v.y = rand() % VERT_VARIANCE - (VERT_VARIANCE >> 1);
    2984:	e3082889 	movw	r2, #34953	; 0x8889
    2988:	e3482888 	movt	r2, #34952	; 0x8888
    298c:	e58d2014 	str	r2, [sp, #20]
    2990:	ea00000b 	b	29c4 <initRigidBodies+0x78>
    int xStepCount = 0;
    int yStepCount = 0;

    for (int i = 0; i < NUM_BODIES; i++) {

        allBodies[i].colour = RB_COLOUR;
    2994:	e3a03e7e 	mov	r3, #2016	; 0x7e0
    2998:	e1cb30b0 	strh	r3, [r11]

        if(xStepCount >= amtColumns) {
    299c:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
    29a0:	e3530003 	cmp	r3, #3
            xStepCount = 0;
            yStepCount++;
    29a4:	c59d1020 	ldrgt	r1, [sp, #32]
    29a8:	c2811001 	addgt	r1, r1, #1
    29ac:	c58d1020 	strgt	r1, [sp, #32]
    for (int i = 0; i < NUM_BODIES; i++) {

        allBodies[i].colour = RB_COLOUR;

        if(xStepCount >= amtColumns) {
            xStepCount = 0;
    29b0:	c3a02000 	movgt	r2, #0
    29b4:	c58d2024 	strgt	r2, [sp, #36]	; 0x24
    29b8:	e59d301c 	ldr	r3, [sp, #28]
    29bc:	e2833f5b 	add	r3, r3, #364	; 0x16c
    29c0:	e58d301c 	str	r3, [sp, #28]
            yStepCount++;
        }
        if(yStepCount >= amtRows) {
            yStepCount = 0;
    29c4:	e59d1020 	ldr	r1, [sp, #32]
    29c8:	e3510002 	cmp	r1, #2
    29cc:	c3a01000 	movgt	r1, #0
    29d0:	e58d1020 	str	r1, [sp, #32]
        }

        int centX = initX + xStepCount * stepX;
    29d4:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
    29d8:	e0813101 	add	r3, r1, r1, lsl #2
    29dc:	e1a03203 	lsl	r3, r3, #4
    29e0:	e2833028 	add	r3, r3, #40	; 0x28
    29e4:	e58d3028 	str	r3, [sp, #40]	; 0x28
        int centY = initY + yStepCount * stepY;
    29e8:	e59d2020 	ldr	r2, [sp, #32]
    29ec:	e0823102 	add	r3, r2, r2, lsl #2
    29f0:	e1a03203 	lsl	r3, r3, #4
    29f4:	e2833028 	add	r3, r3, #40	; 0x28
    29f8:	e58d302c 	str	r3, [sp, #44]	; 0x2c
//             else drawIndividualPixel(x, y, BLACK);
//         }
//     }
// }

void initRigidBodies() {
    29fc:	e59db01c 	ldr	r11, [sp, #28]
        float sumX = 0;
        float sumY = 0;

        float runningAreaCount = 0;

        allBodies[i].v.x = 0;
    2a00:	e3a03000 	mov	r3, #0
    2a04:	e50b3284 	str	r3, [r11, #-644]	; 0xfffffd7c
        allBodies[i].v.y = rand() % VERT_VARIANCE - (VERT_VARIANCE >> 1);
    2a08:	eb0018c7 	bl	8d2c <rand>
    2a0c:	e59d1014 	ldr	r1, [sp, #20]
    2a10:	e0c31091 	smull	r1, r3, r1, r0
    2a14:	e0833000 	add	r3, r3, r0
    2a18:	e1a02fc0 	asr	r2, r0, #31
    2a1c:	e0623243 	rsb	r3, r2, r3, asr #4
    2a20:	e0633203 	rsb	r3, r3, r3, lsl #4
    2a24:	e0400083 	sub	r0, r0, r3, lsl #1
    2a28:	e240000f 	sub	r0, r0, #15
    2a2c:	eb00174d 	bl	8768 <__aeabi_i2f>
    2a30:	e59d201c 	ldr	r2, [sp, #28]
    2a34:	e5020280 	str	r0, [r2, #-640]	; 0xfffffd80
        allBodies[i].theta = 0;
    2a38:	e3a03000 	mov	r3, #0
    2a3c:	e5023254 	str	r3, [r2, #-596]	; 0xfffffdac
        allBodies[i].omega = 0;
    2a40:	e5023240 	str	r3, [r2, #-576]	; 0xfffffdc0
//             else drawIndividualPixel(x, y, BLACK);
//         }
//     }
// }

void initRigidBodies() {
    2a44:	e3a03f5b 	mov	r3, #364	; 0x16c
    2a48:	e59d1010 	ldr	r1, [sp, #16]
    2a4c:	e59f2484 	ldr	r2, [pc, #1156]	; 2ed8 <initRigidBodies+0x58c>
    2a50:	e0232193 	mla	r3, r3, r1, r2
    2a54:	e58d3030 	str	r3, [sp, #48]	; 0x30
    2a58:	e59f347c 	ldr	r3, [pc, #1148]	; 2edc <initRigidBodies+0x590>
    2a5c:	e083a281 	add	r10, r3, r1, lsl #5
    2a60:	e59d6030 	ldr	r6, [sp, #48]	; 0x30
    2a64:	e3a07000 	mov	r7, #0
        bool changeFlag = false;

        float sumX = 0;
        float sumY = 0;

        float runningAreaCount = 0;
    2a68:	e3a01000 	mov	r1, #0
    2a6c:	e58d1008 	str	r1, [sp, #8]
        int signX = -1;
        int signY = -1;
        bool changeFlag = false;

        float sumX = 0;
        float sumY = 0;
    2a70:	e58d1004 	str	r1, [sp, #4]

        int signX = -1;
        int signY = -1;
        bool changeFlag = false;

        float sumX = 0;
    2a74:	e58d1000 	str	r1, [sp]
        int centX = initX + xStepCount * stepX;
        int centY = initY + yStepCount * stepY;

        int signX = -1;
        int signY = -1;
        bool changeFlag = false;
    2a78:	e58d7018 	str	r7, [sp, #24]

        int centX = initX + xStepCount * stepX;
        int centY = initY + yStepCount * stepY;

        int signX = -1;
        int signY = -1;
    2a7c:	e3e09000 	mvn	r9, #0
        }

        int centX = initX + xStepCount * stepX;
        int centY = initY + yStepCount * stepY;

        int signX = -1;
    2a80:	e1a08009 	mov	r8, r9
    2a84:	e58db034 	str	r11, [sp, #52]	; 0x34
    2a88:	ea000002 	b	2a98 <initRigidBodies+0x14c>
    2a8c:	e2877001 	add	r7, r7, #1
    2a90:	e2866004 	add	r6, r6, #4
    2a94:	e28aa004 	add	r10, r10, #4
        allBodies[i].theta = 0;
        allBodies[i].omega = 0;

        for (int j = 0; j < VERTICIES_PER_BODY; j++) {

            srand(i+j);
    2a98:	e59d1010 	ldr	r1, [sp, #16]
    2a9c:	e0870001 	add	r0, r7, r1
    2aa0:	eb00189a 	bl	8d10 <srand>
            allBodies[i].xs[j] = centX + signX*avgStepParam + rand() % VERT_VARIANCE - (VERT_VARIANCE >> 1);
    2aa4:	e0884108 	add	r4, r8, r8, lsl #2
    2aa8:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
    2aac:	e0824104 	add	r4, r2, r4, lsl #2
    2ab0:	eb00189d 	bl	8d2c <rand>
//             else drawIndividualPixel(x, y, BLACK);
//         }
//     }
// }

void initRigidBodies() {
    2ab4:	e1a0b006 	mov	r11, r6
        allBodies[i].omega = 0;

        for (int j = 0; j < VERTICIES_PER_BODY; j++) {

            srand(i+j);
            allBodies[i].xs[j] = centX + signX*avgStepParam + rand() % VERT_VARIANCE - (VERT_VARIANCE >> 1);
    2ab8:	e59d1014 	ldr	r1, [sp, #20]
    2abc:	e0c31091 	smull	r1, r3, r1, r0
    2ac0:	e0833000 	add	r3, r3, r0
    2ac4:	e1a02fc0 	asr	r2, r0, #31
    2ac8:	e0623243 	rsb	r3, r2, r3, asr #4
    2acc:	e0633203 	rsb	r3, r3, r3, lsl #4
    2ad0:	e0400083 	sub	r0, r0, r3, lsl #1
    2ad4:	e0844000 	add	r4, r4, r0
    2ad8:	e244400f 	sub	r4, r4, #15
    2adc:	e5864000 	str	r4, [r6]
            allBodies[i].ys[j] = centY + signY*avgStepParam + rand() % VERT_VARIANCE - (VERT_VARIANCE >> 1);
    2ae0:	e0895109 	add	r5, r9, r9, lsl #2
    2ae4:	e59d202c 	ldr	r2, [sp, #44]	; 0x2c
    2ae8:	e0825105 	add	r5, r2, r5, lsl #2
    2aec:	eb00188e 	bl	8d2c <rand>
    2af0:	e59d3014 	ldr	r3, [sp, #20]
    2af4:	e0c43093 	smull	r3, r4, r3, r0
    2af8:	e0844000 	add	r4, r4, r0
    2afc:	e1a03fc0 	asr	r3, r0, #31
    2b00:	e0634244 	rsb	r4, r3, r4, asr #4
    2b04:	e0644204 	rsb	r4, r4, r4, lsl #4
    2b08:	e0404084 	sub	r4, r0, r4, lsl #1
    2b0c:	e0854004 	add	r4, r5, r4
    2b10:	e244400f 	sub	r4, r4, #15
    2b14:	e5864010 	str	r4, [r6, #16]
            
            eraseRBs[i].xs[j] = allBodies[i].xs[j];
    2b18:	e5960000 	ldr	r0, [r6]
    2b1c:	e58a0000 	str	r0, [r10]
            eraseRBs[i].ys[j] = allBodies[i].ys[j];
    2b20:	e58a4010 	str	r4, [r10, #16]

            allBodies[i].pxs[j] = M_PER_PX_RB * allBodies[i].xs[j];
    2b24:	eb0014ad 	bl	7de0 <__aeabi_i2d>
    2b28:	eb001672 	bl	84f8 <__aeabi_d2f>
    2b2c:	e1a05000 	mov	r5, r0
    2b30:	e5860020 	str	r0, [r6, #32]
            allBodies[i].pys[j] = M_PER_PX_RB * allBodies[i].ys[j];
    2b34:	e1a00004 	mov	r0, r4
    2b38:	eb0014a8 	bl	7de0 <__aeabi_i2d>
    2b3c:	eb00166d 	bl	84f8 <__aeabi_d2f>
    2b40:	e1a04000 	mov	r4, r0
    2b44:	e5860030 	str	r0, [r6, #48]	; 0x30

            sumX += allBodies[i].pxs[j];
    2b48:	e59d0000 	ldr	r0, [sp]
    2b4c:	e1a01005 	mov	r1, r5
    2b50:	eb001693 	bl	85a4 <__addsf3>
    2b54:	e58d0000 	str	r0, [sp]
            sumY += allBodies[i].pys[j];
    2b58:	e59d0004 	ldr	r0, [sp, #4]
    2b5c:	e1a01004 	mov	r1, r4
    2b60:	eb00168f 	bl	85a4 <__addsf3>
    2b64:	e58d0004 	str	r0, [sp, #4]

            // printf("\nsX:%d", signX);
            // printf("\nsY:%d\n\n", signY);

            if(signX == -1) {
    2b68:	e3780001 	cmn	r8, #1
                signX = 1;
    2b6c:	03a08001 	moveq	r8, #1
            sumY += allBodies[i].pys[j];

            // printf("\nsX:%d", signX);
            // printf("\nsY:%d\n\n", signY);

            if(signX == -1) {
    2b70:	0a000006 	beq	2b90 <initRigidBodies+0x244>
                signX = 1;
            } else {
                if(changeFlag) {
    2b74:	e59d1018 	ldr	r1, [sp, #24]
    2b78:	e3510000 	cmp	r1, #0
                    signX = -1;
                    changeFlag = false;
                }
                changeFlag = true;
    2b7c:	03a02001 	moveq	r2, #1
    2b80:	058d2018 	streq	r2, [sp, #24]
                signY = 1;
    2b84:	01a09002 	moveq	r9, r2
    2b88:	13a09001 	movne	r9, #1

            if(signX == -1) {
                signX = 1;
            } else {
                if(changeFlag) {
                    signX = -1;
    2b8c:	13e08000 	mvnne	r8, #0
                }
                changeFlag = true;
                signY = 1;
            }

            if(j!=0) runningAreaCount += (allBodies[i].pxs[j-1] + allBodies[i].pxs[j]) * (allBodies[i].pys[j-1] - allBodies[i].pys[j]) / 2.0;
    2b90:	e3570000 	cmp	r7, #0
    2b94:	0affffbc 	beq	2a8c <initRigidBodies+0x140>
    2b98:	e59d0008 	ldr	r0, [sp, #8]
    2b9c:	eb001499 	bl	7e08 <__aeabi_f2d>
    2ba0:	e1cd00f8 	strd	r0, [sp, #8]
    2ba4:	e1a00005 	mov	r0, r5
    2ba8:	e59b101c 	ldr	r1, [r11, #28]
    2bac:	eb00167c 	bl	85a4 <__addsf3>
    2bb0:	e1a05000 	mov	r5, r0
    2bb4:	e59b002c 	ldr	r0, [r11, #44]	; 0x2c
    2bb8:	e1a01004 	mov	r1, r4
    2bbc:	eb001677 	bl	85a0 <__aeabi_fsub>
    2bc0:	e1a01000 	mov	r1, r0
    2bc4:	e1a00005 	mov	r0, r5
    2bc8:	eb00171d 	bl	8844 <__aeabi_fmul>
    2bcc:	eb00148d 	bl	7e08 <__aeabi_f2d>
    2bd0:	e3a02000 	mov	r2, #0
    2bd4:	e3a03000 	mov	r3, #0
    2bd8:	e3433fe0 	movt	r3, #16352	; 0x3fe0
    2bdc:	eb0014b6 	bl	7ebc <__aeabi_dmul>
    2be0:	e1a02000 	mov	r2, r0
    2be4:	e1a03001 	mov	r3, r1
    2be8:	e1cd00d8 	ldrd	r0, [sp, #8]
    2bec:	eb0013ae 	bl	7aac <__adddf3>
    2bf0:	eb001640 	bl	84f8 <__aeabi_d2f>
    2bf4:	e58d0008 	str	r0, [sp, #8]
//             else drawIndividualPixel(x, y, BLACK);
//         }
//     }
// }

void initRigidBodies() {
    2bf8:	e2873001 	add	r3, r7, #1
        allBodies[i].v.x = 0;
        allBodies[i].v.y = rand() % VERT_VARIANCE - (VERT_VARIANCE >> 1);
        allBodies[i].theta = 0;
        allBodies[i].omega = 0;

        for (int j = 0; j < VERTICIES_PER_BODY; j++) {
    2bfc:	e3530003 	cmp	r3, #3
    2c00:	daffffa1 	ble	2a8c <initRigidBodies+0x140>
    2c04:	e59db034 	ldr	r11, [sp, #52]	; 0x34

            if(j!=0) runningAreaCount += (allBodies[i].pxs[j-1] + allBodies[i].pxs[j]) * (allBodies[i].pys[j-1] - allBodies[i].pys[j]) / 2.0;

        }

        runningAreaCount += (allBodies[i].pxs[VERTICIES_PER_BODY-1] + allBodies[i].pxs[0]) * (allBodies[i].pys[VERTICIES_PER_BODY-1] - allBodies[i].pys[0]) / 2.0;
    2c08:	eb00147e 	bl	7e08 <__aeabi_f2d>
    2c0c:	e1a04000 	mov	r4, r0
    2c10:	e1a05001 	mov	r5, r1
    2c14:	e51b02a8 	ldr	r0, [r11, #-680]	; 0xfffffd58
    2c18:	e51b12b4 	ldr	r1, [r11, #-692]	; 0xfffffd4c
    2c1c:	eb001660 	bl	85a4 <__addsf3>
    2c20:	e1a06000 	mov	r6, r0
    2c24:	e51b0298 	ldr	r0, [r11, #-664]	; 0xfffffd68
    2c28:	e51b12a4 	ldr	r1, [r11, #-676]	; 0xfffffd5c
    2c2c:	eb00165b 	bl	85a0 <__aeabi_fsub>
    2c30:	e1a01000 	mov	r1, r0
    2c34:	e1a00006 	mov	r0, r6
    2c38:	eb001701 	bl	8844 <__aeabi_fmul>
    2c3c:	eb001471 	bl	7e08 <__aeabi_f2d>
    2c40:	e3a02000 	mov	r2, #0
    2c44:	e3a03000 	mov	r3, #0
    2c48:	e3433fe0 	movt	r3, #16352	; 0x3fe0
    2c4c:	eb00149a 	bl	7ebc <__aeabi_dmul>
    2c50:	e1a02000 	mov	r2, r0
    2c54:	e1a03001 	mov	r3, r1
    2c58:	e1a00004 	mov	r0, r4
    2c5c:	e1a01005 	mov	r1, r5
    2c60:	eb001391 	bl	7aac <__adddf3>
    2c64:	eb001623 	bl	84f8 <__aeabi_d2f>
    2c68:	e58d0018 	str	r0, [sp, #24]

        allBodies[i].cx = sumX / (float)VERTICIES_PER_BODY;
    2c6c:	e59d0000 	ldr	r0, [sp]
    2c70:	e3a015fa 	mov	r1, #1048576000	; 0x3e800000
    2c74:	eb0016f2 	bl	8844 <__aeabi_fmul>
    2c78:	e50b0264 	str	r0, [r11, #-612]	; 0xfffffd9c
        allBodies[i].cy = sumY / (float)VERTICIES_PER_BODY;
    2c7c:	e59d0004 	ldr	r0, [sp, #4]
    2c80:	e3a015fa 	mov	r1, #1048576000	; 0x3e800000
    2c84:	eb0016ee 	bl	8844 <__aeabi_fmul>
    2c88:	e50b0260 	str	r0, [r11, #-608]	; 0xfffffda0
        float maxX = -1;
        float maxY = -1;
        float minX = M_PER_PX_RB * MAX_X;
        float minY = M_PER_PX_RB * MAX_Y;

        for (int j = 0; j < VERTICIES_PER_BODY; j++) {
    2c8c:	e3a08000 	mov	r8, #0
        allBodies[i].cy = sumY / (float)VERTICIES_PER_BODY;

        float maxX = -1;
        float maxY = -1;
        float minX = M_PER_PX_RB * MAX_X;
        float minY = M_PER_PX_RB * MAX_Y;
    2c90:	e3a09000 	mov	r9, #0
    2c94:	e3449370 	movt	r9, #17264	; 0x4370
        allBodies[i].cx = sumX / (float)VERTICIES_PER_BODY;
        allBodies[i].cy = sumY / (float)VERTICIES_PER_BODY;

        float maxX = -1;
        float maxY = -1;
        float minX = M_PER_PX_RB * MAX_X;
    2c98:	e3a03000 	mov	r3, #0
    2c9c:	e34433a0 	movt	r3, #17312	; 0x43a0
    2ca0:	e58d3004 	str	r3, [sp, #4]

        allBodies[i].cx = sumX / (float)VERTICIES_PER_BODY;
        allBodies[i].cy = sumY / (float)VERTICIES_PER_BODY;

        float maxX = -1;
        float maxY = -1;
    2ca4:	e3a0a000 	mov	r10, #0
    2ca8:	e34baf80 	movt	r10, #49024	; 0xbf80
        runningAreaCount += (allBodies[i].pxs[VERTICIES_PER_BODY-1] + allBodies[i].pxs[0]) * (allBodies[i].pys[VERTICIES_PER_BODY-1] - allBodies[i].pys[0]) / 2.0;

        allBodies[i].cx = sumX / (float)VERTICIES_PER_BODY;
        allBodies[i].cy = sumY / (float)VERTICIES_PER_BODY;

        float maxX = -1;
    2cac:	e58da000 	str	r10, [sp]
    2cb0:	e58da008 	str	r10, [sp, #8]
    2cb4:	e59d6030 	ldr	r6, [sp, #48]	; 0x30
        float minX = M_PER_PX_RB * MAX_X;
        float minY = M_PER_PX_RB * MAX_Y;

        for (int j = 0; j < VERTICIES_PER_BODY; j++) {

            maxX = allBodies[i].pxs[j] > maxX ? allBodies[i].pxs[j] : maxX;
    2cb8:	e5965020 	ldr	r5, [r6, #32]
    2cbc:	e1a00005 	mov	r0, r5
    2cc0:	e59d1000 	ldr	r1, [sp]
    2cc4:	eb0017db 	bl	8c38 <__aeabi_fcmpgt>
    2cc8:	e3500000 	cmp	r0, #0
    2ccc:	158d5000 	strne	r5, [sp]
            maxY = allBodies[i].pys[j] > maxY ? allBodies[i].pys[j] : maxY;
    2cd0:	e5964030 	ldr	r4, [r6, #48]	; 0x30
    2cd4:	e1a00004 	mov	r0, r4
    2cd8:	e59d1008 	ldr	r1, [sp, #8]
    2cdc:	eb0017d5 	bl	8c38 <__aeabi_fcmpgt>
    2ce0:	e3500000 	cmp	r0, #0
    2ce4:	158d4008 	strne	r4, [sp, #8]
            minX = allBodies[i].pxs[j] < minX ? allBodies[i].pxs[j] : minX;
    2ce8:	e1a00005 	mov	r0, r5
    2cec:	e59d1004 	ldr	r1, [sp, #4]
    2cf0:	eb0017be 	bl	8bf0 <__aeabi_fcmplt>
    2cf4:	e3500000 	cmp	r0, #0
    2cf8:	158d5004 	strne	r5, [sp, #4]
            minY = allBodies[i].pys[j] < minY ? allBodies[i].pys[j] : minY;
    2cfc:	e1a00004 	mov	r0, r4
    2d00:	e1a01009 	mov	r1, r9
    2d04:	eb0017b9 	bl	8bf0 <__aeabi_fcmplt>
    2d08:	e3500000 	cmp	r0, #0
    2d0c:	11a09004 	movne	r9, r4

            float dx = allBodies[i].pxs[j] - allBodies[i].cx;
    2d10:	e1a00005 	mov	r0, r5
    2d14:	e51b1264 	ldr	r1, [r11, #-612]	; 0xfffffd9c
    2d18:	eb001620 	bl	85a0 <__aeabi_fsub>
    2d1c:	e1a0a000 	mov	r10, r0
            float dy = allBodies[i].pys[j] - allBodies[i].cy;
    2d20:	e1a00004 	mov	r0, r4
    2d24:	e51b1260 	ldr	r1, [r11, #-608]	; 0xfffffda0
    2d28:	eb00161c 	bl	85a0 <__aeabi_fsub>
    2d2c:	e1a04000 	mov	r4, r0

            allBodies[i].vDistances[j] = sqrt(dx*dx+dy*dy);
    2d30:	e1a0000a 	mov	r0, r10
    2d34:	e1a0100a 	mov	r1, r10
    2d38:	eb0016c1 	bl	8844 <__aeabi_fmul>
    2d3c:	e1a05000 	mov	r5, r0
    2d40:	e1a00004 	mov	r0, r4
    2d44:	e1a01004 	mov	r1, r4
    2d48:	eb0016bd 	bl	8844 <__aeabi_fmul>
    2d4c:	e1a01000 	mov	r1, r0
    2d50:	e1a00005 	mov	r0, r5
    2d54:	eb001612 	bl	85a4 <__addsf3>
    2d58:	eb00142a 	bl	7e08 <__aeabi_f2d>
    2d5c:	eb0005c3 	bl	4470 <sqrt>
    2d60:	eb0015e4 	bl	84f8 <__aeabi_d2f>
    2d64:	e5860040 	str	r0, [r6, #64]	; 0x40
            allBodies[i].constThetas[j] = atan2(dy, dx);
    2d68:	e1a00004 	mov	r0, r4
    2d6c:	eb001425 	bl	7e08 <__aeabi_f2d>
    2d70:	e1a04000 	mov	r4, r0
    2d74:	e1a05001 	mov	r5, r1
    2d78:	e1a0000a 	mov	r0, r10
    2d7c:	eb001421 	bl	7e08 <__aeabi_f2d>
    2d80:	e1a02000 	mov	r2, r0
    2d84:	e1a03001 	mov	r3, r1
    2d88:	e1a00004 	mov	r0, r4
    2d8c:	e1a01005 	mov	r1, r5
    2d90:	eb000472 	bl	3f60 <atan2>
    2d94:	eb0015d7 	bl	84f8 <__aeabi_d2f>
    2d98:	e5860084 	str	r0, [r6, #132]	; 0x84
        float maxX = -1;
        float maxY = -1;
        float minX = M_PER_PX_RB * MAX_X;
        float minY = M_PER_PX_RB * MAX_Y;

        for (int j = 0; j < VERTICIES_PER_BODY; j++) {
    2d9c:	e2888001 	add	r8, r8, #1
    2da0:	e2866004 	add	r6, r6, #4
    2da4:	e3580004 	cmp	r8, #4
    2da8:	1affffc2 	bne	2cb8 <initRigidBodies+0x36c>
    2dac:	e59da008 	ldr	r10, [sp, #8]
            allBodies[i].vDistances[j] = sqrt(dx*dx+dy*dy);
            allBodies[i].constThetas[j] = atan2(dy, dx);

        }

        allBodies[i].maxPX = maxX * PX_PER_M_RB;
    2db0:	e59d0000 	ldr	r0, [sp]
    2db4:	eb0017a5 	bl	8c50 <__aeabi_f2iz>
    2db8:	e50b026c 	str	r0, [r11, #-620]	; 0xfffffd94
        allBodies[i].maxPY = maxY * PX_PER_M_RB;
    2dbc:	e1a0000a 	mov	r0, r10
    2dc0:	eb0017a2 	bl	8c50 <__aeabi_f2iz>
    2dc4:	e50b0268 	str	r0, [r11, #-616]	; 0xfffffd98
        allBodies[i].minPX = minX * PX_PER_M_RB;
    2dc8:	e59d0004 	ldr	r0, [sp, #4]
    2dcc:	eb00179f 	bl	8c50 <__aeabi_f2iz>
    2dd0:	e50b0274 	str	r0, [r11, #-628]	; 0xfffffd8c
        allBodies[i].minPY = minY * PX_PER_M_RB;
    2dd4:	e1a00009 	mov	r0, r9
    2dd8:	eb00179c 	bl	8c50 <__aeabi_f2iz>
    2ddc:	e50b0270 	str	r0, [r11, #-624]	; 0xfffffd90

        allBodies[i].mass = BODY_DENSITY * abs(runningAreaCount);
    2de0:	e59d0018 	ldr	r0, [sp, #24]
    2de4:	eb001799 	bl	8c50 <__aeabi_f2iz>
    2de8:	e3500000 	cmp	r0, #0
    2dec:	b2600000 	rsblt	r0, r0, #0
    2df0:	e1a00080 	lsl	r0, r0, #1
    2df4:	eb00165b 	bl	8768 <__aeabi_i2f>
    2df8:	e1a06000 	mov	r6, r0
    2dfc:	e50b0258 	str	r0, [r11, #-600]	; 0xfffffda8
        allBodies[i].I = allBodies[i].mass * (pow(maxX-minX, 2) + pow(maxY-minY, 2)) / 12.0;
    2e00:	e59d0000 	ldr	r0, [sp]
    2e04:	e59d1004 	ldr	r1, [sp, #4]
    2e08:	eb0015e4 	bl	85a0 <__aeabi_fsub>
    2e0c:	eb0013fd 	bl	7e08 <__aeabi_f2d>
    2e10:	e1a04000 	mov	r4, r0
    2e14:	e1a05001 	mov	r5, r1
    2e18:	e1a0000a 	mov	r0, r10
    2e1c:	e1a01009 	mov	r1, r9
    2e20:	eb0015de 	bl	85a0 <__aeabi_fsub>
    2e24:	eb0013f7 	bl	7e08 <__aeabi_f2d>
    2e28:	e1a08000 	mov	r8, r0
    2e2c:	e1a09001 	mov	r9, r1
    2e30:	e1a00006 	mov	r0, r6
    2e34:	eb0013f3 	bl	7e08 <__aeabi_f2d>
    2e38:	e1a06000 	mov	r6, r0
    2e3c:	e1a07001 	mov	r7, r1
    2e40:	e1a00004 	mov	r0, r4
    2e44:	e1a01005 	mov	r1, r5
    2e48:	e1a02004 	mov	r2, r4
    2e4c:	e1a03005 	mov	r3, r5
    2e50:	eb001419 	bl	7ebc <__aeabi_dmul>
    2e54:	e1a04000 	mov	r4, r0
    2e58:	e1a05001 	mov	r5, r1
    2e5c:	e1a00008 	mov	r0, r8
    2e60:	e1a01009 	mov	r1, r9
    2e64:	e1a02008 	mov	r2, r8
    2e68:	e1a03009 	mov	r3, r9
    2e6c:	eb001412 	bl	7ebc <__aeabi_dmul>
    2e70:	e1a02000 	mov	r2, r0
    2e74:	e1a03001 	mov	r3, r1
    2e78:	e1a00004 	mov	r0, r4
    2e7c:	e1a01005 	mov	r1, r5
    2e80:	eb001309 	bl	7aac <__adddf3>
    2e84:	e1a02000 	mov	r2, r0
    2e88:	e1a03001 	mov	r3, r1
    2e8c:	e1a00006 	mov	r0, r6
    2e90:	e1a01007 	mov	r1, r7
    2e94:	eb001408 	bl	7ebc <__aeabi_dmul>
    2e98:	e3a02000 	mov	r2, #0
    2e9c:	e3a03000 	mov	r3, #0
    2ea0:	e3443028 	movt	r3, #16424	; 0x4028
    2ea4:	eb0014a8 	bl	814c <__aeabi_ddiv>
    2ea8:	eb001592 	bl	84f8 <__aeabi_d2f>
    2eac:	e50b025c 	str	r0, [r11, #-604]	; 0xfffffda4

        xStepCount++;
    2eb0:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
    2eb4:	e2811001 	add	r1, r1, #1
    2eb8:	e58d1024 	str	r1, [sp, #36]	; 0x24
    int initY = stepY/2;

    int xStepCount = 0;
    int yStepCount = 0;

    for (int i = 0; i < NUM_BODIES; i++) {
    2ebc:	e59d2010 	ldr	r2, [sp, #16]
    2ec0:	e2822001 	add	r2, r2, #1
    2ec4:	e58d2010 	str	r2, [sp, #16]
    2ec8:	e3520006 	cmp	r2, #6
    2ecc:	1afffeb0 	bne	2994 <initRigidBodies+0x48>

        xStepCount++;

    }

}
    2ed0:	e28dd03c 	add	sp, sp, #60	; 0x3c
    2ed4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    2ed8:	0009a1ac 	.word	0x0009a1ac
    2edc:	0009aa34 	.word	0x0009aa34

00002ee0 <eraseBodies>:

void eraseBodies() {
    2ee0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
    2ee4:	e24dd008 	sub	sp, sp, #8
    2ee8:	e59f6070 	ldr	r6, [pc, #112]	; 2f60 <eraseBodies+0x80>

    for (int i = 0; i<NUM_BODIES; i++) {
    2eec:	e3a08000 	mov	r8, #0

    }

}

void eraseBodies() {
    2ef0:	e246900c 	sub	r9, r6, #12
    2ef4:	e3a0a003 	mov	r10, #3

    for (int i = 0; i<NUM_BODIES; i++) {
        for (int j = 1; j<VERTICIES_PER_BODY; j++) {
            drawBresenhamLine(eraseRBs[i].xs[j-1], eraseRBs[i].ys[j-1], eraseRBs[i].xs[j], eraseRBs[i].ys[j], BLACK);
    2ef8:	e1a07008 	mov	r7, r8
    2efc:	ea000012 	b	2f4c <eraseBodies+0x6c>
    2f00:	e5940000 	ldr	r0, [r4]
    2f04:	e5941010 	ldr	r1, [r4, #16]
    2f08:	e5942004 	ldr	r2, [r4, #4]
    2f0c:	e5943014 	ldr	r3, [r4, #20]
    2f10:	e58d7000 	str	r7, [sp]
    2f14:	ebfff56a 	bl	4c4 <drawBresenhamLine>
    2f18:	e2844004 	add	r4, r4, #4
}

void eraseBodies() {

    for (int i = 0; i<NUM_BODIES; i++) {
        for (int j = 1; j<VERTICIES_PER_BODY; j++) {
    2f1c:	e2555001 	subs	r5, r5, #1
    2f20:	1afffff6 	bne	2f00 <eraseBodies+0x20>
            drawBresenhamLine(eraseRBs[i].xs[j-1], eraseRBs[i].ys[j-1], eraseRBs[i].xs[j], eraseRBs[i].ys[j], BLACK);
        }
        drawBresenhamLine(eraseRBs[i].xs[VERTICIES_PER_BODY-1], eraseRBs[i].ys[VERTICIES_PER_BODY-1], eraseRBs[i].xs[0], eraseRBs[i].ys[0], BLACK);
    2f24:	e5960000 	ldr	r0, [r6]
    2f28:	e5961010 	ldr	r1, [r6, #16]
    2f2c:	e516200c 	ldr	r2, [r6, #-12]
    2f30:	e5963004 	ldr	r3, [r6, #4]
    2f34:	e58d7000 	str	r7, [sp]
    2f38:	ebfff561 	bl	4c4 <drawBresenhamLine>

}

void eraseBodies() {

    for (int i = 0; i<NUM_BODIES; i++) {
    2f3c:	e2888001 	add	r8, r8, #1
    2f40:	e2866020 	add	r6, r6, #32
    2f44:	e3580006 	cmp	r8, #6
    2f48:	0a000002 	beq	2f58 <eraseBodies+0x78>

    }

}

void eraseBodies() {
    2f4c:	e0894288 	add	r4, r9, r8, lsl #5
    2f50:	e1a0500a 	mov	r5, r10
    2f54:	eaffffe9 	b	2f00 <eraseBodies+0x20>
            drawBresenhamLine(eraseRBs[i].xs[j-1], eraseRBs[i].ys[j-1], eraseRBs[i].xs[j], eraseRBs[i].ys[j], BLACK);
        }
        drawBresenhamLine(eraseRBs[i].xs[VERTICIES_PER_BODY-1], eraseRBs[i].ys[VERTICIES_PER_BODY-1], eraseRBs[i].xs[0], eraseRBs[i].ys[0], BLACK);
    }   

}
    2f58:	e28dd008 	add	sp, sp, #8
    2f5c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
    2f60:	0009aa40 	.word	0x0009aa40

00002f64 <drawBodies>:

void drawBodies() {
    2f64:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2f68:	e24dd00c 	sub	sp, sp, #12
    2f6c:	e59f607c 	ldr	r6, [pc, #124]	; 2ff0 <drawBodies+0x8c>

    for (int i = 0; i<NUM_BODIES; i++) {
    2f70:	e3a08000 	mov	r8, #0
        drawBresenhamLine(eraseRBs[i].xs[VERTICIES_PER_BODY-1], eraseRBs[i].ys[VERTICIES_PER_BODY-1], eraseRBs[i].xs[0], eraseRBs[i].ys[0], BLACK);
    }   

}

void drawBodies() {
    2f74:	e246bf5a 	sub	r11, r6, #360	; 0x168
    2f78:	e3a09f5b 	mov	r9, #364	; 0x16c
    2f7c:	e3a0a003 	mov	r10, #3
    2f80:	ea000015 	b	2fdc <drawBodies+0x78>
    2f84:	e1a07006 	mov	r7, r6

    for (int i = 0; i<NUM_BODIES; i++) {
        for (int j = 1; j<VERTICIES_PER_BODY; j++) {
            drawBresenhamLine(allBodies[i].xs[j-1], allBodies[i].ys[j-1], allBodies[i].xs[j], allBodies[i].ys[j], allBodies[i].colour);
    2f88:	e5940000 	ldr	r0, [r4]
    2f8c:	e5941010 	ldr	r1, [r4, #16]
    2f90:	e5942004 	ldr	r2, [r4, #4]
    2f94:	e5943014 	ldr	r3, [r4, #20]
    2f98:	e1d6c0f0 	ldrsh	r12, [r6]
    2f9c:	e58dc000 	str	r12, [sp]
    2fa0:	ebfff547 	bl	4c4 <drawBresenhamLine>
    2fa4:	e2844004 	add	r4, r4, #4
}

void drawBodies() {

    for (int i = 0; i<NUM_BODIES; i++) {
        for (int j = 1; j<VERTICIES_PER_BODY; j++) {
    2fa8:	e2555001 	subs	r5, r5, #1
    2fac:	1afffff4 	bne	2f84 <drawBodies+0x20>
            drawBresenhamLine(allBodies[i].xs[j-1], allBodies[i].ys[j-1], allBodies[i].xs[j], allBodies[i].ys[j], allBodies[i].colour);
        }
        drawBresenhamLine(allBodies[i].xs[VERTICIES_PER_BODY-1], allBodies[i].ys[VERTICIES_PER_BODY-1], allBodies[i].xs[0], allBodies[i].ys[0], allBodies[i].colour);
    2fb0:	e516015c 	ldr	r0, [r6, #-348]	; 0xfffffea4
    2fb4:	e516114c 	ldr	r1, [r6, #-332]	; 0xfffffeb4
    2fb8:	e5162168 	ldr	r2, [r6, #-360]	; 0xfffffe98
    2fbc:	e5163158 	ldr	r3, [r6, #-344]	; 0xfffffea8
    2fc0:	e1d6c0f0 	ldrsh	r12, [r6]
    2fc4:	e58dc000 	str	r12, [sp]
    2fc8:	ebfff53d 	bl	4c4 <drawBresenhamLine>

}

void drawBodies() {

    for (int i = 0; i<NUM_BODIES; i++) {
    2fcc:	e2888001 	add	r8, r8, #1
    2fd0:	e2866f5b 	add	r6, r6, #364	; 0x16c
    2fd4:	e3580006 	cmp	r8, #6
    2fd8:	0a000002 	beq	2fe8 <drawBodies+0x84>
        drawBresenhamLine(eraseRBs[i].xs[VERTICIES_PER_BODY-1], eraseRBs[i].ys[VERTICIES_PER_BODY-1], eraseRBs[i].xs[0], eraseRBs[i].ys[0], BLACK);
    }   

}

void drawBodies() {
    2fdc:	e024b899 	mla	r4, r9, r8, r11
    2fe0:	e1a0500a 	mov	r5, r10
    2fe4:	eaffffe6 	b	2f84 <drawBodies+0x20>
            drawBresenhamLine(allBodies[i].xs[j-1], allBodies[i].ys[j-1], allBodies[i].xs[j], allBodies[i].ys[j], allBodies[i].colour);
        }
        drawBresenhamLine(allBodies[i].xs[VERTICIES_PER_BODY-1], allBodies[i].ys[VERTICIES_PER_BODY-1], allBodies[i].xs[0], allBodies[i].ys[0], allBodies[i].colour);
    }   

}
    2fe8:	e28dd00c 	add	sp, sp, #12
    2fec:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    2ff0:	0009a314 	.word	0x0009a314

00002ff4 <stepBodyPositions>:

void stepBodyPositions(int i) {
    2ff4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2ff8:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    2ffc:	e58d0030 	str	r0, [sp, #48]	; 0x30

    // Must also update positions of all verticies

    float pt = allBodies[i].theta;

    allBodies[i].theta += allBodies[i].omega * SPH_RB;
    3000:	e30977a4 	movw	r7, #38820	; 0x97a4
    3004:	e3407009 	movt	r7, #9
    3008:	e3a08f5b 	mov	r8, #364	; 0x16c
    300c:	e0080098 	mul	r8, r8, r0
    3010:	e0876008 	add	r6, r7, r8
    3014:	e5960a88 	ldr	r0, [r6, #2696]	; 0xa88
    3018:	eb00137a 	bl	7e08 <__aeabi_f2d>
    301c:	e1a04000 	mov	r4, r0
    3020:	e1a05001 	mov	r5, r1
    3024:	e5960a9c 	ldr	r0, [r6, #2716]	; 0xa9c
    3028:	eb001376 	bl	7e08 <__aeabi_f2d>
    302c:	e309299a 	movw	r2, #39322	; 0x999a
    3030:	e3492999 	movt	r2, #39321	; 0x9999
    3034:	e3093999 	movw	r3, #39321	; 0x9999
    3038:	e3433fc9 	movt	r3, #16329	; 0x3fc9
    303c:	eb00139e 	bl	7ebc <__aeabi_dmul>
    3040:	e1a02000 	mov	r2, r0
    3044:	e1a03001 	mov	r3, r1
    3048:	e1a00004 	mov	r0, r4
    304c:	e1a01005 	mov	r1, r5
    3050:	eb001295 	bl	7aac <__adddf3>
    3054:	eb001527 	bl	84f8 <__aeabi_d2f>
    3058:	e5860a88 	str	r0, [r6, #2696]	; 0xa88
    allBodies[i].cx += allBodies[i].v.x * SPH_RB;
    305c:	e5960a78 	ldr	r0, [r6, #2680]	; 0xa78
    3060:	eb001368 	bl	7e08 <__aeabi_f2d>
    3064:	e1a04000 	mov	r4, r0
    3068:	e1a05001 	mov	r5, r1
    306c:	e5960a58 	ldr	r0, [r6, #2648]	; 0xa58
    3070:	eb001364 	bl	7e08 <__aeabi_f2d>
    3074:	e309299a 	movw	r2, #39322	; 0x999a
    3078:	e3492999 	movt	r2, #39321	; 0x9999
    307c:	e3093999 	movw	r3, #39321	; 0x9999
    3080:	e3433fc9 	movt	r3, #16329	; 0x3fc9
    3084:	eb00138c 	bl	7ebc <__aeabi_dmul>
    3088:	e1a02000 	mov	r2, r0
    308c:	e1a03001 	mov	r3, r1
    3090:	e1a00004 	mov	r0, r4
    3094:	e1a01005 	mov	r1, r5
    3098:	eb001283 	bl	7aac <__adddf3>
    309c:	eb001515 	bl	84f8 <__aeabi_d2f>
    30a0:	e5860a78 	str	r0, [r6, #2680]	; 0xa78
    allBodies[i].cy += allBodies[i].v.y * SPH_RB;
    30a4:	e5960a7c 	ldr	r0, [r6, #2684]	; 0xa7c
    30a8:	eb001356 	bl	7e08 <__aeabi_f2d>
    30ac:	e1a04000 	mov	r4, r0
    30b0:	e1a05001 	mov	r5, r1
    30b4:	e5960a5c 	ldr	r0, [r6, #2652]	; 0xa5c
    30b8:	eb001352 	bl	7e08 <__aeabi_f2d>
    30bc:	e309299a 	movw	r2, #39322	; 0x999a
    30c0:	e3492999 	movt	r2, #39321	; 0x9999
    30c4:	e3093999 	movw	r3, #39321	; 0x9999
    30c8:	e3433fc9 	movt	r3, #16329	; 0x3fc9
    30cc:	eb00137a 	bl	7ebc <__aeabi_dmul>
    30d0:	e1a02000 	mov	r2, r0
    30d4:	e1a03001 	mov	r3, r1
    30d8:	e1a00004 	mov	r0, r4
    30dc:	e1a01005 	mov	r1, r5
    30e0:	eb001271 	bl	7aac <__adddf3>
    30e4:	eb001503 	bl	84f8 <__aeabi_d2f>
    30e8:	e5860a7c 	str	r0, [r6, #2684]	; 0xa7c
        drawBresenhamLine(allBodies[i].xs[VERTICIES_PER_BODY-1], allBodies[i].ys[VERTICIES_PER_BODY-1], allBodies[i].xs[0], allBodies[i].ys[0], allBodies[i].colour);
    }   

}

void stepBodyPositions(int i) {
    30ec:	e2877c0a 	add	r7, r7, #2560	; 0xa00
    30f0:	e2877008 	add	r7, r7, #8
    30f4:	e0879008 	add	r9, r7, r8
    30f8:	e59f344c 	ldr	r3, [pc, #1100]	; 354c <stepBodyPositions+0x558>
    30fc:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
    3100:	e0837281 	add	r7, r3, r1, lsl #5
    3104:	e3a02004 	mov	r2, #4
    3108:	e58d2004 	str	r2, [sp, #4]
    allBodies[i].theta += allBodies[i].omega * SPH_RB;
    allBodies[i].cx += allBodies[i].v.x * SPH_RB;
    allBodies[i].cy += allBodies[i].v.y * SPH_RB;

    // Revert last position application if any vert out of bounds.
    bool mustAdjust = false;
    310c:	e3a03000 	mov	r3, #0
    3110:	e58d301c 	str	r3, [sp, #28]

    float ndx, ndy, nt;
    for (int j = 0; j < VERTICIES_PER_BODY; j++) {

        if (allBodies[i].xs[j] > allBodies[i].maxPX) allBodies[i].maxPX = allBodies[i].xs[j];
    3114:	e30937a4 	movw	r3, #38820	; 0x97a4
    3118:	e3403009 	movt	r3, #9
    311c:	e3a0bf5b 	mov	r11, #364	; 0x16c
    3120:	e02b319b 	mla	r11, r11, r1, r3
        else if (allBodies[i].xs[j] < allBodies[i].minPX) allBodies[i].minPX = allBodies[i].xs[j];
    3124:	e28b1ea6 	add	r1, r11, #2656	; 0xa60
    3128:	e2811008 	add	r1, r1, #8
    312c:	e58d1028 	str	r1, [sp, #40]	; 0x28
        if (allBodies[i].ys[j] > allBodies[i].maxPY) allBodies[i].maxPY = allBodies[i].ys[j];
    3130:	e28b2ea7 	add	r2, r11, #2672	; 0xa70
    3134:	e2822004 	add	r2, r2, #4
    3138:	e58d2018 	str	r2, [sp, #24]
        else if (allBodies[i].ys[j] < allBodies[i].minPY) allBodies[i].minPY = allBodies[i].ys[j];
    313c:	e28b3ea6 	add	r3, r11, #2656	; 0xa60
    3140:	e283300c 	add	r3, r3, #12
    3144:	e58d302c 	str	r3, [sp, #44]	; 0x2c
        
        eraseRBs[i].xs[j] = allBodies[i].xs[j];
        eraseRBs[i].ys[j] = allBodies[i].ys[j];

        nt = allBodies[i].constThetas[j] + allBodies[i].theta;
    3148:	e28b1d2a 	add	r1, r11, #2688	; 0xa80
    314c:	e2811008 	add	r1, r1, #8
    3150:	e58d1020 	str	r1, [sp, #32]
        ndx = allBodies[i].vDistances[j] * cos(nt);
        ndy = allBodies[i].vDistances[j] * sin(nt);

        allBodies[i].pxs[j] = allBodies[i].cx + ndx;
    3154:	e28b2ea7 	add	r2, r11, #2672	; 0xa70
    3158:	e2822008 	add	r2, r2, #8
    315c:	e58d2008 	str	r2, [sp, #8]
        allBodies[i].pys[j] = allBodies[i].cy + ndy;
    3160:	e28b3ea7 	add	r3, r11, #2672	; 0xa70
    3164:	e283300c 	add	r3, r3, #12
    3168:	e58d300c 	str	r3, [sp, #12]
        allBodies[i].xs[j] = PX_PER_M_RB * allBodies[i].pxs[j];
        allBodies[i].ys[j] = PX_PER_M_RB * allBodies[i].pys[j];
        
        // Logic for necessary aadjustment if any
        if (allBodies[i].xs[j] < 0 ){
            allBodies[i].cx += 0 - M_PER_PX_RB * allBodies[i].xs[j];
    316c:	e58d9034 	str	r9, [sp, #52]	; 0x34
    3170:	e58db024 	str	r11, [sp, #36]	; 0x24
    3174:	e1a0b007 	mov	r11, r7
    3178:	e1a07009 	mov	r7, r9
        drawBresenhamLine(allBodies[i].xs[VERTICIES_PER_BODY-1], allBodies[i].ys[VERTICIES_PER_BODY-1], allBodies[i].xs[0], allBodies[i].ys[0], allBodies[i].colour);
    }   

}

void stepBodyPositions(int i) {
    317c:	e1a0a007 	mov	r10, r7
    bool mustAdjust = false;

    float ndx, ndy, nt;
    for (int j = 0; j < VERTICIES_PER_BODY; j++) {

        if (allBodies[i].xs[j] > allBodies[i].maxPX) allBodies[i].maxPX = allBodies[i].xs[j];
    3180:	e5973000 	ldr	r3, [r7]
    3184:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
    3188:	e5912a70 	ldr	r2, [r1, #2672]	; 0xa70
    318c:	e1530002 	cmp	r3, r2
    3190:	c5813a70 	strgt	r3, [r1, #2672]	; 0xa70
    3194:	ca000003 	bgt	31a8 <stepBodyPositions+0x1b4>
        else if (allBodies[i].xs[j] < allBodies[i].minPX) allBodies[i].minPX = allBodies[i].xs[j];
    3198:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
    319c:	e5912000 	ldr	r2, [r1]
    31a0:	e1530002 	cmp	r3, r2
    31a4:	b5813000 	strlt	r3, [r1]
        if (allBodies[i].ys[j] > allBodies[i].maxPY) allBodies[i].maxPY = allBodies[i].ys[j];
    31a8:	e59a3010 	ldr	r3, [r10, #16]
    31ac:	e59d1018 	ldr	r1, [sp, #24]
    31b0:	e5912000 	ldr	r2, [r1]
    31b4:	e1530002 	cmp	r3, r2
    31b8:	c5813000 	strgt	r3, [r1]
    31bc:	ca000003 	bgt	31d0 <stepBodyPositions+0x1dc>
        else if (allBodies[i].ys[j] < allBodies[i].minPY) allBodies[i].minPY = allBodies[i].ys[j];
    31c0:	e59d102c 	ldr	r1, [sp, #44]	; 0x2c
    31c4:	e5912000 	ldr	r2, [r1]
    31c8:	e1530002 	cmp	r3, r2
    31cc:	b5813000 	strlt	r3, [r1]
        
        eraseRBs[i].xs[j] = allBodies[i].xs[j];
    31d0:	e59a3000 	ldr	r3, [r10]
    31d4:	e58b3000 	str	r3, [r11]
        eraseRBs[i].ys[j] = allBodies[i].ys[j];
    31d8:	e59a3010 	ldr	r3, [r10, #16]
    31dc:	e58b3010 	str	r3, [r11, #16]

        nt = allBodies[i].constThetas[j] + allBodies[i].theta;
        ndx = allBodies[i].vDistances[j] * cos(nt);
    31e0:	e59a0040 	ldr	r0, [r10, #64]	; 0x40
    31e4:	eb001307 	bl	7e08 <__aeabi_f2d>
    31e8:	e1a08000 	mov	r8, r0
    31ec:	e1a09001 	mov	r9, r1
        else if (allBodies[i].ys[j] < allBodies[i].minPY) allBodies[i].minPY = allBodies[i].ys[j];
        
        eraseRBs[i].xs[j] = allBodies[i].xs[j];
        eraseRBs[i].ys[j] = allBodies[i].ys[j];

        nt = allBodies[i].constThetas[j] + allBodies[i].theta;
    31f0:	e59a0084 	ldr	r0, [r10, #132]	; 0x84
    31f4:	e59d2020 	ldr	r2, [sp, #32]
    31f8:	e5921000 	ldr	r1, [r2]
    31fc:	eb0014e8 	bl	85a4 <__addsf3>
        ndx = allBodies[i].vDistances[j] * cos(nt);
    3200:	eb001300 	bl	7e08 <__aeabi_f2d>
    3204:	e1a04000 	mov	r4, r0
    3208:	e1a05001 	mov	r5, r1
    320c:	eb00026f 	bl	3bd0 <cos>
    3210:	e1cd01f0 	strd	r0, [sp, #16]
        ndy = allBodies[i].vDistances[j] * sin(nt);
    3214:	e1a00004 	mov	r0, r4
    3218:	e1a01005 	mov	r1, r5
    321c:	eb00030f 	bl	3e60 <sin>
    3220:	e1a04000 	mov	r4, r0
    3224:	e1a05001 	mov	r5, r1
        
        eraseRBs[i].xs[j] = allBodies[i].xs[j];
        eraseRBs[i].ys[j] = allBodies[i].ys[j];

        nt = allBodies[i].constThetas[j] + allBodies[i].theta;
        ndx = allBodies[i].vDistances[j] * cos(nt);
    3228:	e1a00008 	mov	r0, r8
    322c:	e1a01009 	mov	r1, r9
    3230:	e1cd21d0 	ldrd	r2, [sp, #16]
    3234:	eb001320 	bl	7ebc <__aeabi_dmul>
    3238:	eb0014ae 	bl	84f8 <__aeabi_d2f>
    323c:	e1a01000 	mov	r1, r0
        ndy = allBodies[i].vDistances[j] * sin(nt);

        allBodies[i].pxs[j] = allBodies[i].cx + ndx;
    3240:	e59d3008 	ldr	r3, [sp, #8]
    3244:	e5930000 	ldr	r0, [r3]
    3248:	eb0014d5 	bl	85a4 <__addsf3>
    324c:	e1a06000 	mov	r6, r0
    3250:	e58a0020 	str	r0, [r10, #32]
        eraseRBs[i].xs[j] = allBodies[i].xs[j];
        eraseRBs[i].ys[j] = allBodies[i].ys[j];

        nt = allBodies[i].constThetas[j] + allBodies[i].theta;
        ndx = allBodies[i].vDistances[j] * cos(nt);
        ndy = allBodies[i].vDistances[j] * sin(nt);
    3254:	e1a00008 	mov	r0, r8
    3258:	e1a01009 	mov	r1, r9
    325c:	e1a02004 	mov	r2, r4
    3260:	e1a03005 	mov	r3, r5
    3264:	eb001314 	bl	7ebc <__aeabi_dmul>
    3268:	eb0014a2 	bl	84f8 <__aeabi_d2f>
    326c:	e1a01000 	mov	r1, r0

        allBodies[i].pxs[j] = allBodies[i].cx + ndx;
        allBodies[i].pys[j] = allBodies[i].cy + ndy;
    3270:	e59d200c 	ldr	r2, [sp, #12]
    3274:	e5920000 	ldr	r0, [r2]
    3278:	eb0014c9 	bl	85a4 <__addsf3>
    327c:	e1a04000 	mov	r4, r0
    3280:	e58a0030 	str	r0, [r10, #48]	; 0x30

        allBodies[i].xs[j] = PX_PER_M_RB * allBodies[i].pxs[j];
    3284:	e1a00006 	mov	r0, r6
    3288:	eb001670 	bl	8c50 <__aeabi_f2iz>
    328c:	e1a06000 	mov	r6, r0
    3290:	e58a0000 	str	r0, [r10]
        allBodies[i].ys[j] = PX_PER_M_RB * allBodies[i].pys[j];
    3294:	e1a00004 	mov	r0, r4
    3298:	eb00166c 	bl	8c50 <__aeabi_f2iz>
    329c:	e58a0010 	str	r0, [r10, #16]
        
        // Logic for necessary aadjustment if any
        if (allBodies[i].xs[j] < 0 ){
    32a0:	e3560000 	cmp	r6, #0
    32a4:	aa000016 	bge	3304 <stepBodyPositions+0x310>
            allBodies[i].cx += 0 - M_PER_PX_RB * allBodies[i].xs[j];
    32a8:	e59d3008 	ldr	r3, [sp, #8]
    32ac:	e5930000 	ldr	r0, [r3]
    32b0:	eb0012d4 	bl	7e08 <__aeabi_f2d>
    32b4:	e1a04000 	mov	r4, r0
    32b8:	e1a05001 	mov	r5, r1
    32bc:	e1a00006 	mov	r0, r6
    32c0:	eb0012c6 	bl	7de0 <__aeabi_i2d>
    32c4:	e1a02000 	mov	r2, r0
    32c8:	e1a03001 	mov	r3, r1
    32cc:	e3a00000 	mov	r0, #0
    32d0:	e3a01000 	mov	r1, #0
    32d4:	eb0011f3 	bl	7aa8 <__aeabi_dsub>
    32d8:	e1a02000 	mov	r2, r0
    32dc:	e1a03001 	mov	r3, r1
    32e0:	e1a00004 	mov	r0, r4
    32e4:	e1a01005 	mov	r1, r5
    32e8:	eb0011ef 	bl	7aac <__adddf3>
    32ec:	eb001481 	bl	84f8 <__aeabi_d2f>
    32f0:	e59d1008 	ldr	r1, [sp, #8]
    32f4:	e5810000 	str	r0, [r1]
            mustAdjust = true;
    32f8:	e3a02001 	mov	r2, #1
    32fc:	e58d201c 	str	r2, [sp, #28]
    3300:	ea000014 	b	3358 <stepBodyPositions+0x364>
        } else if (allBodies[i].xs[j] > (MAX_X-1)){
    3304:	e300313f 	movw	r3, #319	; 0x13f
    3308:	e1560003 	cmp	r6, r3
    330c:	da000011 	ble	3358 <stepBodyPositions+0x364>
            allBodies[i].cx -=  M_PER_PX_RB * (allBodies[i].xs[j] - MAX_X + 1);
    3310:	e59d1008 	ldr	r1, [sp, #8]
    3314:	e5910000 	ldr	r0, [r1]
    3318:	eb0012ba 	bl	7e08 <__aeabi_f2d>
    331c:	e1a04000 	mov	r4, r0
    3320:	e1a05001 	mov	r5, r1
    3324:	e2460f4f 	sub	r0, r6, #316	; 0x13c
    3328:	e2400003 	sub	r0, r0, #3
    332c:	eb0012ab 	bl	7de0 <__aeabi_i2d>
    3330:	e1a02000 	mov	r2, r0
    3334:	e1a03001 	mov	r3, r1
    3338:	e1a00004 	mov	r0, r4
    333c:	e1a01005 	mov	r1, r5
    3340:	eb0011d8 	bl	7aa8 <__aeabi_dsub>
    3344:	eb00146b 	bl	84f8 <__aeabi_d2f>
    3348:	e59d2008 	ldr	r2, [sp, #8]
    334c:	e5820000 	str	r0, [r2]
            mustAdjust = true;
    3350:	e3a03001 	mov	r3, #1
    3354:	e58d301c 	str	r3, [sp, #28]
        }
        if (allBodies[i].ys[j] < 0 ){
    3358:	e59a6010 	ldr	r6, [r10, #16]
    335c:	e3560000 	cmp	r6, #0
    3360:	aa000016 	bge	33c0 <stepBodyPositions+0x3cc>
            allBodies[i].cy += 0 - M_PER_PX_RB * allBodies[i].ys[j];
    3364:	e59d100c 	ldr	r1, [sp, #12]
    3368:	e5910000 	ldr	r0, [r1]
    336c:	eb0012a5 	bl	7e08 <__aeabi_f2d>
    3370:	e1a04000 	mov	r4, r0
    3374:	e1a05001 	mov	r5, r1
    3378:	e1a00006 	mov	r0, r6
    337c:	eb001297 	bl	7de0 <__aeabi_i2d>
    3380:	e1a02000 	mov	r2, r0
    3384:	e1a03001 	mov	r3, r1
    3388:	e3a00000 	mov	r0, #0
    338c:	e3a01000 	mov	r1, #0
    3390:	eb0011c4 	bl	7aa8 <__aeabi_dsub>
    3394:	e1a02000 	mov	r2, r0
    3398:	e1a03001 	mov	r3, r1
    339c:	e1a00004 	mov	r0, r4
    33a0:	e1a01005 	mov	r1, r5
    33a4:	eb0011c0 	bl	7aac <__adddf3>
    33a8:	eb001452 	bl	84f8 <__aeabi_d2f>
    33ac:	e59d200c 	ldr	r2, [sp, #12]
    33b0:	e5820000 	str	r0, [r2]
            mustAdjust = true;
    33b4:	e3a03001 	mov	r3, #1
    33b8:	e58d301c 	str	r3, [sp, #28]
    33bc:	ea000012 	b	340c <stepBodyPositions+0x418>
        } else if (allBodies[i].ys[j] > (MAX_Y-1)){
    33c0:	e35600ef 	cmp	r6, #239	; 0xef
    33c4:	da000010 	ble	340c <stepBodyPositions+0x418>
            allBodies[i].cy -= M_PER_PX_RB * (allBodies[i].ys[j] - MAX_Y + 1);
    33c8:	e59d100c 	ldr	r1, [sp, #12]
    33cc:	e5910000 	ldr	r0, [r1]
    33d0:	eb00128c 	bl	7e08 <__aeabi_f2d>
    33d4:	e1a04000 	mov	r4, r0
    33d8:	e1a05001 	mov	r5, r1
    33dc:	e24600ef 	sub	r0, r6, #239	; 0xef
    33e0:	eb00127e 	bl	7de0 <__aeabi_i2d>
    33e4:	e1a02000 	mov	r2, r0
    33e8:	e1a03001 	mov	r3, r1
    33ec:	e1a00004 	mov	r0, r4
    33f0:	e1a01005 	mov	r1, r5
    33f4:	eb0011ab 	bl	7aa8 <__aeabi_dsub>
    33f8:	eb00143e 	bl	84f8 <__aeabi_d2f>
    33fc:	e59d200c 	ldr	r2, [sp, #12]
    3400:	e5820000 	str	r0, [r2]
            mustAdjust = true;
    3404:	e3a03001 	mov	r3, #1
    3408:	e58d301c 	str	r3, [sp, #28]
    340c:	e2877004 	add	r7, r7, #4
    3410:	e28bb004 	add	r11, r11, #4

    // Revert last position application if any vert out of bounds.
    bool mustAdjust = false;

    float ndx, ndy, nt;
    for (int j = 0; j < VERTICIES_PER_BODY; j++) {
    3414:	e59d1004 	ldr	r1, [sp, #4]
    3418:	e2511001 	subs	r1, r1, #1
    341c:	e58d1004 	str	r1, [sp, #4]
    3420:	1affff55 	bne	317c <stepBodyPositions+0x188>
    3424:	e59d9034 	ldr	r9, [sp, #52]	; 0x34
            mustAdjust = true;
        }

    }

    for(int k = 0; mustAdjust && (k < VERTICIES_PER_BODY); k++) {
    3428:	e59d201c 	ldr	r2, [sp, #28]
    342c:	e3520000 	cmp	r2, #0
    3430:	0a000043 	beq	3544 <stepBodyPositions+0x550>
    3434:	e3a0a004 	mov	r10, #4
        nt = allBodies[i].constThetas[k] + allBodies[i].theta;
    3438:	e30937a4 	movw	r3, #38820	; 0x97a4
    343c:	e3403009 	movt	r3, #9
    3440:	e3a02f5b 	mov	r2, #364	; 0x16c
    3444:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
    3448:	e0233192 	mla	r3, r2, r1, r3
    344c:	e283bd2a 	add	r11, r3, #2688	; 0xa80
    3450:	e28bb008 	add	r11, r11, #8
        ndx = allBodies[i].vDistances[k] * cos(nt);
        ndy = allBodies[i].vDistances[k] * sin(nt);

        allBodies[i].pxs[k] = allBodies[i].cx + ndx;
    3454:	e2832ea7 	add	r2, r3, #2672	; 0xa70
    3458:	e2822008 	add	r2, r2, #8
    345c:	e58d2004 	str	r2, [sp, #4]
        allBodies[i].pys[k] = allBodies[i].cy + ndy;
    3460:	e2833ea7 	add	r3, r3, #2672	; 0xa70
    3464:	e283300c 	add	r3, r3, #12
    3468:	e58d3008 	str	r3, [sp, #8]
    346c:	e58db00c 	str	r11, [sp, #12]
    3470:	e1a0b009 	mov	r11, r9

    }

    for(int k = 0; mustAdjust && (k < VERTICIES_PER_BODY); k++) {
        nt = allBodies[i].constThetas[k] + allBodies[i].theta;
        ndx = allBodies[i].vDistances[k] * cos(nt);
    3474:	e59b0040 	ldr	r0, [r11, #64]	; 0x40
    3478:	eb001262 	bl	7e08 <__aeabi_f2d>
    347c:	e1a04000 	mov	r4, r0
    3480:	e1a05001 	mov	r5, r1
        }

    }

    for(int k = 0; mustAdjust && (k < VERTICIES_PER_BODY); k++) {
        nt = allBodies[i].constThetas[k] + allBodies[i].theta;
    3484:	e59b0084 	ldr	r0, [r11, #132]	; 0x84
    3488:	e59d300c 	ldr	r3, [sp, #12]
    348c:	e5931000 	ldr	r1, [r3]
    3490:	eb001443 	bl	85a4 <__addsf3>
        ndx = allBodies[i].vDistances[k] * cos(nt);
    3494:	eb00125b 	bl	7e08 <__aeabi_f2d>
    3498:	e1a06000 	mov	r6, r0
    349c:	e1a07001 	mov	r7, r1
    34a0:	eb0001ca 	bl	3bd0 <cos>
    34a4:	e1a08000 	mov	r8, r0
    34a8:	e1a09001 	mov	r9, r1
        ndy = allBodies[i].vDistances[k] * sin(nt);
    34ac:	e1a00006 	mov	r0, r6
    34b0:	e1a01007 	mov	r1, r7
    34b4:	eb000269 	bl	3e60 <sin>
    34b8:	e1a06000 	mov	r6, r0
    34bc:	e1a07001 	mov	r7, r1

    }

    for(int k = 0; mustAdjust && (k < VERTICIES_PER_BODY); k++) {
        nt = allBodies[i].constThetas[k] + allBodies[i].theta;
        ndx = allBodies[i].vDistances[k] * cos(nt);
    34c0:	e1a00004 	mov	r0, r4
    34c4:	e1a01005 	mov	r1, r5
    34c8:	e1a02008 	mov	r2, r8
    34cc:	e1a03009 	mov	r3, r9
    34d0:	eb001279 	bl	7ebc <__aeabi_dmul>
    34d4:	eb001407 	bl	84f8 <__aeabi_d2f>
    34d8:	e1a01000 	mov	r1, r0
        ndy = allBodies[i].vDistances[k] * sin(nt);

        allBodies[i].pxs[k] = allBodies[i].cx + ndx;
    34dc:	e59d2004 	ldr	r2, [sp, #4]
    34e0:	e5920000 	ldr	r0, [r2]
    34e4:	eb00142e 	bl	85a4 <__addsf3>
    34e8:	e1a08000 	mov	r8, r0
    34ec:	e58b0020 	str	r0, [r11, #32]
    }

    for(int k = 0; mustAdjust && (k < VERTICIES_PER_BODY); k++) {
        nt = allBodies[i].constThetas[k] + allBodies[i].theta;
        ndx = allBodies[i].vDistances[k] * cos(nt);
        ndy = allBodies[i].vDistances[k] * sin(nt);
    34f0:	e1a00004 	mov	r0, r4
    34f4:	e1a01005 	mov	r1, r5
    34f8:	e1a02006 	mov	r2, r6
    34fc:	e1a03007 	mov	r3, r7
    3500:	eb00126d 	bl	7ebc <__aeabi_dmul>
    3504:	eb0013fb 	bl	84f8 <__aeabi_d2f>
    3508:	e1a01000 	mov	r1, r0

        allBodies[i].pxs[k] = allBodies[i].cx + ndx;
        allBodies[i].pys[k] = allBodies[i].cy + ndy;
    350c:	e59d3008 	ldr	r3, [sp, #8]
    3510:	e5930000 	ldr	r0, [r3]
    3514:	eb001422 	bl	85a4 <__addsf3>
    3518:	e1a04000 	mov	r4, r0
    351c:	e58b0030 	str	r0, [r11, #48]	; 0x30

        allBodies[i].xs[k] = PX_PER_M_RB * allBodies[i].pxs[k];
    3520:	e1a00008 	mov	r0, r8
    3524:	eb0015c9 	bl	8c50 <__aeabi_f2iz>
    3528:	e58b0000 	str	r0, [r11]
        allBodies[i].ys[k] = PX_PER_M_RB * allBodies[i].pys[k];
    352c:	e1a00004 	mov	r0, r4
    3530:	eb0015c6 	bl	8c50 <__aeabi_f2iz>
    3534:	e58b0010 	str	r0, [r11, #16]
    3538:	e28bb004 	add	r11, r11, #4
            mustAdjust = true;
        }

    }

    for(int k = 0; mustAdjust && (k < VERTICIES_PER_BODY); k++) {
    353c:	e25aa001 	subs	r10, r10, #1
    3540:	1affffcb 	bne	3474 <stepBodyPositions+0x480>

        allBodies[i].xs[k] = PX_PER_M_RB * allBodies[i].pxs[k];
        allBodies[i].ys[k] = PX_PER_M_RB * allBodies[i].pys[k];
    }

}
    3544:	e28dd03c 	add	sp, sp, #60	; 0x3c
    3548:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    354c:	0009aa34 	.word	0x0009aa34

00003550 <stepBodyVelocities>:

void stepBodyVelocities(int i) {
    3550:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}

    allBodies[i].omega += allBodies[i].alpha * SPH_RB;
    3554:	e30937a4 	movw	r3, #38820	; 0x97a4
    3558:	e3403009 	movt	r3, #9
    355c:	e3a06f5b 	mov	r6, #364	; 0x16c
    3560:	e0263096 	mla	r6, r6, r0, r3
    3564:	e5960a9c 	ldr	r0, [r6, #2716]	; 0xa9c
    3568:	eb001226 	bl	7e08 <__aeabi_f2d>
    356c:	e1a04000 	mov	r4, r0
    3570:	e1a05001 	mov	r5, r1
    3574:	e5960aa0 	ldr	r0, [r6, #2720]	; 0xaa0
    3578:	eb001222 	bl	7e08 <__aeabi_f2d>
    357c:	e309299a 	movw	r2, #39322	; 0x999a
    3580:	e3492999 	movt	r2, #39321	; 0x9999
    3584:	e3093999 	movw	r3, #39321	; 0x9999
    3588:	e3433fc9 	movt	r3, #16329	; 0x3fc9
    358c:	eb00124a 	bl	7ebc <__aeabi_dmul>
    3590:	e1a02000 	mov	r2, r0
    3594:	e1a03001 	mov	r3, r1
    3598:	e1a00004 	mov	r0, r4
    359c:	e1a01005 	mov	r1, r5
    35a0:	eb001141 	bl	7aac <__adddf3>
    35a4:	eb0013d3 	bl	84f8 <__aeabi_d2f>
    35a8:	e5860a9c 	str	r0, [r6, #2716]	; 0xa9c
    allBodies[i].v.x += allBodies[i].a.x * SPH_RB;
    35ac:	e5960a58 	ldr	r0, [r6, #2648]	; 0xa58
    35b0:	eb001214 	bl	7e08 <__aeabi_f2d>
    35b4:	e1a04000 	mov	r4, r0
    35b8:	e1a05001 	mov	r5, r1
    35bc:	e5960a60 	ldr	r0, [r6, #2656]	; 0xa60
    35c0:	eb001210 	bl	7e08 <__aeabi_f2d>
    35c4:	e309299a 	movw	r2, #39322	; 0x999a
    35c8:	e3492999 	movt	r2, #39321	; 0x9999
    35cc:	e3093999 	movw	r3, #39321	; 0x9999
    35d0:	e3433fc9 	movt	r3, #16329	; 0x3fc9
    35d4:	eb001238 	bl	7ebc <__aeabi_dmul>
    35d8:	e1a02000 	mov	r2, r0
    35dc:	e1a03001 	mov	r3, r1
    35e0:	e1a00004 	mov	r0, r4
    35e4:	e1a01005 	mov	r1, r5
    35e8:	eb00112f 	bl	7aac <__adddf3>
    35ec:	eb0013c1 	bl	84f8 <__aeabi_d2f>
    35f0:	e1a07000 	mov	r7, r0
    35f4:	e5860a58 	str	r0, [r6, #2648]	; 0xa58
    allBodies[i].v.y += allBodies[i].a.y * SPH_RB;
    35f8:	e5960a5c 	ldr	r0, [r6, #2652]	; 0xa5c
    35fc:	eb001201 	bl	7e08 <__aeabi_f2d>
    3600:	e1a04000 	mov	r4, r0
    3604:	e1a05001 	mov	r5, r1
    3608:	e5960a64 	ldr	r0, [r6, #2660]	; 0xa64
    360c:	eb0011fd 	bl	7e08 <__aeabi_f2d>
    3610:	e309299a 	movw	r2, #39322	; 0x999a
    3614:	e3492999 	movt	r2, #39321	; 0x9999
    3618:	e3093999 	movw	r3, #39321	; 0x9999
    361c:	e3433fc9 	movt	r3, #16329	; 0x3fc9
    3620:	eb001225 	bl	7ebc <__aeabi_dmul>
    3624:	e1a02000 	mov	r2, r0
    3628:	e1a03001 	mov	r3, r1
    362c:	e1a00004 	mov	r0, r4
    3630:	e1a01005 	mov	r1, r5
    3634:	eb00111c 	bl	7aac <__adddf3>
    3638:	eb0013ae 	bl	84f8 <__aeabi_d2f>
    363c:	e1a04000 	mov	r4, r0
    3640:	e5860a5c 	str	r0, [r6, #2652]	; 0xa5c

    allBodies[i].colour = hueToRGB565(RB_HUE-sqrt(allBodies[i].v.x*allBodies[i].v.x + allBodies[i].v.y*allBodies[i].v.y)/VELOCITY_COLOUR_SENSITIVITY_RB);
    3644:	e1a01007 	mov	r1, r7
    3648:	e1a00007 	mov	r0, r7
    364c:	eb00147c 	bl	8844 <__aeabi_fmul>
    3650:	e1a05000 	mov	r5, r0
    3654:	e1a00004 	mov	r0, r4
    3658:	e1a01004 	mov	r1, r4
    365c:	eb001478 	bl	8844 <__aeabi_fmul>
    3660:	e1a01000 	mov	r1, r0
    3664:	e1a00005 	mov	r0, r5
    3668:	eb0013cd 	bl	85a4 <__addsf3>
    366c:	eb0011e5 	bl	7e08 <__aeabi_f2d>
    3670:	eb00037e 	bl	4470 <sqrt>
    3674:	e3a02000 	mov	r2, #0
    3678:	e3a03000 	mov	r3, #0
    367c:	e3443059 	movt	r3, #16473	; 0x4059
    3680:	eb0012b1 	bl	814c <__aeabi_ddiv>
    3684:	e1a02000 	mov	r2, r0
    3688:	e1a03001 	mov	r3, r1
    368c:	e3060666 	movw	r0, #26214	; 0x6666
    3690:	e3460666 	movt	r0, #26214	; 0x6666
    3694:	e3061666 	movw	r1, #26214	; 0x6666
    3698:	e3431fd6 	movt	r1, #16342	; 0x3fd6
    369c:	eb001101 	bl	7aa8 <__aeabi_dsub>
    36a0:	eb001394 	bl	84f8 <__aeabi_d2f>
    36a4:	ebfff2ec 	bl	25c <hueToRGB565>
    36a8:	e2866eb7 	add	r6, r6, #2928	; 0xb70
    36ac:	e1c600b0 	strh	r0, [r6]
    36b0:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}

000036b4 <checkCollisions>:

}

void checkCollisions(int i) {
    36b4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    36b8:	e24dd01c 	sub	sp, sp, #28
    36bc:	e1a04000 	mov	r4, r0

    int collisionCount = 0;
    int interCollisionCount = 0;

    checkSATInterBodyCollision(i);
    36c0:	ebfffa99 	bl	212c <checkSATInterBodyCollision>

    allBodies[i].colour = hueToRGB565(RB_HUE-sqrt(allBodies[i].v.x*allBodies[i].v.x + allBodies[i].v.y*allBodies[i].v.y)/VELOCITY_COLOUR_SENSITIVITY_RB);

}

void checkCollisions(int i) {
    36c4:	e3a02f5b 	mov	r2, #364	; 0x16c
    36c8:	e59f3258 	ldr	r3, [pc, #600]	; 3928 <checkCollisions+0x274>
    36cc:	e0223492 	mla	r2, r2, r4, r3
    36d0:	e58d2010 	str	r2, [sp, #16]
    36d4:	e1a08002 	mov	r8, r2
    36d8:	e1a07002 	mov	r7, r2
    int collisionCount = 0;
    int interCollisionCount = 0;

    checkSATInterBodyCollision(i);
    
    for (int j = 0; j < VERTICIES_PER_BODY; j++) {
    36dc:	e3a05000 	mov	r5, #0

}

void checkCollisions(int i) {

    int collisionCount = 0;
    36e0:	e58d5000 	str	r5, [sp]
        // }

        // Container collision handling
        if(allBodies[i].xs[j] >= (MAX_X-1) || allBodies[i].xs[j] <= 0) {
            
            if((allBodies[i].v.x > 0) == (allBodies[i].xs[j] > 0)) {
    36e4:	e30937a4 	movw	r3, #38820	; 0x97a4
    36e8:	e3403009 	movt	r3, #9
    36ec:	e3a06f5b 	mov	r6, #364	; 0x16c
    36f0:	e0263496 	mla	r6, r6, r4, r3
    36f4:	e2863ea5 	add	r3, r6, #2640	; 0xa50
    36f8:	e2833008 	add	r3, r3, #8
    36fc:	e58d3008 	str	r3, [sp, #8]
    3700:	e3a04000 	mov	r4, #0
                allBodies[i].v.x = -allBodies[i].v.x * ELASTICITY_RB;
            }

            allBodies[i].extForces[j].force.x = -allBodies[i].mass * allBodies[i].a.x;
    3704:	e2863d2a 	add	r3, r6, #2688	; 0xa80
    3708:	e2833004 	add	r3, r3, #4
    370c:	e58d300c 	str	r3, [sp, #12]
            continue;
        }
        
        if (setActive) {
            //if((allBodies[i].omega > 0) == (allBodies[i].alpha > 0)) allBodies[i].omega = -allBodies[i].omega * ELASTICITY_RB;
            allBodies[i].omega = 0;
    3710:	e2863ea9 	add	r3, r6, #2704	; 0xa90
    3714:	e283300c 	add	r3, r3, #12
    3718:	e58d3014 	str	r3, [sp, #20]

    allBodies[i].colour = hueToRGB565(RB_HUE-sqrt(allBodies[i].v.x*allBodies[i].v.x + allBodies[i].v.y*allBodies[i].v.y)/VELOCITY_COLOUR_SENSITIVITY_RB);

}

void checkCollisions(int i) {
    371c:	e58d7004 	str	r7, [sp, #4]
        //     setActive = true;
        //     collisionCount++;
        // }

        // Container collision handling
        if(allBodies[i].xs[j] >= (MAX_X-1) || allBodies[i].xs[j] <= 0) {
    3720:	e597b000 	ldr	r11, [r7]
    3724:	e24b2001 	sub	r2, r11, #1
    3728:	e300313d 	movw	r3, #317	; 0x13d
    372c:	e1520003 	cmp	r2, r3
    
    for (int j = 0; j < VERTICIES_PER_BODY; j++) {

        //interCollisionCount += checkInterBodyCollision(i, j, VERTICIES_PER_BODY+interCollisionCount);

        bool setActive = false;
    3730:	93a0a000 	movls	r10, #0
        //     setActive = true;
        //     collisionCount++;
        // }

        // Container collision handling
        if(allBodies[i].xs[j] >= (MAX_X-1) || allBodies[i].xs[j] <= 0) {
    3734:	9a000023 	bls	37c8 <checkCollisions+0x114>
            
            if((allBodies[i].v.x > 0) == (allBodies[i].xs[j] > 0)) {
    3738:	e59d3008 	ldr	r3, [sp, #8]
    373c:	e593a000 	ldr	r10, [r3]
    3740:	e35b0000 	cmp	r11, #0
    3744:	d3a0b000 	movle	r11, #0
    3748:	c3a0b001 	movgt	r11, #1
    374c:	e3a09001 	mov	r9, #1
    3750:	e1a0000a 	mov	r0, r10
    3754:	e1a01004 	mov	r1, r4
    3758:	eb001536 	bl	8c38 <__aeabi_fcmpgt>
    375c:	e3500000 	cmp	r0, #0
    3760:	03a09000 	moveq	r9, #0
    3764:	e2299001 	eor	r9, r9, #1
    3768:	e2099001 	and	r9, r9, #1
    376c:	e159000b 	cmp	r9, r11
    3770:	0a000009 	beq	379c <checkCollisions+0xe8>
                allBodies[i].v.x = -allBodies[i].v.x * ELASTICITY_RB;
    3774:	e28a0102 	add	r0, r10, #-2147483648	; 0x80000000
    3778:	eb0011a2 	bl	7e08 <__aeabi_f2d>
    377c:	e309299a 	movw	r2, #39322	; 0x999a
    3780:	e3492999 	movt	r2, #39321	; 0x9999
    3784:	e3093999 	movw	r3, #39321	; 0x9999
    3788:	e3433fd9 	movt	r3, #16345	; 0x3fd9
    378c:	eb0011ca 	bl	7ebc <__aeabi_dmul>
    3790:	eb001358 	bl	84f8 <__aeabi_d2f>
    3794:	e59d3008 	ldr	r3, [sp, #8]
    3798:	e5830000 	str	r0, [r3]
            }

            allBodies[i].extForces[j].force.x = -allBodies[i].mass * allBodies[i].a.x;
    379c:	e59d300c 	ldr	r3, [sp, #12]
    37a0:	e5930000 	ldr	r0, [r3]
    37a4:	e2800102 	add	r0, r0, #-2147483648	; 0x80000000
    37a8:	e5961a60 	ldr	r1, [r6, #2656]	; 0xa60
    37ac:	eb001424 	bl	8844 <__aeabi_fmul>
    37b0:	e58800a8 	str	r0, [r8, #168]	; 0xa8
            setActive = true;
            collisionCount++;
    37b4:	e59d3000 	ldr	r3, [sp]
    37b8:	e2833001 	add	r3, r3, #1
    37bc:	e58d3000 	str	r3, [sp]
            if((allBodies[i].v.x > 0) == (allBodies[i].xs[j] > 0)) {
                allBodies[i].v.x = -allBodies[i].v.x * ELASTICITY_RB;
            }

            allBodies[i].extForces[j].force.x = -allBodies[i].mass * allBodies[i].a.x;
            setActive = true;
    37c0:	e3a0a001 	mov	r10, #1
    37c4:	eaffffff 	b	37c8 <checkCollisions+0x114>
            collisionCount++;

        }
        if(allBodies[i].ys[j] >= (MAX_Y-1) || allBodies[i].ys[j] <= 0) {
    37c8:	e59d3004 	ldr	r3, [sp, #4]
    37cc:	e593b010 	ldr	r11, [r3, #16]
    37d0:	e24b3001 	sub	r3, r11, #1
    37d4:	e35300ed 	cmp	r3, #237	; 0xed
    37d8:	9a000023 	bls	386c <checkCollisions+0x1b8>

            if((allBodies[i].v.y > 0) == (allBodies[i].ys[j] >= (MAX_Y-1))) {
    37dc:	e596aa5c 	ldr	r10, [r6, #2652]	; 0xa5c
    37e0:	e35b00ee 	cmp	r11, #238	; 0xee
    37e4:	d3a0b000 	movle	r11, #0
    37e8:	c3a0b001 	movgt	r11, #1
    37ec:	e3a09001 	mov	r9, #1
    37f0:	e1a0000a 	mov	r0, r10
    37f4:	e1a01004 	mov	r1, r4
    37f8:	eb00150e 	bl	8c38 <__aeabi_fcmpgt>
    37fc:	e3500000 	cmp	r0, #0
    3800:	03a09000 	moveq	r9, #0
    3804:	e2299001 	eor	r9, r9, #1
    3808:	e2099001 	and	r9, r9, #1
    380c:	e159000b 	cmp	r9, r11
    3810:	0a000008 	beq	3838 <checkCollisions+0x184>
                allBodies[i].v.y = -allBodies[i].v.y * ELASTICITY_RB;
    3814:	e28a0102 	add	r0, r10, #-2147483648	; 0x80000000
    3818:	eb00117a 	bl	7e08 <__aeabi_f2d>
    381c:	e309299a 	movw	r2, #39322	; 0x999a
    3820:	e3492999 	movt	r2, #39321	; 0x9999
    3824:	e3093999 	movw	r3, #39321	; 0x9999
    3828:	e3433fd9 	movt	r3, #16345	; 0x3fd9
    382c:	eb0011a2 	bl	7ebc <__aeabi_dmul>
    3830:	eb001330 	bl	84f8 <__aeabi_d2f>
    3834:	e5860a5c 	str	r0, [r6, #2652]	; 0xa5c
            }

            allBodies[i].extForces[j].force.y = -allBodies[i].mass * allBodies[i].a.y;
    3838:	e59d300c 	ldr	r3, [sp, #12]
    383c:	e5930000 	ldr	r0, [r3]
    3840:	e2800102 	add	r0, r0, #-2147483648	; 0x80000000
    3844:	e5961a64 	ldr	r1, [r6, #2660]	; 0xa64
    3848:	eb0013fd 	bl	8844 <__aeabi_fmul>
    384c:	e58800ac 	str	r0, [r8, #172]	; 0xac
            setActive = true;
            collisionCount++;
    3850:	e59d3000 	ldr	r3, [sp]
    3854:	e2833001 	add	r3, r3, #1
    3858:	e58d3000 	str	r3, [sp]

        }

        if (collisionCount > 1) {
    385c:	e3530001 	cmp	r3, #1
            if((allBodies[i].v.y > 0) == (allBodies[i].ys[j] >= (MAX_Y-1))) {
                allBodies[i].v.y = -allBodies[i].v.y * ELASTICITY_RB;
            }

            allBodies[i].extForces[j].force.y = -allBodies[i].mass * allBodies[i].a.y;
            setActive = true;
    3860:	d3a0a001 	movle	r10, #1
            collisionCount++;

        }

        if (collisionCount > 1) {
    3864:	da00001a 	ble	38d4 <checkCollisions+0x220>
    3868:	ea000002 	b	3878 <checkCollisions+0x1c4>
    386c:	e59d3000 	ldr	r3, [sp]
    3870:	e3530001 	cmp	r3, #1
    3874:	da000012 	ble	38c4 <checkCollisions+0x210>
            for(int k = 0; k <= j; k++){
    3878:	e3550000 	cmp	r5, #0
    387c:	ba000009 	blt	38a8 <checkCollisions+0x1f4>
    3880:	e59d3010 	ldr	r3, [sp, #16]
    3884:	e3a02000 	mov	r2, #0
                allBodies[i].extForces[k].force.x = 0;
                allBodies[i].extForces[k].force.y = 0;
                allBodies[i].extForces[k].isActive = false;
    3888:	e1a01002 	mov	r1, r2

        }

        if (collisionCount > 1) {
            for(int k = 0; k <= j; k++){
                allBodies[i].extForces[k].force.x = 0;
    388c:	e58340a8 	str	r4, [r3, #168]	; 0xa8
                allBodies[i].extForces[k].force.y = 0;
    3890:	e58340ac 	str	r4, [r3, #172]	; 0xac
                allBodies[i].extForces[k].isActive = false;
    3894:	e5c310b0 	strb	r1, [r3, #176]	; 0xb0
            collisionCount++;

        }

        if (collisionCount > 1) {
            for(int k = 0; k <= j; k++){
    3898:	e2822001 	add	r2, r2, #1
    389c:	e2833014 	add	r3, r3, #20
    38a0:	e1520005 	cmp	r2, r5
    38a4:	dafffff8 	ble	388c <checkCollisions+0x1d8>
                allBodies[i].extForces[k].force.x = 0;
                allBodies[i].extForces[k].force.y = 0;
                allBodies[i].extForces[k].isActive = false;
            }
            allBodies[i].alpha = 0;
    38a8:	e5864aa0 	str	r4, [r6, #2720]	; 0xaa0
            allBodies[i].v.x = 0;
    38ac:	e59d3008 	ldr	r3, [sp, #8]
    38b0:	e5834000 	str	r4, [r3]
            allBodies[i].v.y = 0;
    38b4:	e5864a5c 	str	r4, [r6, #2652]	; 0xa5c
            allBodies[i].a.x = 0;
    38b8:	e5864a60 	str	r4, [r6, #2656]	; 0xa60
            allBodies[i].a.y = 0;
    38bc:	e5864a64 	str	r4, [r6, #2660]	; 0xa64
            continue;
    38c0:	ea000011 	b	390c <checkCollisions+0x258>
        }
        
        if (setActive) {
    38c4:	e35a0000 	cmp	r10, #0
            //if((allBodies[i].omega > 0) == (allBodies[i].alpha > 0)) allBodies[i].omega = -allBodies[i].omega * ELASTICITY_RB;
            allBodies[i].omega = 0;
            allBodies[i].extForces[j].r.x = allBodies[i].pxs[j] - allBodies[i].cx;
            allBodies[i].extForces[j].r.y = allBodies[i].pys[j] - allBodies[i].cy;
        } else {
            allBodies[i].extForces[j].force.x = 0;
    38c8:	058840a8 	streq	r4, [r8, #168]	; 0xa8
            allBodies[i].extForces[j].force.y = 0;
    38cc:	058840ac 	streq	r4, [r8, #172]	; 0xac
            allBodies[i].a.x = 0;
            allBodies[i].a.y = 0;
            continue;
        }
        
        if (setActive) {
    38d0:	0a00000c 	beq	3908 <checkCollisions+0x254>
            //if((allBodies[i].omega > 0) == (allBodies[i].alpha > 0)) allBodies[i].omega = -allBodies[i].omega * ELASTICITY_RB;
            allBodies[i].omega = 0;
    38d4:	e59d3014 	ldr	r3, [sp, #20]
    38d8:	e5834000 	str	r4, [r3]
            allBodies[i].extForces[j].r.x = allBodies[i].pxs[j] - allBodies[i].cx;
    38dc:	e59d3004 	ldr	r3, [sp, #4]
    38e0:	e5930020 	ldr	r0, [r3, #32]
    38e4:	e5961a78 	ldr	r1, [r6, #2680]	; 0xa78
    38e8:	eb00132c 	bl	85a0 <__aeabi_fsub>
    38ec:	e58800a0 	str	r0, [r8, #160]	; 0xa0
            allBodies[i].extForces[j].r.y = allBodies[i].pys[j] - allBodies[i].cy;
    38f0:	e59d3004 	ldr	r3, [sp, #4]
    38f4:	e5930030 	ldr	r0, [r3, #48]	; 0x30
    38f8:	e5961a7c 	ldr	r1, [r6, #2684]	; 0xa7c
    38fc:	eb001327 	bl	85a0 <__aeabi_fsub>
    3900:	e58800a4 	str	r0, [r8, #164]	; 0xa4
    3904:	eaffffff 	b	3908 <checkCollisions+0x254>
        } else {
            allBodies[i].extForces[j].force.x = 0;
            allBodies[i].extForces[j].force.y = 0;
        }
        allBodies[i].extForces[j].isActive = setActive;
    3908:	e5c8a0b0 	strb	r10, [r8, #176]	; 0xb0
    int collisionCount = 0;
    int interCollisionCount = 0;

    checkSATInterBodyCollision(i);
    
    for (int j = 0; j < VERTICIES_PER_BODY; j++) {
    390c:	e2855001 	add	r5, r5, #1
    3910:	e2877004 	add	r7, r7, #4
    3914:	e2888014 	add	r8, r8, #20
    3918:	e3550004 	cmp	r5, #4
    391c:	1affff7e 	bne	371c <checkCollisions+0x68>
        }
        allBodies[i].extForces[j].isActive = setActive;

    }

}
    3920:	e28dd01c 	add	sp, sp, #28
    3924:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    3928:	0009a1ac 	.word	0x0009a1ac

0000392c <timeStepRBForceApplication>:

void timeStepRBForceApplication() {
    392c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    3930:	e24dd00c 	sub	sp, sp, #12
    3934:	e30937a4 	movw	r3, #38820	; 0x97a4
    3938:	e3403009 	movt	r3, #9
    393c:	e2838e9e 	add	r8, r3, #2528	; 0x9e0
    3940:	e2888004 	add	r8, r8, #4
    3944:	e283bc0a 	add	r11, r3, #2560	; 0xa00
    3948:	e28bb008 	add	r11, r11, #8

    // model collisions with normal forces.
    for (int i = 0; i < NUM_BODIES; i++) {
    394c:	e3a0a000 	mov	r10, #0
        
        for (int j = 0; j < NUM_BODIES; j++) bookMarkedCollisions[i][j] = false;
    3950:	e1a0900a 	mov	r9, r10
    3954:	ea000024 	b	39ec <timeStepRBForceApplication+0xc0>
        allBodies[i].a.x = 0;
        allBodies[i].a.y = G;
        
        float torque = 0;
        for (int j = 0; j < MAX_EXTERNAL_FORCES; j++) {
            if (!allBodies[i].extForces[j].isActive) continue;
    3958:	e5d430b0 	ldrb	r3, [r4, #176]	; 0xb0
    395c:	e3530000 	cmp	r3, #0
    3960:	0a00000d 	beq	399c <timeStepRBForceApplication+0x70>
            // if (j >= VERTICIES_PER_BODY) {
                // allBodies[i].a.x += allBodies[i].extForces[j].force.x / allBodies[i].mass;
                // allBodies[i].a.y += allBodies[i].extForces[j].force.y / allBodies[i].mass;
            // }
            torque += allBodies[i].extForces[j].r.x * allBodies[i].extForces[j].force.y - allBodies[i].extForces[j].r.y * allBodies[i].extForces[j].force.x;
    3964:	e59400a0 	ldr	r0, [r4, #160]	; 0xa0
    3968:	e59410ac 	ldr	r1, [r4, #172]	; 0xac
    396c:	eb0013b4 	bl	8844 <__aeabi_fmul>
    3970:	e1a07000 	mov	r7, r0
    3974:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
    3978:	e59410a8 	ldr	r1, [r4, #168]	; 0xa8
    397c:	eb0013b0 	bl	8844 <__aeabi_fmul>
    3980:	e1a01000 	mov	r1, r0
    3984:	e1a00007 	mov	r0, r7
    3988:	eb001304 	bl	85a0 <__aeabi_fsub>
    398c:	e1a01000 	mov	r1, r0
    3990:	e1a00006 	mov	r0, r6
    3994:	eb001302 	bl	85a4 <__addsf3>
    3998:	e1a06000 	mov	r6, r0
    399c:	e2844014 	add	r4, r4, #20

        allBodies[i].a.x = 0;
        allBodies[i].a.y = G;
        
        float torque = 0;
        for (int j = 0; j < MAX_EXTERNAL_FORCES; j++) {
    39a0:	e2555001 	subs	r5, r5, #1
    39a4:	1affffeb 	bne	3958 <timeStepRBForceApplication+0x2c>
                // allBodies[i].a.y += allBodies[i].extForces[j].force.y / allBodies[i].mass;
            // }
            torque += allBodies[i].extForces[j].r.x * allBodies[i].extForces[j].force.y - allBodies[i].extForces[j].r.y * allBodies[i].extForces[j].force.x;
        }
        
        allBodies[i].alpha = torque / allBodies[i].I;
    39a8:	e1a00006 	mov	r0, r6
    39ac:	e59d2004 	ldr	r2, [sp, #4]
    39b0:	e5921078 	ldr	r1, [r2, #120]	; 0x78
    39b4:	eb001408 	bl	89dc <__aeabi_fdiv>
    39b8:	e59d3004 	ldr	r3, [sp, #4]
    39bc:	e5830098 	str	r0, [r3, #152]	; 0x98
        checkCollisions(i);
    39c0:	e1a0000a 	mov	r0, r10
    39c4:	ebffff3a 	bl	36b4 <checkCollisions>
        stepBodyVelocities(i);
    39c8:	e1a0000a 	mov	r0, r10
    39cc:	ebfffedf 	bl	3550 <stepBodyVelocities>
        stepBodyPositions(i);
    39d0:	e1a0000a 	mov	r0, r10
    39d4:	ebfffd86 	bl	2ff4 <stepBodyPositions>
}

void timeStepRBForceApplication() {

    // model collisions with normal forces.
    for (int i = 0; i < NUM_BODIES; i++) {
    39d8:	e28aa001 	add	r10, r10, #1
    39dc:	e2888006 	add	r8, r8, #6
    39e0:	e28bbf5b 	add	r11, r11, #364	; 0x16c
    39e4:	e35a0006 	cmp	r10, #6
    39e8:	0a000011 	beq	3a34 <timeStepRBForceApplication+0x108>
        
        for (int j = 0; j < NUM_BODIES; j++) bookMarkedCollisions[i][j] = false;
    39ec:	e5c89000 	strb	r9, [r8]
    39f0:	e5c89001 	strb	r9, [r8, #1]
    39f4:	e5c89002 	strb	r9, [r8, #2]
    39f8:	e5c89003 	strb	r9, [r8, #3]
    39fc:	e5c89004 	strb	r9, [r8, #4]
    3a00:	e5c89005 	strb	r9, [r8, #5]

    }

}

void timeStepRBForceApplication() {
    3a04:	e58db004 	str	r11, [sp, #4]
    // model collisions with normal forces.
    for (int i = 0; i < NUM_BODIES; i++) {
        
        for (int j = 0; j < NUM_BODIES; j++) bookMarkedCollisions[i][j] = false;

        allBodies[i].a.x = 0;
    3a08:	e3a02000 	mov	r2, #0
    3a0c:	e58b2058 	str	r2, [r11, #88]	; 0x58
        allBodies[i].a.y = G;
    3a10:	e3a03000 	mov	r3, #0
    3a14:	e34430c0 	movt	r3, #16576	; 0x40c0
    3a18:	e58b305c 	str	r3, [r11, #92]	; 0x5c

    }

}

void timeStepRBForceApplication() {
    3a1c:	e3a02f5b 	mov	r2, #364	; 0x16c
    3a20:	e59f3014 	ldr	r3, [pc, #20]	; 3a3c <timeStepRBForceApplication+0x110>
    3a24:	e0243a92 	mla	r4, r2, r10, r3
    3a28:	e3a0500a 	mov	r5, #10
        for (int j = 0; j < NUM_BODIES; j++) bookMarkedCollisions[i][j] = false;

        allBodies[i].a.x = 0;
        allBodies[i].a.y = G;
        
        float torque = 0;
    3a2c:	e3a06000 	mov	r6, #0
    3a30:	eaffffc8 	b	3958 <timeStepRBForceApplication+0x2c>
        stepBodyVelocities(i);
        stepBodyPositions(i);

    }

}
    3a34:	e28dd00c 	add	sp, sp, #12
    3a38:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    3a3c:	0009a1ac 	.word	0x0009a1ac

00003a40 <buttonClickHandler>:

bool isFluidSim = true;
bool lastFluidSim = true;

void buttonClickHandler() {
    isFluidSim = !isFluidSim;
    3a40:	e3093420 	movw	r3, #37920	; 0x9420
    3a44:	e3403000 	movt	r3, #0
    3a48:	e5d32168 	ldrb	r2, [r3, #360]	; 0x168
    3a4c:	e2222001 	eor	r2, r2, #1
    3a50:	e5c32168 	strb	r2, [r3, #360]	; 0x168
    3a54:	e12fff1e 	bx	lr

00003a58 <__cs3_isr_irq>:
  *((volatile int*) 0xFFFEC100) = 1;

  *((volatile int*) 0xFFFED000) = 1;
}

void __attribute__ ((interrupt)) __cs3_isr_irq(void){
    3a58:	e24ee004 	sub	lr, lr, #4
    3a5c:	e92d500f 	push	{r0, r1, r2, r3, r12, lr}
  int interruptID = *((volatile int*) 0xFFFEC10C);
    3a60:	e3e03a13 	mvn	r3, #77824	; 0x13000
    3a64:	e5133ef3 	ldr	r3, [r3, #-3827]	; 0xfffff10d

  if(interruptID != 79) while(1);
    3a68:	e353004f 	cmp	r3, #79	; 0x4f
    3a6c:	0a000000 	beq	3a74 <__cs3_isr_irq+0x1c>
    3a70:	eafffffe 	b	3a70 <__cs3_isr_irq+0x18>
    //   prevmData = mData;
  updateMouse();
    3a74:	ebfff2d5 	bl	5d0 <updateMouse>
  if((mData.x >= BUTTON_X) && (mData.x < (BUTTON_X + 15)) && (mData.y >= BUTTON_Y) && (mData.y < (BUTTON_Y + 12))){
    3a78:	e30939e4 	movw	r3, #39396	; 0x99e4
    3a7c:	e3403000 	movt	r3, #0
    3a80:	e5933004 	ldr	r3, [r3, #4]
    3a84:	e2433f4b 	sub	r3, r3, #300	; 0x12c
    3a88:	e2433001 	sub	r3, r3, #1
    3a8c:	e353000e 	cmp	r3, #14
    3a90:	8a000011 	bhi	3adc <__cs3_isr_irq+0x84>
    3a94:	e30939e4 	movw	r3, #39396	; 0x99e4
    3a98:	e3403000 	movt	r3, #0
    3a9c:	e5933008 	ldr	r3, [r3, #8]
    3aa0:	e3530003 	cmp	r3, #3
    3aa4:	da00000c 	ble	3adc <__cs3_isr_irq+0x84>
    3aa8:	e353000f 	cmp	r3, #15
    3aac:	ca00000a 	bgt	3adc <__cs3_isr_irq+0x84>
    if(!prevmData.left && mData.left){
    3ab0:	e30b379c 	movw	r3, #47004	; 0xb79c
    3ab4:	e3403009 	movt	r3, #9
    3ab8:	e5533ca0 	ldrb	r3, [r3, #-3232]	; 0xfffff360
    3abc:	e3530000 	cmp	r3, #0
    3ac0:	1a000005 	bne	3adc <__cs3_isr_irq+0x84>
    3ac4:	e30939e4 	movw	r3, #39396	; 0x99e4
    3ac8:	e3403000 	movt	r3, #0
    3acc:	e5d3300c 	ldrb	r3, [r3, #12]
    3ad0:	e3530000 	cmp	r3, #0
    3ad4:	0a000000 	beq	3adc <__cs3_isr_irq+0x84>
      buttonClickHandler();
    3ad8:	ebffffd8 	bl	3a40 <buttonClickHandler>
    }
  }

  *((volatile int*) 0xFFFEC110) = interruptID;
    3adc:	e3a0204f 	mov	r2, #79	; 0x4f
    3ae0:	e3e03a13 	mvn	r3, #77824	; 0x13000
    3ae4:	e5032eef 	str	r2, [r3, #-3823]	; 0xfffff111
    3ae8:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, r12, pc}^

00003aec <main>:

void buttonClickHandler() {
    isFluidSim = !isFluidSim;
}

int main(void){ // main for this simulation
    3aec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}

    volatile int * sw_ptr = (volatile int *)SW_BASE;

    initParticles();
    3af0:	ebfff3cf 	bl	a34 <initParticles>
    initRigidBodies();
    3af4:	ebfffb94 	bl	294c <initRigidBodies>

    intializeMouse(&mData);
    3af8:	e59f40c8 	ldr	r4, [pc, #200]	; 3bc8 <main+0xdc>
    3afc:	e1a00004 	mov	r0, r4
    3b00:	ebfff360 	bl	888 <intializeMouse>
    prevmData = mData;
    3b04:	e59f30c0 	ldr	r3, [pc, #192]	; 3bcc <main+0xe0>
    3b08:	e8940007 	ldm	r4, {r0, r1, r2}
    3b0c:	e8830007 	stm	r3, {r0, r1, r2}

    vgaSetup();
    3b10:	ebfff24d 	bl	44c <vgaSetup>

    // Program loop
    while(1) {
        
        // isFluidSim = (*sw_ptr & 1) == 1;
        if (isFluidSim != lastFluidSim) {
    3b14:	e3094420 	movw	r4, #37920	; 0x9420
    3b18:	e3404000 	movt	r4, #0
        lastFluidSim = isFluidSim;
        // Erase Stuff
        if (isFluidSim) eraseParticles();
        else eraseBodies();

        drawMouse(&prevmData, BLACK);
    3b1c:	e59f60a8 	ldr	r6, [pc, #168]	; 3bcc <main+0xe0>
    3b20:	e3a08000 	mov	r8, #0
        // Draw Stuff
        if (isFluidSim) drawParticles();
        else drawBodies();

        drawButton();
        drawMouse(&mData, WHITE);
    3b24:	e59f509c 	ldr	r5, [pc, #156]	; 3bc8 <main+0xdc>
    3b28:	e3e07000 	mvn	r7, #0

    // Program loop
    while(1) {
        
        // isFluidSim = (*sw_ptr & 1) == 1;
        if (isFluidSim != lastFluidSim) {
    3b2c:	e5d43169 	ldrb	r3, [r4, #361]	; 0x169
    3b30:	e5d42168 	ldrb	r2, [r4, #360]	; 0x168
    3b34:	e1520003 	cmp	r2, r3
    3b38:	0a000004 	beq	3b50 <main+0x64>
            if (lastFluidSim) eraseParticles();
    3b3c:	e3530000 	cmp	r3, #0
    3b40:	0a000001 	beq	3b4c <main+0x60>
    3b44:	ebfff425 	bl	be0 <eraseParticles>
    3b48:	ea000000 	b	3b50 <main+0x64>
            else eraseBodies();
    3b4c:	ebfffce3 	bl	2ee0 <eraseBodies>
        }
        lastFluidSim = isFluidSim;
    3b50:	e5d43168 	ldrb	r3, [r4, #360]	; 0x168
    3b54:	e5c43169 	strb	r3, [r4, #361]	; 0x169
        // Erase Stuff
        if (isFluidSim) eraseParticles();
    3b58:	e3530000 	cmp	r3, #0
    3b5c:	0a000001 	beq	3b68 <main+0x7c>
    3b60:	ebfff41e 	bl	be0 <eraseParticles>
    3b64:	ea000000 	b	3b6c <main+0x80>
        else eraseBodies();
    3b68:	ebfffcdc 	bl	2ee0 <eraseBodies>

        drawMouse(&prevmData, BLACK);
    3b6c:	e1a00006 	mov	r0, r6
    3b70:	e1a01008 	mov	r1, r8
    3b74:	ebfff2de 	bl	6f4 <drawMouse>

        // Draw Stuff
        if (isFluidSim) drawParticles();
    3b78:	e5d43168 	ldrb	r3, [r4, #360]	; 0x168
    3b7c:	e3530000 	cmp	r3, #0
    3b80:	0a000001 	beq	3b8c <main+0xa0>
    3b84:	ebfff423 	bl	c18 <drawParticles>
    3b88:	ea000000 	b	3b90 <main+0xa4>
        else drawBodies();
    3b8c:	ebfffcf4 	bl	2f64 <drawBodies>

        drawButton();
    3b90:	ebfff392 	bl	9e0 <drawButton>
        drawMouse(&mData, WHITE);
    3b94:	e1a00005 	mov	r0, r5
    3b98:	e1a01007 	mov	r1, r7
    3b9c:	ebfff2d4 	bl	6f4 <drawMouse>
        prevmData = mData;
    3ba0:	e8950007 	ldm	r5, {r0, r1, r2}
    3ba4:	e8860007 	stm	r6, {r0, r1, r2}
        
        // Update Stuff 
        // prevmData = mData;
        // updateMouse(&mData);
        
        if (isFluidSim) timeStepBucketwiseParticleUpdate();
    3ba8:	e5d43168 	ldrb	r3, [r4, #360]	; 0x168
    3bac:	e3530000 	cmp	r3, #0
    3bb0:	0a000001 	beq	3bbc <main+0xd0>
    3bb4:	ebfff867 	bl	1d58 <timeStepBucketwiseParticleUpdate>
    3bb8:	ea000000 	b	3bc0 <main+0xd4>
        else timeStepRBForceApplication();
    3bbc:	ebffff5a 	bl	392c <timeStepRBForceApplication>

        // Wait for Stuff
        waitForVsync();
    3bc0:	ebfff200 	bl	3c8 <waitForVsync>

    }
    3bc4:	eaffffd8 	b	3b2c <main+0x40>
    3bc8:	000099e8 	.word	0x000099e8
    3bcc:	0009aaf4 	.word	0x0009aaf4

00003bd0 <cos>:
    3bd0:	e92d4030 	push	{r4, r5, lr}
    3bd4:	e59fe0e0 	ldr	lr, [pc, #224]	; 3cbc <cos+0xec>
    3bd8:	e3c1c102 	bic	r12, r1, #-2147483648	; 0x80000000
    3bdc:	e15c000e 	cmp	r12, lr
    3be0:	e24dd01c 	sub	sp, sp, #28
    3be4:	e1a02000 	mov	r2, r0
    3be8:	e1a03001 	mov	r3, r1
    3bec:	e1a04000 	mov	r4, r0
    3bf0:	e1a05001 	mov	r5, r1
    3bf4:	da000015 	ble	3c50 <cos+0x80>
    3bf8:	e59fe0c0 	ldr	lr, [pc, #192]	; 3cc0 <cos+0xf0>
    3bfc:	e15c000e 	cmp	r12, lr
    3c00:	da000003 	ble	3c14 <cos+0x44>
    3c04:	eb000fa7 	bl	7aa8 <__aeabi_dsub>
    3c08:	e28dd01c 	add	sp, sp, #28
    3c0c:	e8bd4030 	pop	{r4, r5, lr}
    3c10:	e12fff1e 	bx	lr
    3c14:	e28d2008 	add	r2, sp, #8
    3c18:	eb00071a 	bl	5888 <__ieee754_rem_pio2>
    3c1c:	e2000003 	and	r0, r0, #3
    3c20:	e3500001 	cmp	r0, #1
    3c24:	0a000014 	beq	3c7c <cos+0xac>
    3c28:	e3500002 	cmp	r0, #2
    3c2c:	0a00000b 	beq	3c60 <cos+0x90>
    3c30:	e3500000 	cmp	r0, #0
    3c34:	1a000018 	bne	3c9c <cos+0xcc>
    3c38:	e28d1008 	add	r1, sp, #8
    3c3c:	e8910003 	ldm	r1, {r0, r1}
    3c40:	e28d3010 	add	r3, sp, #16
    3c44:	e893000c 	ldm	r3, {r2, r3}
    3c48:	eb000934 	bl	6120 <__kernel_cos>
    3c4c:	eaffffed 	b	3c08 <cos+0x38>
    3c50:	e3a02000 	mov	r2, #0
    3c54:	e3a03000 	mov	r3, #0
    3c58:	eb000930 	bl	6120 <__kernel_cos>
    3c5c:	eaffffe9 	b	3c08 <cos+0x38>
    3c60:	e28d1008 	add	r1, sp, #8
    3c64:	e8910003 	ldm	r1, {r0, r1}
    3c68:	e28d3010 	add	r3, sp, #16
    3c6c:	e893000c 	ldm	r3, {r2, r3}
    3c70:	eb00092a 	bl	6120 <__kernel_cos>
    3c74:	e2811102 	add	r1, r1, #-2147483648	; 0x80000000
    3c78:	eaffffe2 	b	3c08 <cos+0x38>
    3c7c:	e58d0000 	str	r0, [sp]
    3c80:	e28d3010 	add	r3, sp, #16
    3c84:	e893000c 	ldm	r3, {r2, r3}
    3c88:	e28d1008 	add	r1, sp, #8
    3c8c:	e8910003 	ldm	r1, {r0, r1}
    3c90:	eb000cda 	bl	7000 <__kernel_sin>
    3c94:	e2811102 	add	r1, r1, #-2147483648	; 0x80000000
    3c98:	eaffffda 	b	3c08 <cos+0x38>
    3c9c:	e3a03001 	mov	r3, #1
    3ca0:	e58d3000 	str	r3, [sp]
    3ca4:	e28d1008 	add	r1, sp, #8
    3ca8:	e8910003 	ldm	r1, {r0, r1}
    3cac:	e28d3010 	add	r3, sp, #16
    3cb0:	e893000c 	ldm	r3, {r2, r3}
    3cb4:	eb000cd1 	bl	7000 <__kernel_sin>
    3cb8:	eaffffd2 	b	3c08 <cos+0x38>
    3cbc:	3fe921fb 	.word	0x3fe921fb
    3cc0:	7fefffff 	.word	0x7fefffff
    3cc4:	00000000 	.word	0x00000000

00003cc8 <floor>:
    3cc8:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
    3ccc:	e1a08081 	lsl	r8, r1, #1
    3cd0:	e1a08aa8 	lsr	r8, r8, #21
    3cd4:	e2486fff 	sub	r6, r8, #1020	; 0x3fc
    3cd8:	e2466003 	sub	r6, r6, #3
    3cdc:	e3560013 	cmp	r6, #19
    3ce0:	e1a02000 	mov	r2, r0
    3ce4:	e1a03001 	mov	r3, r1
    3ce8:	e1a04000 	mov	r4, r0
    3cec:	e1a05001 	mov	r5, r1
    3cf0:	e1a07001 	mov	r7, r1
    3cf4:	ca000019 	bgt	3d60 <floor+0x98>
    3cf8:	e3560000 	cmp	r6, #0
    3cfc:	ba000034 	blt	3dd4 <floor+0x10c>
    3d00:	e59f8150 	ldr	r8, [pc, #336]	; 3e58 <floor+0x190>
    3d04:	e1a08658 	asr	r8, r8, r6
    3d08:	e008c001 	and	r12, r8, r1
    3d0c:	e19cc000 	orrs	r12, r12, r0
    3d10:	0a00000e 	beq	3d50 <floor+0x88>
    3d14:	e28f3f4d 	add	r3, pc, #308	; 0x134
    3d18:	e893000c 	ldm	r3, {r2, r3}
    3d1c:	eb000f62 	bl	7aac <__adddf3>
    3d20:	e3a02000 	mov	r2, #0
    3d24:	e3a03000 	mov	r3, #0
    3d28:	eb0011d5 	bl	8484 <__aeabi_dcmpgt>
    3d2c:	e3500000 	cmp	r0, #0
    3d30:	0a000004 	beq	3d48 <floor+0x80>
    3d34:	e3550000 	cmp	r5, #0
    3d38:	b3a03601 	movlt	r3, #1048576	; 0x100000
    3d3c:	b0855653 	addlt	r5, r5, r3, asr r6
    3d40:	e3a04000 	mov	r4, #0
    3d44:	e1c57008 	bic	r7, r5, r8
    3d48:	e1a03007 	mov	r3, r7
    3d4c:	e1a02004 	mov	r2, r4
    3d50:	e1a00002 	mov	r0, r2
    3d54:	e1a01003 	mov	r1, r3
    3d58:	e8bd45f8 	pop	{r3, r4, r5, r6, r7, r8, r10, lr}
    3d5c:	e12fff1e 	bx	lr
    3d60:	e3560033 	cmp	r6, #51	; 0x33
    3d64:	da000005 	ble	3d80 <floor+0xb8>
    3d68:	e3560b01 	cmp	r6, #1024	; 0x400
    3d6c:	1afffff7 	bne	3d50 <floor+0x88>
    3d70:	eb000f4d 	bl	7aac <__adddf3>
    3d74:	e1a02000 	mov	r2, r0
    3d78:	e1a03001 	mov	r3, r1
    3d7c:	eafffff3 	b	3d50 <floor+0x88>
    3d80:	e248ae41 	sub	r10, r8, #1040	; 0x410
    3d84:	e24aa003 	sub	r10, r10, #3
    3d88:	e3e0c000 	mvn	r12, #0
    3d8c:	e1a0aa3c 	lsr	r10, r12, r10
    3d90:	e11a0000 	tst	r10, r0
    3d94:	0affffed 	beq	3d50 <floor+0x88>
    3d98:	e28f30b0 	add	r3, pc, #176	; 0xb0
    3d9c:	e893000c 	ldm	r3, {r2, r3}
    3da0:	eb000f41 	bl	7aac <__adddf3>
    3da4:	e3a02000 	mov	r2, #0
    3da8:	e3a03000 	mov	r3, #0
    3dac:	eb0011b4 	bl	8484 <__aeabi_dcmpgt>
    3db0:	e3500000 	cmp	r0, #0
    3db4:	0affffe3 	beq	3d48 <floor+0x80>
    3db8:	e3550000 	cmp	r5, #0
    3dbc:	ba000017 	blt	3e20 <floor+0x158>
    3dc0:	e1c4400a 	bic	r4, r4, r10
    3dc4:	e1a07005 	mov	r7, r5
    3dc8:	e1a03007 	mov	r3, r7
    3dcc:	e1a02004 	mov	r2, r4
    3dd0:	eaffffde 	b	3d50 <floor+0x88>
    3dd4:	e28f3074 	add	r3, pc, #116	; 0x74
    3dd8:	e893000c 	ldm	r3, {r2, r3}
    3ddc:	eb000f32 	bl	7aac <__adddf3>
    3de0:	e3a02000 	mov	r2, #0
    3de4:	e3a03000 	mov	r3, #0
    3de8:	eb0011a5 	bl	8484 <__aeabi_dcmpgt>
    3dec:	e3500000 	cmp	r0, #0
    3df0:	0affffd4 	beq	3d48 <floor+0x80>
    3df4:	e3550000 	cmp	r5, #0
    3df8:	a3a04000 	movge	r4, #0
    3dfc:	a1a07004 	movge	r7, r4
    3e00:	aaffffd0 	bge	3d48 <floor+0x80>
    3e04:	e3c73102 	bic	r3, r7, #-2147483648	; 0x80000000
    3e08:	e1833004 	orr	r3, r3, r4
    3e0c:	e3530000 	cmp	r3, #0
    3e10:	e59f3044 	ldr	r3, [pc, #68]	; 3e5c <floor+0x194>
    3e14:	13a04000 	movne	r4, #0
    3e18:	11a07003 	movne	r7, r3
    3e1c:	eaffffc9 	b	3d48 <floor+0x80>
    3e20:	e3560014 	cmp	r6, #20
    3e24:	02855001 	addeq	r5, r5, #1
    3e28:	0affffe4 	beq	3dc0 <floor+0xf8>
    3e2c:	e2688e43 	rsb	r8, r8, #1072	; 0x430
    3e30:	e2888003 	add	r8, r8, #3
    3e34:	e3a03001 	mov	r3, #1
    3e38:	e0843813 	add	r3, r4, r3, lsl r8
    3e3c:	e1540003 	cmp	r4, r3
    3e40:	82855001 	addhi	r5, r5, #1
    3e44:	e1a04003 	mov	r4, r3
    3e48:	eaffffdc 	b	3dc0 <floor+0xf8>
    3e4c:	e1a00000 	nop			; (mov r0, r0)
    3e50:	8800759c 	.word	0x8800759c
    3e54:	7e37e43c 	.word	0x7e37e43c
    3e58:	000fffff 	.word	0x000fffff
    3e5c:	bff00000 	.word	0xbff00000

00003e60 <sin>:
    3e60:	e92d4030 	push	{r4, r5, lr}
    3e64:	e59fe0ec 	ldr	lr, [pc, #236]	; 3f58 <sin+0xf8>
    3e68:	e3c1c102 	bic	r12, r1, #-2147483648	; 0x80000000
    3e6c:	e15c000e 	cmp	r12, lr
    3e70:	e24dd01c 	sub	sp, sp, #28
    3e74:	e1a02000 	mov	r2, r0
    3e78:	e1a03001 	mov	r3, r1
    3e7c:	e1a04000 	mov	r4, r0
    3e80:	e1a05001 	mov	r5, r1
    3e84:	da000017 	ble	3ee8 <sin+0x88>
    3e88:	e59fe0cc 	ldr	lr, [pc, #204]	; 3f5c <sin+0xfc>
    3e8c:	e15c000e 	cmp	r12, lr
    3e90:	da000003 	ble	3ea4 <sin+0x44>
    3e94:	eb000f03 	bl	7aa8 <__aeabi_dsub>
    3e98:	e28dd01c 	add	sp, sp, #28
    3e9c:	e8bd4030 	pop	{r4, r5, lr}
    3ea0:	e12fff1e 	bx	lr
    3ea4:	e28d2008 	add	r2, sp, #8
    3ea8:	eb000676 	bl	5888 <__ieee754_rem_pio2>
    3eac:	e2000003 	and	r0, r0, #3
    3eb0:	e3500001 	cmp	r0, #1
    3eb4:	0a00001a 	beq	3f24 <sin+0xc4>
    3eb8:	e3500002 	cmp	r0, #2
    3ebc:	0a00000f 	beq	3f00 <sin+0xa0>
    3ec0:	e3500000 	cmp	r0, #0
    3ec4:	1a00001c 	bne	3f3c <sin+0xdc>
    3ec8:	e3a03001 	mov	r3, #1
    3ecc:	e58d3000 	str	r3, [sp]
    3ed0:	e28d1008 	add	r1, sp, #8
    3ed4:	e8910003 	ldm	r1, {r0, r1}
    3ed8:	e28d3010 	add	r3, sp, #16
    3edc:	e893000c 	ldm	r3, {r2, r3}
    3ee0:	eb000c46 	bl	7000 <__kernel_sin>
    3ee4:	eaffffeb 	b	3e98 <sin+0x38>
    3ee8:	e3a03000 	mov	r3, #0
    3eec:	e58d3000 	str	r3, [sp]
    3ef0:	e3a02000 	mov	r2, #0
    3ef4:	e3a03000 	mov	r3, #0
    3ef8:	eb000c40 	bl	7000 <__kernel_sin>
    3efc:	eaffffe5 	b	3e98 <sin+0x38>
    3f00:	e3a03001 	mov	r3, #1
    3f04:	e58d3000 	str	r3, [sp]
    3f08:	e28d1008 	add	r1, sp, #8
    3f0c:	e8910003 	ldm	r1, {r0, r1}
    3f10:	e28d3010 	add	r3, sp, #16
    3f14:	e893000c 	ldm	r3, {r2, r3}
    3f18:	eb000c38 	bl	7000 <__kernel_sin>
    3f1c:	e2811102 	add	r1, r1, #-2147483648	; 0x80000000
    3f20:	eaffffdc 	b	3e98 <sin+0x38>
    3f24:	e28d1008 	add	r1, sp, #8
    3f28:	e8910003 	ldm	r1, {r0, r1}
    3f2c:	e28d3010 	add	r3, sp, #16
    3f30:	e893000c 	ldm	r3, {r2, r3}
    3f34:	eb000879 	bl	6120 <__kernel_cos>
    3f38:	eaffffd6 	b	3e98 <sin+0x38>
    3f3c:	e28d1008 	add	r1, sp, #8
    3f40:	e8910003 	ldm	r1, {r0, r1}
    3f44:	e28d3010 	add	r3, sp, #16
    3f48:	e893000c 	ldm	r3, {r2, r3}
    3f4c:	eb000873 	bl	6120 <__kernel_cos>
    3f50:	e2811102 	add	r1, r1, #-2147483648	; 0x80000000
    3f54:	eaffffcf 	b	3e98 <sin+0x38>
    3f58:	3fe921fb 	.word	0x3fe921fb
    3f5c:	7fefffff 	.word	0x7fefffff

00003f60 <atan2>:
    3f60:	e92d4008 	push	{r3, lr}
    3f64:	eb00018b 	bl	4598 <__ieee754_atan2>
    3f68:	e8bd4008 	pop	{r3, lr}
    3f6c:	e12fff1e 	bx	lr

00003f70 <pow>:
    3f70:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    3f74:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    3f78:	e1a07003 	mov	r7, r3
    3f7c:	e1a08000 	mov	r8, r0
    3f80:	e1a09001 	mov	r9, r1
    3f84:	e1a06002 	mov	r6, r2
    3f88:	eb00023e 	bl	4888 <__ieee754_pow>
    3f8c:	e59fb4bc 	ldr	r11, [pc, #1212]	; 4450 <pow+0x4e0>
    3f90:	e1db30d0 	ldrsb	r3, [r11]
    3f94:	e3730001 	cmn	r3, #1
    3f98:	e1a04000 	mov	r4, r0
    3f9c:	e1a05001 	mov	r5, r1
    3fa0:	0a000004 	beq	3fb8 <pow+0x48>
    3fa4:	e1a00006 	mov	r0, r6
    3fa8:	e1a01007 	mov	r1, r7
    3fac:	eb000dc3 	bl	76c0 <__fpclassifyd>
    3fb0:	e3500000 	cmp	r0, #0
    3fb4:	1a000004 	bne	3fcc <pow+0x5c>
    3fb8:	e1a00004 	mov	r0, r4
    3fbc:	e1a01005 	mov	r1, r5
    3fc0:	e28dd02c 	add	sp, sp, #44	; 0x2c
    3fc4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    3fc8:	e12fff1e 	bx	lr
    3fcc:	e1a00008 	mov	r0, r8
    3fd0:	e1a01009 	mov	r1, r9
    3fd4:	eb000db9 	bl	76c0 <__fpclassifyd>
    3fd8:	e250a000 	subs	r10, r0, #0
    3fdc:	1a00001a 	bne	404c <pow+0xdc>
    3fe0:	e1a00006 	mov	r0, r6
    3fe4:	e1a01007 	mov	r1, r7
    3fe8:	e3a02000 	mov	r2, #0
    3fec:	e3a03000 	mov	r3, #0
    3ff0:	eb00110b 	bl	8424 <__aeabi_dcmpeq>
    3ff4:	e3500000 	cmp	r0, #0
    3ff8:	0affffee 	beq	3fb8 <pow+0x48>
    3ffc:	e1db30d0 	ldrsb	r3, [r11]
    4000:	e3730001 	cmn	r3, #1
    4004:	13530002 	cmpne	r3, #2
    4008:	e3a03001 	mov	r3, #1
    400c:	e58d3000 	str	r3, [sp]
    4010:	e59f343c 	ldr	r3, [pc, #1084]	; 4454 <pow+0x4e4>
    4014:	e58d3004 	str	r3, [sp, #4]
    4018:	e59f3438 	ldr	r3, [pc, #1080]	; 4458 <pow+0x4e8>
    401c:	e3a02000 	mov	r2, #0
    4020:	e58da020 	str	r10, [sp, #32]
    4024:	e58d8008 	str	r8, [sp, #8]
    4028:	e58d900c 	str	r9, [sp, #12]
    402c:	e58d6010 	str	r6, [sp, #16]
    4030:	e58d7014 	str	r7, [sp, #20]
    4034:	e58d2018 	str	r2, [sp, #24]
    4038:	e58d301c 	str	r3, [sp, #28]
    403c:	1a000025 	bne	40d8 <pow+0x168>
    4040:	e28d5018 	add	r5, sp, #24
    4044:	e8950030 	ldm	r5, {r4, r5}
    4048:	eaffffda 	b	3fb8 <pow+0x48>
    404c:	e1a00008 	mov	r0, r8
    4050:	e1a01009 	mov	r1, r9
    4054:	e3a02000 	mov	r2, #0
    4058:	e3a03000 	mov	r3, #0
    405c:	eb0010f0 	bl	8424 <__aeabi_dcmpeq>
    4060:	e3500000 	cmp	r0, #0
    4064:	0a000026 	beq	4104 <pow+0x194>
    4068:	e1a00006 	mov	r0, r6
    406c:	e1a01007 	mov	r1, r7
    4070:	e3a02000 	mov	r2, #0
    4074:	e3a03000 	mov	r3, #0
    4078:	eb0010e9 	bl	8424 <__aeabi_dcmpeq>
    407c:	e3500000 	cmp	r0, #0
    4080:	0a00004e 	beq	41c0 <pow+0x250>
    4084:	e1db30d0 	ldrsb	r3, [r11]
    4088:	e3530000 	cmp	r3, #0
    408c:	e3a03001 	mov	r3, #1
    4090:	e58d3000 	str	r3, [sp]
    4094:	e59f33b8 	ldr	r3, [pc, #952]	; 4454 <pow+0x4e4>
    4098:	e58d3004 	str	r3, [sp, #4]
    409c:	e3a03000 	mov	r3, #0
    40a0:	e58d3020 	str	r3, [sp, #32]
    40a4:	e3a04000 	mov	r4, #0
    40a8:	e3a03000 	mov	r3, #0
    40ac:	e58d8008 	str	r8, [sp, #8]
    40b0:	e58d900c 	str	r9, [sp, #12]
    40b4:	e58d6010 	str	r6, [sp, #16]
    40b8:	e58d7014 	str	r7, [sp, #20]
    40bc:	e58d3018 	str	r3, [sp, #24]
    40c0:	e58d401c 	str	r4, [sp, #28]
    40c4:	159f338c 	ldrne	r3, [pc, #908]	; 4458 <pow+0x4e8>
    40c8:	13a02000 	movne	r2, #0
    40cc:	158d2018 	strne	r2, [sp, #24]
    40d0:	158d301c 	strne	r3, [sp, #28]
    40d4:	1affffd9 	bne	4040 <pow+0xd0>
    40d8:	e1a0000d 	mov	r0, sp
    40dc:	eb000d92 	bl	772c <matherr>
    40e0:	e3500000 	cmp	r0, #0
    40e4:	0a000058 	beq	424c <pow+0x2dc>
    40e8:	e59d3020 	ldr	r3, [sp, #32]
    40ec:	e3530000 	cmp	r3, #0
    40f0:	0affffd2 	beq	4040 <pow+0xd0>
    40f4:	eb0012f4 	bl	8ccc <__errno>
    40f8:	e59d3020 	ldr	r3, [sp, #32]
    40fc:	e5803000 	str	r3, [r0]
    4100:	eaffffce 	b	4040 <pow+0xd0>
    4104:	e1a00004 	mov	r0, r4
    4108:	e1a01005 	mov	r1, r5
    410c:	eb000d67 	bl	76b0 <finite>
    4110:	e250a000 	subs	r10, r0, #0
    4114:	0a000050 	beq	425c <pow+0x2ec>
    4118:	e1a00004 	mov	r0, r4
    411c:	e1a01005 	mov	r1, r5
    4120:	e3a02000 	mov	r2, #0
    4124:	e3a03000 	mov	r3, #0
    4128:	eb0010bd 	bl	8424 <__aeabi_dcmpeq>
    412c:	e3500000 	cmp	r0, #0
    4130:	0affffa0 	beq	3fb8 <pow+0x48>
    4134:	e1a00008 	mov	r0, r8
    4138:	e1a01009 	mov	r1, r9
    413c:	eb000d5b 	bl	76b0 <finite>
    4140:	e3500000 	cmp	r0, #0
    4144:	0affff9b 	beq	3fb8 <pow+0x48>
    4148:	e1a00006 	mov	r0, r6
    414c:	e1a01007 	mov	r1, r7
    4150:	eb000d56 	bl	76b0 <finite>
    4154:	e3500000 	cmp	r0, #0
    4158:	0affff96 	beq	3fb8 <pow+0x48>
    415c:	e1db30d0 	ldrsb	r3, [r11]
    4160:	e3530002 	cmp	r3, #2
    4164:	e3a03004 	mov	r3, #4
    4168:	e58d3000 	str	r3, [sp]
    416c:	e59f32e0 	ldr	r3, [pc, #736]	; 4454 <pow+0x4e4>
    4170:	e58d3004 	str	r3, [sp, #4]
    4174:	e3a03000 	mov	r3, #0
    4178:	e58d3020 	str	r3, [sp, #32]
    417c:	e3a04000 	mov	r4, #0
    4180:	e3a03000 	mov	r3, #0
    4184:	e58d8008 	str	r8, [sp, #8]
    4188:	e58d900c 	str	r9, [sp, #12]
    418c:	e58d6010 	str	r6, [sp, #16]
    4190:	e58d7014 	str	r7, [sp, #20]
    4194:	e58d3018 	str	r3, [sp, #24]
    4198:	e58d401c 	str	r4, [sp, #28]
    419c:	0a00005c 	beq	4314 <pow+0x3a4>
    41a0:	e1a0000d 	mov	r0, sp
    41a4:	eb000d60 	bl	772c <matherr>
    41a8:	e3500000 	cmp	r0, #0
    41ac:	0a000058 	beq	4314 <pow+0x3a4>
    41b0:	e59d3020 	ldr	r3, [sp, #32]
    41b4:	e3530000 	cmp	r3, #0
    41b8:	0affffa0 	beq	4040 <pow+0xd0>
    41bc:	eaffffcc 	b	40f4 <pow+0x184>
    41c0:	e1a00006 	mov	r0, r6
    41c4:	e1a01007 	mov	r1, r7
    41c8:	eb000d38 	bl	76b0 <finite>
    41cc:	e3500000 	cmp	r0, #0
    41d0:	0affff78 	beq	3fb8 <pow+0x48>
    41d4:	e1a00006 	mov	r0, r6
    41d8:	e1a01007 	mov	r1, r7
    41dc:	e3a02000 	mov	r2, #0
    41e0:	e3a03000 	mov	r3, #0
    41e4:	eb001094 	bl	843c <__aeabi_dcmplt>
    41e8:	e3500000 	cmp	r0, #0
    41ec:	0affff71 	beq	3fb8 <pow+0x48>
    41f0:	e3a02001 	mov	r2, #1
    41f4:	e5db3000 	ldrb	r3, [r11]
    41f8:	e58d2000 	str	r2, [sp]
    41fc:	e59f2250 	ldr	r2, [pc, #592]	; 4454 <pow+0x4e4>
    4200:	e3530000 	cmp	r3, #0
    4204:	e58d2004 	str	r2, [sp, #4]
    4208:	e3a02000 	mov	r2, #0
    420c:	e58d2020 	str	r2, [sp, #32]
    4210:	e58d8008 	str	r8, [sp, #8]
    4214:	e58d900c 	str	r9, [sp, #12]
    4218:	e58d6010 	str	r6, [sp, #16]
    421c:	e58d7014 	str	r7, [sp, #20]
    4220:	0a000036 	beq	4300 <pow+0x390>
    4224:	e3530002 	cmp	r3, #2
    4228:	e59f322c 	ldr	r3, [pc, #556]	; 445c <pow+0x4ec>
    422c:	e3a02000 	mov	r2, #0
    4230:	e58d2018 	str	r2, [sp, #24]
    4234:	e58d301c 	str	r3, [sp, #28]
    4238:	1a00002b 	bne	42ec <pow+0x37c>
    423c:	eb0012a2 	bl	8ccc <__errno>
    4240:	e3a03021 	mov	r3, #33	; 0x21
    4244:	e5803000 	str	r3, [r0]
    4248:	eaffffd8 	b	41b0 <pow+0x240>
    424c:	eb00129e 	bl	8ccc <__errno>
    4250:	e3a03021 	mov	r3, #33	; 0x21
    4254:	e5803000 	str	r3, [r0]
    4258:	eaffffa2 	b	40e8 <pow+0x178>
    425c:	e1a00008 	mov	r0, r8
    4260:	e1a01009 	mov	r1, r9
    4264:	eb000d11 	bl	76b0 <finite>
    4268:	e3500000 	cmp	r0, #0
    426c:	0affffa9 	beq	4118 <pow+0x1a8>
    4270:	e1a00006 	mov	r0, r6
    4274:	e1a01007 	mov	r1, r7
    4278:	eb000d0c 	bl	76b0 <finite>
    427c:	e3500000 	cmp	r0, #0
    4280:	0affffa4 	beq	4118 <pow+0x1a8>
    4284:	e1a00004 	mov	r0, r4
    4288:	e1a01005 	mov	r1, r5
    428c:	eb000d0b 	bl	76c0 <__fpclassifyd>
    4290:	e3500000 	cmp	r0, #0
    4294:	1a000022 	bne	4324 <pow+0x3b4>
    4298:	e3a03001 	mov	r3, #1
    429c:	e5db4000 	ldrb	r4, [r11]
    42a0:	e58d3000 	str	r3, [sp]
    42a4:	e59f31a8 	ldr	r3, [pc, #424]	; 4454 <pow+0x4e4>
    42a8:	e3540000 	cmp	r4, #0
    42ac:	e58d3004 	str	r3, [sp, #4]
    42b0:	e58d0020 	str	r0, [sp, #32]
    42b4:	e58d8008 	str	r8, [sp, #8]
    42b8:	e58d900c 	str	r9, [sp, #12]
    42bc:	e58d6010 	str	r6, [sp, #16]
    42c0:	e58d7014 	str	r7, [sp, #20]
    42c4:	0a00000d 	beq	4300 <pow+0x390>
    42c8:	e3a00000 	mov	r0, #0
    42cc:	e3a01000 	mov	r1, #0
    42d0:	e1a02000 	mov	r2, r0
    42d4:	e1a03001 	mov	r3, r1
    42d8:	eb000f9b 	bl	814c <__aeabi_ddiv>
    42dc:	e3540002 	cmp	r4, #2
    42e0:	e58d0018 	str	r0, [sp, #24]
    42e4:	e58d101c 	str	r1, [sp, #28]
    42e8:	0affffd3 	beq	423c <pow+0x2cc>
    42ec:	e1a0000d 	mov	r0, sp
    42f0:	eb000d0d 	bl	772c <matherr>
    42f4:	e3500000 	cmp	r0, #0
    42f8:	1affffac 	bne	41b0 <pow+0x240>
    42fc:	eaffffce 	b	423c <pow+0x2cc>
    4300:	e3a03000 	mov	r3, #0
    4304:	e3a04000 	mov	r4, #0
    4308:	e58d3018 	str	r3, [sp, #24]
    430c:	e58d401c 	str	r4, [sp, #28]
    4310:	eafffff5 	b	42ec <pow+0x37c>
    4314:	eb00126c 	bl	8ccc <__errno>
    4318:	e3a03022 	mov	r3, #34	; 0x22
    431c:	e5803000 	str	r3, [r0]
    4320:	eaffffa2 	b	41b0 <pow+0x240>
    4324:	e1db20d0 	ldrsb	r2, [r11]
    4328:	e3520000 	cmp	r2, #0
    432c:	e3a02003 	mov	r2, #3
    4330:	e58d2000 	str	r2, [sp]
    4334:	e59f2118 	ldr	r2, [pc, #280]	; 4454 <pow+0x4e4>
    4338:	e1a00008 	mov	r0, r8
    433c:	e58d2004 	str	r2, [sp, #4]
    4340:	e1a01009 	mov	r1, r9
    4344:	e58da020 	str	r10, [sp, #32]
    4348:	e58d8008 	str	r8, [sp, #8]
    434c:	e58d900c 	str	r9, [sp, #12]
    4350:	e58d6010 	str	r6, [sp, #16]
    4354:	e58d7014 	str	r7, [sp, #20]
    4358:	e3a02000 	mov	r2, #0
    435c:	e3a03000 	mov	r3, #0
    4360:	1a000011 	bne	43ac <pow+0x43c>
    4364:	e59f50f4 	ldr	r5, [pc, #244]	; 4460 <pow+0x4f0>
    4368:	e3a0420e 	mov	r4, #-536870912	; 0xe0000000
    436c:	e58d4018 	str	r4, [sp, #24]
    4370:	e58d501c 	str	r5, [sp, #28]
    4374:	eb001030 	bl	843c <__aeabi_dcmplt>
    4378:	e3500000 	cmp	r0, #0
    437c:	1a000022 	bne	440c <pow+0x49c>
    4380:	e1db30d0 	ldrsb	r3, [r11]
    4384:	e3530002 	cmp	r3, #2
    4388:	0a000003 	beq	439c <pow+0x42c>
    438c:	e1a0000d 	mov	r0, sp
    4390:	eb000ce5 	bl	772c <matherr>
    4394:	e3500000 	cmp	r0, #0
    4398:	1affff52 	bne	40e8 <pow+0x178>
    439c:	eb00124a 	bl	8ccc <__errno>
    43a0:	e3a03022 	mov	r3, #34	; 0x22
    43a4:	e5803000 	str	r3, [r0]
    43a8:	eaffff4e 	b	40e8 <pow+0x178>
    43ac:	e59f50b0 	ldr	r5, [pc, #176]	; 4464 <pow+0x4f4>
    43b0:	e3a04000 	mov	r4, #0
    43b4:	e58d4018 	str	r4, [sp, #24]
    43b8:	e58d501c 	str	r5, [sp, #28]
    43bc:	eb00101e 	bl	843c <__aeabi_dcmplt>
    43c0:	e3500000 	cmp	r0, #0
    43c4:	0affffed 	beq	4380 <pow+0x410>
    43c8:	e3a02000 	mov	r2, #0
    43cc:	e59f3094 	ldr	r3, [pc, #148]	; 4468 <pow+0x4f8>
    43d0:	e1a00006 	mov	r0, r6
    43d4:	e1a01007 	mov	r1, r7
    43d8:	eb000eb7 	bl	7ebc <__aeabi_dmul>
    43dc:	e1a04000 	mov	r4, r0
    43e0:	e1a05001 	mov	r5, r1
    43e4:	eb000cd6 	bl	7744 <rint>
    43e8:	e1a02004 	mov	r2, r4
    43ec:	e1a03005 	mov	r3, r5
    43f0:	eb00100b 	bl	8424 <__aeabi_dcmpeq>
    43f4:	e3500000 	cmp	r0, #0
    43f8:	059f305c 	ldreq	r3, [pc, #92]	; 445c <pow+0x4ec>
    43fc:	03a02000 	moveq	r2, #0
    4400:	058d2018 	streq	r2, [sp, #24]
    4404:	058d301c 	streq	r3, [sp, #28]
    4408:	eaffffdc 	b	4380 <pow+0x410>
    440c:	e3a02000 	mov	r2, #0
    4410:	e59f3050 	ldr	r3, [pc, #80]	; 4468 <pow+0x4f8>
    4414:	e1a00006 	mov	r0, r6
    4418:	e1a01007 	mov	r1, r7
    441c:	eb000ea6 	bl	7ebc <__aeabi_dmul>
    4420:	e1a04000 	mov	r4, r0
    4424:	e1a05001 	mov	r5, r1
    4428:	eb000cc5 	bl	7744 <rint>
    442c:	e1a02004 	mov	r2, r4
    4430:	e1a03005 	mov	r3, r5
    4434:	eb000ffa 	bl	8424 <__aeabi_dcmpeq>
    4438:	e3500000 	cmp	r0, #0
    443c:	059f3028 	ldreq	r3, [pc, #40]	; 446c <pow+0x4fc>
    4440:	03a0220e 	moveq	r2, #-536870912	; 0xe0000000
    4444:	058d2018 	streq	r2, [sp, #24]
    4448:	058d301c 	streq	r3, [sp, #28]
    444c:	eaffffcb 	b	4380 <pow+0x410>
    4450:	0000958c 	.word	0x0000958c
    4454:	00009158 	.word	0x00009158
    4458:	3ff00000 	.word	0x3ff00000
    445c:	fff00000 	.word	0xfff00000
    4460:	47efffff 	.word	0x47efffff
    4464:	7ff00000 	.word	0x7ff00000
    4468:	3fe00000 	.word	0x3fe00000
    446c:	c7efffff 	.word	0xc7efffff

00004470 <sqrt>:
    4470:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
    4474:	e24dd028 	sub	sp, sp, #40	; 0x28
    4478:	e1a04000 	mov	r4, r0
    447c:	e1a05001 	mov	r5, r1
    4480:	eb000696 	bl	5ee0 <__ieee754_sqrt>
    4484:	e59fa104 	ldr	r10, [pc, #260]	; 4590 <sqrt+0x120>
    4488:	e1da30d0 	ldrsb	r3, [r10]
    448c:	e3730001 	cmn	r3, #1
    4490:	e1a06000 	mov	r6, r0
    4494:	e1a07001 	mov	r7, r1
    4498:	0a00000d 	beq	44d4 <sqrt+0x64>
    449c:	e1a00004 	mov	r0, r4
    44a0:	e1a01005 	mov	r1, r5
    44a4:	eb000c85 	bl	76c0 <__fpclassifyd>
    44a8:	e3500000 	cmp	r0, #0
    44ac:	0a000008 	beq	44d4 <sqrt+0x64>
    44b0:	e3a08000 	mov	r8, #0
    44b4:	e3a09000 	mov	r9, #0
    44b8:	e1a00004 	mov	r0, r4
    44bc:	e1a01005 	mov	r1, r5
    44c0:	e1a02008 	mov	r2, r8
    44c4:	e1a03009 	mov	r3, r9
    44c8:	eb000fdb 	bl	843c <__aeabi_dcmplt>
    44cc:	e3500000 	cmp	r0, #0
    44d0:	1a000004 	bne	44e8 <sqrt+0x78>
    44d4:	e1a00006 	mov	r0, r6
    44d8:	e1a01007 	mov	r1, r7
    44dc:	e28dd028 	add	sp, sp, #40	; 0x28
    44e0:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, r10, lr}
    44e4:	e12fff1e 	bx	lr
    44e8:	e3a03001 	mov	r3, #1
    44ec:	e5da6000 	ldrb	r6, [r10]
    44f0:	e58d3000 	str	r3, [sp]
    44f4:	e59f3098 	ldr	r3, [pc, #152]	; 4594 <sqrt+0x124>
    44f8:	e3560000 	cmp	r6, #0
    44fc:	e58d3004 	str	r3, [sp, #4]
    4500:	e3a03000 	mov	r3, #0
    4504:	e58d3020 	str	r3, [sp, #32]
    4508:	e58d4010 	str	r4, [sp, #16]
    450c:	e58d5014 	str	r5, [sp, #20]
    4510:	e58d4008 	str	r4, [sp, #8]
    4514:	e58d500c 	str	r5, [sp, #12]
    4518:	1a00000b 	bne	454c <sqrt+0xdc>
    451c:	e58d8018 	str	r8, [sp, #24]
    4520:	e58d901c 	str	r9, [sp, #28]
    4524:	e1a0000d 	mov	r0, sp
    4528:	eb000c7f 	bl	772c <matherr>
    452c:	e3500000 	cmp	r0, #0
    4530:	0a00000e 	beq	4570 <sqrt+0x100>
    4534:	e59d3020 	ldr	r3, [sp, #32]
    4538:	e3530000 	cmp	r3, #0
    453c:	1a00000f 	bne	4580 <sqrt+0x110>
    4540:	e28d7018 	add	r7, sp, #24
    4544:	e89700c0 	ldm	r7, {r6, r7}
    4548:	eaffffe1 	b	44d4 <sqrt+0x64>
    454c:	e1a00008 	mov	r0, r8
    4550:	e1a01009 	mov	r1, r9
    4554:	e1a02008 	mov	r2, r8
    4558:	e1a03009 	mov	r3, r9
    455c:	eb000efa 	bl	814c <__aeabi_ddiv>
    4560:	e3560002 	cmp	r6, #2
    4564:	e58d0018 	str	r0, [sp, #24]
    4568:	e58d101c 	str	r1, [sp, #28]
    456c:	1affffec 	bne	4524 <sqrt+0xb4>
    4570:	eb0011d5 	bl	8ccc <__errno>
    4574:	e3a03021 	mov	r3, #33	; 0x21
    4578:	e5803000 	str	r3, [r0]
    457c:	eaffffec 	b	4534 <sqrt+0xc4>
    4580:	eb0011d1 	bl	8ccc <__errno>
    4584:	e59d3020 	ldr	r3, [sp, #32]
    4588:	e5803000 	str	r3, [r0]
    458c:	eaffffeb 	b	4540 <sqrt+0xd0>
    4590:	0000958c 	.word	0x0000958c
    4594:	0000915c 	.word	0x0000915c

00004598 <__ieee754_atan2>:
    4598:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
    459c:	e24dd010 	sub	sp, sp, #16
    45a0:	e1a04003 	mov	r4, r3
    45a4:	e58d2008 	str	r2, [sp, #8]
    45a8:	e58d300c 	str	r3, [sp, #12]
    45ac:	e1a03002 	mov	r3, r2
    45b0:	e88d0018 	stm	sp, {r3, r4}
    45b4:	e59dc000 	ldr	r12, [sp]
    45b8:	e59d7004 	ldr	r7, [sp, #4]
    45bc:	e26ca000 	rsb	r10, r12, #0
    45c0:	e3c78102 	bic	r8, r7, #-2147483648	; 0x80000000
    45c4:	e18aa00c 	orr	r10, r10, r12
    45c8:	e59f62b0 	ldr	r6, [pc, #688]	; 4880 <__ieee754_atan2+0x2e8>
    45cc:	e188afaa 	orr	r10, r8, r10, lsr #31
    45d0:	e15a0006 	cmp	r10, r6
    45d4:	e1a04000 	mov	r4, r0
    45d8:	e1a05001 	mov	r5, r1
    45dc:	e1a02000 	mov	r2, r0
    45e0:	e1a03001 	mov	r3, r1
    45e4:	8a000033 	bhi	46b8 <__ieee754_atan2+0x120>
    45e8:	e2609000 	rsb	r9, r0, #0
    45ec:	e3c1a102 	bic	r10, r1, #-2147483648	; 0x80000000
    45f0:	e1899000 	orr	r9, r9, r0
    45f4:	e18a9fa9 	orr	r9, r10, r9, lsr #31
    45f8:	e1590006 	cmp	r9, r6
    45fc:	8a00002d 	bhi	46b8 <__ieee754_atan2+0x120>
    4600:	e2877103 	add	r7, r7, #-1073741824	; 0xc0000000
    4604:	e2877601 	add	r7, r7, #1048576	; 0x100000
    4608:	e197700c 	orrs	r7, r7, r12
    460c:	e59d7004 	ldr	r7, [sp, #4]
    4610:	0a000040 	beq	4718 <__ieee754_atan2+0x180>
    4614:	e1a06f47 	asr	r6, r7, #30
    4618:	e2066002 	and	r6, r6, #2
    461c:	e19a2002 	orrs	r2, r10, r2
    4620:	e1866fa1 	orr	r6, r6, r1, lsr #31
    4624:	0a00002f 	beq	46e8 <__ieee754_atan2+0x150>
    4628:	e198c00c 	orrs	r12, r8, r12
    462c:	0a000034 	beq	4704 <__ieee754_atan2+0x16c>
    4630:	e59f2248 	ldr	r2, [pc, #584]	; 4880 <__ieee754_atan2+0x2e8>
    4634:	e1580002 	cmp	r8, r2
    4638:	0a000043 	beq	474c <__ieee754_atan2+0x1b4>
    463c:	e59f223c 	ldr	r2, [pc, #572]	; 4880 <__ieee754_atan2+0x2e8>
    4640:	e15a0002 	cmp	r10, r2
    4644:	0a00002e 	beq	4704 <__ieee754_atan2+0x16c>
    4648:	e068800a 	rsb	r8, r8, r10
    464c:	e1a08a48 	asr	r8, r8, #20
    4650:	e358003c 	cmp	r8, #60	; 0x3c
    4654:	ca000039 	bgt	4740 <__ieee754_atan2+0x1a8>
    4658:	e378003c 	cmn	r8, #60	; 0x3c
    465c:	a3a08000 	movge	r8, #0
    4660:	b3a08001 	movlt	r8, #1
    4664:	e0188fa7 	ands	r8, r8, r7, lsr #31
    4668:	13a00000 	movne	r0, #0
    466c:	13a01000 	movne	r1, #0
    4670:	0a000055 	beq	47cc <__ieee754_atan2+0x234>
    4674:	e3560001 	cmp	r6, #1
    4678:	0a000050 	beq	47c0 <__ieee754_atan2+0x228>
    467c:	e3560002 	cmp	r6, #2
    4680:	0a000043 	beq	4794 <__ieee754_atan2+0x1fc>
    4684:	e3560000 	cmp	r6, #0
    4688:	01a04000 	moveq	r4, r0
    468c:	01a05001 	moveq	r5, r1
    4690:	0a00000f 	beq	46d4 <__ieee754_atan2+0x13c>
    4694:	e28f3f67 	add	r3, pc, #412	; 0x19c
    4698:	e893000c 	ldm	r3, {r2, r3}
    469c:	eb000d01 	bl	7aa8 <__aeabi_dsub>
    46a0:	e28f3f66 	add	r3, pc, #408	; 0x198
    46a4:	e893000c 	ldm	r3, {r2, r3}
    46a8:	eb000cfe 	bl	7aa8 <__aeabi_dsub>
    46ac:	e1a04000 	mov	r4, r0
    46b0:	e1a05001 	mov	r5, r1
    46b4:	ea000006 	b	46d4 <__ieee754_atan2+0x13c>
    46b8:	e1a00004 	mov	r0, r4
    46bc:	e1a01005 	mov	r1, r5
    46c0:	e28d3008 	add	r3, sp, #8
    46c4:	e893000c 	ldm	r3, {r2, r3}
    46c8:	eb000cf7 	bl	7aac <__adddf3>
    46cc:	e1a04000 	mov	r4, r0
    46d0:	e1a05001 	mov	r5, r1
    46d4:	e1a00004 	mov	r0, r4
    46d8:	e1a01005 	mov	r1, r5
    46dc:	e28dd010 	add	sp, sp, #16
    46e0:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, r10, lr}
    46e4:	e12fff1e 	bx	lr
    46e8:	e3560003 	cmp	r6, #3
    46ec:	979ff106 	ldrls	pc, [pc, r6, lsl #2]
    46f0:	eaffffcc 	b	4628 <__ieee754_atan2+0x90>
    46f4:	000046d4 	.word	0x000046d4
    46f8:	000046d4 	.word	0x000046d4
    46fc:	00004734 	.word	0x00004734
    4700:	00004728 	.word	0x00004728
    4704:	e3530000 	cmp	r3, #0
    4708:	ba00001e 	blt	4788 <__ieee754_atan2+0x1f0>
    470c:	e28f5f4d 	add	r5, pc, #308	; 0x134
    4710:	e8950030 	ldm	r5, {r4, r5}
    4714:	eaffffee 	b	46d4 <__ieee754_atan2+0x13c>
    4718:	eb000ac0 	bl	7220 <atan>
    471c:	e1a04000 	mov	r4, r0
    4720:	e1a05001 	mov	r5, r1
    4724:	eaffffea 	b	46d4 <__ieee754_atan2+0x13c>
    4728:	e28f5e12 	add	r5, pc, #288	; 0x120
    472c:	e8950030 	ldm	r5, {r4, r5}
    4730:	eaffffe7 	b	46d4 <__ieee754_atan2+0x13c>
    4734:	e28f5f41 	add	r5, pc, #260	; 0x104
    4738:	e8950030 	ldm	r5, {r4, r5}
    473c:	eaffffe4 	b	46d4 <__ieee754_atan2+0x13c>
    4740:	e28f1c01 	add	r1, pc, #256	; 0x100
    4744:	e8910003 	ldm	r1, {r0, r1}
    4748:	eaffffc9 	b	4674 <__ieee754_atan2+0xdc>
    474c:	e15a0008 	cmp	r10, r8
    4750:	0a000025 	beq	47ec <__ieee754_atan2+0x254>
    4754:	e3560003 	cmp	r6, #3
    4758:	979ff106 	ldrls	pc, [pc, r6, lsl #2]
    475c:	eaffffb6 	b	463c <__ieee754_atan2+0xa4>
    4760:	0000477c 	.word	0x0000477c
    4764:	00004770 	.word	0x00004770
    4768:	00004734 	.word	0x00004734
    476c:	00004728 	.word	0x00004728
    4770:	e3a04000 	mov	r4, #0
    4774:	e3a05102 	mov	r5, #-2147483648	; 0x80000000
    4778:	eaffffd5 	b	46d4 <__ieee754_atan2+0x13c>
    477c:	e3a04000 	mov	r4, #0
    4780:	e3a05000 	mov	r5, #0
    4784:	eaffffd2 	b	46d4 <__ieee754_atan2+0x13c>
    4788:	e28f50c8 	add	r5, pc, #200	; 0xc8
    478c:	e8950030 	ldm	r5, {r4, r5}
    4790:	eaffffcf 	b	46d4 <__ieee754_atan2+0x13c>
    4794:	e28f309c 	add	r3, pc, #156	; 0x9c
    4798:	e893000c 	ldm	r3, {r2, r3}
    479c:	eb000cc1 	bl	7aa8 <__aeabi_dsub>
    47a0:	e1a02000 	mov	r2, r0
    47a4:	e1a03001 	mov	r3, r1
    47a8:	e28f1090 	add	r1, pc, #144	; 0x90
    47ac:	e8910003 	ldm	r1, {r0, r1}
    47b0:	eb000cbc 	bl	7aa8 <__aeabi_dsub>
    47b4:	e1a04000 	mov	r4, r0
    47b8:	e1a05001 	mov	r5, r1
    47bc:	eaffffc4 	b	46d4 <__ieee754_atan2+0x13c>
    47c0:	e1a04000 	mov	r4, r0
    47c4:	e2815102 	add	r5, r1, #-2147483648	; 0x80000000
    47c8:	eaffffc1 	b	46d4 <__ieee754_atan2+0x13c>
    47cc:	e28d3008 	add	r3, sp, #8
    47d0:	e893000c 	ldm	r3, {r2, r3}
    47d4:	e1a00004 	mov	r0, r4
    47d8:	e1a01005 	mov	r1, r5
    47dc:	eb000e5a 	bl	814c <__aeabi_ddiv>
    47e0:	eb000bb0 	bl	76a8 <fabs>
    47e4:	eb000a8d 	bl	7220 <atan>
    47e8:	eaffffa1 	b	4674 <__ieee754_atan2+0xdc>
    47ec:	e3560003 	cmp	r6, #3
    47f0:	979ff106 	ldrls	pc, [pc, r6, lsl #2]
    47f4:	eaffffc2 	b	4704 <__ieee754_atan2+0x16c>
    47f8:	0000482c 	.word	0x0000482c
    47fc:	00004820 	.word	0x00004820
    4800:	00004814 	.word	0x00004814
    4804:	00004808 	.word	0x00004808
    4808:	e28f5050 	add	r5, pc, #80	; 0x50
    480c:	e8950030 	ldm	r5, {r4, r5}
    4810:	eaffffaf 	b	46d4 <__ieee754_atan2+0x13c>
    4814:	e28f504c 	add	r5, pc, #76	; 0x4c
    4818:	e8950030 	ldm	r5, {r4, r5}
    481c:	eaffffac 	b	46d4 <__ieee754_atan2+0x13c>
    4820:	e28f5048 	add	r5, pc, #72	; 0x48
    4824:	e8950030 	ldm	r5, {r4, r5}
    4828:	eaffffa9 	b	46d4 <__ieee754_atan2+0x13c>
    482c:	e28f5044 	add	r5, pc, #68	; 0x44
    4830:	e8950030 	ldm	r5, {r4, r5}
    4834:	eaffffa6 	b	46d4 <__ieee754_atan2+0x13c>
    4838:	33145c07 	.word	0x33145c07
    483c:	3ca1a626 	.word	0x3ca1a626
    4840:	54442d18 	.word	0x54442d18
    4844:	400921fb 	.word	0x400921fb
    4848:	54442d18 	.word	0x54442d18
    484c:	3ff921fb 	.word	0x3ff921fb
    4850:	54442d18 	.word	0x54442d18
    4854:	c00921fb 	.word	0xc00921fb
    4858:	54442d18 	.word	0x54442d18
    485c:	bff921fb 	.word	0xbff921fb
    4860:	7f3321d2 	.word	0x7f3321d2
    4864:	c002d97c 	.word	0xc002d97c
    4868:	7f3321d2 	.word	0x7f3321d2
    486c:	4002d97c 	.word	0x4002d97c
    4870:	54442d18 	.word	0x54442d18
    4874:	bfe921fb 	.word	0xbfe921fb
    4878:	54442d18 	.word	0x54442d18
    487c:	3fe921fb 	.word	0x3fe921fb
    4880:	7ff00000 	.word	0x7ff00000
    4884:	e1a00000 	nop			; (mov r0, r0)

00004888 <__ieee754_pow>:
    4888:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    488c:	e1a0b003 	mov	r11, r3
    4890:	e1a0a002 	mov	r10, r2
    4894:	e3cb6102 	bic	r6, r11, #-2147483648	; 0x80000000
    4898:	e1a08001 	mov	r8, r1
    489c:	e24dd044 	sub	sp, sp, #68	; 0x44
    48a0:	e196100a 	orrs	r1, r6, r10
    48a4:	e1a04002 	mov	r4, r2
    48a8:	e1a07000 	mov	r7, r0
    48ac:	e1a05003 	mov	r5, r3
    48b0:	e1a0c00a 	mov	r12, r10
    48b4:	e58d8010 	str	r8, [sp, #16]
    48b8:	e1a09000 	mov	r9, r0
    48bc:	0a000060 	beq	4a44 <__ieee754_pow+0x1bc>
    48c0:	e59f12d0 	ldr	r1, [pc, #720]	; 4b98 <__ieee754_pow+0x310>
    48c4:	e3c80102 	bic	r0, r8, #-2147483648	; 0x80000000
    48c8:	e1500001 	cmp	r0, r1
    48cc:	e58d0008 	str	r0, [sp, #8]
    48d0:	da00000b 	ble	4904 <__ieee754_pow+0x7c>
    48d4:	e59d4008 	ldr	r4, [sp, #8]
    48d8:	e284a103 	add	r10, r4, #-1073741824	; 0xc0000000
    48dc:	e28aa601 	add	r10, r10, #1048576	; 0x100000
    48e0:	e19a9009 	orrs	r9, r10, r9
    48e4:	01a0a009 	moveq	r10, r9
    48e8:	059fb2d4 	ldreq	r11, [pc, #724]	; 4bc4 <__ieee754_pow+0x33c>
    48ec:	1a000057 	bne	4a50 <__ieee754_pow+0x1c8>
    48f0:	e1a0000a 	mov	r0, r10
    48f4:	e1a0100b 	mov	r1, r11
    48f8:	e28dd044 	add	sp, sp, #68	; 0x44
    48fc:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    4900:	e12fff1e 	bx	lr
    4904:	13a00000 	movne	r0, #0
    4908:	03a00001 	moveq	r0, #1
    490c:	e58d0018 	str	r0, [sp, #24]
    4910:	e3570000 	cmp	r7, #0
    4914:	03a00000 	moveq	r0, #0
    4918:	12000001 	andne	r0, r0, #1
    491c:	e3500000 	cmp	r0, #0
    4920:	1affffeb 	bne	48d4 <__ieee754_pow+0x4c>
    4924:	e1560001 	cmp	r6, r1
    4928:	caffffe9 	bgt	48d4 <__ieee754_pow+0x4c>
    492c:	13a01000 	movne	r1, #0
    4930:	03a01001 	moveq	r1, #1
    4934:	e58d1028 	str	r1, [sp, #40]	; 0x28
    4938:	e35a0000 	cmp	r10, #0
    493c:	03a01000 	moveq	r1, #0
    4940:	12011001 	andne	r1, r1, #1
    4944:	e3510000 	cmp	r1, #0
    4948:	1affffe1 	bne	48d4 <__ieee754_pow+0x4c>
    494c:	e59d0010 	ldr	r0, [sp, #16]
    4950:	e3500000 	cmp	r0, #0
    4954:	e58d8020 	str	r8, [sp, #32]
    4958:	e1a0400b 	mov	r4, r11
    495c:	ba000040 	blt	4a64 <__ieee754_pow+0x1dc>
    4960:	e58d1030 	str	r1, [sp, #48]	; 0x30
    4964:	e35c0000 	cmp	r12, #0
    4968:	1a00000c 	bne	49a0 <__ieee754_pow+0x118>
    496c:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    4970:	e3530000 	cmp	r3, #0
    4974:	1a00004e 	bne	4ab4 <__ieee754_pow+0x22c>
    4978:	e59f3244 	ldr	r3, [pc, #580]	; 4bc4 <__ieee754_pow+0x33c>
    497c:	e1560003 	cmp	r6, r3
    4980:	0a000073 	beq	4b54 <__ieee754_pow+0x2cc>
    4984:	e3540101 	cmp	r4, #1073741824	; 0x40000000
    4988:	01a00007 	moveq	r0, r7
    498c:	01a01008 	moveq	r1, r8
    4990:	0a000025 	beq	4a2c <__ieee754_pow+0x1a4>
    4994:	e59f3200 	ldr	r3, [pc, #512]	; 4b9c <__ieee754_pow+0x314>
    4998:	e1540003 	cmp	r4, r3
    499c:	0a0002c7 	beq	54c0 <__ieee754_pow+0xc38>
    49a0:	e1a00007 	mov	r0, r7
    49a4:	e1a01008 	mov	r1, r8
    49a8:	eb000b3e 	bl	76a8 <fabs>
    49ac:	e3590000 	cmp	r9, #0
    49b0:	1a000008 	bne	49d8 <__ieee754_pow+0x150>
    49b4:	e59d3018 	ldr	r3, [sp, #24]
    49b8:	e59d2008 	ldr	r2, [sp, #8]
    49bc:	e3520000 	cmp	r2, #0
    49c0:	03833001 	orreq	r3, r3, #1
    49c4:	e3530000 	cmp	r3, #0
    49c8:	1a000046 	bne	4ae8 <__ieee754_pow+0x260>
    49cc:	e59f31f0 	ldr	r3, [pc, #496]	; 4bc4 <__ieee754_pow+0x33c>
    49d0:	e1520003 	cmp	r2, r3
    49d4:	0a000043 	beq	4ae8 <__ieee754_pow+0x260>
    49d8:	e59d2010 	ldr	r2, [sp, #16]
    49dc:	e1a03fa2 	lsr	r3, r2, #31
    49e0:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
    49e4:	e2433001 	sub	r3, r3, #1
    49e8:	e1922003 	orrs	r2, r2, r3
    49ec:	e58d3010 	str	r3, [sp, #16]
    49f0:	0a000052 	beq	4b40 <__ieee754_pow+0x2b8>
    49f4:	e59f31a4 	ldr	r3, [pc, #420]	; 4ba0 <__ieee754_pow+0x318>
    49f8:	e1560003 	cmp	r6, r3
    49fc:	da000071 	ble	4bc8 <__ieee754_pow+0x340>
    4a00:	e2833621 	add	r3, r3, #34603008	; 0x2100000
    4a04:	e1560003 	cmp	r6, r3
    4a08:	da00030e 	ble	5648 <__ieee754_pow+0xdc0>
    4a0c:	e59d0008 	ldr	r0, [sp, #8]
    4a10:	e2433341 	sub	r3, r3, #67108865	; 0x4000001
    4a14:	e1500003 	cmp	r0, r3
    4a18:	da0002b4 	ble	54f0 <__ieee754_pow+0xc68>
    4a1c:	e3540000 	cmp	r4, #0
    4a20:	da00002d 	ble	4adc <__ieee754_pow+0x254>
    4a24:	e28f1f59 	add	r1, pc, #356	; 0x164
    4a28:	e8910003 	ldm	r1, {r0, r1}
    4a2c:	e1a02000 	mov	r2, r0
    4a30:	e1a03001 	mov	r3, r1
    4a34:	eb000d20 	bl	7ebc <__aeabi_dmul>
    4a38:	e1a0a000 	mov	r10, r0
    4a3c:	e1a0b001 	mov	r11, r1
    4a40:	eaffffaa 	b	48f0 <__ieee754_pow+0x68>
    4a44:	e1a0a001 	mov	r10, r1
    4a48:	e59fb174 	ldr	r11, [pc, #372]	; 4bc4 <__ieee754_pow+0x33c>
    4a4c:	eaffffa7 	b	48f0 <__ieee754_pow+0x68>
    4a50:	e59f014c 	ldr	r0, [pc, #332]	; 4ba4 <__ieee754_pow+0x31c>
    4a54:	eb000b36 	bl	7734 <nan>
    4a58:	e1a0a000 	mov	r10, r0
    4a5c:	e1a0b001 	mov	r11, r1
    4a60:	eaffffa2 	b	48f0 <__ieee754_pow+0x68>
    4a64:	e59f313c 	ldr	r3, [pc, #316]	; 4ba8 <__ieee754_pow+0x320>
    4a68:	e1560003 	cmp	r6, r3
    4a6c:	ca000044 	bgt	4b84 <__ieee754_pow+0x2fc>
    4a70:	e2433635 	sub	r3, r3, #55574528	; 0x3500000
    4a74:	e1560003 	cmp	r6, r3
    4a78:	daffffb8 	ble	4960 <__ieee754_pow+0xd8>
    4a7c:	e59f2128 	ldr	r2, [pc, #296]	; 4bac <__ieee754_pow+0x324>
    4a80:	e1a03a46 	asr	r3, r6, #20
    4a84:	e1530002 	cmp	r3, r2
    4a88:	da00034b 	ble	57bc <__ieee754_pow+0xf34>
    4a8c:	e2633e43 	rsb	r3, r3, #1072	; 0x430
    4a90:	e2832003 	add	r2, r3, #3
    4a94:	e1a0323a 	lsr	r3, r10, r2
    4a98:	e15a0213 	cmp	r10, r3, lsl r2
    4a9c:	02033001 	andeq	r3, r3, #1
    4aa0:	02633002 	rsbeq	r3, r3, #2
    4aa4:	058d3030 	streq	r3, [sp, #48]	; 0x30
    4aa8:	13a02000 	movne	r2, #0
    4aac:	158d2030 	strne	r2, [sp, #48]	; 0x30
    4ab0:	eaffffab 	b	4964 <__ieee754_pow+0xdc>
    4ab4:	e59d0008 	ldr	r0, [sp, #8]
    4ab8:	e2803103 	add	r3, r0, #-1073741824	; 0xc0000000
    4abc:	e2833601 	add	r3, r3, #1048576	; 0x100000
    4ac0:	e1933009 	orrs	r3, r3, r9
    4ac4:	0a000286 	beq	54e4 <__ieee754_pow+0xc5c>
    4ac8:	e59f30e0 	ldr	r3, [pc, #224]	; 4bb0 <__ieee754_pow+0x328>
    4acc:	e1500003 	cmp	r0, r3
    4ad0:	da0002c4 	ble	55e8 <__ieee754_pow+0xd60>
    4ad4:	e3540000 	cmp	r4, #0
    4ad8:	aaffff84 	bge	48f0 <__ieee754_pow+0x68>
    4adc:	e3a0a000 	mov	r10, #0
    4ae0:	e1a0b00a 	mov	r11, r10
    4ae4:	eaffff81 	b	48f0 <__ieee754_pow+0x68>
    4ae8:	e3540000 	cmp	r4, #0
    4aec:	ba000321 	blt	5778 <__ieee754_pow+0xef0>
    4af0:	e59d4020 	ldr	r4, [sp, #32]
    4af4:	e3540000 	cmp	r4, #0
    4af8:	aaffffce 	bge	4a38 <__ieee754_pow+0x1b0>
    4afc:	e59d4008 	ldr	r4, [sp, #8]
    4b00:	e2843103 	add	r3, r4, #-1073741824	; 0xc0000000
    4b04:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
    4b08:	e2833601 	add	r3, r3, #1048576	; 0x100000
    4b0c:	e1944003 	orrs	r4, r4, r3
    4b10:	1a000335 	bne	57ec <__ieee754_pow+0xf64>
    4b14:	e1a04000 	mov	r4, r0
    4b18:	e1a02000 	mov	r2, r0
    4b1c:	e1a05001 	mov	r5, r1
    4b20:	e1a03001 	mov	r3, r1
    4b24:	eb000bdf 	bl	7aa8 <__aeabi_dsub>
    4b28:	e1a02000 	mov	r2, r0
    4b2c:	e1a03001 	mov	r3, r1
    4b30:	eb000d85 	bl	814c <__aeabi_ddiv>
    4b34:	e1a0a000 	mov	r10, r0
    4b38:	e1a0b001 	mov	r11, r1
    4b3c:	eaffff6b 	b	48f0 <__ieee754_pow+0x68>
    4b40:	e1a00007 	mov	r0, r7
    4b44:	e1a01008 	mov	r1, r8
    4b48:	e1a02007 	mov	r2, r7
    4b4c:	e1a03008 	mov	r3, r8
    4b50:	eafffff3 	b	4b24 <__ieee754_pow+0x29c>
    4b54:	e3540000 	cmp	r4, #0
    4b58:	a1a0a007 	movge	r10, r7
    4b5c:	a1a0b008 	movge	r11, r8
    4b60:	aaffff62 	bge	48f0 <__ieee754_pow+0x68>
    4b64:	e1a02007 	mov	r2, r7
    4b68:	e1a03008 	mov	r3, r8
    4b6c:	e3a00000 	mov	r0, #0
    4b70:	e59f104c 	ldr	r1, [pc, #76]	; 4bc4 <__ieee754_pow+0x33c>
    4b74:	eb000d74 	bl	814c <__aeabi_ddiv>
    4b78:	e1a0a000 	mov	r10, r0
    4b7c:	e1a0b001 	mov	r11, r1
    4b80:	eaffff5a 	b	48f0 <__ieee754_pow+0x68>
    4b84:	e3a01002 	mov	r1, #2
    4b88:	eaffff74 	b	4960 <__ieee754_pow+0xd8>
    4b8c:	e1a00000 	nop			; (mov r0, r0)
    4b90:	8800759c 	.word	0x8800759c
    4b94:	7e37e43c 	.word	0x7e37e43c
    4b98:	7ff00000 	.word	0x7ff00000
    4b9c:	3fe00000 	.word	0x3fe00000
    4ba0:	41e00000 	.word	0x41e00000
    4ba4:	00009160 	.word	0x00009160
    4ba8:	433fffff 	.word	0x433fffff
    4bac:	00000413 	.word	0x00000413
    4bb0:	3fefffff 	.word	0x3fefffff
    4bb4:	43400000 	.word	0x43400000
    4bb8:	0003988e 	.word	0x0003988e
    4bbc:	000bb679 	.word	0x000bb679
    4bc0:	00009168 	.word	0x00009168
    4bc4:	3ff00000 	.word	0x3ff00000
    4bc8:	e59d4008 	ldr	r4, [sp, #8]
    4bcc:	e3540601 	cmp	r4, #1048576	; 0x100000
    4bd0:	a3a02000 	movge	r2, #0
    4bd4:	aa000004 	bge	4bec <__ieee754_pow+0x364>
    4bd8:	e3a02000 	mov	r2, #0
    4bdc:	e51f3030 	ldr	r3, [pc, #-48]	; 4bb4 <__ieee754_pow+0x32c>
    4be0:	eb000cb5 	bl	7ebc <__aeabi_dmul>
    4be4:	e58d1008 	str	r1, [sp, #8]
    4be8:	e3e02034 	mvn	r2, #52	; 0x34
    4bec:	e59d4008 	ldr	r4, [sp, #8]
    4bf0:	e51fe040 	ldr	lr, [pc, #-64]	; 4bb8 <__ieee754_pow+0x330>
    4bf4:	e3c434ff 	bic	r3, r4, #-16777216	; 0xff000000
    4bf8:	e1a0ca44 	asr	r12, r4, #20
    4bfc:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
    4c00:	e153000e 	cmp	r3, lr
    4c04:	e24ccfff 	sub	r12, r12, #1020	; 0x3fc
    4c08:	e24cc003 	sub	r12, r12, #3
    4c0c:	e38345ff 	orr	r4, r3, #1069547520	; 0x3fc00000
    4c10:	d3a05000 	movle	r5, #0
    4c14:	e08cc002 	add	r12, r12, r2
    4c18:	e3844603 	orr	r4, r4, #3145728	; 0x300000
    4c1c:	d1a0e005 	movle	lr, r5
    4c20:	da000007 	ble	4c44 <__ieee754_pow+0x3bc>
    4c24:	e51f2070 	ldr	r2, [pc, #-112]	; 4bbc <__ieee754_pow+0x334>
    4c28:	e1530002 	cmp	r3, r2
    4c2c:	c3a05000 	movgt	r5, #0
    4c30:	c28cc001 	addgt	r12, r12, #1
    4c34:	c2444601 	subgt	r4, r4, #1048576	; 0x100000
    4c38:	c1a0e005 	movgt	lr, r5
    4c3c:	d3a05701 	movle	r5, #262144	; 0x40000
    4c40:	d3a0e001 	movle	lr, #1
    4c44:	e51f108c 	ldr	r1, [pc, #-140]	; 4bc0 <__ieee754_pow+0x338>
    4c48:	e081118e 	add	r1, r1, lr, lsl #3
    4c4c:	e1a02000 	mov	r2, r0
    4c50:	e58d1034 	str	r1, [sp, #52]	; 0x34
    4c54:	e8910003 	ldm	r1, {r0, r1}
    4c58:	e1a03004 	mov	r3, r4
    4c5c:	e58d0028 	str	r0, [sp, #40]	; 0x28
    4c60:	e58d102c 	str	r1, [sp, #44]	; 0x2c
    4c64:	e58d2020 	str	r2, [sp, #32]
    4c68:	e58d3024 	str	r3, [sp, #36]	; 0x24
    4c6c:	e1a00002 	mov	r0, r2
    4c70:	e1a01004 	mov	r1, r4
    4c74:	e28d3028 	add	r3, sp, #40	; 0x28
    4c78:	e893000c 	ldm	r3, {r2, r3}
    4c7c:	e58dc004 	str	r12, [sp, #4]
    4c80:	eb000b88 	bl	7aa8 <__aeabi_dsub>
    4c84:	e28d3028 	add	r3, sp, #40	; 0x28
    4c88:	e893000c 	ldm	r3, {r2, r3}
    4c8c:	e1a06000 	mov	r6, r0
    4c90:	e1a07001 	mov	r7, r1
    4c94:	e28d1020 	add	r1, sp, #32
    4c98:	e8910003 	ldm	r1, {r0, r1}
    4c9c:	eb000b82 	bl	7aac <__adddf3>
    4ca0:	e1a02000 	mov	r2, r0
    4ca4:	e1a03001 	mov	r3, r1
    4ca8:	e3a00000 	mov	r0, #0
    4cac:	e51f10f0 	ldr	r1, [pc, #-240]	; 4bc4 <__ieee754_pow+0x33c>
    4cb0:	eb000d25 	bl	814c <__aeabi_ddiv>
    4cb4:	e58d0038 	str	r0, [sp, #56]	; 0x38
    4cb8:	e58d103c 	str	r1, [sp, #60]	; 0x3c
    4cbc:	e28d3038 	add	r3, sp, #56	; 0x38
    4cc0:	e893000c 	ldm	r3, {r2, r3}
    4cc4:	e1a00006 	mov	r0, r6
    4cc8:	e1a01007 	mov	r1, r7
    4ccc:	eb000c7a 	bl	7ebc <__aeabi_dmul>
    4cd0:	e58d0018 	str	r0, [sp, #24]
    4cd4:	e58d101c 	str	r1, [sp, #28]
    4cd8:	e28d3018 	add	r3, sp, #24
    4cdc:	e893000c 	ldm	r3, {r2, r3}
    4ce0:	e1a010c4 	asr	r1, r4, #1
    4ce4:	e3a04000 	mov	r4, #0
    4ce8:	e58d2008 	str	r2, [sp, #8]
    4cec:	e58d300c 	str	r3, [sp, #12]
    4cf0:	e58d4008 	str	r4, [sp, #8]
    4cf4:	e28d9008 	add	r9, sp, #8
    4cf8:	e8990300 	ldm	r9, {r8, r9}
    4cfc:	e3811202 	orr	r1, r1, #536870912	; 0x20000000
    4d00:	e2811702 	add	r1, r1, #524288	; 0x80000
    4d04:	e0853001 	add	r3, r5, r1
    4d08:	e3a02000 	mov	r2, #0
    4d0c:	e1a00008 	mov	r0, r8
    4d10:	e1a01009 	mov	r1, r9
    4d14:	e1a04002 	mov	r4, r2
    4d18:	e1a05003 	mov	r5, r3
    4d1c:	eb000c66 	bl	7ebc <__aeabi_dmul>
    4d20:	e1a02000 	mov	r2, r0
    4d24:	e1a03001 	mov	r3, r1
    4d28:	e1a00006 	mov	r0, r6
    4d2c:	e1a01007 	mov	r1, r7
    4d30:	eb000b5c 	bl	7aa8 <__aeabi_dsub>
    4d34:	e28d3028 	add	r3, sp, #40	; 0x28
    4d38:	e893000c 	ldm	r3, {r2, r3}
    4d3c:	e1a06000 	mov	r6, r0
    4d40:	e1a07001 	mov	r7, r1
    4d44:	e1a00004 	mov	r0, r4
    4d48:	e1a01005 	mov	r1, r5
    4d4c:	eb000b55 	bl	7aa8 <__aeabi_dsub>
    4d50:	e1a02000 	mov	r2, r0
    4d54:	e1a03001 	mov	r3, r1
    4d58:	e28d1020 	add	r1, sp, #32
    4d5c:	e8910003 	ldm	r1, {r0, r1}
    4d60:	eb000b50 	bl	7aa8 <__aeabi_dsub>
    4d64:	e1a02000 	mov	r2, r0
    4d68:	e1a03001 	mov	r3, r1
    4d6c:	e1a00008 	mov	r0, r8
    4d70:	e1a01009 	mov	r1, r9
    4d74:	eb000c50 	bl	7ebc <__aeabi_dmul>
    4d78:	e1a02000 	mov	r2, r0
    4d7c:	e1a03001 	mov	r3, r1
    4d80:	e1a00006 	mov	r0, r6
    4d84:	e1a01007 	mov	r1, r7
    4d88:	eb000b46 	bl	7aa8 <__aeabi_dsub>
    4d8c:	e28d3038 	add	r3, sp, #56	; 0x38
    4d90:	e893000c 	ldm	r3, {r2, r3}
    4d94:	eb000c48 	bl	7ebc <__aeabi_dmul>
    4d98:	e1a06000 	mov	r6, r0
    4d9c:	e1a07001 	mov	r7, r1
    4da0:	e28d1018 	add	r1, sp, #24
    4da4:	e8910003 	ldm	r1, {r0, r1}
    4da8:	e1a02000 	mov	r2, r0
    4dac:	e1a03001 	mov	r3, r1
    4db0:	eb000c41 	bl	7ebc <__aeabi_dmul>
    4db4:	e1a02000 	mov	r2, r0
    4db8:	e1a03001 	mov	r3, r1
    4dbc:	e1a04000 	mov	r4, r0
    4dc0:	e1a05001 	mov	r5, r1
    4dc4:	eb000c3c 	bl	7ebc <__aeabi_dmul>
    4dc8:	e28f3e3f 	add	r3, pc, #1008	; 0x3f0
    4dcc:	e893000c 	ldm	r3, {r2, r3}
    4dd0:	e58d0020 	str	r0, [sp, #32]
    4dd4:	e58d1024 	str	r1, [sp, #36]	; 0x24
    4dd8:	e1a00004 	mov	r0, r4
    4ddc:	e1a01005 	mov	r1, r5
    4de0:	eb000c35 	bl	7ebc <__aeabi_dmul>
    4de4:	e28f3ff7 	add	r3, pc, #988	; 0x3dc
    4de8:	e893000c 	ldm	r3, {r2, r3}
    4dec:	eb000b2e 	bl	7aac <__adddf3>
    4df0:	e1a02004 	mov	r2, r4
    4df4:	e1a03005 	mov	r3, r5
    4df8:	eb000c2f 	bl	7ebc <__aeabi_dmul>
    4dfc:	e28f3ff3 	add	r3, pc, #972	; 0x3cc
    4e00:	e893000c 	ldm	r3, {r2, r3}
    4e04:	eb000b28 	bl	7aac <__adddf3>
    4e08:	e1a02004 	mov	r2, r4
    4e0c:	e1a03005 	mov	r3, r5
    4e10:	eb000c29 	bl	7ebc <__aeabi_dmul>
    4e14:	e28f3fef 	add	r3, pc, #956	; 0x3bc
    4e18:	e893000c 	ldm	r3, {r2, r3}
    4e1c:	eb000b22 	bl	7aac <__adddf3>
    4e20:	e1a02004 	mov	r2, r4
    4e24:	e1a03005 	mov	r3, r5
    4e28:	eb000c23 	bl	7ebc <__aeabi_dmul>
    4e2c:	e28f3feb 	add	r3, pc, #940	; 0x3ac
    4e30:	e893000c 	ldm	r3, {r2, r3}
    4e34:	eb000b1c 	bl	7aac <__adddf3>
    4e38:	e1a02004 	mov	r2, r4
    4e3c:	e1a03005 	mov	r3, r5
    4e40:	eb000c1d 	bl	7ebc <__aeabi_dmul>
    4e44:	e28f3fe7 	add	r3, pc, #924	; 0x39c
    4e48:	e893000c 	ldm	r3, {r2, r3}
    4e4c:	eb000b16 	bl	7aac <__adddf3>
    4e50:	e1a02000 	mov	r2, r0
    4e54:	e1a03001 	mov	r3, r1
    4e58:	e28d1020 	add	r1, sp, #32
    4e5c:	e8910003 	ldm	r1, {r0, r1}
    4e60:	eb000c15 	bl	7ebc <__aeabi_dmul>
    4e64:	e28d3018 	add	r3, sp, #24
    4e68:	e893000c 	ldm	r3, {r2, r3}
    4e6c:	e1a04000 	mov	r4, r0
    4e70:	e1a05001 	mov	r5, r1
    4e74:	e1a00008 	mov	r0, r8
    4e78:	e1a01009 	mov	r1, r9
    4e7c:	eb000b0a 	bl	7aac <__adddf3>
    4e80:	e1a02006 	mov	r2, r6
    4e84:	e1a03007 	mov	r3, r7
    4e88:	eb000c0b 	bl	7ebc <__aeabi_dmul>
    4e8c:	e1a02004 	mov	r2, r4
    4e90:	e1a03005 	mov	r3, r5
    4e94:	eb000b04 	bl	7aac <__adddf3>
    4e98:	e1a02008 	mov	r2, r8
    4e9c:	e58d0020 	str	r0, [sp, #32]
    4ea0:	e58d1024 	str	r1, [sp, #36]	; 0x24
    4ea4:	e1a03009 	mov	r3, r9
    4ea8:	e1a00008 	mov	r0, r8
    4eac:	e1a01009 	mov	r1, r9
    4eb0:	eb000c01 	bl	7ebc <__aeabi_dmul>
    4eb4:	e3a02000 	mov	r2, #0
    4eb8:	e59f3348 	ldr	r3, [pc, #840]	; 5208 <__ieee754_pow+0x980>
    4ebc:	e58d0028 	str	r0, [sp, #40]	; 0x28
    4ec0:	e58d102c 	str	r1, [sp, #44]	; 0x2c
    4ec4:	eb000af8 	bl	7aac <__adddf3>
    4ec8:	e28d3020 	add	r3, sp, #32
    4ecc:	e893000c 	ldm	r3, {r2, r3}
    4ed0:	eb000af5 	bl	7aac <__adddf3>
    4ed4:	e59de008 	ldr	lr, [sp, #8]
    4ed8:	e1a05001 	mov	r5, r1
    4edc:	e1a0200e 	mov	r2, lr
    4ee0:	e1a03005 	mov	r3, r5
    4ee4:	e1a00008 	mov	r0, r8
    4ee8:	e1a01009 	mov	r1, r9
    4eec:	e1a0400e 	mov	r4, lr
    4ef0:	eb000bf1 	bl	7ebc <__aeabi_dmul>
    4ef4:	e1a02004 	mov	r2, r4
    4ef8:	e1a08000 	mov	r8, r0
    4efc:	e1a09001 	mov	r9, r1
    4f00:	e1a03005 	mov	r3, r5
    4f04:	e1a00006 	mov	r0, r6
    4f08:	e1a01007 	mov	r1, r7
    4f0c:	eb000bea 	bl	7ebc <__aeabi_dmul>
    4f10:	e3a02000 	mov	r2, #0
    4f14:	e1a06000 	mov	r6, r0
    4f18:	e1a07001 	mov	r7, r1
    4f1c:	e1a00004 	mov	r0, r4
    4f20:	e1a01005 	mov	r1, r5
    4f24:	e59f32dc 	ldr	r3, [pc, #732]	; 5208 <__ieee754_pow+0x980>
    4f28:	eb000ade 	bl	7aa8 <__aeabi_dsub>
    4f2c:	e28d3028 	add	r3, sp, #40	; 0x28
    4f30:	e893000c 	ldm	r3, {r2, r3}
    4f34:	eb000adb 	bl	7aa8 <__aeabi_dsub>
    4f38:	e1a02000 	mov	r2, r0
    4f3c:	e1a03001 	mov	r3, r1
    4f40:	e28d1020 	add	r1, sp, #32
    4f44:	e8910003 	ldm	r1, {r0, r1}
    4f48:	eb000ad6 	bl	7aa8 <__aeabi_dsub>
    4f4c:	e28d3018 	add	r3, sp, #24
    4f50:	e893000c 	ldm	r3, {r2, r3}
    4f54:	eb000bd8 	bl	7ebc <__aeabi_dmul>
    4f58:	e1a02000 	mov	r2, r0
    4f5c:	e1a03001 	mov	r3, r1
    4f60:	e1a00006 	mov	r0, r6
    4f64:	e1a01007 	mov	r1, r7
    4f68:	eb000acf 	bl	7aac <__adddf3>
    4f6c:	e1a06000 	mov	r6, r0
    4f70:	e1a07001 	mov	r7, r1
    4f74:	e1a02006 	mov	r2, r6
    4f78:	e1a03007 	mov	r3, r7
    4f7c:	e1a00008 	mov	r0, r8
    4f80:	e1a01009 	mov	r1, r9
    4f84:	eb000ac8 	bl	7aac <__adddf3>
    4f88:	e59d2008 	ldr	r2, [sp, #8]
    4f8c:	e59f3278 	ldr	r3, [pc, #632]	; 520c <__ieee754_pow+0x984>
    4f90:	e1a04002 	mov	r4, r2
    4f94:	e1a00002 	mov	r0, r2
    4f98:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    4f9c:	e1a05001 	mov	r5, r1
    4fa0:	eb000bc5 	bl	7ebc <__aeabi_dmul>
    4fa4:	e28f3f91 	add	r3, pc, #580	; 0x244
    4fa8:	e893000c 	ldm	r3, {r2, r3}
    4fac:	e58d0018 	str	r0, [sp, #24]
    4fb0:	e58d101c 	str	r1, [sp, #28]
    4fb4:	e1a00004 	mov	r0, r4
    4fb8:	e1a01005 	mov	r1, r5
    4fbc:	eb000bbe 	bl	7ebc <__aeabi_dmul>
    4fc0:	e1a02008 	mov	r2, r8
    4fc4:	e58d0020 	str	r0, [sp, #32]
    4fc8:	e58d1024 	str	r1, [sp, #36]	; 0x24
    4fcc:	e1a03009 	mov	r3, r9
    4fd0:	e1a00004 	mov	r0, r4
    4fd4:	e1a01005 	mov	r1, r5
    4fd8:	eb000ab2 	bl	7aa8 <__aeabi_dsub>
    4fdc:	e1a02000 	mov	r2, r0
    4fe0:	e1a03001 	mov	r3, r1
    4fe4:	e1a00006 	mov	r0, r6
    4fe8:	e1a01007 	mov	r1, r7
    4fec:	eb000aad 	bl	7aa8 <__aeabi_dsub>
    4ff0:	e28f3c02 	add	r3, pc, #512	; 0x200
    4ff4:	e893000c 	ldm	r3, {r2, r3}
    4ff8:	eb000baf 	bl	7ebc <__aeabi_dmul>
    4ffc:	e1a02000 	mov	r2, r0
    5000:	e1a03001 	mov	r3, r1
    5004:	e28d1020 	add	r1, sp, #32
    5008:	e8910003 	ldm	r1, {r0, r1}
    500c:	eb000aa6 	bl	7aac <__adddf3>
    5010:	e59d4034 	ldr	r4, [sp, #52]	; 0x34
    5014:	e2843010 	add	r3, r4, #16
    5018:	e893000c 	ldm	r3, {r2, r3}
    501c:	eb000aa2 	bl	7aac <__adddf3>
    5020:	e59dc004 	ldr	r12, [sp, #4]
    5024:	e1a04000 	mov	r4, r0
    5028:	e1a0000c 	mov	r0, r12
    502c:	e1a05001 	mov	r5, r1
    5030:	eb000b6a 	bl	7de0 <__aeabi_i2d>
    5034:	e59de034 	ldr	lr, [sp, #52]	; 0x34
    5038:	e28e9020 	add	r9, lr, #32
    503c:	e8990300 	ldm	r9, {r8, r9}
    5040:	e1a06000 	mov	r6, r0
    5044:	e1a07001 	mov	r7, r1
    5048:	e1a02004 	mov	r2, r4
    504c:	e28d1018 	add	r1, sp, #24
    5050:	e8910003 	ldm	r1, {r0, r1}
    5054:	e1a03005 	mov	r3, r5
    5058:	eb000a93 	bl	7aac <__adddf3>
    505c:	e1a02008 	mov	r2, r8
    5060:	e1a03009 	mov	r3, r9
    5064:	eb000a90 	bl	7aac <__adddf3>
    5068:	e1a02006 	mov	r2, r6
    506c:	e1a03007 	mov	r3, r7
    5070:	eb000a8d 	bl	7aac <__adddf3>
    5074:	e59d2008 	ldr	r2, [sp, #8]
    5078:	e1a03007 	mov	r3, r7
    507c:	e1a00002 	mov	r0, r2
    5080:	e1a02006 	mov	r2, r6
    5084:	e58d0008 	str	r0, [sp, #8]
    5088:	e58d100c 	str	r1, [sp, #12]
    508c:	eb000a85 	bl	7aa8 <__aeabi_dsub>
    5090:	e1a02008 	mov	r2, r8
    5094:	e1a03009 	mov	r3, r9
    5098:	eb000a82 	bl	7aa8 <__aeabi_dsub>
    509c:	e28d3018 	add	r3, sp, #24
    50a0:	e893000c 	ldm	r3, {r2, r3}
    50a4:	eb000a7f 	bl	7aa8 <__aeabi_dsub>
    50a8:	e1a03001 	mov	r3, r1
    50ac:	e1a02000 	mov	r2, r0
    50b0:	e1a01005 	mov	r1, r5
    50b4:	e1a00004 	mov	r0, r4
    50b8:	eb000a7a 	bl	7aa8 <__aeabi_dsub>
    50bc:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
    50c0:	e2443001 	sub	r3, r4, #1
    50c4:	e59d4010 	ldr	r4, [sp, #16]
    50c8:	e1934004 	orrs	r4, r3, r4
    50cc:	e1a08000 	mov	r8, r0
    50d0:	e1a09001 	mov	r9, r1
    50d4:	1a00013e 	bne	55d4 <__ieee754_pow+0xd4c>
    50d8:	e59f1130 	ldr	r1, [pc, #304]	; 5210 <__ieee754_pow+0x988>
    50dc:	e3a00000 	mov	r0, #0
    50e0:	e58d0010 	str	r0, [sp, #16]
    50e4:	e58d1014 	str	r1, [sp, #20]
    50e8:	e3a06000 	mov	r6, #0
    50ec:	e1a02006 	mov	r2, r6
    50f0:	e1a0300b 	mov	r3, r11
    50f4:	e1a0000a 	mov	r0, r10
    50f8:	e1a0100b 	mov	r1, r11
    50fc:	eb000a69 	bl	7aa8 <__aeabi_dsub>
    5100:	e28d3008 	add	r3, sp, #8
    5104:	e893000c 	ldm	r3, {r2, r3}
    5108:	eb000b6b 	bl	7ebc <__aeabi_dmul>
    510c:	e1a03009 	mov	r3, r9
    5110:	e1a04000 	mov	r4, r0
    5114:	e1a05001 	mov	r5, r1
    5118:	e1a0000a 	mov	r0, r10
    511c:	e1a0100b 	mov	r1, r11
    5120:	e1a02008 	mov	r2, r8
    5124:	eb000b64 	bl	7ebc <__aeabi_dmul>
    5128:	e1a02000 	mov	r2, r0
    512c:	e1a03001 	mov	r3, r1
    5130:	e1a00004 	mov	r0, r4
    5134:	e1a01005 	mov	r1, r5
    5138:	eb000a5b 	bl	7aac <__adddf3>
    513c:	e1a0700b 	mov	r7, r11
    5140:	e28d3008 	add	r3, sp, #8
    5144:	e893000c 	ldm	r3, {r2, r3}
    5148:	e1a0a000 	mov	r10, r0
    514c:	e1a0b001 	mov	r11, r1
    5150:	e1a00006 	mov	r0, r6
    5154:	e1a01007 	mov	r1, r7
    5158:	eb000b57 	bl	7ebc <__aeabi_dmul>
    515c:	e1a04000 	mov	r4, r0
    5160:	e1a05001 	mov	r5, r1
    5164:	e1a0000a 	mov	r0, r10
    5168:	e1a0100b 	mov	r1, r11
    516c:	e1a02004 	mov	r2, r4
    5170:	e1a03005 	mov	r3, r5
    5174:	eb000a4c 	bl	7aac <__adddf3>
    5178:	e59fc094 	ldr	r12, [pc, #148]	; 5214 <__ieee754_pow+0x98c>
    517c:	e151000c 	cmp	r1, r12
    5180:	e1a06000 	mov	r6, r0
    5184:	e1a07001 	mov	r7, r1
    5188:	e1a09001 	mov	r9, r1
    518c:	da0000da 	ble	54fc <__ieee754_pow+0xc74>
    5190:	e28134bf 	add	r3, r1, #-1090519040	; 0xbf000000
    5194:	e2833607 	add	r3, r3, #7340032	; 0x700000
    5198:	e1933000 	orrs	r3, r3, r0
    519c:	1a00017b 	bne	5790 <__ieee754_pow+0xf08>
    51a0:	e28f3058 	add	r3, pc, #88	; 0x58
    51a4:	e893000c 	ldm	r3, {r2, r3}
    51a8:	e1a0000a 	mov	r0, r10
    51ac:	e1a0100b 	mov	r1, r11
    51b0:	eb000a3d 	bl	7aac <__adddf3>
    51b4:	e1a02004 	mov	r2, r4
    51b8:	ea000018 	b	5220 <__ieee754_pow+0x998>
    51bc:	e1a00000 	nop			; (mov r0, r0)
    51c0:	4a454eef 	.word	0x4a454eef
    51c4:	3fca7e28 	.word	0x3fca7e28
    51c8:	93c9db65 	.word	0x93c9db65
    51cc:	3fcd864a 	.word	0x3fcd864a
    51d0:	a91d4101 	.word	0xa91d4101
    51d4:	3fd17460 	.word	0x3fd17460
    51d8:	518f264d 	.word	0x518f264d
    51dc:	3fd55555 	.word	0x3fd55555
    51e0:	db6fabff 	.word	0xdb6fabff
    51e4:	3fdb6db6 	.word	0x3fdb6db6
    51e8:	33333303 	.word	0x33333303
    51ec:	3fe33333 	.word	0x3fe33333
    51f0:	145b01f5 	.word	0x145b01f5
    51f4:	be3e2fe0 	.word	0xbe3e2fe0
    51f8:	dc3a03fd 	.word	0xdc3a03fd
    51fc:	3feec709 	.word	0x3feec709
    5200:	652b82fe 	.word	0x652b82fe
    5204:	3c971547 	.word	0x3c971547
    5208:	40080000 	.word	0x40080000
    520c:	3feec709 	.word	0x3feec709
    5210:	bff00000 	.word	0xbff00000
    5214:	408fffff 	.word	0x408fffff
    5218:	3fe00000 	.word	0x3fe00000
    521c:	3fe62e43 	.word	0x3fe62e43
    5220:	e58d0008 	str	r0, [sp, #8]
    5224:	e58d100c 	str	r1, [sp, #12]
    5228:	e1a03005 	mov	r3, r5
    522c:	e1a00006 	mov	r0, r6
    5230:	e1a01007 	mov	r1, r7
    5234:	eb000a1b 	bl	7aa8 <__aeabi_dsub>
    5238:	e1a02000 	mov	r2, r0
    523c:	e1a03001 	mov	r3, r1
    5240:	e28d1008 	add	r1, sp, #8
    5244:	e8910003 	ldm	r1, {r0, r1}
    5248:	eb000c8d 	bl	8484 <__aeabi_dcmpgt>
    524c:	e3500000 	cmp	r0, #0
    5250:	03c78102 	biceq	r8, r7, #-2147483648	; 0x80000000
    5254:	1a00014d 	bne	5790 <__ieee754_pow+0xf08>
    5258:	e51f3048 	ldr	r3, [pc, #-72]	; 5218 <__ieee754_pow+0x990>
    525c:	e1580003 	cmp	r8, r3
    5260:	d3a0c000 	movle	r12, #0
    5264:	d58dc008 	strle	r12, [sp, #8]
    5268:	ca0000b5 	bgt	5544 <__ieee754_pow+0xcbc>
    526c:	e3a06000 	mov	r6, #0
    5270:	e1a00006 	mov	r0, r6
    5274:	e1a01007 	mov	r1, r7
    5278:	e3a02000 	mov	r2, #0
    527c:	e51f3068 	ldr	r3, [pc, #-104]	; 521c <__ieee754_pow+0x994>
    5280:	e58dc004 	str	r12, [sp, #4]
    5284:	eb000b0c 	bl	7ebc <__aeabi_dmul>
    5288:	e1a02004 	mov	r2, r4
    528c:	e1a08000 	mov	r8, r0
    5290:	e1a09001 	mov	r9, r1
    5294:	e1a03005 	mov	r3, r5
    5298:	e1a00006 	mov	r0, r6
    529c:	e1a01007 	mov	r1, r7
    52a0:	eb000a00 	bl	7aa8 <__aeabi_dsub>
    52a4:	e1a02000 	mov	r2, r0
    52a8:	e1a03001 	mov	r3, r1
    52ac:	e1a0000a 	mov	r0, r10
    52b0:	e1a0100b 	mov	r1, r11
    52b4:	eb0009fb 	bl	7aa8 <__aeabi_dsub>
    52b8:	e28f3fce 	add	r3, pc, #824	; 0x338
    52bc:	e893000c 	ldm	r3, {r2, r3}
    52c0:	eb000afd 	bl	7ebc <__aeabi_dmul>
    52c4:	e28f3fcd 	add	r3, pc, #820	; 0x334
    52c8:	e893000c 	ldm	r3, {r2, r3}
    52cc:	e1a04000 	mov	r4, r0
    52d0:	e1a05001 	mov	r5, r1
    52d4:	e1a00006 	mov	r0, r6
    52d8:	e1a01007 	mov	r1, r7
    52dc:	eb000af6 	bl	7ebc <__aeabi_dmul>
    52e0:	e1a02000 	mov	r2, r0
    52e4:	e1a03001 	mov	r3, r1
    52e8:	e1a00004 	mov	r0, r4
    52ec:	e1a01005 	mov	r1, r5
    52f0:	eb0009ed 	bl	7aac <__adddf3>
    52f4:	e1a04000 	mov	r4, r0
    52f8:	e1a05001 	mov	r5, r1
    52fc:	e1a02004 	mov	r2, r4
    5300:	e1a03005 	mov	r3, r5
    5304:	e1a00008 	mov	r0, r8
    5308:	e1a01009 	mov	r1, r9
    530c:	eb0009e6 	bl	7aac <__adddf3>
    5310:	e1a02008 	mov	r2, r8
    5314:	e1a03009 	mov	r3, r9
    5318:	e1a0a000 	mov	r10, r0
    531c:	e1a0b001 	mov	r11, r1
    5320:	eb0009e0 	bl	7aa8 <__aeabi_dsub>
    5324:	e1a02000 	mov	r2, r0
    5328:	e1a03001 	mov	r3, r1
    532c:	e1a00004 	mov	r0, r4
    5330:	e1a01005 	mov	r1, r5
    5334:	eb0009db 	bl	7aa8 <__aeabi_dsub>
    5338:	e1a0200a 	mov	r2, r10
    533c:	e1a08000 	mov	r8, r0
    5340:	e1a09001 	mov	r9, r1
    5344:	e1a0300b 	mov	r3, r11
    5348:	e1a0000a 	mov	r0, r10
    534c:	e1a0100b 	mov	r1, r11
    5350:	eb000ad9 	bl	7ebc <__aeabi_dmul>
    5354:	e28f3fab 	add	r3, pc, #684	; 0x2ac
    5358:	e893000c 	ldm	r3, {r2, r3}
    535c:	e1a04000 	mov	r4, r0
    5360:	e1a05001 	mov	r5, r1
    5364:	eb000ad4 	bl	7ebc <__aeabi_dmul>
    5368:	e28f3e2a 	add	r3, pc, #672	; 0x2a0
    536c:	e893000c 	ldm	r3, {r2, r3}
    5370:	eb0009cc 	bl	7aa8 <__aeabi_dsub>
    5374:	e1a02004 	mov	r2, r4
    5378:	e1a03005 	mov	r3, r5
    537c:	eb000ace 	bl	7ebc <__aeabi_dmul>
    5380:	e28f3e29 	add	r3, pc, #656	; 0x290
    5384:	e893000c 	ldm	r3, {r2, r3}
    5388:	eb0009c7 	bl	7aac <__adddf3>
    538c:	e1a02004 	mov	r2, r4
    5390:	e1a03005 	mov	r3, r5
    5394:	eb000ac8 	bl	7ebc <__aeabi_dmul>
    5398:	e28f3d0a 	add	r3, pc, #640	; 0x280
    539c:	e893000c 	ldm	r3, {r2, r3}
    53a0:	eb0009c0 	bl	7aa8 <__aeabi_dsub>
    53a4:	e1a02004 	mov	r2, r4
    53a8:	e1a03005 	mov	r3, r5
    53ac:	eb000ac2 	bl	7ebc <__aeabi_dmul>
    53b0:	e28f3e27 	add	r3, pc, #624	; 0x270
    53b4:	e893000c 	ldm	r3, {r2, r3}
    53b8:	eb0009bb 	bl	7aac <__adddf3>
    53bc:	e1a02004 	mov	r2, r4
    53c0:	e1a03005 	mov	r3, r5
    53c4:	eb000abc 	bl	7ebc <__aeabi_dmul>
    53c8:	e1a02000 	mov	r2, r0
    53cc:	e1a03001 	mov	r3, r1
    53d0:	e1a0000a 	mov	r0, r10
    53d4:	e1a0100b 	mov	r1, r11
    53d8:	eb0009b2 	bl	7aa8 <__aeabi_dsub>
    53dc:	e1a04000 	mov	r4, r0
    53e0:	e1a05001 	mov	r5, r1
    53e4:	e1a02004 	mov	r2, r4
    53e8:	e1a03005 	mov	r3, r5
    53ec:	e1a0000a 	mov	r0, r10
    53f0:	e1a0100b 	mov	r1, r11
    53f4:	eb000ab0 	bl	7ebc <__aeabi_dmul>
    53f8:	e3a02000 	mov	r2, #0
    53fc:	e1a06000 	mov	r6, r0
    5400:	e1a07001 	mov	r7, r1
    5404:	e1a00004 	mov	r0, r4
    5408:	e1a01005 	mov	r1, r5
    540c:	e3a03101 	mov	r3, #1073741824	; 0x40000000
    5410:	eb0009a4 	bl	7aa8 <__aeabi_dsub>
    5414:	e1a02000 	mov	r2, r0
    5418:	e1a03001 	mov	r3, r1
    541c:	e1a00006 	mov	r0, r6
    5420:	e1a01007 	mov	r1, r7
    5424:	eb000b48 	bl	814c <__aeabi_ddiv>
    5428:	e1a02008 	mov	r2, r8
    542c:	e1a04000 	mov	r4, r0
    5430:	e1a05001 	mov	r5, r1
    5434:	e1a03009 	mov	r3, r9
    5438:	e1a0000a 	mov	r0, r10
    543c:	e1a0100b 	mov	r1, r11
    5440:	eb000a9d 	bl	7ebc <__aeabi_dmul>
    5444:	e1a02008 	mov	r2, r8
    5448:	e1a03009 	mov	r3, r9
    544c:	eb000996 	bl	7aac <__adddf3>
    5450:	e1a02000 	mov	r2, r0
    5454:	e1a03001 	mov	r3, r1
    5458:	e1a00004 	mov	r0, r4
    545c:	e1a01005 	mov	r1, r5
    5460:	eb000990 	bl	7aa8 <__aeabi_dsub>
    5464:	e1a0200a 	mov	r2, r10
    5468:	e1a0300b 	mov	r3, r11
    546c:	eb00098d 	bl	7aa8 <__aeabi_dsub>
    5470:	e1a02000 	mov	r2, r0
    5474:	e1a03001 	mov	r3, r1
    5478:	e3a00000 	mov	r0, #0
    547c:	e59f11bc 	ldr	r1, [pc, #444]	; 5640 <__ieee754_pow+0xdb8>
    5480:	eb000988 	bl	7aa8 <__aeabi_dsub>
    5484:	e59dc004 	ldr	r12, [sp, #4]
    5488:	e08ce001 	add	lr, r12, r1
    548c:	e35e0601 	cmp	lr, #1048576	; 0x100000
    5490:	e1a03001 	mov	r3, r1
    5494:	e1a02000 	mov	r2, r0
    5498:	e1a04000 	mov	r4, r0
    549c:	e1a05001 	mov	r5, r1
    54a0:	a1a0300e 	movge	r3, lr
    54a4:	ba0000e4 	blt	583c <__ieee754_pow+0xfb4>
    54a8:	e28d1010 	add	r1, sp, #16
    54ac:	e8910003 	ldm	r1, {r0, r1}
    54b0:	eb000a81 	bl	7ebc <__aeabi_dmul>
    54b4:	e1a0a000 	mov	r10, r0
    54b8:	e1a0b001 	mov	r11, r1
    54bc:	eafffd0b 	b	48f0 <__ieee754_pow+0x68>
    54c0:	e59d1020 	ldr	r1, [sp, #32]
    54c4:	e3510000 	cmp	r1, #0
    54c8:	bafffd34 	blt	49a0 <__ieee754_pow+0x118>
    54cc:	e1a00007 	mov	r0, r7
    54d0:	e1a01008 	mov	r1, r8
    54d4:	eb000281 	bl	5ee0 <__ieee754_sqrt>
    54d8:	e1a0a000 	mov	r10, r0
    54dc:	e1a0b001 	mov	r11, r1
    54e0:	eafffd02 	b	48f0 <__ieee754_pow+0x68>
    54e4:	e1a0a003 	mov	r10, r3
    54e8:	e59fb150 	ldr	r11, [pc, #336]	; 5640 <__ieee754_pow+0xdb8>
    54ec:	eafffcff 	b	48f0 <__ieee754_pow+0x68>
    54f0:	e3540000 	cmp	r4, #0
    54f4:	aafffd78 	bge	4adc <__ieee754_pow+0x254>
    54f8:	eafffd49 	b	4a24 <__ieee754_pow+0x19c>
    54fc:	e59f312c 	ldr	r3, [pc, #300]	; 5630 <__ieee754_pow+0xda8>
    5500:	e3c18102 	bic	r8, r1, #-2147483648	; 0x80000000
    5504:	e1580003 	cmp	r8, r3
    5508:	daffff52 	ble	5258 <__ieee754_pow+0x9d0>
    550c:	e59f3120 	ldr	r3, [pc, #288]	; 5634 <__ieee754_pow+0xdac>
    5510:	e0813003 	add	r3, r1, r3
    5514:	e1933000 	orrs	r3, r3, r0
    5518:	1a0000b9 	bne	5804 <__ieee754_pow+0xf7c>
    551c:	e1a02004 	mov	r2, r4
    5520:	e1a03005 	mov	r3, r5
    5524:	eb00095f 	bl	7aa8 <__aeabi_dsub>
    5528:	e1a02000 	mov	r2, r0
    552c:	e1a03001 	mov	r3, r1
    5530:	e1a0000a 	mov	r0, r10
    5534:	e1a0100b 	mov	r1, r11
    5538:	eb000bc5 	bl	8454 <__aeabi_dcmple>
    553c:	e3500000 	cmp	r0, #0
    5540:	1a0000af 	bne	5804 <__ieee754_pow+0xf7c>
    5544:	e1a03a48 	asr	r3, r8, #20
    5548:	e2433fff 	sub	r3, r3, #1020	; 0x3fc
    554c:	e2433002 	sub	r3, r3, #2
    5550:	e3a01601 	mov	r1, #1048576	; 0x100000
    5554:	e0891351 	add	r1, r9, r1, asr r3
    5558:	e3c10102 	bic	r0, r1, #-2147483648	; 0x80000000
    555c:	e1a00a40 	asr	r0, r0, #20
    5560:	e240efff 	sub	lr, r0, #1020	; 0x3fc
    5564:	e59f60cc 	ldr	r6, [pc, #204]	; 5638 <__ieee754_pow+0xdb0>
    5568:	e24ee003 	sub	lr, lr, #3
    556c:	e1c13e56 	bic	r3, r1, r6, asr lr
    5570:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
    5574:	e3c1e60f 	bic	lr, r1, #15728640	; 0xf00000
    5578:	e2601e41 	rsb	r1, r0, #1040	; 0x410
    557c:	e38ee601 	orr	lr, lr, #1048576	; 0x100000
    5580:	e2811003 	add	r1, r1, #3
    5584:	e1a0115e 	asr	r1, lr, r1
    5588:	e3590000 	cmp	r9, #0
    558c:	e58d1008 	str	r1, [sp, #8]
    5590:	b2611000 	rsblt	r1, r1, #0
    5594:	b58d1008 	strlt	r1, [sp, #8]
    5598:	e3a02000 	mov	r2, #0
    559c:	e1a00004 	mov	r0, r4
    55a0:	e1a01005 	mov	r1, r5
    55a4:	eb00093f 	bl	7aa8 <__aeabi_dsub>
    55a8:	e1a04000 	mov	r4, r0
    55ac:	e1a05001 	mov	r5, r1
    55b0:	e1a02004 	mov	r2, r4
    55b4:	e1a0000a 	mov	r0, r10
    55b8:	e1a0100b 	mov	r1, r11
    55bc:	e1a03005 	mov	r3, r5
    55c0:	eb000939 	bl	7aac <__adddf3>
    55c4:	e59d2008 	ldr	r2, [sp, #8]
    55c8:	e1a07001 	mov	r7, r1
    55cc:	e1a0ca02 	lsl	r12, r2, #20
    55d0:	eaffff25 	b	526c <__ieee754_pow+0x9e4>
    55d4:	e59f2064 	ldr	r2, [pc, #100]	; 5640 <__ieee754_pow+0xdb8>
    55d8:	e3a01000 	mov	r1, #0
    55dc:	e58d1010 	str	r1, [sp, #16]
    55e0:	e58d2014 	str	r2, [sp, #20]
    55e4:	eafffebf 	b	50e8 <__ieee754_pow+0x860>
    55e8:	e3540000 	cmp	r4, #0
    55ec:	b28bb102 	addlt	r11, r11, #-2147483648	; 0x80000000
    55f0:	aafffd39 	bge	4adc <__ieee754_pow+0x254>
    55f4:	eafffcbd 	b	48f0 <__ieee754_pow+0x68>
    55f8:	fefa39ef 	.word	0xfefa39ef
    55fc:	3fe62e42 	.word	0x3fe62e42
    5600:	0ca86c39 	.word	0x0ca86c39
    5604:	be205c61 	.word	0xbe205c61
    5608:	72bea4d0 	.word	0x72bea4d0
    560c:	3e663769 	.word	0x3e663769
    5610:	c5d26bf1 	.word	0xc5d26bf1
    5614:	3ebbbd41 	.word	0x3ebbbd41
    5618:	af25de2c 	.word	0xaf25de2c
    561c:	3f11566a 	.word	0x3f11566a
    5620:	16bebd93 	.word	0x16bebd93
    5624:	3f66c16c 	.word	0x3f66c16c
    5628:	5555553e 	.word	0x5555553e
    562c:	3fc55555 	.word	0x3fc55555
    5630:	4090cbff 	.word	0x4090cbff
    5634:	3f6f3400 	.word	0x3f6f3400
    5638:	000fffff 	.word	0x000fffff
    563c:	3feffffe 	.word	0x3feffffe
    5640:	3ff00000 	.word	0x3ff00000
    5644:	3ff71547 	.word	0x3ff71547
    5648:	e51f3014 	ldr	r3, [pc, #-20]	; 563c <__ieee754_pow+0xdb4>
    564c:	e59d2008 	ldr	r2, [sp, #8]
    5650:	e1520003 	cmp	r2, r3
    5654:	daffffa5 	ble	54f0 <__ieee754_pow+0xc68>
    5658:	e51f3020 	ldr	r3, [pc, #-32]	; 5640 <__ieee754_pow+0xdb8>
    565c:	e59d2008 	ldr	r2, [sp, #8]
    5660:	e1520003 	cmp	r2, r3
    5664:	cafffcec 	bgt	4a1c <__ieee754_pow+0x194>
    5668:	e3a02000 	mov	r2, #0
    566c:	e51f3034 	ldr	r3, [pc, #-52]	; 5640 <__ieee754_pow+0xdb8>
    5670:	eb00090c 	bl	7aa8 <__aeabi_dsub>
    5674:	e3a02206 	mov	r2, #1610612736	; 0x60000000
    5678:	e51f303c 	ldr	r3, [pc, #-60]	; 5644 <__ieee754_pow+0xdbc>
    567c:	e1a04000 	mov	r4, r0
    5680:	e1a05001 	mov	r5, r1
    5684:	eb000a0c 	bl	7ebc <__aeabi_dmul>
    5688:	e28f3d07 	add	r3, pc, #448	; 0x1c0
    568c:	e893000c 	ldm	r3, {r2, r3}
    5690:	e1a06000 	mov	r6, r0
    5694:	e1a07001 	mov	r7, r1
    5698:	e1a00004 	mov	r0, r4
    569c:	e1a01005 	mov	r1, r5
    56a0:	eb000a05 	bl	7ebc <__aeabi_dmul>
    56a4:	e1a02004 	mov	r2, r4
    56a8:	e58d0008 	str	r0, [sp, #8]
    56ac:	e58d100c 	str	r1, [sp, #12]
    56b0:	e1a03005 	mov	r3, r5
    56b4:	e1a00004 	mov	r0, r4
    56b8:	e1a01005 	mov	r1, r5
    56bc:	eb0009fe 	bl	7ebc <__aeabi_dmul>
    56c0:	e3a02000 	mov	r2, #0
    56c4:	e1a08000 	mov	r8, r0
    56c8:	e1a09001 	mov	r9, r1
    56cc:	e1a00004 	mov	r0, r4
    56d0:	e1a01005 	mov	r1, r5
    56d4:	e59f319c 	ldr	r3, [pc, #412]	; 5878 <__ieee754_pow+0xff0>
    56d8:	eb0009f7 	bl	7ebc <__aeabi_dmul>
    56dc:	e1a02000 	mov	r2, r0
    56e0:	e1a03001 	mov	r3, r1
    56e4:	e28f1f5b 	add	r1, pc, #364	; 0x16c
    56e8:	e8910003 	ldm	r1, {r0, r1}
    56ec:	eb0008ed 	bl	7aa8 <__aeabi_dsub>
    56f0:	e1a02004 	mov	r2, r4
    56f4:	e1a03005 	mov	r3, r5
    56f8:	eb0009ef 	bl	7ebc <__aeabi_dmul>
    56fc:	e1a02000 	mov	r2, r0
    5700:	e1a03001 	mov	r3, r1
    5704:	e3a00000 	mov	r0, #0
    5708:	e59f116c 	ldr	r1, [pc, #364]	; 587c <__ieee754_pow+0xff4>
    570c:	eb0008e5 	bl	7aa8 <__aeabi_dsub>
    5710:	e1a02000 	mov	r2, r0
    5714:	e1a03001 	mov	r3, r1
    5718:	e1a00008 	mov	r0, r8
    571c:	e1a01009 	mov	r1, r9
    5720:	eb0009e5 	bl	7ebc <__aeabi_dmul>
    5724:	e28f3f4d 	add	r3, pc, #308	; 0x134
    5728:	e893000c 	ldm	r3, {r2, r3}
    572c:	eb0009e2 	bl	7ebc <__aeabi_dmul>
    5730:	e1a02000 	mov	r2, r0
    5734:	e1a03001 	mov	r3, r1
    5738:	e28d1008 	add	r1, sp, #8
    573c:	e8910003 	ldm	r1, {r0, r1}
    5740:	eb0008d8 	bl	7aa8 <__aeabi_dsub>
    5744:	e1a04000 	mov	r4, r0
    5748:	e1a05001 	mov	r5, r1
    574c:	e1a02004 	mov	r2, r4
    5750:	e1a03005 	mov	r3, r5
    5754:	e1a00006 	mov	r0, r6
    5758:	e1a01007 	mov	r1, r7
    575c:	eb0008d2 	bl	7aac <__adddf3>
    5760:	e3a00000 	mov	r0, #0
    5764:	e58d0008 	str	r0, [sp, #8]
    5768:	e58d100c 	str	r1, [sp, #12]
    576c:	e1a02006 	mov	r2, r6
    5770:	e1a03007 	mov	r3, r7
    5774:	eafffe4a 	b	50a4 <__ieee754_pow+0x81c>
    5778:	e1a02000 	mov	r2, r0
    577c:	e1a03001 	mov	r3, r1
    5780:	e3a00000 	mov	r0, #0
    5784:	e59f10f4 	ldr	r1, [pc, #244]	; 5880 <__ieee754_pow+0xff8>
    5788:	eb000a6f 	bl	814c <__aeabi_ddiv>
    578c:	eafffcd7 	b	4af0 <__ieee754_pow+0x268>
    5790:	e28f30d0 	add	r3, pc, #208	; 0xd0
    5794:	e893000c 	ldm	r3, {r2, r3}
    5798:	e28d1010 	add	r1, sp, #16
    579c:	e8910003 	ldm	r1, {r0, r1}
    57a0:	eb0009c5 	bl	7ebc <__aeabi_dmul>
    57a4:	e28f30bc 	add	r3, pc, #188	; 0xbc
    57a8:	e893000c 	ldm	r3, {r2, r3}
    57ac:	eb0009c2 	bl	7ebc <__aeabi_dmul>
    57b0:	e1a0a000 	mov	r10, r0
    57b4:	e1a0b001 	mov	r11, r1
    57b8:	eafffc4c 	b	48f0 <__ieee754_pow+0x68>
    57bc:	e35a0000 	cmp	r10, #0
    57c0:	1a00001a 	bne	5830 <__ieee754_pow+0xfa8>
    57c4:	e2633e41 	rsb	r3, r3, #1040	; 0x410
    57c8:	e2832003 	add	r2, r3, #3
    57cc:	e1a03256 	asr	r3, r6, r2
    57d0:	e1560213 	cmp	r6, r3, lsl r2
    57d4:	02033001 	andeq	r3, r3, #1
    57d8:	02633002 	rsbeq	r3, r3, #2
    57dc:	058d3030 	streq	r3, [sp, #48]	; 0x30
    57e0:	13a03000 	movne	r3, #0
    57e4:	158d3030 	strne	r3, [sp, #48]	; 0x30
    57e8:	eafffc5f 	b	496c <__ieee754_pow+0xe4>
    57ec:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
    57f0:	e3540001 	cmp	r4, #1
    57f4:	e1a0a000 	mov	r10, r0
    57f8:	0281b102 	addeq	r11, r1, #-2147483648	; 0x80000000
    57fc:	1afffc8e 	bne	4a3c <__ieee754_pow+0x1b4>
    5800:	eafffc3a 	b	48f0 <__ieee754_pow+0x68>
    5804:	e28f3064 	add	r3, pc, #100	; 0x64
    5808:	e893000c 	ldm	r3, {r2, r3}
    580c:	e28d1010 	add	r1, sp, #16
    5810:	e8910003 	ldm	r1, {r0, r1}
    5814:	eb0009a8 	bl	7ebc <__aeabi_dmul>
    5818:	e28f3050 	add	r3, pc, #80	; 0x50
    581c:	e893000c 	ldm	r3, {r2, r3}
    5820:	eb0009a5 	bl	7ebc <__aeabi_dmul>
    5824:	e1a0a000 	mov	r10, r0
    5828:	e1a0b001 	mov	r11, r1
    582c:	eafffc2f 	b	48f0 <__ieee754_pow+0x68>
    5830:	e3a02000 	mov	r2, #0
    5834:	e58d2030 	str	r2, [sp, #48]	; 0x30
    5838:	eafffc58 	b	49a0 <__ieee754_pow+0x118>
    583c:	e59d2008 	ldr	r2, [sp, #8]
    5840:	eb000828 	bl	78e8 <scalbn>
    5844:	e1a02000 	mov	r2, r0
    5848:	e1a03001 	mov	r3, r1
    584c:	eaffff15 	b	54a8 <__ieee754_pow+0xc20>
    5850:	f85ddf44 	.word	0xf85ddf44
    5854:	3e54ae0b 	.word	0x3e54ae0b
    5858:	55555555 	.word	0x55555555
    585c:	3fd55555 	.word	0x3fd55555
    5860:	652b82fe 	.word	0x652b82fe
    5864:	3ff71547 	.word	0x3ff71547
    5868:	8800759c 	.word	0x8800759c
    586c:	7e37e43c 	.word	0x7e37e43c
    5870:	c2f8f359 	.word	0xc2f8f359
    5874:	01a56e1f 	.word	0x01a56e1f
    5878:	3fd00000 	.word	0x3fd00000
    587c:	3fe00000 	.word	0x3fe00000
    5880:	3ff00000 	.word	0x3ff00000
    5884:	e1a00000 	nop			; (mov r0, r0)

00005888 <__ieee754_rem_pio2>:
    5888:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    588c:	e59fc3bc 	ldr	r12, [pc, #956]	; 5c50 <__ieee754_rem_pio2+0x3c8>
    5890:	e3c17102 	bic	r7, r1, #-2147483648	; 0x80000000
    5894:	e157000c 	cmp	r7, r12
    5898:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    589c:	e1a04000 	mov	r4, r0
    58a0:	e1a05001 	mov	r5, r1
    58a4:	e1a0a000 	mov	r10, r0
    58a8:	e1a0b001 	mov	r11, r1
    58ac:	e1a08002 	mov	r8, r2
    58b0:	da00005b 	ble	5a24 <__ieee754_rem_pio2+0x19c>
    58b4:	e59f2398 	ldr	r2, [pc, #920]	; 5c54 <__ieee754_rem_pio2+0x3cc>
    58b8:	e1570002 	cmp	r7, r2
    58bc:	e1a09001 	mov	r9, r1
    58c0:	ca000019 	bgt	592c <__ieee754_rem_pio2+0xa4>
    58c4:	e3510000 	cmp	r1, #0
    58c8:	e28f3fd6 	add	r3, pc, #856	; 0x358
    58cc:	e893000c 	ldm	r3, {r2, r3}
    58d0:	da000149 	ble	5dfc <__ieee754_rem_pio2+0x574>
    58d4:	eb000873 	bl	7aa8 <__aeabi_dsub>
    58d8:	e59f3378 	ldr	r3, [pc, #888]	; 5c58 <__ieee754_rem_pio2+0x3d0>
    58dc:	e1570003 	cmp	r7, r3
    58e0:	e1a0a000 	mov	r10, r0
    58e4:	e1a0b001 	mov	r11, r1
    58e8:	0a00005f 	beq	5a6c <__ieee754_rem_pio2+0x1e4>
    58ec:	e28f3fcf 	add	r3, pc, #828	; 0x33c
    58f0:	e893000c 	ldm	r3, {r2, r3}
    58f4:	eb00086b 	bl	7aa8 <__aeabi_dsub>
    58f8:	e1a02000 	mov	r2, r0
    58fc:	e1a03001 	mov	r3, r1
    5900:	e8880003 	stm	r8, {r0, r1}
    5904:	e1a0000a 	mov	r0, r10
    5908:	e1a0100b 	mov	r1, r11
    590c:	eb000865 	bl	7aa8 <__aeabi_dsub>
    5910:	e28f3fc6 	add	r3, pc, #792	; 0x318
    5914:	e893000c 	ldm	r3, {r2, r3}
    5918:	eb000862 	bl	7aa8 <__aeabi_dsub>
    591c:	e3a06001 	mov	r6, #1
    5920:	e5880008 	str	r0, [r8, #8]
    5924:	e588100c 	str	r1, [r8, #12]
    5928:	ea000043 	b	5a3c <__ieee754_rem_pio2+0x1b4>
    592c:	e59f3328 	ldr	r3, [pc, #808]	; 5c5c <__ieee754_rem_pio2+0x3d4>
    5930:	e1570003 	cmp	r7, r3
    5934:	da000075 	ble	5b10 <__ieee754_rem_pio2+0x288>
    5938:	e59f3320 	ldr	r3, [pc, #800]	; 5c60 <__ieee754_rem_pio2+0x3d8>
    593c:	e1570003 	cmp	r7, r3
    5940:	ca000041 	bgt	5a4c <__ieee754_rem_pio2+0x1c4>
    5944:	e1a0aa47 	asr	r10, r7, #20
    5948:	e24aae41 	sub	r10, r10, #1040	; 0x410
    594c:	e24aa006 	sub	r10, r10, #6
    5950:	e0475a0a 	sub	r5, r7, r10, lsl #20
    5954:	e1a01005 	mov	r1, r5
    5958:	e1a04000 	mov	r4, r0
    595c:	eb000ace 	bl	849c <__aeabi_d2iz>
    5960:	eb00091e 	bl	7de0 <__aeabi_i2d>
    5964:	e1a06000 	mov	r6, r0
    5968:	e1a07001 	mov	r7, r1
    596c:	e1a02000 	mov	r2, r0
    5970:	e1a03001 	mov	r3, r1
    5974:	e1a00004 	mov	r0, r4
    5978:	e1a01005 	mov	r1, r5
    597c:	e58d6020 	str	r6, [sp, #32]
    5980:	e58d7024 	str	r7, [sp, #36]	; 0x24
    5984:	eb000847 	bl	7aa8 <__aeabi_dsub>
    5988:	e3a02000 	mov	r2, #0
    598c:	e59f32d0 	ldr	r3, [pc, #720]	; 5c64 <__ieee754_rem_pio2+0x3dc>
    5990:	eb000949 	bl	7ebc <__aeabi_dmul>
    5994:	e1a06000 	mov	r6, r0
    5998:	e1a07001 	mov	r7, r1
    599c:	eb000abe 	bl	849c <__aeabi_d2iz>
    59a0:	eb00090e 	bl	7de0 <__aeabi_i2d>
    59a4:	e1a02000 	mov	r2, r0
    59a8:	e1a03001 	mov	r3, r1
    59ac:	e1a04000 	mov	r4, r0
    59b0:	e1a05001 	mov	r5, r1
    59b4:	e1a00006 	mov	r0, r6
    59b8:	e1a01007 	mov	r1, r7
    59bc:	e58d4028 	str	r4, [sp, #40]	; 0x28
    59c0:	e58d502c 	str	r5, [sp, #44]	; 0x2c
    59c4:	eb000837 	bl	7aa8 <__aeabi_dsub>
    59c8:	e3a02000 	mov	r2, #0
    59cc:	e59f3290 	ldr	r3, [pc, #656]	; 5c64 <__ieee754_rem_pio2+0x3dc>
    59d0:	eb000939 	bl	7ebc <__aeabi_dmul>
    59d4:	e3a02000 	mov	r2, #0
    59d8:	e3a03000 	mov	r3, #0
    59dc:	e58d0030 	str	r0, [sp, #48]	; 0x30
    59e0:	e58d1034 	str	r1, [sp, #52]	; 0x34
    59e4:	eb000a8e 	bl	8424 <__aeabi_dcmpeq>
    59e8:	e3500000 	cmp	r0, #0
    59ec:	03a06003 	moveq	r6, #3
    59f0:	0a000032 	beq	5ac0 <__ieee754_rem_pio2+0x238>
    59f4:	e28d7028 	add	r7, sp, #40	; 0x28
    59f8:	e3a06003 	mov	r6, #3
    59fc:	e1a00004 	mov	r0, r4
    5a00:	e1a01005 	mov	r1, r5
    5a04:	e3a02000 	mov	r2, #0
    5a08:	e3a03000 	mov	r3, #0
    5a0c:	eb000a84 	bl	8424 <__aeabi_dcmpeq>
    5a10:	e3500000 	cmp	r0, #0
    5a14:	e2466001 	sub	r6, r6, #1
    5a18:	0a000028 	beq	5ac0 <__ieee754_rem_pio2+0x238>
    5a1c:	e9370003 	ldmdb	r7!, {r0, r1}
    5a20:	eafffff7 	b	5a04 <__ieee754_rem_pio2+0x17c>
    5a24:	e8820030 	stm	r2, {r4, r5}
    5a28:	e3a03000 	mov	r3, #0
    5a2c:	e3a02000 	mov	r2, #0
    5a30:	e5882008 	str	r2, [r8, #8]
    5a34:	e588300c 	str	r3, [r8, #12]
    5a38:	e3a06000 	mov	r6, #0
    5a3c:	e1a00006 	mov	r0, r6
    5a40:	e28dd03c 	add	sp, sp, #60	; 0x3c
    5a44:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    5a48:	e12fff1e 	bx	lr
    5a4c:	e1a02000 	mov	r2, r0
    5a50:	e1a03001 	mov	r3, r1
    5a54:	eb000813 	bl	7aa8 <__aeabi_dsub>
    5a58:	e3a06000 	mov	r6, #0
    5a5c:	e5880008 	str	r0, [r8, #8]
    5a60:	e588100c 	str	r1, [r8, #12]
    5a64:	e8880003 	stm	r8, {r0, r1}
    5a68:	eafffff3 	b	5a3c <__ieee754_rem_pio2+0x1b4>
    5a6c:	e28f3f71 	add	r3, pc, #452	; 0x1c4
    5a70:	e893000c 	ldm	r3, {r2, r3}
    5a74:	eb00080b 	bl	7aa8 <__aeabi_dsub>
    5a78:	e28f3d07 	add	r3, pc, #448	; 0x1c0
    5a7c:	e893000c 	ldm	r3, {r2, r3}
    5a80:	e1a06000 	mov	r6, r0
    5a84:	e1a07001 	mov	r7, r1
    5a88:	eb000806 	bl	7aa8 <__aeabi_dsub>
    5a8c:	e1a02000 	mov	r2, r0
    5a90:	e1a03001 	mov	r3, r1
    5a94:	e8880003 	stm	r8, {r0, r1}
    5a98:	e1a00006 	mov	r0, r6
    5a9c:	e1a01007 	mov	r1, r7
    5aa0:	eb000800 	bl	7aa8 <__aeabi_dsub>
    5aa4:	e28f3f65 	add	r3, pc, #404	; 0x194
    5aa8:	e893000c 	ldm	r3, {r2, r3}
    5aac:	eb0007fd 	bl	7aa8 <__aeabi_dsub>
    5ab0:	e3a06001 	mov	r6, #1
    5ab4:	e5880008 	str	r0, [r8, #8]
    5ab8:	e588100c 	str	r1, [r8, #12]
    5abc:	eaffffde 	b	5a3c <__ieee754_rem_pio2+0x1b4>
    5ac0:	e3a03002 	mov	r3, #2
    5ac4:	e58d3000 	str	r3, [sp]
    5ac8:	e59f3198 	ldr	r3, [pc, #408]	; 5c68 <__ieee754_rem_pio2+0x3e0>
    5acc:	e28d0020 	add	r0, sp, #32
    5ad0:	e58d3004 	str	r3, [sp, #4]
    5ad4:	e1a01008 	mov	r1, r8
    5ad8:	e1a03006 	mov	r3, r6
    5adc:	e1a0200a 	mov	r2, r10
    5ae0:	eb000260 	bl	6468 <__kernel_rem_pio2>
    5ae4:	e3590000 	cmp	r9, #0
    5ae8:	e1a06000 	mov	r6, r0
    5aec:	aaffffd2 	bge	5a3c <__ieee754_rem_pio2+0x1b4>
    5af0:	e5982004 	ldr	r2, [r8, #4]
    5af4:	e598300c 	ldr	r3, [r8, #12]
    5af8:	e2822102 	add	r2, r2, #-2147483648	; 0x80000000
    5afc:	e2833102 	add	r3, r3, #-2147483648	; 0x80000000
    5b00:	e5882004 	str	r2, [r8, #4]
    5b04:	e588300c 	str	r3, [r8, #12]
    5b08:	e2606000 	rsb	r6, r0, #0
    5b0c:	eaffffca 	b	5a3c <__ieee754_rem_pio2+0x1b4>
    5b10:	eb0006e4 	bl	76a8 <fabs>
    5b14:	e28f3f4b 	add	r3, pc, #300	; 0x12c
    5b18:	e893000c 	ldm	r3, {r2, r3}
    5b1c:	e1a04000 	mov	r4, r0
    5b20:	e1a05001 	mov	r5, r1
    5b24:	eb0008e4 	bl	7ebc <__aeabi_dmul>
    5b28:	e3a02000 	mov	r2, #0
    5b2c:	e59f3138 	ldr	r3, [pc, #312]	; 5c6c <__ieee754_rem_pio2+0x3e4>
    5b30:	eb0007dd 	bl	7aac <__adddf3>
    5b34:	eb000a58 	bl	849c <__aeabi_d2iz>
    5b38:	e1a06000 	mov	r6, r0
    5b3c:	eb0008a7 	bl	7de0 <__aeabi_i2d>
    5b40:	e28f30e0 	add	r3, pc, #224	; 0xe0
    5b44:	e893000c 	ldm	r3, {r2, r3}
    5b48:	e58d0010 	str	r0, [sp, #16]
    5b4c:	e58d1014 	str	r1, [sp, #20]
    5b50:	eb0008d9 	bl	7ebc <__aeabi_dmul>
    5b54:	e1a02000 	mov	r2, r0
    5b58:	e1a03001 	mov	r3, r1
    5b5c:	e1a00004 	mov	r0, r4
    5b60:	e1a01005 	mov	r1, r5
    5b64:	eb0007cf 	bl	7aa8 <__aeabi_dsub>
    5b68:	e28f30c0 	add	r3, pc, #192	; 0xc0
    5b6c:	e893000c 	ldm	r3, {r2, r3}
    5b70:	e1a0a000 	mov	r10, r0
    5b74:	e1a0b001 	mov	r11, r1
    5b78:	e28d1010 	add	r1, sp, #16
    5b7c:	e8910003 	ldm	r1, {r0, r1}
    5b80:	eb0008cd 	bl	7ebc <__aeabi_dmul>
    5b84:	e356001f 	cmp	r6, #31
    5b88:	e58d0008 	str	r0, [sp, #8]
    5b8c:	e58d100c 	str	r1, [sp, #12]
    5b90:	e1a0000a 	mov	r0, r10
    5b94:	e1a0100b 	mov	r1, r11
    5b98:	ca000035 	bgt	5c74 <__ieee754_rem_pio2+0x3ec>
    5b9c:	e59f30cc 	ldr	r3, [pc, #204]	; 5c70 <__ieee754_rem_pio2+0x3e8>
    5ba0:	e2462001 	sub	r2, r6, #1
    5ba4:	e7933102 	ldr	r3, [r3, r2, lsl #2]
    5ba8:	e1530007 	cmp	r3, r7
    5bac:	0a000030 	beq	5c74 <__ieee754_rem_pio2+0x3ec>
    5bb0:	e28d3008 	add	r3, sp, #8
    5bb4:	e893000c 	ldm	r3, {r2, r3}
    5bb8:	eb0007ba 	bl	7aa8 <__aeabi_dsub>
    5bbc:	e1a02000 	mov	r2, r0
    5bc0:	e1a03001 	mov	r3, r1
    5bc4:	e888000c 	stm	r8, {r2, r3}
    5bc8:	e1a05000 	mov	r5, r0
    5bcc:	e1a04001 	mov	r4, r1
    5bd0:	e1a02005 	mov	r2, r5
    5bd4:	e1a03004 	mov	r3, r4
    5bd8:	e1a0000a 	mov	r0, r10
    5bdc:	e1a0100b 	mov	r1, r11
    5be0:	eb0007b0 	bl	7aa8 <__aeabi_dsub>
    5be4:	e28d3008 	add	r3, sp, #8
    5be8:	e893000c 	ldm	r3, {r2, r3}
    5bec:	eb0007ad 	bl	7aa8 <__aeabi_dsub>
    5bf0:	e3590000 	cmp	r9, #0
    5bf4:	e1a02000 	mov	r2, r0
    5bf8:	e1a03001 	mov	r3, r1
    5bfc:	e5882008 	str	r2, [r8, #8]
    5c00:	e588300c 	str	r3, [r8, #12]
    5c04:	aaffff8c 	bge	5a3c <__ieee754_rem_pio2+0x1b4>
    5c08:	e2844102 	add	r4, r4, #-2147483648	; 0x80000000
    5c0c:	e2811102 	add	r1, r1, #-2147483648	; 0x80000000
    5c10:	e5885000 	str	r5, [r8]
    5c14:	e5884004 	str	r4, [r8, #4]
    5c18:	e5880008 	str	r0, [r8, #8]
    5c1c:	e588100c 	str	r1, [r8, #12]
    5c20:	e2666000 	rsb	r6, r6, #0
    5c24:	eaffff84 	b	5a3c <__ieee754_rem_pio2+0x1b4>
    5c28:	54400000 	.word	0x54400000
    5c2c:	3ff921fb 	.word	0x3ff921fb
    5c30:	1a626331 	.word	0x1a626331
    5c34:	3dd0b461 	.word	0x3dd0b461
    5c38:	1a600000 	.word	0x1a600000
    5c3c:	3dd0b461 	.word	0x3dd0b461
    5c40:	2e037073 	.word	0x2e037073
    5c44:	3ba3198a 	.word	0x3ba3198a
    5c48:	6dc9c883 	.word	0x6dc9c883
    5c4c:	3fe45f30 	.word	0x3fe45f30
    5c50:	3fe921fb 	.word	0x3fe921fb
    5c54:	4002d97b 	.word	0x4002d97b
    5c58:	3ff921fb 	.word	0x3ff921fb
    5c5c:	413921fb 	.word	0x413921fb
    5c60:	7fefffff 	.word	0x7fefffff
    5c64:	41700000 	.word	0x41700000
    5c68:	00009218 	.word	0x00009218
    5c6c:	3fe00000 	.word	0x3fe00000
    5c70:	00009198 	.word	0x00009198
    5c74:	e28d3008 	add	r3, sp, #8
    5c78:	e893000c 	ldm	r3, {r2, r3}
    5c7c:	eb000789 	bl	7aa8 <__aeabi_dsub>
    5c80:	e1a07a47 	asr	r7, r7, #20
    5c84:	e1a04001 	mov	r4, r1
    5c88:	e1a01081 	lsl	r1, r1, #1
    5c8c:	e1a05000 	mov	r5, r0
    5c90:	e0471aa1 	sub	r1, r7, r1, lsr #21
    5c94:	e1a02005 	mov	r2, r5
    5c98:	e1a03004 	mov	r3, r4
    5c9c:	e3510010 	cmp	r1, #16
    5ca0:	e888000c 	stm	r8, {r2, r3}
    5ca4:	daffffc9 	ble	5bd0 <__ieee754_rem_pio2+0x348>
    5ca8:	e28f3f82 	add	r3, pc, #520	; 0x208
    5cac:	e893000c 	ldm	r3, {r2, r3}
    5cb0:	e28d1010 	add	r1, sp, #16
    5cb4:	e8910003 	ldm	r1, {r0, r1}
    5cb8:	eb00087f 	bl	7ebc <__aeabi_dmul>
    5cbc:	e1a04000 	mov	r4, r0
    5cc0:	e1a05001 	mov	r5, r1
    5cc4:	e1a02004 	mov	r2, r4
    5cc8:	e1a03005 	mov	r3, r5
    5ccc:	e1a0000a 	mov	r0, r10
    5cd0:	e1a0100b 	mov	r1, r11
    5cd4:	eb000773 	bl	7aa8 <__aeabi_dsub>
    5cd8:	e58d0018 	str	r0, [sp, #24]
    5cdc:	e58d101c 	str	r1, [sp, #28]
    5ce0:	e28d3018 	add	r3, sp, #24
    5ce4:	e893000c 	ldm	r3, {r2, r3}
    5ce8:	e1a0000a 	mov	r0, r10
    5cec:	e1a0100b 	mov	r1, r11
    5cf0:	eb00076c 	bl	7aa8 <__aeabi_dsub>
    5cf4:	e1a02004 	mov	r2, r4
    5cf8:	e1a03005 	mov	r3, r5
    5cfc:	eb000769 	bl	7aa8 <__aeabi_dsub>
    5d00:	e28f3f6e 	add	r3, pc, #440	; 0x1b8
    5d04:	e893000c 	ldm	r3, {r2, r3}
    5d08:	e1a04000 	mov	r4, r0
    5d0c:	e1a05001 	mov	r5, r1
    5d10:	e28d1010 	add	r1, sp, #16
    5d14:	e8910003 	ldm	r1, {r0, r1}
    5d18:	eb000867 	bl	7ebc <__aeabi_dmul>
    5d1c:	e1a02004 	mov	r2, r4
    5d20:	e1a03005 	mov	r3, r5
    5d24:	eb00075f 	bl	7aa8 <__aeabi_dsub>
    5d28:	e58d0008 	str	r0, [sp, #8]
    5d2c:	e58d100c 	str	r1, [sp, #12]
    5d30:	e28d3008 	add	r3, sp, #8
    5d34:	e893000c 	ldm	r3, {r2, r3}
    5d38:	e28d1018 	add	r1, sp, #24
    5d3c:	e8910003 	ldm	r1, {r0, r1}
    5d40:	eb000758 	bl	7aa8 <__aeabi_dsub>
    5d44:	e1a04001 	mov	r4, r1
    5d48:	e1a01081 	lsl	r1, r1, #1
    5d4c:	e1a05000 	mov	r5, r0
    5d50:	e0477aa1 	sub	r7, r7, r1, lsr #21
    5d54:	e1a02005 	mov	r2, r5
    5d58:	e1a03004 	mov	r3, r4
    5d5c:	e3570031 	cmp	r7, #49	; 0x31
    5d60:	e888000c 	stm	r8, {r2, r3}
    5d64:	da00004f 	ble	5ea8 <__ieee754_rem_pio2+0x620>
    5d68:	e3a0242e 	mov	r2, #771751936	; 0x2e000000
    5d6c:	e59f3164 	ldr	r3, [pc, #356]	; 5ed8 <__ieee754_rem_pio2+0x650>
    5d70:	e28d1010 	add	r1, sp, #16
    5d74:	e8910003 	ldm	r1, {r0, r1}
    5d78:	eb00084f 	bl	7ebc <__aeabi_dmul>
    5d7c:	e1a04000 	mov	r4, r0
    5d80:	e1a05001 	mov	r5, r1
    5d84:	e1a02004 	mov	r2, r4
    5d88:	e1a03005 	mov	r3, r5
    5d8c:	e28d1018 	add	r1, sp, #24
    5d90:	e8910003 	ldm	r1, {r0, r1}
    5d94:	eb000743 	bl	7aa8 <__aeabi_dsub>
    5d98:	e1a0a000 	mov	r10, r0
    5d9c:	e1a0b001 	mov	r11, r1
    5da0:	e1a0200a 	mov	r2, r10
    5da4:	e1a0300b 	mov	r3, r11
    5da8:	e28d1018 	add	r1, sp, #24
    5dac:	e8910003 	ldm	r1, {r0, r1}
    5db0:	eb00073c 	bl	7aa8 <__aeabi_dsub>
    5db4:	e1a02004 	mov	r2, r4
    5db8:	e1a03005 	mov	r3, r5
    5dbc:	eb000739 	bl	7aa8 <__aeabi_dsub>
    5dc0:	e28f3c01 	add	r3, pc, #256	; 0x100
    5dc4:	e893000c 	ldm	r3, {r2, r3}
    5dc8:	e1a04000 	mov	r4, r0
    5dcc:	e1a05001 	mov	r5, r1
    5dd0:	e28d1010 	add	r1, sp, #16
    5dd4:	e8910003 	ldm	r1, {r0, r1}
    5dd8:	eb000837 	bl	7ebc <__aeabi_dmul>
    5ddc:	e1a02004 	mov	r2, r4
    5de0:	e1a03005 	mov	r3, r5
    5de4:	eb00072f 	bl	7aa8 <__aeabi_dsub>
    5de8:	e58d0008 	str	r0, [sp, #8]
    5dec:	e58d100c 	str	r1, [sp, #12]
    5df0:	e1a0000a 	mov	r0, r10
    5df4:	e1a0100b 	mov	r1, r11
    5df8:	eaffff6c 	b	5bb0 <__ieee754_rem_pio2+0x328>
    5dfc:	eb00072a 	bl	7aac <__adddf3>
    5e00:	e59f30d4 	ldr	r3, [pc, #212]	; 5edc <__ieee754_rem_pio2+0x654>
    5e04:	e1570003 	cmp	r7, r3
    5e08:	e1a0a000 	mov	r10, r0
    5e0c:	e1a0b001 	mov	r11, r1
    5e10:	0a00000f 	beq	5e54 <__ieee754_rem_pio2+0x5cc>
    5e14:	e28f30b4 	add	r3, pc, #180	; 0xb4
    5e18:	e893000c 	ldm	r3, {r2, r3}
    5e1c:	eb000722 	bl	7aac <__adddf3>
    5e20:	e1a02000 	mov	r2, r0
    5e24:	e1a03001 	mov	r3, r1
    5e28:	e8880003 	stm	r8, {r0, r1}
    5e2c:	e1a0000a 	mov	r0, r10
    5e30:	e1a0100b 	mov	r1, r11
    5e34:	eb00071b 	bl	7aa8 <__aeabi_dsub>
    5e38:	e28f3090 	add	r3, pc, #144	; 0x90
    5e3c:	e893000c 	ldm	r3, {r2, r3}
    5e40:	eb000719 	bl	7aac <__adddf3>
    5e44:	e3e06000 	mvn	r6, #0
    5e48:	e5880008 	str	r0, [r8, #8]
    5e4c:	e588100c 	str	r1, [r8, #12]
    5e50:	eafffef9 	b	5a3c <__ieee754_rem_pio2+0x1b4>
    5e54:	e28f305c 	add	r3, pc, #92	; 0x5c
    5e58:	e893000c 	ldm	r3, {r2, r3}
    5e5c:	eb000712 	bl	7aac <__adddf3>
    5e60:	e28f3058 	add	r3, pc, #88	; 0x58
    5e64:	e893000c 	ldm	r3, {r2, r3}
    5e68:	e1a06000 	mov	r6, r0
    5e6c:	e1a07001 	mov	r7, r1
    5e70:	eb00070d 	bl	7aac <__adddf3>
    5e74:	e1a02000 	mov	r2, r0
    5e78:	e1a03001 	mov	r3, r1
    5e7c:	e8880003 	stm	r8, {r0, r1}
    5e80:	e1a00006 	mov	r0, r6
    5e84:	e1a01007 	mov	r1, r7
    5e88:	eb000706 	bl	7aa8 <__aeabi_dsub>
    5e8c:	e28f302c 	add	r3, pc, #44	; 0x2c
    5e90:	e893000c 	ldm	r3, {r2, r3}
    5e94:	eb000704 	bl	7aac <__adddf3>
    5e98:	e3e06000 	mvn	r6, #0
    5e9c:	e5880008 	str	r0, [r8, #8]
    5ea0:	e588100c 	str	r1, [r8, #12]
    5ea4:	eafffee4 	b	5a3c <__ieee754_rem_pio2+0x1b4>
    5ea8:	e28db018 	add	r11, sp, #24
    5eac:	e89b0c00 	ldm	r11, {r10, r11}
    5eb0:	eaffff46 	b	5bd0 <__ieee754_rem_pio2+0x348>
    5eb4:	e1a00000 	nop			; (mov r0, r0)
    5eb8:	1a600000 	.word	0x1a600000
    5ebc:	3dd0b461 	.word	0x3dd0b461
    5ec0:	2e037073 	.word	0x2e037073
    5ec4:	3ba3198a 	.word	0x3ba3198a
    5ec8:	252049c1 	.word	0x252049c1
    5ecc:	397b839a 	.word	0x397b839a
    5ed0:	1a626331 	.word	0x1a626331
    5ed4:	3dd0b461 	.word	0x3dd0b461
    5ed8:	3ba3198a 	.word	0x3ba3198a
    5edc:	3ff921fb 	.word	0x3ff921fb

00005ee0 <__ieee754_sqrt>:
    5ee0:	e59fc230 	ldr	r12, [pc, #560]	; 6118 <__ieee754_sqrt+0x238>
    5ee4:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
    5ee8:	e59f7228 	ldr	r7, [pc, #552]	; 6118 <__ieee754_sqrt+0x238>
    5eec:	e001c00c 	and	r12, r1, r12
    5ef0:	e15c0007 	cmp	r12, r7
    5ef4:	e1a04000 	mov	r4, r0
    5ef8:	e1a05001 	mov	r5, r1
    5efc:	e1a02000 	mov	r2, r0
    5f00:	e1a03001 	mov	r3, r1
    5f04:	e1a06001 	mov	r6, r1
    5f08:	e1a0c001 	mov	r12, r1
    5f0c:	e1a08000 	mov	r8, r0
    5f10:	0a00006a 	beq	60c0 <__ieee754_sqrt+0x1e0>
    5f14:	e3510000 	cmp	r1, #0
    5f18:	da000051 	ble	6064 <__ieee754_sqrt+0x184>
    5f1c:	e1b02a41 	asrs	r2, r1, #20
    5f20:	0a00005a 	beq	6090 <__ieee754_sqrt+0x1b0>
    5f24:	e3cc34ff 	bic	r3, r12, #-16777216	; 0xff000000
    5f28:	e3120001 	tst	r2, #1
    5f2c:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
    5f30:	e2426fff 	sub	r6, r2, #1020	; 0x3fc
    5f34:	e3833601 	orr	r3, r3, #1048576	; 0x100000
    5f38:	01a02fa8 	lsreq	r2, r8, #31
    5f3c:	01a08088 	lsleq	r8, r8, #1
    5f40:	00823083 	addeq	r3, r2, r3, lsl #1
    5f44:	e2466003 	sub	r6, r6, #3
    5f48:	e1a02fa8 	lsr	r2, r8, #31
    5f4c:	e3a07000 	mov	r7, #0
    5f50:	e0823083 	add	r3, r2, r3, lsl #1
    5f54:	e1a060c6 	asr	r6, r6, #1
    5f58:	e1a02088 	lsl	r2, r8, #1
    5f5c:	e3a0c016 	mov	r12, #22
    5f60:	e1a00007 	mov	r0, r7
    5f64:	e3a01602 	mov	r1, #2097152	; 0x200000
    5f68:	e0804001 	add	r4, r0, r1
    5f6c:	e1540003 	cmp	r4, r3
    5f70:	e1a05fa2 	lsr	r5, r2, #31
    5f74:	d0840001 	addle	r0, r4, r1
    5f78:	d0643003 	rsble	r3, r4, r3
    5f7c:	d0877001 	addle	r7, r7, r1
    5f80:	e25cc001 	subs	r12, r12, #1
    5f84:	e0853083 	add	r3, r5, r3, lsl #1
    5f88:	e1a02082 	lsl	r2, r2, #1
    5f8c:	e1a010a1 	lsr	r1, r1, #1
    5f90:	1afffff4 	bne	5f68 <__ieee754_sqrt+0x88>
    5f94:	e3a05020 	mov	r5, #32
    5f98:	e1a0800c 	mov	r8, r12
    5f9c:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    5fa0:	ea00000c 	b	5fd8 <__ieee754_sqrt+0xf8>
    5fa4:	e1a0a000 	mov	r10, r0
    5fa8:	e1540002 	cmp	r4, r2
    5fac:	e0603003 	rsb	r3, r0, r3
    5fb0:	82433001 	subhi	r3, r3, #1
    5fb4:	e0642002 	rsb	r2, r4, r2
    5fb8:	e08cc001 	add	r12, r12, r1
    5fbc:	e1a0000a 	mov	r0, r10
    5fc0:	e1a04fa2 	lsr	r4, r2, #31
    5fc4:	e2555001 	subs	r5, r5, #1
    5fc8:	e0843083 	add	r3, r4, r3, lsl #1
    5fcc:	e1a02082 	lsl	r2, r2, #1
    5fd0:	e1a010a1 	lsr	r1, r1, #1
    5fd4:	0a00000d 	beq	6010 <__ieee754_sqrt+0x130>
    5fd8:	e1500003 	cmp	r0, r3
    5fdc:	e0814008 	add	r4, r1, r8
    5fe0:	ba000002 	blt	5ff0 <__ieee754_sqrt+0x110>
    5fe4:	e1540002 	cmp	r4, r2
    5fe8:	91530000 	cmpls	r3, r0
    5fec:	1afffff3 	bne	5fc0 <__ieee754_sqrt+0xe0>
    5ff0:	e2048102 	and	r8, r4, #-2147483648	; 0x80000000
    5ff4:	e3580102 	cmp	r8, #-2147483648	; 0x80000000
    5ff8:	e0848001 	add	r8, r4, r1
    5ffc:	1affffe8 	bne	5fa4 <__ieee754_sqrt+0xc4>
    6000:	e3580000 	cmp	r8, #0
    6004:	a280a001 	addge	r10, r0, #1
    6008:	aaffffe6 	bge	5fa8 <__ieee754_sqrt+0xc8>
    600c:	eaffffe4 	b	5fa4 <__ieee754_sqrt+0xc4>
    6010:	e1923003 	orrs	r3, r2, r3
    6014:	1a00000b 	bne	6048 <__ieee754_sqrt+0x168>
    6018:	e1a0c0ac 	lsr	r12, r12, #1
    601c:	e1a030c7 	asr	r3, r7, #1
    6020:	e28335ff 	add	r3, r3, #1069547520	; 0x3fc00000
    6024:	e3170001 	tst	r7, #1
    6028:	e2833602 	add	r3, r3, #2097152	; 0x200000
    602c:	138cc102 	orrne	r12, r12, #-2147483648	; 0x80000000
    6030:	e0835a06 	add	r5, r3, r6, lsl #20
    6034:	e1a0400c 	mov	r4, r12
    6038:	e1a00004 	mov	r0, r4
    603c:	e1a01005 	mov	r1, r5
    6040:	e8bd45f8 	pop	{r3, r4, r5, r6, r7, r8, r10, lr}
    6044:	e12fff1e 	bx	lr
    6048:	e37c0001 	cmn	r12, #1
    604c:	02877001 	addeq	r7, r7, #1
    6050:	01a0c005 	moveq	r12, r5
    6054:	0afffff0 	beq	601c <__ieee754_sqrt+0x13c>
    6058:	e20c3001 	and	r3, r12, #1
    605c:	e083c00c 	add	r12, r3, r12
    6060:	eaffffec 	b	6018 <__ieee754_sqrt+0x138>
    6064:	e3c1c102 	bic	r12, r1, #-2147483648	; 0x80000000
    6068:	e19cc000 	orrs	r12, r12, r0
    606c:	0afffff1 	beq	6038 <__ieee754_sqrt+0x158>
    6070:	e3510000 	cmp	r1, #0
    6074:	01a02001 	moveq	r2, r1
    6078:	1a00001d 	bne	60f4 <__ieee754_sqrt+0x214>
    607c:	e1a0c5a8 	lsr	r12, r8, #11
    6080:	e35c0000 	cmp	r12, #0
    6084:	e2422015 	sub	r2, r2, #21
    6088:	e1a08a88 	lsl	r8, r8, #21
    608c:	0afffffa 	beq	607c <__ieee754_sqrt+0x19c>
    6090:	e21c3601 	ands	r3, r12, #1048576	; 0x100000
    6094:	1a000012 	bne	60e4 <__ieee754_sqrt+0x204>
    6098:	e1a0c08c 	lsl	r12, r12, #1
    609c:	e31c0601 	tst	r12, #1048576	; 0x100000
    60a0:	e2833001 	add	r3, r3, #1
    60a4:	0afffffb 	beq	6098 <__ieee754_sqrt+0x1b8>
    60a8:	e2631001 	rsb	r1, r3, #1
    60ac:	e2630020 	rsb	r0, r3, #32
    60b0:	e18cc038 	orr	r12, r12, r8, lsr r0
    60b4:	e0822001 	add	r2, r2, r1
    60b8:	e1a08318 	lsl	r8, r8, r3
    60bc:	eaffff98 	b	5f24 <__ieee754_sqrt+0x44>
    60c0:	eb00077d 	bl	7ebc <__aeabi_dmul>
    60c4:	e1a02000 	mov	r2, r0
    60c8:	e1a03001 	mov	r3, r1
    60cc:	e1a00004 	mov	r0, r4
    60d0:	e1a01005 	mov	r1, r5
    60d4:	eb000674 	bl	7aac <__adddf3>
    60d8:	e1a04000 	mov	r4, r0
    60dc:	e1a05001 	mov	r5, r1
    60e0:	eaffffd4 	b	6038 <__ieee754_sqrt+0x158>
    60e4:	e3a00020 	mov	r0, #32
    60e8:	e3a01001 	mov	r1, #1
    60ec:	e3a03000 	mov	r3, #0
    60f0:	eaffffee 	b	60b0 <__ieee754_sqrt+0x1d0>
    60f4:	e1a02000 	mov	r2, r0
    60f8:	e1a03001 	mov	r3, r1
    60fc:	eb000669 	bl	7aa8 <__aeabi_dsub>
    6100:	e1a02000 	mov	r2, r0
    6104:	e1a03001 	mov	r3, r1
    6108:	eb00080f 	bl	814c <__aeabi_ddiv>
    610c:	e1a04000 	mov	r4, r0
    6110:	e1a05001 	mov	r5, r1
    6114:	eaffffc7 	b	6038 <__ieee754_sqrt+0x158>
    6118:	7ff00000 	.word	0x7ff00000
    611c:	00000000 	.word	0x00000000

00006120 <__kernel_cos>:
    6120:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    6124:	e3c19102 	bic	r9, r1, #-2147483648	; 0x80000000
    6128:	e35905f9 	cmp	r9, #1044381696	; 0x3e400000
    612c:	e24dd014 	sub	sp, sp, #20
    6130:	e1a06000 	mov	r6, r0
    6134:	e1a07001 	mov	r7, r1
    6138:	e1a04000 	mov	r4, r0
    613c:	e1a05001 	mov	r5, r1
    6140:	e1a0a002 	mov	r10, r2
    6144:	e1a0b003 	mov	r11, r3
    6148:	aa00004d 	bge	6284 <__kernel_cos+0x164>
    614c:	eb0008d2 	bl	849c <__aeabi_d2iz>
    6150:	e3500000 	cmp	r0, #0
    6154:	0a0000ae 	beq	6414 <__kernel_cos+0x2f4>
    6158:	e1a02006 	mov	r2, r6
    615c:	e1a03007 	mov	r3, r7
    6160:	e1a00006 	mov	r0, r6
    6164:	e1a01007 	mov	r1, r7
    6168:	eb000753 	bl	7ebc <__aeabi_dmul>
    616c:	e28f3fab 	add	r3, pc, #684	; 0x2ac
    6170:	e893000c 	ldm	r3, {r2, r3}
    6174:	e1a04000 	mov	r4, r0
    6178:	e1a05001 	mov	r5, r1
    617c:	eb00074e 	bl	7ebc <__aeabi_dmul>
    6180:	e28f3e2a 	add	r3, pc, #672	; 0x2a0
    6184:	e893000c 	ldm	r3, {r2, r3}
    6188:	eb000647 	bl	7aac <__adddf3>
    618c:	e1a02004 	mov	r2, r4
    6190:	e1a03005 	mov	r3, r5
    6194:	eb000748 	bl	7ebc <__aeabi_dmul>
    6198:	e28f3e29 	add	r3, pc, #656	; 0x290
    619c:	e893000c 	ldm	r3, {r2, r3}
    61a0:	eb000640 	bl	7aa8 <__aeabi_dsub>
    61a4:	e1a02004 	mov	r2, r4
    61a8:	e1a03005 	mov	r3, r5
    61ac:	eb000742 	bl	7ebc <__aeabi_dmul>
    61b0:	e28f3d0a 	add	r3, pc, #640	; 0x280
    61b4:	e893000c 	ldm	r3, {r2, r3}
    61b8:	eb00063b 	bl	7aac <__adddf3>
    61bc:	e1a02004 	mov	r2, r4
    61c0:	e1a03005 	mov	r3, r5
    61c4:	eb00073c 	bl	7ebc <__aeabi_dmul>
    61c8:	e28f3e27 	add	r3, pc, #624	; 0x270
    61cc:	e893000c 	ldm	r3, {r2, r3}
    61d0:	eb000634 	bl	7aa8 <__aeabi_dsub>
    61d4:	e1a02004 	mov	r2, r4
    61d8:	e1a03005 	mov	r3, r5
    61dc:	eb000736 	bl	7ebc <__aeabi_dmul>
    61e0:	e28f3e26 	add	r3, pc, #608	; 0x260
    61e4:	e893000c 	ldm	r3, {r2, r3}
    61e8:	eb00062f 	bl	7aac <__adddf3>
    61ec:	e1a02004 	mov	r2, r4
    61f0:	e1a03005 	mov	r3, r5
    61f4:	eb000730 	bl	7ebc <__aeabi_dmul>
    61f8:	e88d0003 	stm	sp, {r0, r1}
    61fc:	e1a00004 	mov	r0, r4
    6200:	e1a01005 	mov	r1, r5
    6204:	e3a02000 	mov	r2, #0
    6208:	e59f3240 	ldr	r3, [pc, #576]	; 6450 <__kernel_cos+0x330>
    620c:	eb00072a 	bl	7ebc <__aeabi_dmul>
    6210:	e89d000c 	ldm	sp, {r2, r3}
    6214:	e1a08000 	mov	r8, r0
    6218:	e1a09001 	mov	r9, r1
    621c:	e1a00004 	mov	r0, r4
    6220:	e1a01005 	mov	r1, r5
    6224:	eb000724 	bl	7ebc <__aeabi_dmul>
    6228:	e1a0200a 	mov	r2, r10
    622c:	e1a04000 	mov	r4, r0
    6230:	e1a05001 	mov	r5, r1
    6234:	e1a0300b 	mov	r3, r11
    6238:	e1a00006 	mov	r0, r6
    623c:	e1a01007 	mov	r1, r7
    6240:	eb00071d 	bl	7ebc <__aeabi_dmul>
    6244:	e1a02000 	mov	r2, r0
    6248:	e1a03001 	mov	r3, r1
    624c:	e1a00004 	mov	r0, r4
    6250:	e1a01005 	mov	r1, r5
    6254:	eb000613 	bl	7aa8 <__aeabi_dsub>
    6258:	e1a02000 	mov	r2, r0
    625c:	e1a03001 	mov	r3, r1
    6260:	e1a00008 	mov	r0, r8
    6264:	e1a01009 	mov	r1, r9
    6268:	eb00060e 	bl	7aa8 <__aeabi_dsub>
    626c:	e1a02000 	mov	r2, r0
    6270:	e1a03001 	mov	r3, r1
    6274:	e3a00000 	mov	r0, #0
    6278:	e59f11d4 	ldr	r1, [pc, #468]	; 6454 <__kernel_cos+0x334>
    627c:	eb000609 	bl	7aa8 <__aeabi_dsub>
    6280:	ea00005a 	b	63f0 <__kernel_cos+0x2d0>
    6284:	e1a02000 	mov	r2, r0
    6288:	e1a03001 	mov	r3, r1
    628c:	eb00070a 	bl	7ebc <__aeabi_dmul>
    6290:	e28f3f62 	add	r3, pc, #392	; 0x188
    6294:	e893000c 	ldm	r3, {r2, r3}
    6298:	e1a04000 	mov	r4, r0
    629c:	e1a05001 	mov	r5, r1
    62a0:	eb000705 	bl	7ebc <__aeabi_dmul>
    62a4:	e28f3f5f 	add	r3, pc, #380	; 0x17c
    62a8:	e893000c 	ldm	r3, {r2, r3}
    62ac:	eb0005fe 	bl	7aac <__adddf3>
    62b0:	e1a02004 	mov	r2, r4
    62b4:	e1a03005 	mov	r3, r5
    62b8:	eb0006ff 	bl	7ebc <__aeabi_dmul>
    62bc:	e28f3f5b 	add	r3, pc, #364	; 0x16c
    62c0:	e893000c 	ldm	r3, {r2, r3}
    62c4:	eb0005f7 	bl	7aa8 <__aeabi_dsub>
    62c8:	e1a02004 	mov	r2, r4
    62cc:	e1a03005 	mov	r3, r5
    62d0:	eb0006f9 	bl	7ebc <__aeabi_dmul>
    62d4:	e28f3f57 	add	r3, pc, #348	; 0x15c
    62d8:	e893000c 	ldm	r3, {r2, r3}
    62dc:	eb0005f2 	bl	7aac <__adddf3>
    62e0:	e1a02004 	mov	r2, r4
    62e4:	e1a03005 	mov	r3, r5
    62e8:	eb0006f3 	bl	7ebc <__aeabi_dmul>
    62ec:	e28f3f53 	add	r3, pc, #332	; 0x14c
    62f0:	e893000c 	ldm	r3, {r2, r3}
    62f4:	eb0005eb 	bl	7aa8 <__aeabi_dsub>
    62f8:	e1a02004 	mov	r2, r4
    62fc:	e1a03005 	mov	r3, r5
    6300:	eb0006ed 	bl	7ebc <__aeabi_dmul>
    6304:	e28f3f4f 	add	r3, pc, #316	; 0x13c
    6308:	e893000c 	ldm	r3, {r2, r3}
    630c:	eb0005e6 	bl	7aac <__adddf3>
    6310:	e1a03005 	mov	r3, r5
    6314:	e1a02004 	mov	r2, r4
    6318:	eb0006e7 	bl	7ebc <__aeabi_dmul>
    631c:	e59f3134 	ldr	r3, [pc, #308]	; 6458 <__kernel_cos+0x338>
    6320:	e1590003 	cmp	r9, r3
    6324:	e88d0003 	stm	sp, {r0, r1}
    6328:	daffffb3 	ble	61fc <__kernel_cos+0xdc>
    632c:	e59f3128 	ldr	r3, [pc, #296]	; 645c <__kernel_cos+0x33c>
    6330:	e1590003 	cmp	r9, r3
    6334:	e3a02000 	mov	r2, #0
    6338:	ca00002f 	bgt	63fc <__kernel_cos+0x2dc>
    633c:	e2493602 	sub	r3, r9, #2097152	; 0x200000
    6340:	e3a02000 	mov	r2, #0
    6344:	e3a00000 	mov	r0, #0
    6348:	e59f1104 	ldr	r1, [pc, #260]	; 6454 <__kernel_cos+0x334>
    634c:	e1a08002 	mov	r8, r2
    6350:	e1a09003 	mov	r9, r3
    6354:	eb0005d3 	bl	7aa8 <__aeabi_dsub>
    6358:	e58d0008 	str	r0, [sp, #8]
    635c:	e58d100c 	str	r1, [sp, #12]
    6360:	e1a00004 	mov	r0, r4
    6364:	e1a01005 	mov	r1, r5
    6368:	e3a02000 	mov	r2, #0
    636c:	e59f30dc 	ldr	r3, [pc, #220]	; 6450 <__kernel_cos+0x330>
    6370:	eb0006d1 	bl	7ebc <__aeabi_dmul>
    6374:	e1a02008 	mov	r2, r8
    6378:	e1a03009 	mov	r3, r9
    637c:	eb0005c9 	bl	7aa8 <__aeabi_dsub>
    6380:	e89d000c 	ldm	sp, {r2, r3}
    6384:	e1a08000 	mov	r8, r0
    6388:	e1a09001 	mov	r9, r1
    638c:	e1a00004 	mov	r0, r4
    6390:	e1a01005 	mov	r1, r5
    6394:	eb0006c8 	bl	7ebc <__aeabi_dmul>
    6398:	e1a0200a 	mov	r2, r10
    639c:	e1a04000 	mov	r4, r0
    63a0:	e1a05001 	mov	r5, r1
    63a4:	e1a0300b 	mov	r3, r11
    63a8:	e1a00006 	mov	r0, r6
    63ac:	e1a01007 	mov	r1, r7
    63b0:	eb0006c1 	bl	7ebc <__aeabi_dmul>
    63b4:	e1a02000 	mov	r2, r0
    63b8:	e1a03001 	mov	r3, r1
    63bc:	e1a00004 	mov	r0, r4
    63c0:	e1a01005 	mov	r1, r5
    63c4:	eb0005b7 	bl	7aa8 <__aeabi_dsub>
    63c8:	e1a02000 	mov	r2, r0
    63cc:	e1a03001 	mov	r3, r1
    63d0:	e1a00008 	mov	r0, r8
    63d4:	e1a01009 	mov	r1, r9
    63d8:	eb0005b2 	bl	7aa8 <__aeabi_dsub>
    63dc:	e1a02000 	mov	r2, r0
    63e0:	e1a03001 	mov	r3, r1
    63e4:	e28d1008 	add	r1, sp, #8
    63e8:	e8910003 	ldm	r1, {r0, r1}
    63ec:	eb0005ad 	bl	7aa8 <__aeabi_dsub>
    63f0:	e28dd014 	add	sp, sp, #20
    63f4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    63f8:	e12fff1e 	bx	lr
    63fc:	e59f305c 	ldr	r3, [pc, #92]	; 6460 <__kernel_cos+0x340>
    6400:	e3a08000 	mov	r8, #0
    6404:	e58d2008 	str	r2, [sp, #8]
    6408:	e58d300c 	str	r3, [sp, #12]
    640c:	e59f9050 	ldr	r9, [pc, #80]	; 6464 <__kernel_cos+0x344>
    6410:	eaffffd2 	b	6360 <__kernel_cos+0x240>
    6414:	e3a00000 	mov	r0, #0
    6418:	e59f1034 	ldr	r1, [pc, #52]	; 6454 <__kernel_cos+0x334>
    641c:	eafffff3 	b	63f0 <__kernel_cos+0x2d0>
    6420:	be8838d4 	.word	0xbe8838d4
    6424:	bda8fae9 	.word	0xbda8fae9
    6428:	bdb4b1c4 	.word	0xbdb4b1c4
    642c:	3e21ee9e 	.word	0x3e21ee9e
    6430:	809c52ad 	.word	0x809c52ad
    6434:	3e927e4f 	.word	0x3e927e4f
    6438:	19cb1590 	.word	0x19cb1590
    643c:	3efa01a0 	.word	0x3efa01a0
    6440:	16c15177 	.word	0x16c15177
    6444:	3f56c16c 	.word	0x3f56c16c
    6448:	5555554c 	.word	0x5555554c
    644c:	3fa55555 	.word	0x3fa55555
    6450:	3fe00000 	.word	0x3fe00000
    6454:	3ff00000 	.word	0x3ff00000
    6458:	3fd33332 	.word	0x3fd33332
    645c:	3fe90000 	.word	0x3fe90000
    6460:	3fe70000 	.word	0x3fe70000
    6464:	3fd20000 	.word	0x3fd20000

00006468 <__kernel_rem_pio2>:
    6468:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    646c:	e59feb6c 	ldr	lr, [pc, #2924]	; 6fe0 <__kernel_rem_pio2+0xb78>
    6470:	e242c003 	sub	r12, r2, #3
    6474:	e0ce4e9c 	smull	r4, lr, r12, lr
    6478:	e1a0cfcc 	asr	r12, r12, #31
    647c:	e06cc14e 	rsb	r12, r12, lr, asr #2
    6480:	e24ddf99 	sub	sp, sp, #612	; 0x264
    6484:	e1cccfcc 	bic	r12, r12, r12, asr #31
    6488:	e58dc028 	str	r12, [sp, #40]	; 0x28
    648c:	e1a0b003 	mov	r11, r3
    6490:	e59dc288 	ldr	r12, [sp, #648]	; 0x288
    6494:	e59f3b48 	ldr	r3, [pc, #2888]	; 6fe4 <__kernel_rem_pio2+0xb7c>
    6498:	e793310c 	ldr	r3, [r3, r12, lsl #2]
    649c:	e59dc028 	ldr	r12, [sp, #40]	; 0x28
    64a0:	e58d3020 	str	r3, [sp, #32]
    64a4:	e59de020 	ldr	lr, [sp, #32]
    64a8:	e1e0300c 	mvn	r3, r12
    64ac:	e24b4001 	sub	r4, r11, #1
    64b0:	e0833083 	add	r3, r3, r3, lsl #1
    64b4:	e58d0010 	str	r0, [sp, #16]
    64b8:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
    64bc:	e0823183 	add	r3, r2, r3, lsl #3
    64c0:	e094c00e 	adds	r12, r4, lr
    64c4:	e58d400c 	str	r4, [sp, #12]
    64c8:	e58d101c 	str	r1, [sp, #28]
    64cc:	e58d3018 	str	r3, [sp, #24]
    64d0:	e0646000 	rsb	r6, r4, r0
    64d4:	4a000012 	bmi	6524 <__kernel_rem_pio2+0xbc>
    64d8:	e086c00c 	add	r12, r6, r12
    64dc:	e28c4001 	add	r4, r12, #1
    64e0:	e59dc28c 	ldr	r12, [sp, #652]	; 0x28c
    64e4:	e28d8080 	add	r8, sp, #128	; 0x80
    64e8:	e08c5106 	add	r5, r12, r6, lsl #2
    64ec:	e3a07000 	mov	r7, #0
    64f0:	ea000006 	b	6510 <__kernel_rem_pio2+0xa8>
    64f4:	e7950007 	ldr	r0, [r5, r7]
    64f8:	eb000638 	bl	7de0 <__aeabi_i2d>
    64fc:	e2866001 	add	r6, r6, #1
    6500:	e1560004 	cmp	r6, r4
    6504:	e8a80003 	stmia	r8!, {r0, r1}
    6508:	e2877004 	add	r7, r7, #4
    650c:	0a000004 	beq	6524 <__kernel_rem_pio2+0xbc>
    6510:	e3560000 	cmp	r6, #0
    6514:	aafffff6 	bge	64f4 <__kernel_rem_pio2+0x8c>
    6518:	e3a00000 	mov	r0, #0
    651c:	e3a01000 	mov	r1, #0
    6520:	eafffff5 	b	64fc <__kernel_rem_pio2+0x94>
    6524:	e59d4020 	ldr	r4, [sp, #32]
    6528:	e3540000 	cmp	r4, #0
    652c:	ba000020 	blt	65b4 <__kernel_rem_pio2+0x14c>
    6530:	e59d4020 	ldr	r4, [sp, #32]
    6534:	e28dcf72 	add	r12, sp, #456	; 0x1c8
    6538:	e08cc184 	add	r12, r12, r4, lsl #3
    653c:	e58dc004 	str	r12, [sp, #4]
    6540:	e28dad07 	add	r10, sp, #448	; 0x1c0
    6544:	e1a0800b 	mov	r8, r11
    6548:	e59dc00c 	ldr	r12, [sp, #12]
    654c:	e35c0000 	cmp	r12, #0
    6550:	ba000130 	blt	6a18 <__kernel_rem_pio2+0x5b0>
    6554:	e28de080 	add	lr, sp, #128	; 0x80
    6558:	e59d9010 	ldr	r9, [sp, #16]
    655c:	e08e7188 	add	r7, lr, r8, lsl #3
    6560:	e3a04000 	mov	r4, #0
    6564:	e3a05000 	mov	r5, #0
    6568:	e3a06000 	mov	r6, #0
    656c:	e937000c 	ldmdb	r7!, {r2, r3}
    6570:	e8b90003 	ldm	r9!, {r0, r1}
    6574:	eb000650 	bl	7ebc <__aeabi_dmul>
    6578:	e1a02000 	mov	r2, r0
    657c:	e1a03001 	mov	r3, r1
    6580:	e1a00004 	mov	r0, r4
    6584:	e1a01005 	mov	r1, r5
    6588:	eb000547 	bl	7aac <__adddf3>
    658c:	e2866001 	add	r6, r6, #1
    6590:	e156000b 	cmp	r6, r11
    6594:	e1a04000 	mov	r4, r0
    6598:	e1a05001 	mov	r5, r1
    659c:	1afffff2 	bne	656c <__kernel_rem_pio2+0x104>
    65a0:	e8aa0030 	stmia	r10!, {r4, r5}
    65a4:	e59d4004 	ldr	r4, [sp, #4]
    65a8:	e15a0004 	cmp	r10, r4
    65ac:	e2888001 	add	r8, r8, #1
    65b0:	1affffe4 	bne	6548 <__kernel_rem_pio2+0xe0>
    65b4:	e59dc020 	ldr	r12, [sp, #32]
    65b8:	e28d4030 	add	r4, sp, #48	; 0x30
    65bc:	e084410c 	add	r4, r4, r12, lsl #2
    65c0:	e58d402c 	str	r4, [sp, #44]	; 0x2c
    65c4:	e58dc004 	str	r12, [sp, #4]
    65c8:	e59d4004 	ldr	r4, [sp, #4]
    65cc:	e28dce26 	add	r12, sp, #608	; 0x260
    65d0:	e1a0a184 	lsl	r10, r4, #3
    65d4:	e08c300a 	add	r3, r12, r10
    65d8:	e3540000 	cmp	r4, #0
    65dc:	e24350a0 	sub	r5, r3, #160	; 0xa0
    65e0:	e8950030 	ldm	r5, {r4, r5}
    65e4:	da00001f 	ble	6668 <__kernel_rem_pio2+0x200>
    65e8:	e59dc004 	ldr	r12, [sp, #4]
    65ec:	e28d802c 	add	r8, sp, #44	; 0x2c
    65f0:	e28ded07 	add	lr, sp, #448	; 0x1c0
    65f4:	e08ea00a 	add	r10, lr, r10
    65f8:	e088910c 	add	r9, r8, r12, lsl #2
    65fc:	e3a02000 	mov	r2, #0
    6600:	e59f39e0 	ldr	r3, [pc, #2528]	; 6fe8 <__kernel_rem_pio2+0xb80>
    6604:	e1a00004 	mov	r0, r4
    6608:	e1a01005 	mov	r1, r5
    660c:	eb00062a 	bl	7ebc <__aeabi_dmul>
    6610:	eb0007a1 	bl	849c <__aeabi_d2iz>
    6614:	eb0005f1 	bl	7de0 <__aeabi_i2d>
    6618:	e3a02000 	mov	r2, #0
    661c:	e59f39c8 	ldr	r3, [pc, #2504]	; 6fec <__kernel_rem_pio2+0xb84>
    6620:	e1a06000 	mov	r6, r0
    6624:	e1a07001 	mov	r7, r1
    6628:	eb000623 	bl	7ebc <__aeabi_dmul>
    662c:	e1a02000 	mov	r2, r0
    6630:	e1a03001 	mov	r3, r1
    6634:	e1a00004 	mov	r0, r4
    6638:	e1a01005 	mov	r1, r5
    663c:	eb000519 	bl	7aa8 <__aeabi_dsub>
    6640:	eb000795 	bl	849c <__aeabi_d2iz>
    6644:	e1a02006 	mov	r2, r6
    6648:	e5a80004 	str	r0, [r8, #4]!
    664c:	e1a03007 	mov	r3, r7
    6650:	e93a0003 	ldmdb	r10!, {r0, r1}
    6654:	eb000514 	bl	7aac <__adddf3>
    6658:	e1580009 	cmp	r8, r9
    665c:	e1a04000 	mov	r4, r0
    6660:	e1a05001 	mov	r5, r1
    6664:	1affffe4 	bne	65fc <__kernel_rem_pio2+0x194>
    6668:	e59d2018 	ldr	r2, [sp, #24]
    666c:	e1a00004 	mov	r0, r4
    6670:	e1a01005 	mov	r1, r5
    6674:	eb00049b 	bl	78e8 <scalbn>
    6678:	e3a02000 	mov	r2, #0
    667c:	e3a035ff 	mov	r3, #1069547520	; 0x3fc00000
    6680:	e1a04000 	mov	r4, r0
    6684:	e1a05001 	mov	r5, r1
    6688:	eb00060b 	bl	7ebc <__aeabi_dmul>
    668c:	ebfff58d 	bl	3cc8 <floor>
    6690:	e3a02000 	mov	r2, #0
    6694:	e59f3954 	ldr	r3, [pc, #2388]	; 6ff0 <__kernel_rem_pio2+0xb88>
    6698:	eb000607 	bl	7ebc <__aeabi_dmul>
    669c:	e1a02000 	mov	r2, r0
    66a0:	e1a03001 	mov	r3, r1
    66a4:	e1a00004 	mov	r0, r4
    66a8:	e1a01005 	mov	r1, r5
    66ac:	eb0004fd 	bl	7aa8 <__aeabi_dsub>
    66b0:	e1a04000 	mov	r4, r0
    66b4:	e1a05001 	mov	r5, r1
    66b8:	eb000777 	bl	849c <__aeabi_d2iz>
    66bc:	e1a08000 	mov	r8, r0
    66c0:	eb0005c6 	bl	7de0 <__aeabi_i2d>
    66c4:	e1a02000 	mov	r2, r0
    66c8:	e1a03001 	mov	r3, r1
    66cc:	e1a00004 	mov	r0, r4
    66d0:	e1a01005 	mov	r1, r5
    66d4:	eb0004f3 	bl	7aa8 <__aeabi_dsub>
    66d8:	e59d4018 	ldr	r4, [sp, #24]
    66dc:	e3540000 	cmp	r4, #0
    66e0:	e1a06000 	mov	r6, r0
    66e4:	e1a07001 	mov	r7, r1
    66e8:	da0000ad 	ble	69a4 <__kernel_rem_pio2+0x53c>
    66ec:	e59dc004 	ldr	r12, [sp, #4]
    66f0:	e28dee26 	add	lr, sp, #608	; 0x260
    66f4:	e24c2001 	sub	r2, r12, #1
    66f8:	e08e2102 	add	r2, lr, r2, lsl #2
    66fc:	e5120230 	ldr	r0, [r2, #-560]	; 0xfffffdd0
    6700:	e2643018 	rsb	r3, r4, #24
    6704:	e1a01350 	asr	r1, r0, r3
    6708:	e0403311 	sub	r3, r0, r1, lsl r3
    670c:	e2645017 	rsb	r5, r4, #23
    6710:	e1a05553 	asr	r5, r3, r5
    6714:	e5023230 	str	r3, [r2, #-560]	; 0xfffffdd0
    6718:	e0888001 	add	r8, r8, r1
    671c:	e3550000 	cmp	r5, #0
    6720:	da000027 	ble	67c4 <__kernel_rem_pio2+0x35c>
    6724:	e59d4004 	ldr	r4, [sp, #4]
    6728:	e3540000 	cmp	r4, #0
    672c:	e2888001 	add	r8, r8, #1
    6730:	da0000b6 	ble	6a10 <__kernel_rem_pio2+0x5a8>
    6734:	e28d3030 	add	r3, sp, #48	; 0x30
    6738:	e0830104 	add	r0, r3, r4, lsl #2
    673c:	e3a04000 	mov	r4, #0
    6740:	ea000005 	b	675c <__kernel_rem_pio2+0x2f4>
    6744:	e3520000 	cmp	r2, #0
    6748:	12622401 	rsbne	r2, r2, #16777216	; 0x1000000
    674c:	15032004 	strne	r2, [r3, #-4]
    6750:	13a04001 	movne	r4, #1
    6754:	e1530000 	cmp	r3, r0
    6758:	0a000008 	beq	6780 <__kernel_rem_pio2+0x318>
    675c:	e3540000 	cmp	r4, #0
    6760:	e4932004 	ldr	r2, [r3], #4
    6764:	0afffff6 	beq	6744 <__kernel_rem_pio2+0x2dc>
    6768:	e3e014ff 	mvn	r1, #-16777216	; 0xff000000
    676c:	e0621001 	rsb	r1, r2, r1
    6770:	e1530000 	cmp	r3, r0
    6774:	e5031004 	str	r1, [r3, #-4]
    6778:	e3a04001 	mov	r4, #1
    677c:	1afffff6 	bne	675c <__kernel_rem_pio2+0x2f4>
    6780:	e59dc018 	ldr	r12, [sp, #24]
    6784:	e35c0000 	cmp	r12, #0
    6788:	da00000b 	ble	67bc <__kernel_rem_pio2+0x354>
    678c:	e35c0001 	cmp	r12, #1
    6790:	0a00008a 	beq	69c0 <__kernel_rem_pio2+0x558>
    6794:	e35c0002 	cmp	r12, #2
    6798:	1a000007 	bne	67bc <__kernel_rem_pio2+0x354>
    679c:	e59dc004 	ldr	r12, [sp, #4]
    67a0:	e28dee26 	add	lr, sp, #608	; 0x260
    67a4:	e24c3001 	sub	r3, r12, #1
    67a8:	e08e3103 	add	r3, lr, r3, lsl #2
    67ac:	e5132230 	ldr	r2, [r3, #-560]	; 0xfffffdd0
    67b0:	e3c224ff 	bic	r2, r2, #-16777216	; 0xff000000
    67b4:	e3c22503 	bic	r2, r2, #12582912	; 0xc00000
    67b8:	e5032230 	str	r2, [r3, #-560]	; 0xfffffdd0
    67bc:	e3550002 	cmp	r5, #2
    67c0:	0a000062 	beq	6950 <__kernel_rem_pio2+0x4e8>
    67c4:	e1a00006 	mov	r0, r6
    67c8:	e1a01007 	mov	r1, r7
    67cc:	e3a02000 	mov	r2, #0
    67d0:	e3a03000 	mov	r3, #0
    67d4:	eb000712 	bl	8424 <__aeabi_dcmpeq>
    67d8:	e3500000 	cmp	r0, #0
    67dc:	0a000090 	beq	6a24 <__kernel_rem_pio2+0x5bc>
    67e0:	e59d4004 	ldr	r4, [sp, #4]
    67e4:	e59dc020 	ldr	r12, [sp, #32]
    67e8:	e2440001 	sub	r0, r4, #1
    67ec:	e15c0000 	cmp	r12, r0
    67f0:	ca000009 	bgt	681c <__kernel_rem_pio2+0x3b4>
    67f4:	e28de030 	add	lr, sp, #48	; 0x30
    67f8:	e59dc02c 	ldr	r12, [sp, #44]	; 0x2c
    67fc:	e08e3104 	add	r3, lr, r4, lsl #2
    6800:	e3a02000 	mov	r2, #0
    6804:	e5331004 	ldr	r1, [r3, #-4]!
    6808:	e153000c 	cmp	r3, r12
    680c:	e1822001 	orr	r2, r2, r1
    6810:	1afffffb 	bne	6804 <__kernel_rem_pio2+0x39c>
    6814:	e3520000 	cmp	r2, #0
    6818:	1a0001c9 	bne	6f44 <__kernel_rem_pio2+0xadc>
    681c:	e59d4020 	ldr	r4, [sp, #32]
    6820:	e2442001 	sub	r2, r4, #1
    6824:	e1a02102 	lsl	r2, r2, #2
    6828:	e28dce26 	add	r12, sp, #608	; 0x260
    682c:	e08c3002 	add	r3, r12, r2
    6830:	e5133230 	ldr	r3, [r3, #-560]	; 0xfffffdd0
    6834:	e3530000 	cmp	r3, #0
    6838:	1a0001d9 	bne	6fa4 <__kernel_rem_pio2+0xb3c>
    683c:	e28de030 	add	lr, sp, #48	; 0x30
    6840:	e08e2002 	add	r2, lr, r2
    6844:	e3a03001 	mov	r3, #1
    6848:	e5321004 	ldr	r1, [r2, #-4]!
    684c:	e3510000 	cmp	r1, #0
    6850:	e2833001 	add	r3, r3, #1
    6854:	0afffffb 	beq	6848 <__kernel_rem_pio2+0x3e0>
    6858:	e59d4004 	ldr	r4, [sp, #4]
    685c:	e0843003 	add	r3, r4, r3
    6860:	e2848001 	add	r8, r4, #1
    6864:	e1580003 	cmp	r8, r3
    6868:	e58d3024 	str	r3, [sp, #36]	; 0x24
    686c:	ca000031 	bgt	6938 <__kernel_rem_pio2+0x4d0>
    6870:	e59d4004 	ldr	r4, [sp, #4]
    6874:	e59dc028 	ldr	r12, [sp, #40]	; 0x28
    6878:	e084300c 	add	r3, r4, r12
    687c:	e59dc28c 	ldr	r12, [sp, #652]	; 0x28c
    6880:	e59d400c 	ldr	r4, [sp, #12]
    6884:	e08c3103 	add	r3, r12, r3, lsl #2
    6888:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
    688c:	e0849008 	add	r9, r4, r8
    6890:	e28d4d07 	add	r4, sp, #448	; 0x1c0
    6894:	e0844188 	add	r4, r4, r8, lsl #3
    6898:	e28cc001 	add	r12, r12, #1
    689c:	e28de080 	add	lr, sp, #128	; 0x80
    68a0:	e98d0018 	stmib	sp, {r3, r4}
    68a4:	e58dc014 	str	r12, [sp, #20]
    68a8:	e08e9189 	add	r9, lr, r9, lsl #3
    68ac:	e59d4004 	ldr	r4, [sp, #4]
    68b0:	e5b40004 	ldr	r0, [r4, #4]!
    68b4:	e58d4004 	str	r4, [sp, #4]
    68b8:	eb000548 	bl	7de0 <__aeabi_i2d>
    68bc:	e59dc00c 	ldr	r12, [sp, #12]
    68c0:	e35c0000 	cmp	r12, #0
    68c4:	e8a90003 	stmia	r9!, {r0, r1}
    68c8:	ba00001d 	blt	6944 <__kernel_rem_pio2+0x4dc>
    68cc:	e088700b 	add	r7, r8, r11
    68d0:	e28de080 	add	lr, sp, #128	; 0x80
    68d4:	e59da010 	ldr	r10, [sp, #16]
    68d8:	e08e7187 	add	r7, lr, r7, lsl #3
    68dc:	e3a04000 	mov	r4, #0
    68e0:	e3a05000 	mov	r5, #0
    68e4:	e3a06000 	mov	r6, #0
    68e8:	e937000c 	ldmdb	r7!, {r2, r3}
    68ec:	e8ba0003 	ldm	r10!, {r0, r1}
    68f0:	eb000571 	bl	7ebc <__aeabi_dmul>
    68f4:	e1a02000 	mov	r2, r0
    68f8:	e1a03001 	mov	r3, r1
    68fc:	e1a00004 	mov	r0, r4
    6900:	e1a01005 	mov	r1, r5
    6904:	eb000468 	bl	7aac <__adddf3>
    6908:	e2866001 	add	r6, r6, #1
    690c:	e156000b 	cmp	r6, r11
    6910:	e1a04000 	mov	r4, r0
    6914:	e1a05001 	mov	r5, r1
    6918:	1afffff2 	bne	68e8 <__kernel_rem_pio2+0x480>
    691c:	e59dc014 	ldr	r12, [sp, #20]
    6920:	e2888001 	add	r8, r8, #1
    6924:	e158000c 	cmp	r8, r12
    6928:	e59dc008 	ldr	r12, [sp, #8]
    692c:	e8ac0030 	stmia	r12!, {r4, r5}
    6930:	e58dc008 	str	r12, [sp, #8]
    6934:	1affffdc 	bne	68ac <__kernel_rem_pio2+0x444>
    6938:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
    693c:	e58dc004 	str	r12, [sp, #4]
    6940:	eaffff20 	b	65c8 <__kernel_rem_pio2+0x160>
    6944:	e3a04000 	mov	r4, #0
    6948:	e3a05000 	mov	r5, #0
    694c:	eafffff2 	b	691c <__kernel_rem_pio2+0x4b4>
    6950:	e1a02006 	mov	r2, r6
    6954:	e1a03007 	mov	r3, r7
    6958:	e3a00000 	mov	r0, #0
    695c:	e59f1690 	ldr	r1, [pc, #1680]	; 6ff4 <__kernel_rem_pio2+0xb8c>
    6960:	eb000450 	bl	7aa8 <__aeabi_dsub>
    6964:	e3540000 	cmp	r4, #0
    6968:	e1a06000 	mov	r6, r0
    696c:	e1a07001 	mov	r7, r1
    6970:	0affff93 	beq	67c4 <__kernel_rem_pio2+0x35c>
    6974:	e59d2018 	ldr	r2, [sp, #24]
    6978:	e3a00000 	mov	r0, #0
    697c:	e59f1670 	ldr	r1, [pc, #1648]	; 6ff4 <__kernel_rem_pio2+0xb8c>
    6980:	eb0003d8 	bl	78e8 <scalbn>
    6984:	e1a02000 	mov	r2, r0
    6988:	e1a03001 	mov	r3, r1
    698c:	e1a00006 	mov	r0, r6
    6990:	e1a01007 	mov	r1, r7
    6994:	eb000443 	bl	7aa8 <__aeabi_dsub>
    6998:	e1a06000 	mov	r6, r0
    699c:	e1a07001 	mov	r7, r1
    69a0:	eaffff87 	b	67c4 <__kernel_rem_pio2+0x35c>
    69a4:	1a00000e 	bne	69e4 <__kernel_rem_pio2+0x57c>
    69a8:	e59d4004 	ldr	r4, [sp, #4]
    69ac:	e28dce26 	add	r12, sp, #608	; 0x260
    69b0:	e08c3104 	add	r3, r12, r4, lsl #2
    69b4:	e5135234 	ldr	r5, [r3, #-564]	; 0xfffffdcc
    69b8:	e1a05bc5 	asr	r5, r5, #23
    69bc:	eaffff56 	b	671c <__kernel_rem_pio2+0x2b4>
    69c0:	e59dc004 	ldr	r12, [sp, #4]
    69c4:	e28dee26 	add	lr, sp, #608	; 0x260
    69c8:	e24c3001 	sub	r3, r12, #1
    69cc:	e08e3103 	add	r3, lr, r3, lsl #2
    69d0:	e5132230 	ldr	r2, [r3, #-560]	; 0xfffffdd0
    69d4:	e3c224ff 	bic	r2, r2, #-16777216	; 0xff000000
    69d8:	e3c22502 	bic	r2, r2, #8388608	; 0x800000
    69dc:	e5032230 	str	r2, [r3, #-560]	; 0xfffffdd0
    69e0:	eaffff75 	b	67bc <__kernel_rem_pio2+0x354>
    69e4:	e3a02000 	mov	r2, #0
    69e8:	e59f3608 	ldr	r3, [pc, #1544]	; 6ff8 <__kernel_rem_pio2+0xb90>
    69ec:	eb00069e 	bl	846c <__aeabi_dcmpge>
    69f0:	e3500000 	cmp	r0, #0
    69f4:	03a05000 	moveq	r5, #0
    69f8:	0affff71 	beq	67c4 <__kernel_rem_pio2+0x35c>
    69fc:	e59d4004 	ldr	r4, [sp, #4]
    6a00:	e3540000 	cmp	r4, #0
    6a04:	e3a05002 	mov	r5, #2
    6a08:	e2888001 	add	r8, r8, #1
    6a0c:	caffff48 	bgt	6734 <__kernel_rem_pio2+0x2cc>
    6a10:	e3a04000 	mov	r4, #0
    6a14:	eaffff59 	b	6780 <__kernel_rem_pio2+0x318>
    6a18:	e3a04000 	mov	r4, #0
    6a1c:	e3a05000 	mov	r5, #0
    6a20:	eafffede 	b	65a0 <__kernel_rem_pio2+0x138>
    6a24:	e59d4018 	ldr	r4, [sp, #24]
    6a28:	e1a00006 	mov	r0, r6
    6a2c:	e2642000 	rsb	r2, r4, #0
    6a30:	e1a01007 	mov	r1, r7
    6a34:	e58d500c 	str	r5, [sp, #12]
    6a38:	e58d8010 	str	r8, [sp, #16]
    6a3c:	eb0003a9 	bl	78e8 <scalbn>
    6a40:	e3a02000 	mov	r2, #0
    6a44:	e59f35a0 	ldr	r3, [pc, #1440]	; 6fec <__kernel_rem_pio2+0xb84>
    6a48:	e1a04000 	mov	r4, r0
    6a4c:	e1a05001 	mov	r5, r1
    6a50:	eb000685 	bl	846c <__aeabi_dcmpge>
    6a54:	e3500000 	cmp	r0, #0
    6a58:	0a000153 	beq	6fac <__kernel_rem_pio2+0xb44>
    6a5c:	e3a02000 	mov	r2, #0
    6a60:	e59f3580 	ldr	r3, [pc, #1408]	; 6fe8 <__kernel_rem_pio2+0xb80>
    6a64:	e1a00004 	mov	r0, r4
    6a68:	e1a01005 	mov	r1, r5
    6a6c:	eb000512 	bl	7ebc <__aeabi_dmul>
    6a70:	eb000689 	bl	849c <__aeabi_d2iz>
    6a74:	eb0004d9 	bl	7de0 <__aeabi_i2d>
    6a78:	e3a02000 	mov	r2, #0
    6a7c:	e59f3568 	ldr	r3, [pc, #1384]	; 6fec <__kernel_rem_pio2+0xb84>
    6a80:	e1a06000 	mov	r6, r0
    6a84:	e1a07001 	mov	r7, r1
    6a88:	eb00050b 	bl	7ebc <__aeabi_dmul>
    6a8c:	e1a02000 	mov	r2, r0
    6a90:	e1a03001 	mov	r3, r1
    6a94:	e1a00004 	mov	r0, r4
    6a98:	e1a01005 	mov	r1, r5
    6a9c:	eb000401 	bl	7aa8 <__aeabi_dsub>
    6aa0:	eb00067d 	bl	849c <__aeabi_d2iz>
    6aa4:	e59d4004 	ldr	r4, [sp, #4]
    6aa8:	e28dce26 	add	r12, sp, #608	; 0x260
    6aac:	e08c3104 	add	r3, r12, r4, lsl #2
    6ab0:	e5030230 	str	r0, [r3, #-560]	; 0xfffffdd0
    6ab4:	e1a01007 	mov	r1, r7
    6ab8:	e1a00006 	mov	r0, r6
    6abc:	eb000676 	bl	849c <__aeabi_d2iz>
    6ac0:	e2844001 	add	r4, r4, #1
    6ac4:	e28dee26 	add	lr, sp, #608	; 0x260
    6ac8:	e08e3104 	add	r3, lr, r4, lsl #2
    6acc:	e58d4004 	str	r4, [sp, #4]
    6ad0:	e59d4018 	ldr	r4, [sp, #24]
    6ad4:	e2844018 	add	r4, r4, #24
    6ad8:	e58d4018 	str	r4, [sp, #24]
    6adc:	e5030230 	str	r0, [r3, #-560]	; 0xfffffdd0
    6ae0:	e3a00000 	mov	r0, #0
    6ae4:	e59f1508 	ldr	r1, [pc, #1288]	; 6ff4 <__kernel_rem_pio2+0xb8c>
    6ae8:	e59d2018 	ldr	r2, [sp, #24]
    6aec:	eb00037d 	bl	78e8 <scalbn>
    6af0:	e59dc004 	ldr	r12, [sp, #4]
    6af4:	e35c0000 	cmp	r12, #0
    6af8:	e1a04000 	mov	r4, r0
    6afc:	e1a05001 	mov	r5, r1
    6b00:	ba00003b 	blt	6bf4 <__kernel_rem_pio2+0x78c>
    6b04:	e28c6001 	add	r6, r12, #1
    6b08:	e28d9d07 	add	r9, sp, #448	; 0x1c0
    6b0c:	e28de030 	add	lr, sp, #48	; 0x30
    6b10:	e08e7106 	add	r7, lr, r6, lsl #2
    6b14:	e0896186 	add	r6, r9, r6, lsl #3
    6b18:	e5370004 	ldr	r0, [r7, #-4]!
    6b1c:	eb0004af 	bl	7de0 <__aeabi_i2d>
    6b20:	e1a02004 	mov	r2, r4
    6b24:	e1a03005 	mov	r3, r5
    6b28:	eb0004e3 	bl	7ebc <__aeabi_dmul>
    6b2c:	e3a02000 	mov	r2, #0
    6b30:	e9260003 	stmdb	r6!, {r0, r1}
    6b34:	e59f34ac 	ldr	r3, [pc, #1196]	; 6fe8 <__kernel_rem_pio2+0xb80>
    6b38:	e1a00004 	mov	r0, r4
    6b3c:	e1a01005 	mov	r1, r5
    6b40:	eb0004dd 	bl	7ebc <__aeabi_dmul>
    6b44:	e1560009 	cmp	r6, r9
    6b48:	e1a04000 	mov	r4, r0
    6b4c:	e1a05001 	mov	r5, r1
    6b50:	1afffff0 	bne	6b18 <__kernel_rem_pio2+0x6b0>
    6b54:	e59da004 	ldr	r10, [sp, #4]
    6b58:	e59db020 	ldr	r11, [sp, #32]
    6b5c:	e58da008 	str	r10, [sp, #8]
    6b60:	e3a08000 	mov	r8, #0
    6b64:	e35b0000 	cmp	r11, #0
    6b68:	b3a04000 	movlt	r4, #0
    6b6c:	b3a05000 	movlt	r5, #0
    6b70:	ba000015 	blt	6bcc <__kernel_rem_pio2+0x764>
    6b74:	e59d4008 	ldr	r4, [sp, #8]
    6b78:	e59fa47c 	ldr	r10, [pc, #1148]	; 6ffc <__kernel_rem_pio2+0xb94>
    6b7c:	e0897184 	add	r7, r9, r4, lsl #3
    6b80:	e3a05000 	mov	r5, #0
    6b84:	e3a04000 	mov	r4, #0
    6b88:	e3a06000 	mov	r6, #0
    6b8c:	ea000001 	b	6b98 <__kernel_rem_pio2+0x730>
    6b90:	e1560008 	cmp	r6, r8
    6b94:	ca00000c 	bgt	6bcc <__kernel_rem_pio2+0x764>
    6b98:	e8b7000c 	ldm	r7!, {r2, r3}
    6b9c:	e8ba0003 	ldm	r10!, {r0, r1}
    6ba0:	eb0004c5 	bl	7ebc <__aeabi_dmul>
    6ba4:	e1a02000 	mov	r2, r0
    6ba8:	e1a03001 	mov	r3, r1
    6bac:	e1a00004 	mov	r0, r4
    6bb0:	e1a01005 	mov	r1, r5
    6bb4:	eb0003bc 	bl	7aac <__adddf3>
    6bb8:	e2866001 	add	r6, r6, #1
    6bbc:	e15b0006 	cmp	r11, r6
    6bc0:	e1a04000 	mov	r4, r0
    6bc4:	e1a05001 	mov	r5, r1
    6bc8:	aafffff0 	bge	6b90 <__kernel_rem_pio2+0x728>
    6bcc:	e59dc008 	ldr	r12, [sp, #8]
    6bd0:	e28d0e26 	add	r0, sp, #608	; 0x260
    6bd4:	e24cc001 	sub	r12, r12, #1
    6bd8:	e0803188 	add	r3, r0, r8, lsl #3
    6bdc:	e37c0001 	cmn	r12, #1
    6be0:	e58dc008 	str	r12, [sp, #8]
    6be4:	e5034140 	str	r4, [r3, #-320]	; 0xfffffec0
    6be8:	e503513c 	str	r5, [r3, #-316]	; 0xfffffec4
    6bec:	e2888001 	add	r8, r8, #1
    6bf0:	1affffdb 	bne	6b64 <__kernel_rem_pio2+0x6fc>
    6bf4:	e59dc288 	ldr	r12, [sp, #648]	; 0x288
    6bf8:	e35c0003 	cmp	r12, #3
    6bfc:	979ff10c 	ldrls	pc, [pc, r12, lsl #2]
    6c00:	ea000015 	b	6c5c <__kernel_rem_pio2+0x7f4>
    6c04:	00006ee4 	.word	0x00006ee4
    6c08:	00006e00 	.word	0x00006e00
    6c0c:	00006e00 	.word	0x00006e00
    6c10:	00006c70 	.word	0x00006c70
    6c14:	e59d000c 	ldr	r0, [sp, #12]
    6c18:	e3a0c000 	mov	r12, #0
    6c1c:	e3500000 	cmp	r0, #0
    6c20:	e1a0400c 	mov	r4, r12
    6c24:	0a000068 	beq	6dcc <__kernel_rem_pio2+0x964>
    6c28:	e59d2124 	ldr	r2, [sp, #292]	; 0x124
    6c2c:	e59d001c 	ldr	r0, [sp, #28]
    6c30:	e59d1120 	ldr	r1, [sp, #288]	; 0x120
    6c34:	e2822102 	add	r2, r2, #-2147483648	; 0x80000000
    6c38:	e59d312c 	ldr	r3, [sp, #300]	; 0x12c
    6c3c:	e8800006 	stm	r0, {r1, r2}
    6c40:	e59d2128 	ldr	r2, [sp, #296]	; 0x128
    6c44:	e2833102 	add	r3, r3, #-2147483648	; 0x80000000
    6c48:	e2844102 	add	r4, r4, #-2147483648	; 0x80000000
    6c4c:	e5802008 	str	r2, [r0, #8]
    6c50:	e580300c 	str	r3, [r0, #12]
    6c54:	e580c010 	str	r12, [r0, #16]
    6c58:	e5804014 	str	r4, [r0, #20]
    6c5c:	e59d4010 	ldr	r4, [sp, #16]
    6c60:	e2040007 	and	r0, r4, #7
    6c64:	e28ddf99 	add	sp, sp, #612	; 0x264
    6c68:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    6c6c:	e12fff1e 	bx	lr
    6c70:	e59d4004 	ldr	r4, [sp, #4]
    6c74:	e3540000 	cmp	r4, #0
    6c78:	daffffe5 	ble	6c14 <__kernel_rem_pio2+0x7ac>
    6c7c:	e59d4004 	ldr	r4, [sp, #4]
    6c80:	e28dbe12 	add	r11, sp, #288	; 0x120
    6c84:	e08ba184 	add	r10, r11, r4, lsl #3
    6c88:	e58da008 	str	r10, [sp, #8]
    6c8c:	e58da014 	str	r10, [sp, #20]
    6c90:	e93a0300 	ldmdb	r10!, {r8, r9}
    6c94:	e28a7008 	add	r7, r10, #8
    6c98:	e89700c0 	ldm	r7, {r6, r7}
    6c9c:	e1a00008 	mov	r0, r8
    6ca0:	e1a02006 	mov	r2, r6
    6ca4:	e1a03007 	mov	r3, r7
    6ca8:	e1a01009 	mov	r1, r9
    6cac:	eb00037e 	bl	7aac <__adddf3>
    6cb0:	e1a04000 	mov	r4, r0
    6cb4:	e1a05001 	mov	r5, r1
    6cb8:	e1a02004 	mov	r2, r4
    6cbc:	e1a03005 	mov	r3, r5
    6cc0:	e1a00008 	mov	r0, r8
    6cc4:	e1a01009 	mov	r1, r9
    6cc8:	eb000376 	bl	7aa8 <__aeabi_dsub>
    6ccc:	e1a02000 	mov	r2, r0
    6cd0:	e1a03001 	mov	r3, r1
    6cd4:	e1a00006 	mov	r0, r6
    6cd8:	e1a01007 	mov	r1, r7
    6cdc:	eb000372 	bl	7aac <__adddf3>
    6ce0:	e59dc008 	ldr	r12, [sp, #8]
    6ce4:	e58a0008 	str	r0, [r10, #8]
    6ce8:	e58a100c 	str	r1, [r10, #12]
    6cec:	e92c0030 	stmdb	r12!, {r4, r5}
    6cf0:	e15a000b 	cmp	r10, r11
    6cf4:	e58dc008 	str	r12, [sp, #8]
    6cf8:	1affffe4 	bne	6c90 <__kernel_rem_pio2+0x828>
    6cfc:	e59d4004 	ldr	r4, [sp, #4]
    6d00:	e3540001 	cmp	r4, #1
    6d04:	e59da014 	ldr	r10, [sp, #20]
    6d08:	daffffc1 	ble	6c14 <__kernel_rem_pio2+0x7ac>
    6d0c:	e28bc008 	add	r12, r11, #8
    6d10:	e58dc008 	str	r12, [sp, #8]
    6d14:	e1a0c00a 	mov	r12, r10
    6d18:	e93a0300 	ldmdb	r10!, {r8, r9}
    6d1c:	e28a7008 	add	r7, r10, #8
    6d20:	e89700c0 	ldm	r7, {r6, r7}
    6d24:	e1a00008 	mov	r0, r8
    6d28:	e1a02006 	mov	r2, r6
    6d2c:	e1a03007 	mov	r3, r7
    6d30:	e1a01009 	mov	r1, r9
    6d34:	e58dc000 	str	r12, [sp]
    6d38:	eb00035b 	bl	7aac <__adddf3>
    6d3c:	e1a04000 	mov	r4, r0
    6d40:	e1a05001 	mov	r5, r1
    6d44:	e1a02004 	mov	r2, r4
    6d48:	e1a03005 	mov	r3, r5
    6d4c:	e1a00008 	mov	r0, r8
    6d50:	e1a01009 	mov	r1, r9
    6d54:	eb000353 	bl	7aa8 <__aeabi_dsub>
    6d58:	e1a02000 	mov	r2, r0
    6d5c:	e1a03001 	mov	r3, r1
    6d60:	e1a00006 	mov	r0, r6
    6d64:	e1a01007 	mov	r1, r7
    6d68:	eb00034f 	bl	7aac <__adddf3>
    6d6c:	e59de008 	ldr	lr, [sp, #8]
    6d70:	e59dc000 	ldr	r12, [sp]
    6d74:	e15a000e 	cmp	r10, lr
    6d78:	e58a0008 	str	r0, [r10, #8]
    6d7c:	e58a100c 	str	r1, [r10, #12]
    6d80:	e92c0030 	stmdb	r12!, {r4, r5}
    6d84:	1affffe3 	bne	6d18 <__kernel_rem_pio2+0x8b0>
    6d88:	e59d4004 	ldr	r4, [sp, #4]
    6d8c:	e3a0c000 	mov	r12, #0
    6d90:	e2845001 	add	r5, r4, #1
    6d94:	e08b5185 	add	r5, r11, r5, lsl #3
    6d98:	e1a0400c 	mov	r4, r12
    6d9c:	e28bb010 	add	r11, r11, #16
    6da0:	e1a0000c 	mov	r0, r12
    6da4:	e1a01004 	mov	r1, r4
    6da8:	e935000c 	ldmdb	r5!, {r2, r3}
    6dac:	eb00033e 	bl	7aac <__adddf3>
    6db0:	e155000b 	cmp	r5, r11
    6db4:	e1a0c000 	mov	r12, r0
    6db8:	e1a04001 	mov	r4, r1
    6dbc:	1afffff7 	bne	6da0 <__kernel_rem_pio2+0x938>
    6dc0:	e59d000c 	ldr	r0, [sp, #12]
    6dc4:	e3500000 	cmp	r0, #0
    6dc8:	1affff96 	bne	6c28 <__kernel_rem_pio2+0x7c0>
    6dcc:	e1a03004 	mov	r3, r4
    6dd0:	e28d1e12 	add	r1, sp, #288	; 0x120
    6dd4:	e8910003 	ldm	r1, {r0, r1}
    6dd8:	e59d401c 	ldr	r4, [sp, #28]
    6ddc:	e8840003 	stm	r4, {r0, r1}
    6de0:	e28d1f4a 	add	r1, sp, #296	; 0x128
    6de4:	e8910003 	ldm	r1, {r0, r1}
    6de8:	e1a0200c 	mov	r2, r12
    6dec:	e5840008 	str	r0, [r4, #8]
    6df0:	e584100c 	str	r1, [r4, #12]
    6df4:	e5842010 	str	r2, [r4, #16]
    6df8:	e5843014 	str	r3, [r4, #20]
    6dfc:	eaffff96 	b	6c5c <__kernel_rem_pio2+0x7f4>
    6e00:	e59dc004 	ldr	r12, [sp, #4]
    6e04:	e35c0000 	cmp	r12, #0
    6e08:	b3a0e000 	movlt	lr, #0
    6e0c:	b1a0c00e 	movlt	r12, lr
    6e10:	ba00000d 	blt	6e4c <__kernel_rem_pio2+0x9e4>
    6e14:	e59dc004 	ldr	r12, [sp, #4]
    6e18:	e28d5e12 	add	r5, sp, #288	; 0x120
    6e1c:	e28c4001 	add	r4, r12, #1
    6e20:	e3a0e000 	mov	lr, #0
    6e24:	e0854184 	add	r4, r5, r4, lsl #3
    6e28:	e1a0c00e 	mov	r12, lr
    6e2c:	e1a0000e 	mov	r0, lr
    6e30:	e1a0100c 	mov	r1, r12
    6e34:	e934000c 	ldmdb	r4!, {r2, r3}
    6e38:	eb00031b 	bl	7aac <__adddf3>
    6e3c:	e1540005 	cmp	r4, r5
    6e40:	e1a0e000 	mov	lr, r0
    6e44:	e1a0c001 	mov	r12, r1
    6e48:	1afffff7 	bne	6e2c <__kernel_rem_pio2+0x9c4>
    6e4c:	e59d400c 	ldr	r4, [sp, #12]
    6e50:	e3540000 	cmp	r4, #0
    6e54:	128c3102 	addne	r3, r12, #-2147483648	; 0x80000000
    6e58:	01a0300c 	moveq	r3, r12
    6e5c:	e1a01003 	mov	r1, r3
    6e60:	e1a0300c 	mov	r3, r12
    6e64:	e59dc01c 	ldr	r12, [sp, #28]
    6e68:	e1a0000e 	mov	r0, lr
    6e6c:	e88c0003 	stm	r12, {r0, r1}
    6e70:	e1a0200e 	mov	r2, lr
    6e74:	e28d1e12 	add	r1, sp, #288	; 0x120
    6e78:	e8910003 	ldm	r1, {r0, r1}
    6e7c:	eb000309 	bl	7aa8 <__aeabi_dsub>
    6e80:	e59d4004 	ldr	r4, [sp, #4]
    6e84:	e3540000 	cmp	r4, #0
    6e88:	e1a05000 	mov	r5, r0
    6e8c:	e1a0c001 	mov	r12, r1
    6e90:	da00000a 	ble	6ec0 <__kernel_rem_pio2+0xa58>
    6e94:	e59de004 	ldr	lr, [sp, #4]
    6e98:	e28d4f4a 	add	r4, sp, #296	; 0x128
    6e9c:	e084618e 	add	r6, r4, lr, lsl #3
    6ea0:	e1a00005 	mov	r0, r5
    6ea4:	e1a0100c 	mov	r1, r12
    6ea8:	e8b4000c 	ldm	r4!, {r2, r3}
    6eac:	eb0002fe 	bl	7aac <__adddf3>
    6eb0:	e1540006 	cmp	r4, r6
    6eb4:	e1a05000 	mov	r5, r0
    6eb8:	e1a0c001 	mov	r12, r1
    6ebc:	1afffff7 	bne	6ea0 <__kernel_rem_pio2+0xa38>
    6ec0:	e59d400c 	ldr	r4, [sp, #12]
    6ec4:	e3540000 	cmp	r4, #0
    6ec8:	128cc102 	addne	r12, r12, #-2147483648	; 0x80000000
    6ecc:	e1a0300c 	mov	r3, r12
    6ed0:	e59dc01c 	ldr	r12, [sp, #28]
    6ed4:	e1a02005 	mov	r2, r5
    6ed8:	e58c2008 	str	r2, [r12, #8]
    6edc:	e58c300c 	str	r3, [r12, #12]
    6ee0:	eaffff5d 	b	6c5c <__kernel_rem_pio2+0x7f4>
    6ee4:	e59d4004 	ldr	r4, [sp, #4]
    6ee8:	e3540000 	cmp	r4, #0
    6eec:	ba000038 	blt	6fd4 <__kernel_rem_pio2+0xb6c>
    6ef0:	e2846001 	add	r6, r4, #1
    6ef4:	e28d5e12 	add	r5, sp, #288	; 0x120
    6ef8:	e3a04000 	mov	r4, #0
    6efc:	e0856186 	add	r6, r5, r6, lsl #3
    6f00:	e1a0c004 	mov	r12, r4
    6f04:	e1a00004 	mov	r0, r4
    6f08:	e1a0100c 	mov	r1, r12
    6f0c:	e936000c 	ldmdb	r6!, {r2, r3}
    6f10:	eb0002e5 	bl	7aac <__adddf3>
    6f14:	e1560005 	cmp	r6, r5
    6f18:	e1a04000 	mov	r4, r0
    6f1c:	e1a0c001 	mov	r12, r1
    6f20:	1afffff7 	bne	6f04 <__kernel_rem_pio2+0xa9c>
    6f24:	e59d000c 	ldr	r0, [sp, #12]
    6f28:	e3500000 	cmp	r0, #0
    6f2c:	e1a02004 	mov	r2, r4
    6f30:	128cc102 	addne	r12, r12, #-2147483648	; 0x80000000
    6f34:	e59d401c 	ldr	r4, [sp, #28]
    6f38:	e1a0300c 	mov	r3, r12
    6f3c:	e884000c 	stm	r4, {r2, r3}
    6f40:	eaffff45 	b	6c5c <__kernel_rem_pio2+0x7f4>
    6f44:	e1a03100 	lsl	r3, r0, #2
    6f48:	e28dce26 	add	r12, sp, #608	; 0x260
    6f4c:	e08c2003 	add	r2, r12, r3
    6f50:	e59d4018 	ldr	r4, [sp, #24]
    6f54:	e5122230 	ldr	r2, [r2, #-560]	; 0xfffffdd0
    6f58:	e2444018 	sub	r4, r4, #24
    6f5c:	e3520000 	cmp	r2, #0
    6f60:	e58d8010 	str	r8, [sp, #16]
    6f64:	e58d500c 	str	r5, [sp, #12]
    6f68:	e58d4018 	str	r4, [sp, #24]
    6f6c:	1a000016 	bne	6fcc <__kernel_rem_pio2+0xb64>
    6f70:	e28dc030 	add	r12, sp, #48	; 0x30
    6f74:	e58d0004 	str	r0, [sp, #4]
    6f78:	e08c3003 	add	r3, r12, r3
    6f7c:	e1a02000 	mov	r2, r0
    6f80:	e1a01004 	mov	r1, r4
    6f84:	e5330004 	ldr	r0, [r3, #-4]!
    6f88:	e3500000 	cmp	r0, #0
    6f8c:	e2422001 	sub	r2, r2, #1
    6f90:	e2411018 	sub	r1, r1, #24
    6f94:	0afffffa 	beq	6f84 <__kernel_rem_pio2+0xb1c>
    6f98:	e58d2004 	str	r2, [sp, #4]
    6f9c:	e58d1018 	str	r1, [sp, #24]
    6fa0:	eafffece 	b	6ae0 <__kernel_rem_pio2+0x678>
    6fa4:	e3a03001 	mov	r3, #1
    6fa8:	eafffe2a 	b	6858 <__kernel_rem_pio2+0x3f0>
    6fac:	e1a00004 	mov	r0, r4
    6fb0:	e1a01005 	mov	r1, r5
    6fb4:	eb000538 	bl	849c <__aeabi_d2iz>
    6fb8:	e59dc004 	ldr	r12, [sp, #4]
    6fbc:	e28dee26 	add	lr, sp, #608	; 0x260
    6fc0:	e08e310c 	add	r3, lr, r12, lsl #2
    6fc4:	e5030230 	str	r0, [r3, #-560]	; 0xfffffdd0
    6fc8:	eafffec4 	b	6ae0 <__kernel_rem_pio2+0x678>
    6fcc:	e58d0004 	str	r0, [sp, #4]
    6fd0:	eafffec2 	b	6ae0 <__kernel_rem_pio2+0x678>
    6fd4:	e3a04000 	mov	r4, #0
    6fd8:	e1a0c004 	mov	r12, r4
    6fdc:	eaffffd0 	b	6f24 <__kernel_rem_pio2+0xabc>
    6fe0:	2aaaaaab 	.word	0x2aaaaaab
    6fe4:	00009320 	.word	0x00009320
    6fe8:	3e700000 	.word	0x3e700000
    6fec:	41700000 	.word	0x41700000
    6ff0:	40200000 	.word	0x40200000
    6ff4:	3ff00000 	.word	0x3ff00000
    6ff8:	3fe00000 	.word	0x3fe00000
    6ffc:	00009330 	.word	0x00009330

00007000 <__kernel_sin>:
    7000:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    7004:	e3c1c102 	bic	r12, r1, #-2147483648	; 0x80000000
    7008:	e35c05f9 	cmp	r12, #1044381696	; 0x3e400000
    700c:	e24dd014 	sub	sp, sp, #20
    7010:	e1a04000 	mov	r4, r0
    7014:	e1a05001 	mov	r5, r1
    7018:	e1a06000 	mov	r6, r0
    701c:	e1a07001 	mov	r7, r1
    7020:	e1a08002 	mov	r8, r2
    7024:	e1a09003 	mov	r9, r3
    7028:	aa000002 	bge	7038 <__kernel_sin+0x38>
    702c:	eb00051a 	bl	849c <__aeabi_d2iz>
    7030:	e3500000 	cmp	r0, #0
    7034:	0a000052 	beq	7184 <__kernel_sin+0x184>
    7038:	e1a02004 	mov	r2, r4
    703c:	e1a03005 	mov	r3, r5
    7040:	e1a00004 	mov	r0, r4
    7044:	e1a01005 	mov	r1, r5
    7048:	eb00039b 	bl	7ebc <__aeabi_dmul>
    704c:	e1a02004 	mov	r2, r4
    7050:	e1a03005 	mov	r3, r5
    7054:	e1a06000 	mov	r6, r0
    7058:	e1a07001 	mov	r7, r1
    705c:	eb000396 	bl	7ebc <__aeabi_dmul>
    7060:	e28f3d06 	add	r3, pc, #384	; 0x180
    7064:	e893000c 	ldm	r3, {r2, r3}
    7068:	e1a0a000 	mov	r10, r0
    706c:	e1a0b001 	mov	r11, r1
    7070:	e1a00006 	mov	r0, r6
    7074:	e1a01007 	mov	r1, r7
    7078:	eb00038f 	bl	7ebc <__aeabi_dmul>
    707c:	e28f3f5b 	add	r3, pc, #364	; 0x16c
    7080:	e893000c 	ldm	r3, {r2, r3}
    7084:	eb000287 	bl	7aa8 <__aeabi_dsub>
    7088:	e1a02006 	mov	r2, r6
    708c:	e1a03007 	mov	r3, r7
    7090:	eb000389 	bl	7ebc <__aeabi_dmul>
    7094:	e28f3f57 	add	r3, pc, #348	; 0x15c
    7098:	e893000c 	ldm	r3, {r2, r3}
    709c:	eb000282 	bl	7aac <__adddf3>
    70a0:	e1a02006 	mov	r2, r6
    70a4:	e1a03007 	mov	r3, r7
    70a8:	eb000383 	bl	7ebc <__aeabi_dmul>
    70ac:	e28f3f53 	add	r3, pc, #332	; 0x14c
    70b0:	e893000c 	ldm	r3, {r2, r3}
    70b4:	eb00027b 	bl	7aa8 <__aeabi_dsub>
    70b8:	e1a02006 	mov	r2, r6
    70bc:	e1a03007 	mov	r3, r7
    70c0:	eb00037d 	bl	7ebc <__aeabi_dmul>
    70c4:	e28f3f4f 	add	r3, pc, #316	; 0x13c
    70c8:	e893000c 	ldm	r3, {r2, r3}
    70cc:	eb000276 	bl	7aac <__adddf3>
    70d0:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
    70d4:	e3530000 	cmp	r3, #0
    70d8:	e88d0003 	stm	sp, {r0, r1}
    70dc:	0a00002d 	beq	7198 <__kernel_sin+0x198>
    70e0:	e3a02000 	mov	r2, #0
    70e4:	e59f312c 	ldr	r3, [pc, #300]	; 7218 <__kernel_sin+0x218>
    70e8:	e1a00008 	mov	r0, r8
    70ec:	e1a01009 	mov	r1, r9
    70f0:	eb000371 	bl	7ebc <__aeabi_dmul>
    70f4:	e89d000c 	ldm	sp, {r2, r3}
    70f8:	e58d0008 	str	r0, [sp, #8]
    70fc:	e58d100c 	str	r1, [sp, #12]
    7100:	e1a0000a 	mov	r0, r10
    7104:	e1a0100b 	mov	r1, r11
    7108:	eb00036b 	bl	7ebc <__aeabi_dmul>
    710c:	e1a02000 	mov	r2, r0
    7110:	e1a03001 	mov	r3, r1
    7114:	e28d1008 	add	r1, sp, #8
    7118:	e8910003 	ldm	r1, {r0, r1}
    711c:	eb000261 	bl	7aa8 <__aeabi_dsub>
    7120:	e1a02006 	mov	r2, r6
    7124:	e1a03007 	mov	r3, r7
    7128:	eb000363 	bl	7ebc <__aeabi_dmul>
    712c:	e1a02008 	mov	r2, r8
    7130:	e1a03009 	mov	r3, r9
    7134:	eb00025b 	bl	7aa8 <__aeabi_dsub>
    7138:	e28f30d0 	add	r3, pc, #208	; 0xd0
    713c:	e893000c 	ldm	r3, {r2, r3}
    7140:	e1a06000 	mov	r6, r0
    7144:	e1a07001 	mov	r7, r1
    7148:	e1a0000a 	mov	r0, r10
    714c:	e1a0100b 	mov	r1, r11
    7150:	eb000359 	bl	7ebc <__aeabi_dmul>
    7154:	e1a02000 	mov	r2, r0
    7158:	e1a03001 	mov	r3, r1
    715c:	e1a00006 	mov	r0, r6
    7160:	e1a01007 	mov	r1, r7
    7164:	eb000250 	bl	7aac <__adddf3>
    7168:	e1a02000 	mov	r2, r0
    716c:	e1a03001 	mov	r3, r1
    7170:	e1a00004 	mov	r0, r4
    7174:	e1a01005 	mov	r1, r5
    7178:	eb00024a 	bl	7aa8 <__aeabi_dsub>
    717c:	e1a04000 	mov	r4, r0
    7180:	e1a05001 	mov	r5, r1
    7184:	e1a00004 	mov	r0, r4
    7188:	e1a01005 	mov	r1, r5
    718c:	e28dd014 	add	sp, sp, #20
    7190:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    7194:	e12fff1e 	bx	lr
    7198:	e1a02000 	mov	r2, r0
    719c:	e1a03001 	mov	r3, r1
    71a0:	e1a00006 	mov	r0, r6
    71a4:	e1a01007 	mov	r1, r7
    71a8:	eb000343 	bl	7ebc <__aeabi_dmul>
    71ac:	e28f305c 	add	r3, pc, #92	; 0x5c
    71b0:	e893000c 	ldm	r3, {r2, r3}
    71b4:	eb00023b 	bl	7aa8 <__aeabi_dsub>
    71b8:	e1a0200a 	mov	r2, r10
    71bc:	e1a0300b 	mov	r3, r11
    71c0:	eb00033d 	bl	7ebc <__aeabi_dmul>
    71c4:	e1a02000 	mov	r2, r0
    71c8:	e1a03001 	mov	r3, r1
    71cc:	e1a00004 	mov	r0, r4
    71d0:	e1a01005 	mov	r1, r5
    71d4:	eb000234 	bl	7aac <__adddf3>
    71d8:	e1a04000 	mov	r4, r0
    71dc:	e1a05001 	mov	r5, r1
    71e0:	eaffffe7 	b	7184 <__kernel_sin+0x184>
    71e4:	e1a00000 	nop			; (mov r0, r0)
    71e8:	5acfd57c 	.word	0x5acfd57c
    71ec:	3de5d93a 	.word	0x3de5d93a
    71f0:	8a2b9ceb 	.word	0x8a2b9ceb
    71f4:	3e5ae5e6 	.word	0x3e5ae5e6
    71f8:	57b1fe7d 	.word	0x57b1fe7d
    71fc:	3ec71de3 	.word	0x3ec71de3
    7200:	19c161d5 	.word	0x19c161d5
    7204:	3f2a01a0 	.word	0x3f2a01a0
    7208:	1110f8a6 	.word	0x1110f8a6
    720c:	3f811111 	.word	0x3f811111
    7210:	55555549 	.word	0x55555549
    7214:	3fc55555 	.word	0x3fc55555
    7218:	3fe00000 	.word	0x3fe00000
    721c:	e1a00000 	nop			; (mov r0, r0)

00007220 <atan>:
    7220:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
    7224:	e1a02001 	mov	r2, r1
    7228:	e1a0a001 	mov	r10, r1
    722c:	e3c16102 	bic	r6, r1, #-2147483648	; 0x80000000
    7230:	e59f1440 	ldr	r1, [pc, #1088]	; 7678 <atan+0x458>
    7234:	e1560001 	cmp	r6, r1
    7238:	e1a08000 	mov	r8, r0
    723c:	e1a0900a 	mov	r9, r10
    7240:	da00000f 	ble	7284 <atan+0x64>
    7244:	e59f1430 	ldr	r1, [pc, #1072]	; 767c <atan+0x45c>
    7248:	e1560001 	cmp	r6, r1
    724c:	ca00007a 	bgt	743c <atan+0x21c>
    7250:	13a01000 	movne	r1, #0
    7254:	03a01001 	moveq	r1, #1
    7258:	e3500000 	cmp	r0, #0
    725c:	03a03000 	moveq	r3, #0
    7260:	12013001 	andne	r3, r1, #1
    7264:	e3530000 	cmp	r3, #0
    7268:	1a000073 	bne	743c <atan+0x21c>
    726c:	e59f340c 	ldr	r3, [pc, #1036]	; 7680 <atan+0x460>
    7270:	e3520000 	cmp	r2, #0
    7274:	e59fa408 	ldr	r10, [pc, #1032]	; 7684 <atan+0x464>
    7278:	e59f8408 	ldr	r8, [pc, #1032]	; 7688 <atan+0x468>
    727c:	c1a0a003 	movgt	r10, r3
    7280:	ea000074 	b	7458 <atan+0x238>
    7284:	e59f3400 	ldr	r3, [pc, #1024]	; 768c <atan+0x46c>
    7288:	e1560003 	cmp	r6, r3
    728c:	ca00007f 	bgt	7490 <atan+0x270>
    7290:	e243376f 	sub	r3, r3, #29097984	; 0x1bc0000
    7294:	e1560003 	cmp	r6, r3
    7298:	da000072 	ble	7468 <atan+0x248>
    729c:	e3e0b000 	mvn	r11, #0
    72a0:	e1a02008 	mov	r2, r8
    72a4:	e1a0300a 	mov	r3, r10
    72a8:	e1a00008 	mov	r0, r8
    72ac:	e1a0100a 	mov	r1, r10
    72b0:	eb000301 	bl	7ebc <__aeabi_dmul>
    72b4:	e1a02000 	mov	r2, r0
    72b8:	e1a03001 	mov	r3, r1
    72bc:	e1a06000 	mov	r6, r0
    72c0:	e1a07001 	mov	r7, r1
    72c4:	eb0002fc 	bl	7ebc <__aeabi_dmul>
    72c8:	e28f3fd2 	add	r3, pc, #840	; 0x348
    72cc:	e893000c 	ldm	r3, {r2, r3}
    72d0:	e1a04000 	mov	r4, r0
    72d4:	e1a05001 	mov	r5, r1
    72d8:	eb0002f7 	bl	7ebc <__aeabi_dmul>
    72dc:	e28f3fcf 	add	r3, pc, #828	; 0x33c
    72e0:	e893000c 	ldm	r3, {r2, r3}
    72e4:	eb0001f0 	bl	7aac <__adddf3>
    72e8:	e1a02004 	mov	r2, r4
    72ec:	e1a03005 	mov	r3, r5
    72f0:	eb0002f1 	bl	7ebc <__aeabi_dmul>
    72f4:	e28f3fcb 	add	r3, pc, #812	; 0x32c
    72f8:	e893000c 	ldm	r3, {r2, r3}
    72fc:	eb0001ea 	bl	7aac <__adddf3>
    7300:	e1a02004 	mov	r2, r4
    7304:	e1a03005 	mov	r3, r5
    7308:	eb0002eb 	bl	7ebc <__aeabi_dmul>
    730c:	e28f3fc7 	add	r3, pc, #796	; 0x31c
    7310:	e893000c 	ldm	r3, {r2, r3}
    7314:	eb0001e4 	bl	7aac <__adddf3>
    7318:	e1a02004 	mov	r2, r4
    731c:	e1a03005 	mov	r3, r5
    7320:	eb0002e5 	bl	7ebc <__aeabi_dmul>
    7324:	e28f3fc3 	add	r3, pc, #780	; 0x30c
    7328:	e893000c 	ldm	r3, {r2, r3}
    732c:	eb0001de 	bl	7aac <__adddf3>
    7330:	e1a02004 	mov	r2, r4
    7334:	e1a03005 	mov	r3, r5
    7338:	eb0002df 	bl	7ebc <__aeabi_dmul>
    733c:	e28f3fbf 	add	r3, pc, #764	; 0x2fc
    7340:	e893000c 	ldm	r3, {r2, r3}
    7344:	eb0001d8 	bl	7aac <__adddf3>
    7348:	e1a02006 	mov	r2, r6
    734c:	e1a03007 	mov	r3, r7
    7350:	eb0002d9 	bl	7ebc <__aeabi_dmul>
    7354:	e28f3fbb 	add	r3, pc, #748	; 0x2ec
    7358:	e893000c 	ldm	r3, {r2, r3}
    735c:	e1a06000 	mov	r6, r0
    7360:	e1a07001 	mov	r7, r1
    7364:	e1a00004 	mov	r0, r4
    7368:	e1a01005 	mov	r1, r5
    736c:	eb0002d2 	bl	7ebc <__aeabi_dmul>
    7370:	e28f3fb6 	add	r3, pc, #728	; 0x2d8
    7374:	e893000c 	ldm	r3, {r2, r3}
    7378:	eb0001ca 	bl	7aa8 <__aeabi_dsub>
    737c:	e1a02004 	mov	r2, r4
    7380:	e1a03005 	mov	r3, r5
    7384:	eb0002cc 	bl	7ebc <__aeabi_dmul>
    7388:	e28f3fb2 	add	r3, pc, #712	; 0x2c8
    738c:	e893000c 	ldm	r3, {r2, r3}
    7390:	eb0001c4 	bl	7aa8 <__aeabi_dsub>
    7394:	e1a02004 	mov	r2, r4
    7398:	e1a03005 	mov	r3, r5
    739c:	eb0002c6 	bl	7ebc <__aeabi_dmul>
    73a0:	e28f3fae 	add	r3, pc, #696	; 0x2b8
    73a4:	e893000c 	ldm	r3, {r2, r3}
    73a8:	eb0001be 	bl	7aa8 <__aeabi_dsub>
    73ac:	e1a02004 	mov	r2, r4
    73b0:	e1a03005 	mov	r3, r5
    73b4:	eb0002c0 	bl	7ebc <__aeabi_dmul>
    73b8:	e28f3faa 	add	r3, pc, #680	; 0x2a8
    73bc:	e893000c 	ldm	r3, {r2, r3}
    73c0:	eb0001b8 	bl	7aa8 <__aeabi_dsub>
    73c4:	e1a02004 	mov	r2, r4
    73c8:	e1a03005 	mov	r3, r5
    73cc:	eb0002ba 	bl	7ebc <__aeabi_dmul>
    73d0:	e37b0001 	cmn	r11, #1
    73d4:	e1a02000 	mov	r2, r0
    73d8:	e1a03001 	mov	r3, r1
    73dc:	e1a00006 	mov	r0, r6
    73e0:	e1a01007 	mov	r1, r7
    73e4:	0a000049 	beq	7510 <atan+0x2f0>
    73e8:	e59fc2a0 	ldr	r12, [pc, #672]	; 7690 <atan+0x470>
    73ec:	e08cb18b 	add	r11, r12, r11, lsl #3
    73f0:	eb0001ad 	bl	7aac <__adddf3>
    73f4:	e1a0300a 	mov	r3, r10
    73f8:	e1a02008 	mov	r2, r8
    73fc:	eb0002ae 	bl	7ebc <__aeabi_dmul>
    7400:	e28b3020 	add	r3, r11, #32
    7404:	e893000c 	ldm	r3, {r2, r3}
    7408:	eb0001a6 	bl	7aa8 <__aeabi_dsub>
    740c:	e1a0300a 	mov	r3, r10
    7410:	e1a02008 	mov	r2, r8
    7414:	eb0001a3 	bl	7aa8 <__aeabi_dsub>
    7418:	e1a02000 	mov	r2, r0
    741c:	e1a03001 	mov	r3, r1
    7420:	e89b0003 	ldm	r11, {r0, r1}
    7424:	eb00019f 	bl	7aa8 <__aeabi_dsub>
    7428:	e3590000 	cmp	r9, #0
    742c:	e1a08000 	mov	r8, r0
    7430:	b281a102 	addlt	r10, r1, #-2147483648	; 0x80000000
    7434:	a1a0a001 	movge	r10, r1
    7438:	ea000006 	b	7458 <atan+0x238>
    743c:	e1a00008 	mov	r0, r8
    7440:	e1a02008 	mov	r2, r8
    7444:	e1a0100a 	mov	r1, r10
    7448:	e1a0300a 	mov	r3, r10
    744c:	eb000196 	bl	7aac <__adddf3>
    7450:	e1a08000 	mov	r8, r0
    7454:	e1a0a001 	mov	r10, r1
    7458:	e1a00008 	mov	r0, r8
    745c:	e1a0100a 	mov	r1, r10
    7460:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
    7464:	e12fff1e 	bx	lr
    7468:	e28f3c02 	add	r3, pc, #512	; 0x200
    746c:	e893000c 	ldm	r3, {r2, r3}
    7470:	e1a0100a 	mov	r1, r10
    7474:	eb00018c 	bl	7aac <__adddf3>
    7478:	e3a02000 	mov	r2, #0
    747c:	e59f3210 	ldr	r3, [pc, #528]	; 7694 <atan+0x474>
    7480:	eb0003ff 	bl	8484 <__aeabi_dcmpgt>
    7484:	e3500000 	cmp	r0, #0
    7488:	1afffff2 	bne	7458 <atan+0x238>
    748c:	eaffff82 	b	729c <atan+0x7c>
    7490:	e1a0100a 	mov	r1, r10
    7494:	eb000083 	bl	76a8 <fabs>
    7498:	e59f31f8 	ldr	r3, [pc, #504]	; 7698 <atan+0x478>
    749c:	e1560003 	cmp	r6, r3
    74a0:	e1a04000 	mov	r4, r0
    74a4:	e1a05001 	mov	r5, r1
    74a8:	ca000024 	bgt	7540 <atan+0x320>
    74ac:	e243380d 	sub	r3, r3, #851968	; 0xd0000
    74b0:	e1560003 	cmp	r6, r3
    74b4:	ca000043 	bgt	75c8 <atan+0x3a8>
    74b8:	e1a02000 	mov	r2, r0
    74bc:	e1a03001 	mov	r3, r1
    74c0:	eb000179 	bl	7aac <__adddf3>
    74c4:	e3a02000 	mov	r2, #0
    74c8:	e59f31c4 	ldr	r3, [pc, #452]	; 7694 <atan+0x474>
    74cc:	eb000175 	bl	7aa8 <__aeabi_dsub>
    74d0:	e3a02000 	mov	r2, #0
    74d4:	e1a06000 	mov	r6, r0
    74d8:	e1a07001 	mov	r7, r1
    74dc:	e3a03101 	mov	r3, #1073741824	; 0x40000000
    74e0:	e1a00004 	mov	r0, r4
    74e4:	e1a01005 	mov	r1, r5
    74e8:	eb00016f 	bl	7aac <__adddf3>
    74ec:	e1a02000 	mov	r2, r0
    74f0:	e1a03001 	mov	r3, r1
    74f4:	e1a00006 	mov	r0, r6
    74f8:	e1a01007 	mov	r1, r7
    74fc:	eb000312 	bl	814c <__aeabi_ddiv>
    7500:	e3a0b000 	mov	r11, #0
    7504:	e1a08000 	mov	r8, r0
    7508:	e1a0a001 	mov	r10, r1
    750c:	eaffff63 	b	72a0 <atan+0x80>
    7510:	eb000165 	bl	7aac <__adddf3>
    7514:	e1a02008 	mov	r2, r8
    7518:	e1a0300a 	mov	r3, r10
    751c:	eb000266 	bl	7ebc <__aeabi_dmul>
    7520:	e1a02000 	mov	r2, r0
    7524:	e1a03001 	mov	r3, r1
    7528:	e1a00008 	mov	r0, r8
    752c:	e1a0100a 	mov	r1, r10
    7530:	eb00015c 	bl	7aa8 <__aeabi_dsub>
    7534:	e1a08000 	mov	r8, r0
    7538:	e1a0a001 	mov	r10, r1
    753c:	eaffffc5 	b	7458 <atan+0x238>
    7540:	e59f3154 	ldr	r3, [pc, #340]	; 769c <atan+0x47c>
    7544:	e1560003 	cmp	r6, r3
    7548:	ca000015 	bgt	75a4 <atan+0x384>
    754c:	e3a02000 	mov	r2, #0
    7550:	e59f3148 	ldr	r3, [pc, #328]	; 76a0 <atan+0x480>
    7554:	eb000153 	bl	7aa8 <__aeabi_dsub>
    7558:	e3a02000 	mov	r2, #0
    755c:	e1a06000 	mov	r6, r0
    7560:	e1a07001 	mov	r7, r1
    7564:	e59f3134 	ldr	r3, [pc, #308]	; 76a0 <atan+0x480>
    7568:	e1a00004 	mov	r0, r4
    756c:	e1a01005 	mov	r1, r5
    7570:	eb000251 	bl	7ebc <__aeabi_dmul>
    7574:	e3a02000 	mov	r2, #0
    7578:	e59f3114 	ldr	r3, [pc, #276]	; 7694 <atan+0x474>
    757c:	eb00014a 	bl	7aac <__adddf3>
    7580:	e1a02000 	mov	r2, r0
    7584:	e1a03001 	mov	r3, r1
    7588:	e1a00006 	mov	r0, r6
    758c:	e1a01007 	mov	r1, r7
    7590:	eb0002ed 	bl	814c <__aeabi_ddiv>
    7594:	e3a0b002 	mov	r11, #2
    7598:	e1a08000 	mov	r8, r0
    759c:	e1a0a001 	mov	r10, r1
    75a0:	eaffff3e 	b	72a0 <atan+0x80>
    75a4:	e3a00000 	mov	r0, #0
    75a8:	e59f10f4 	ldr	r1, [pc, #244]	; 76a4 <atan+0x484>
    75ac:	e1a02004 	mov	r2, r4
    75b0:	e1a03005 	mov	r3, r5
    75b4:	eb0002e4 	bl	814c <__aeabi_ddiv>
    75b8:	e3a0b003 	mov	r11, #3
    75bc:	e1a08000 	mov	r8, r0
    75c0:	e1a0a001 	mov	r10, r1
    75c4:	eaffff35 	b	72a0 <atan+0x80>
    75c8:	e3a02000 	mov	r2, #0
    75cc:	e59f30c0 	ldr	r3, [pc, #192]	; 7694 <atan+0x474>
    75d0:	eb000134 	bl	7aa8 <__aeabi_dsub>
    75d4:	e3a02000 	mov	r2, #0
    75d8:	e1a06000 	mov	r6, r0
    75dc:	e1a07001 	mov	r7, r1
    75e0:	e59f30ac 	ldr	r3, [pc, #172]	; 7694 <atan+0x474>
    75e4:	e1a00004 	mov	r0, r4
    75e8:	e1a01005 	mov	r1, r5
    75ec:	eb00012e 	bl	7aac <__adddf3>
    75f0:	e1a02000 	mov	r2, r0
    75f4:	e1a03001 	mov	r3, r1
    75f8:	e1a00006 	mov	r0, r6
    75fc:	e1a01007 	mov	r1, r7
    7600:	eb0002d1 	bl	814c <__aeabi_ddiv>
    7604:	e3a0b001 	mov	r11, #1
    7608:	e1a08000 	mov	r8, r0
    760c:	e1a0a001 	mov	r10, r1
    7610:	eaffff22 	b	72a0 <atan+0x80>
    7614:	e1a00000 	nop			; (mov r0, r0)
    7618:	e322da11 	.word	0xe322da11
    761c:	3f90ad3a 	.word	0x3f90ad3a
    7620:	24760deb 	.word	0x24760deb
    7624:	3fa97b4b 	.word	0x3fa97b4b
    7628:	a0d03d51 	.word	0xa0d03d51
    762c:	3fb10d66 	.word	0x3fb10d66
    7630:	c54c206e 	.word	0xc54c206e
    7634:	3fb745cd 	.word	0x3fb745cd
    7638:	920083ff 	.word	0x920083ff
    763c:	3fc24924 	.word	0x3fc24924
    7640:	5555550d 	.word	0x5555550d
    7644:	3fd55555 	.word	0x3fd55555
    7648:	2c6a6c2f 	.word	0x2c6a6c2f
    764c:	bfa2b444 	.word	0xbfa2b444
    7650:	52defd9a 	.word	0x52defd9a
    7654:	3fadde2d 	.word	0x3fadde2d
    7658:	af749a6d 	.word	0xaf749a6d
    765c:	3fb3b0f2 	.word	0x3fb3b0f2
    7660:	fe231671 	.word	0xfe231671
    7664:	3fbc71c6 	.word	0x3fbc71c6
    7668:	9998ebc4 	.word	0x9998ebc4
    766c:	3fc99999 	.word	0x3fc99999
    7670:	8800759c 	.word	0x8800759c
    7674:	7e37e43c 	.word	0x7e37e43c
    7678:	440fffff 	.word	0x440fffff
    767c:	7ff00000 	.word	0x7ff00000
    7680:	3ff921fb 	.word	0x3ff921fb
    7684:	bff921fb 	.word	0xbff921fb
    7688:	54442d18 	.word	0x54442d18
    768c:	3fdbffff 	.word	0x3fdbffff
    7690:	00009370 	.word	0x00009370
    7694:	3ff00000 	.word	0x3ff00000
    7698:	3ff2ffff 	.word	0x3ff2ffff
    769c:	40037fff 	.word	0x40037fff
    76a0:	3ff80000 	.word	0x3ff80000
    76a4:	bff00000 	.word	0xbff00000

000076a8 <fabs>:
    76a8:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    76ac:	e12fff1e 	bx	lr

000076b0 <finite>:
    76b0:	e3811102 	orr	r1, r1, #-2147483648	; 0x80000000
    76b4:	e2810601 	add	r0, r1, #1048576	; 0x100000
    76b8:	e1a00fa0 	lsr	r0, r0, #31
    76bc:	e12fff1e 	bx	lr

000076c0 <__fpclassifyd>:
    76c0:	e1902001 	orrs	r2, r0, r1
    76c4:	1a000001 	bne	76d0 <__fpclassifyd+0x10>
    76c8:	e3a00002 	mov	r0, #2
    76cc:	e12fff1e 	bx	lr
    76d0:	e2702001 	rsbs	r2, r0, #1
    76d4:	33a02000 	movcc	r2, #0
    76d8:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    76dc:	03500000 	cmpeq	r0, #0
    76e0:	0afffff8 	beq	76c8 <__fpclassifyd+0x8>
    76e4:	e3c13102 	bic	r3, r1, #-2147483648	; 0x80000000
    76e8:	e59f1034 	ldr	r1, [pc, #52]	; 7724 <__fpclassifyd+0x64>
    76ec:	e2430601 	sub	r0, r3, #1048576	; 0x100000
    76f0:	e1500001 	cmp	r0, r1
    76f4:	8a000001 	bhi	7700 <__fpclassifyd+0x40>
    76f8:	e3a00004 	mov	r0, #4
    76fc:	e12fff1e 	bx	lr
    7700:	e3530601 	cmp	r3, #1048576	; 0x100000
    7704:	2a000001 	bcs	7710 <__fpclassifyd+0x50>
    7708:	e3a00003 	mov	r0, #3
    770c:	e12fff1e 	bx	lr
    7710:	e59f0010 	ldr	r0, [pc, #16]	; 7728 <__fpclassifyd+0x68>
    7714:	e1530000 	cmp	r3, r0
    7718:	13a00000 	movne	r0, #0
    771c:	02020001 	andeq	r0, r2, #1
    7720:	e12fff1e 	bx	lr
    7724:	7fdfffff 	.word	0x7fdfffff
    7728:	7ff00000 	.word	0x7ff00000

0000772c <matherr>:
    772c:	e3a00000 	mov	r0, #0
    7730:	e12fff1e 	bx	lr

00007734 <nan>:
    7734:	e3a00000 	mov	r0, #0
    7738:	e59f1000 	ldr	r1, [pc]	; 7740 <nan+0xc>
    773c:	e12fff1e 	bx	lr
    7740:	7ff80000 	.word	0x7ff80000

00007744 <rint>:
    7744:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    7748:	e1a07081 	lsl	r7, r1, #1
    774c:	e1a07aa7 	lsr	r7, r7, #21
    7750:	e247cfff 	sub	r12, r7, #1020	; 0x3fc
    7754:	e24cc003 	sub	r12, r12, #3
    7758:	e35c0013 	cmp	r12, #19
    775c:	e24dd00c 	sub	sp, sp, #12
    7760:	e1a02000 	mov	r2, r0
    7764:	e1a03001 	mov	r3, r1
    7768:	e1a04000 	mov	r4, r0
    776c:	e1a05001 	mov	r5, r1
    7770:	e1a06001 	mov	r6, r1
    7774:	e1a08fa1 	lsr	r8, r1, #31
    7778:	ca000026 	bgt	7818 <rint+0xd4>
    777c:	e35c0000 	cmp	r12, #0
    7780:	ba000038 	blt	7868 <rint+0x124>
    7784:	e59f1150 	ldr	r1, [pc, #336]	; 78dc <rint+0x198>
    7788:	e1a01c51 	asr	r1, r1, r12
    778c:	e0010003 	and	r0, r1, r3
    7790:	e1900002 	orrs	r0, r0, r2
    7794:	0a00001a 	beq	7804 <rint+0xc0>
    7798:	e1a010a1 	lsr	r1, r1, #1
    779c:	e0013003 	and	r3, r1, r3
    77a0:	e1934002 	orrs	r4, r3, r2
    77a4:	0a000005 	beq	77c0 <rint+0x7c>
    77a8:	e1c51001 	bic	r1, r5, r1
    77ac:	e3a05701 	mov	r5, #262144	; 0x40000
    77b0:	e1815c55 	orr	r5, r1, r5, asr r12
    77b4:	e35c0013 	cmp	r12, #19
    77b8:	03a04102 	moveq	r4, #-2147483648	; 0x80000000
    77bc:	13a04000 	movne	r4, #0
    77c0:	e59f3118 	ldr	r3, [pc, #280]	; 78e0 <rint+0x19c>
    77c4:	e0838188 	add	r8, r3, r8, lsl #3
    77c8:	e8980300 	ldm	r8, {r8, r9}
    77cc:	e1a02004 	mov	r2, r4
    77d0:	e1a03005 	mov	r3, r5
    77d4:	e1a00008 	mov	r0, r8
    77d8:	e1a01009 	mov	r1, r9
    77dc:	eb0000b2 	bl	7aac <__adddf3>
    77e0:	e88d0003 	stm	sp, {r0, r1}
    77e4:	e1a02008 	mov	r2, r8
    77e8:	e1a03009 	mov	r3, r9
    77ec:	e89d0003 	ldm	sp, {r0, r1}
    77f0:	eb0000ac 	bl	7aa8 <__aeabi_dsub>
    77f4:	e1a07005 	mov	r7, r5
    77f8:	e1a06004 	mov	r6, r4
    77fc:	e1a02000 	mov	r2, r0
    7800:	e1a03001 	mov	r3, r1
    7804:	e1a00002 	mov	r0, r2
    7808:	e1a01003 	mov	r1, r3
    780c:	e28dd00c 	add	sp, sp, #12
    7810:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
    7814:	e12fff1e 	bx	lr
    7818:	e35c0033 	cmp	r12, #51	; 0x33
    781c:	da000005 	ble	7838 <rint+0xf4>
    7820:	e35c0b01 	cmp	r12, #1024	; 0x400
    7824:	1afffff6 	bne	7804 <rint+0xc0>
    7828:	eb00009f 	bl	7aac <__adddf3>
    782c:	e1a02000 	mov	r2, r0
    7830:	e1a03001 	mov	r3, r1
    7834:	eafffff2 	b	7804 <rint+0xc0>
    7838:	e2477e41 	sub	r7, r7, #1040	; 0x410
    783c:	e2477003 	sub	r7, r7, #3
    7840:	e3e01000 	mvn	r1, #0
    7844:	e1a01731 	lsr	r1, r1, r7
    7848:	e1110000 	tst	r1, r0
    784c:	0affffec 	beq	7804 <rint+0xc0>
    7850:	e1a010a1 	lsr	r1, r1, #1
    7854:	e1110000 	tst	r1, r0
    7858:	11c04001 	bicne	r4, r0, r1
    785c:	13a03101 	movne	r3, #1073741824	; 0x40000000
    7860:	11844753 	orrne	r4, r4, r3, asr r7
    7864:	eaffffd5 	b	77c0 <rint+0x7c>
    7868:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    786c:	e1911000 	orrs	r1, r1, r0
    7870:	0affffe3 	beq	7804 <rint+0xc0>
    7874:	e3c314ff 	bic	r1, r3, #-16777216	; 0xff000000
    7878:	e3c1160f 	bic	r1, r1, #15728640	; 0xf00000
    787c:	e1814000 	orr	r4, r1, r0
    7880:	e59f0058 	ldr	r0, [pc, #88]	; 78e0 <rint+0x19c>
    7884:	e2641000 	rsb	r1, r4, #0
    7888:	e1814004 	orr	r4, r1, r4
    788c:	e0800188 	add	r0, r0, r8, lsl #3
    7890:	e1a01624 	lsr	r1, r4, #12
    7894:	e8900030 	ldm	r0, {r4, r5}
    7898:	e2011702 	and	r1, r1, #524288	; 0x80000
    789c:	e1a068a3 	lsr	r6, r3, #17
    78a0:	e1813886 	orr	r3, r1, r6, lsl #17
    78a4:	e1a00004 	mov	r0, r4
    78a8:	e1a01005 	mov	r1, r5
    78ac:	eb00007e 	bl	7aac <__adddf3>
    78b0:	e88d0003 	stm	sp, {r0, r1}
    78b4:	e1a02004 	mov	r2, r4
    78b8:	e1a03005 	mov	r3, r5
    78bc:	e89d0003 	ldm	sp, {r0, r1}
    78c0:	eb000078 	bl	7aa8 <__aeabi_dsub>
    78c4:	e1a05001 	mov	r5, r1
    78c8:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    78cc:	e1a04000 	mov	r4, r0
    78d0:	e1a02000 	mov	r2, r0
    78d4:	e1813f88 	orr	r3, r1, r8, lsl #31
    78d8:	eaffffc9 	b	7804 <rint+0xc0>
    78dc:	000fffff 	.word	0x000fffff
    78e0:	000093b0 	.word	0x000093b0
    78e4:	00000000 	.word	0x00000000

000078e8 <scalbn>:
    78e8:	e59f3170 	ldr	r3, [pc, #368]	; 7a60 <scalbn+0x178>
    78ec:	e0013003 	and	r3, r1, r3
    78f0:	e1b03a43 	asrs	r3, r3, #20
    78f4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    78f8:	e1a04000 	mov	r4, r0
    78fc:	e1a05001 	mov	r5, r1
    7900:	e1a06000 	mov	r6, r0
    7904:	e1a07001 	mov	r7, r1
    7908:	e1a08002 	mov	r8, r2
    790c:	1a000011 	bne	7958 <scalbn+0x70>
    7910:	e3c1c102 	bic	r12, r1, #-2147483648	; 0x80000000
    7914:	e19cc000 	orrs	r12, r12, r0
    7918:	0a00001d 	beq	7994 <scalbn+0xac>
    791c:	e59f3140 	ldr	r3, [pc, #320]	; 7a64 <scalbn+0x17c>
    7920:	e3a02000 	mov	r2, #0
    7924:	eb000164 	bl	7ebc <__aeabi_dmul>
    7928:	e59f3138 	ldr	r3, [pc, #312]	; 7a68 <scalbn+0x180>
    792c:	e1580003 	cmp	r8, r3
    7930:	e1a04000 	mov	r4, r0
    7934:	e1a05001 	mov	r5, r1
    7938:	e1a06000 	mov	r6, r0
    793c:	e1a07001 	mov	r7, r1
    7940:	ba000021 	blt	79cc <scalbn+0xe4>
    7944:	e59f3114 	ldr	r3, [pc, #276]	; 7a60 <scalbn+0x178>
    7948:	e0013003 	and	r3, r1, r3
    794c:	e1a03a43 	asr	r3, r3, #20
    7950:	e2433036 	sub	r3, r3, #54	; 0x36
    7954:	ea000003 	b	7968 <scalbn+0x80>
    7958:	e59f210c 	ldr	r2, [pc, #268]	; 7a6c <scalbn+0x184>
    795c:	e1530002 	cmp	r3, r2
    7960:	11a01001 	movne	r1, r1
    7964:	0a000027 	beq	7a08 <scalbn+0x120>
    7968:	e59f2100 	ldr	r2, [pc, #256]	; 7a70 <scalbn+0x188>
    796c:	e0833008 	add	r3, r3, r8
    7970:	e1530002 	cmp	r3, r2
    7974:	c1a02004 	movgt	r2, r4
    7978:	c1a03005 	movgt	r3, r5
    797c:	ca000018 	bgt	79e4 <scalbn+0xfc>
    7980:	e3530000 	cmp	r3, #0
    7984:	da000006 	ble	79a4 <scalbn+0xbc>
    7988:	e3c1147f 	bic	r1, r1, #2130706432	; 0x7f000000
    798c:	e3c1160f 	bic	r1, r1, #15728640	; 0xf00000
    7990:	e1815a03 	orr	r5, r1, r3, lsl #20
    7994:	e1a00004 	mov	r0, r4
    7998:	e1a01005 	mov	r1, r5
    799c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    79a0:	e12fff1e 	bx	lr
    79a4:	e3730035 	cmn	r3, #53	; 0x35
    79a8:	aa00001c 	bge	7a20 <scalbn+0x138>
    79ac:	e59f30c0 	ldr	r3, [pc, #192]	; 7a74 <scalbn+0x18c>
    79b0:	e1580003 	cmp	r8, r3
    79b4:	e1a02004 	mov	r2, r4
    79b8:	e1a03005 	mov	r3, r5
    79bc:	ca000008 	bgt	79e4 <scalbn+0xfc>
    79c0:	e28f1088 	add	r1, pc, #136	; 0x88
    79c4:	e8910003 	ldm	r1, {r0, r1}
    79c8:	eb00002c 	bl	7a80 <copysign>
    79cc:	e28f307c 	add	r3, pc, #124	; 0x7c
    79d0:	e893000c 	ldm	r3, {r2, r3}
    79d4:	eb000138 	bl	7ebc <__aeabi_dmul>
    79d8:	e1a04000 	mov	r4, r0
    79dc:	e1a05001 	mov	r5, r1
    79e0:	eaffffeb 	b	7994 <scalbn+0xac>
    79e4:	e28f106c 	add	r1, pc, #108	; 0x6c
    79e8:	e8910003 	ldm	r1, {r0, r1}
    79ec:	eb000023 	bl	7a80 <copysign>
    79f0:	e28f3060 	add	r3, pc, #96	; 0x60
    79f4:	e893000c 	ldm	r3, {r2, r3}
    79f8:	eb00012f 	bl	7ebc <__aeabi_dmul>
    79fc:	e1a04000 	mov	r4, r0
    7a00:	e1a05001 	mov	r5, r1
    7a04:	eaffffe2 	b	7994 <scalbn+0xac>
    7a08:	e1a03005 	mov	r3, r5
    7a0c:	e1a02000 	mov	r2, r0
    7a10:	eb000025 	bl	7aac <__adddf3>
    7a14:	e1a04000 	mov	r4, r0
    7a18:	e1a05001 	mov	r5, r1
    7a1c:	eaffffdc 	b	7994 <scalbn+0xac>
    7a20:	e3c1147f 	bic	r1, r1, #2130706432	; 0x7f000000
    7a24:	e2833036 	add	r3, r3, #54	; 0x36
    7a28:	e3c1160f 	bic	r1, r1, #15728640	; 0xf00000
    7a2c:	e1815a03 	orr	r5, r1, r3, lsl #20
    7a30:	e1a00004 	mov	r0, r4
    7a34:	e1a01005 	mov	r1, r5
    7a38:	e3a02000 	mov	r2, #0
    7a3c:	e59f3034 	ldr	r3, [pc, #52]	; 7a78 <scalbn+0x190>
    7a40:	eb00011d 	bl	7ebc <__aeabi_dmul>
    7a44:	e1a04000 	mov	r4, r0
    7a48:	e1a05001 	mov	r5, r1
    7a4c:	eaffffd0 	b	7994 <scalbn+0xac>
    7a50:	c2f8f359 	.word	0xc2f8f359
    7a54:	01a56e1f 	.word	0x01a56e1f
    7a58:	8800759c 	.word	0x8800759c
    7a5c:	7e37e43c 	.word	0x7e37e43c
    7a60:	7ff00000 	.word	0x7ff00000
    7a64:	43500000 	.word	0x43500000
    7a68:	ffff3cb0 	.word	0xffff3cb0
    7a6c:	000007ff 	.word	0x000007ff
    7a70:	000007fe 	.word	0x000007fe
    7a74:	0000c350 	.word	0x0000c350
    7a78:	3c900000 	.word	0x3c900000
    7a7c:	e1a00000 	nop			; (mov r0, r0)

00007a80 <copysign>:
    7a80:	e2033102 	and	r3, r3, #-2147483648	; 0x80000000
    7a84:	e3c12102 	bic	r2, r1, #-2147483648	; 0x80000000
    7a88:	e92d0030 	push	{r4, r5}
    7a8c:	e1a05001 	mov	r5, r1
    7a90:	e1a04000 	mov	r4, r0
    7a94:	e1831002 	orr	r1, r3, r2
    7a98:	e8bd0030 	pop	{r4, r5}
    7a9c:	e12fff1e 	bx	lr

00007aa0 <__aeabi_drsub>:
    7aa0:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
    7aa4:	ea000000 	b	7aac <__adddf3>

00007aa8 <__aeabi_dsub>:
    7aa8:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

00007aac <__adddf3>:
    7aac:	e92d4030 	push	{r4, r5, lr}
    7ab0:	e1a04081 	lsl	r4, r1, #1
    7ab4:	e1a05083 	lsl	r5, r3, #1
    7ab8:	e1340005 	teq	r4, r5
    7abc:	01300002 	teqeq	r0, r2
    7ac0:	1194c000 	orrsne	r12, r4, r0
    7ac4:	1195c002 	orrsne	r12, r5, r2
    7ac8:	11f0cac4 	mvnsne	r12, r4, asr #21
    7acc:	11f0cac5 	mvnsne	r12, r5, asr #21
    7ad0:	0a00008c 	beq	7d08 <__adddf3+0x25c>
    7ad4:	e1a04aa4 	lsr	r4, r4, #21
    7ad8:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
    7adc:	b2655000 	rsblt	r5, r5, #0
    7ae0:	da000006 	ble	7b00 <__adddf3+0x54>
    7ae4:	e0844005 	add	r4, r4, r5
    7ae8:	e0202002 	eor	r2, r0, r2
    7aec:	e0213003 	eor	r3, r1, r3
    7af0:	e0220000 	eor	r0, r2, r0
    7af4:	e0231001 	eor	r1, r3, r1
    7af8:	e0202002 	eor	r2, r0, r2
    7afc:	e0213003 	eor	r3, r1, r3
    7b00:	e3550036 	cmp	r5, #54	; 0x36
    7b04:	88bd4030 	pophi	{r4, r5, lr}
    7b08:	812fff1e 	bxhi	lr
    7b0c:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    7b10:	e1a01601 	lsl	r1, r1, #12
    7b14:	e3a0c601 	mov	r12, #1048576	; 0x100000
    7b18:	e18c1621 	orr	r1, r12, r1, lsr #12
    7b1c:	0a000001 	beq	7b28 <__adddf3+0x7c>
    7b20:	e2700000 	rsbs	r0, r0, #0
    7b24:	e2e11000 	rsc	r1, r1, #0
    7b28:	e3130102 	tst	r3, #-2147483648	; 0x80000000
    7b2c:	e1a03603 	lsl	r3, r3, #12
    7b30:	e18c3623 	orr	r3, r12, r3, lsr #12
    7b34:	0a000001 	beq	7b40 <__adddf3+0x94>
    7b38:	e2722000 	rsbs	r2, r2, #0
    7b3c:	e2e33000 	rsc	r3, r3, #0
    7b40:	e1340005 	teq	r4, r5
    7b44:	0a000069 	beq	7cf0 <__adddf3+0x244>
    7b48:	e2444001 	sub	r4, r4, #1
    7b4c:	e275e020 	rsbs	lr, r5, #32
    7b50:	ba000005 	blt	7b6c <__adddf3+0xc0>
    7b54:	e1a0ce12 	lsl	r12, r2, lr
    7b58:	e0900532 	adds	r0, r0, r2, lsr r5
    7b5c:	e2a11000 	adc	r1, r1, #0
    7b60:	e0900e13 	adds	r0, r0, r3, lsl lr
    7b64:	e0b11553 	adcs	r1, r1, r3, asr r5
    7b68:	ea000006 	b	7b88 <__adddf3+0xdc>
    7b6c:	e2455020 	sub	r5, r5, #32
    7b70:	e28ee020 	add	lr, lr, #32
    7b74:	e3520001 	cmp	r2, #1
    7b78:	e1a0ce13 	lsl	r12, r3, lr
    7b7c:	238cc002 	orrcs	r12, r12, #2
    7b80:	e0900553 	adds	r0, r0, r3, asr r5
    7b84:	e0b11fc3 	adcs	r1, r1, r3, asr #31
    7b88:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    7b8c:	5a000002 	bpl	7b9c <__adddf3+0xf0>
    7b90:	e27cc000 	rsbs	r12, r12, #0
    7b94:	e2f00000 	rscs	r0, r0, #0
    7b98:	e2e11000 	rsc	r1, r1, #0
    7b9c:	e3510601 	cmp	r1, #1048576	; 0x100000
    7ba0:	3a00000f 	bcc	7be4 <__adddf3+0x138>
    7ba4:	e3510602 	cmp	r1, #2097152	; 0x200000
    7ba8:	3a000006 	bcc	7bc8 <__adddf3+0x11c>
    7bac:	e1b010a1 	lsrs	r1, r1, #1
    7bb0:	e1b00060 	rrxs	r0, r0
    7bb4:	e1a0c06c 	rrx	r12, r12
    7bb8:	e2844001 	add	r4, r4, #1
    7bbc:	e1a02a84 	lsl	r2, r4, #21
    7bc0:	e3720501 	cmn	r2, #4194304	; 0x400000
    7bc4:	2a00006b 	bcs	7d78 <__adddf3+0x2cc>
    7bc8:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    7bcc:	01b0c0a0 	lsrseq	r12, r0, #1
    7bd0:	e2b00000 	adcs	r0, r0, #0
    7bd4:	e0a11a04 	adc	r1, r1, r4, lsl #20
    7bd8:	e1811005 	orr	r1, r1, r5
    7bdc:	e8bd4030 	pop	{r4, r5, lr}
    7be0:	e12fff1e 	bx	lr
    7be4:	e1b0c08c 	lsls	r12, r12, #1
    7be8:	e0b00000 	adcs	r0, r0, r0
    7bec:	e0a11001 	adc	r1, r1, r1
    7bf0:	e3110601 	tst	r1, #1048576	; 0x100000
    7bf4:	e2444001 	sub	r4, r4, #1
    7bf8:	1afffff2 	bne	7bc8 <__adddf3+0x11c>
    7bfc:	e3310000 	teq	r1, #0
    7c00:	13a03014 	movne	r3, #20
    7c04:	03a03034 	moveq	r3, #52	; 0x34
    7c08:	01a01000 	moveq	r1, r0
    7c0c:	03a00000 	moveq	r0, #0
    7c10:	e1a02001 	mov	r2, r1
    7c14:	e3520801 	cmp	r2, #65536	; 0x10000
    7c18:	21a02822 	lsrcs	r2, r2, #16
    7c1c:	22433010 	subcs	r3, r3, #16
    7c20:	e3520c01 	cmp	r2, #256	; 0x100
    7c24:	21a02422 	lsrcs	r2, r2, #8
    7c28:	22433008 	subcs	r3, r3, #8
    7c2c:	e3520010 	cmp	r2, #16
    7c30:	21a02222 	lsrcs	r2, r2, #4
    7c34:	22433004 	subcs	r3, r3, #4
    7c38:	e3520004 	cmp	r2, #4
    7c3c:	22433002 	subcs	r3, r3, #2
    7c40:	304330a2 	subcc	r3, r3, r2, lsr #1
    7c44:	e04331a2 	sub	r3, r3, r2, lsr #3
    7c48:	e2532020 	subs	r2, r3, #32
    7c4c:	aa000007 	bge	7c70 <__adddf3+0x1c4>
    7c50:	e292200c 	adds	r2, r2, #12
    7c54:	da000004 	ble	7c6c <__adddf3+0x1c0>
    7c58:	e282c014 	add	r12, r2, #20
    7c5c:	e262200c 	rsb	r2, r2, #12
    7c60:	e1a00c11 	lsl	r0, r1, r12
    7c64:	e1a01231 	lsr	r1, r1, r2
    7c68:	ea000004 	b	7c80 <__adddf3+0x1d4>
    7c6c:	e2822014 	add	r2, r2, #20
    7c70:	d262c020 	rsble	r12, r2, #32
    7c74:	e1a01211 	lsl	r1, r1, r2
    7c78:	d1811c30 	orrle	r1, r1, r0, lsr r12
    7c7c:	d1a00210 	lslle	r0, r0, r2
    7c80:	e0544003 	subs	r4, r4, r3
    7c84:	a0811a04 	addge	r1, r1, r4, lsl #20
    7c88:	a1811005 	orrge	r1, r1, r5
    7c8c:	a8bd4030 	popge	{r4, r5, lr}
    7c90:	a12fff1e 	bxge	lr
    7c94:	e1e04004 	mvn	r4, r4
    7c98:	e254401f 	subs	r4, r4, #31
    7c9c:	aa00000f 	bge	7ce0 <__adddf3+0x234>
    7ca0:	e294400c 	adds	r4, r4, #12
    7ca4:	ca000006 	bgt	7cc4 <__adddf3+0x218>
    7ca8:	e2844014 	add	r4, r4, #20
    7cac:	e2642020 	rsb	r2, r4, #32
    7cb0:	e1a00430 	lsr	r0, r0, r4
    7cb4:	e1800211 	orr	r0, r0, r1, lsl r2
    7cb8:	e1851431 	orr	r1, r5, r1, lsr r4
    7cbc:	e8bd4030 	pop	{r4, r5, lr}
    7cc0:	e12fff1e 	bx	lr
    7cc4:	e264400c 	rsb	r4, r4, #12
    7cc8:	e2642020 	rsb	r2, r4, #32
    7ccc:	e1a00230 	lsr	r0, r0, r2
    7cd0:	e1800411 	orr	r0, r0, r1, lsl r4
    7cd4:	e1a01005 	mov	r1, r5
    7cd8:	e8bd4030 	pop	{r4, r5, lr}
    7cdc:	e12fff1e 	bx	lr
    7ce0:	e1a00431 	lsr	r0, r1, r4
    7ce4:	e1a01005 	mov	r1, r5
    7ce8:	e8bd4030 	pop	{r4, r5, lr}
    7cec:	e12fff1e 	bx	lr
    7cf0:	e3340000 	teq	r4, #0
    7cf4:	e2233601 	eor	r3, r3, #1048576	; 0x100000
    7cf8:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
    7cfc:	02844001 	addeq	r4, r4, #1
    7d00:	12455001 	subne	r5, r5, #1
    7d04:	eaffff8f 	b	7b48 <__adddf3+0x9c>
    7d08:	e1f0cac4 	mvns	r12, r4, asr #21
    7d0c:	11f0cac5 	mvnsne	r12, r5, asr #21
    7d10:	0a00001d 	beq	7d8c <__adddf3+0x2e0>
    7d14:	e1340005 	teq	r4, r5
    7d18:	01300002 	teqeq	r0, r2
    7d1c:	0a000004 	beq	7d34 <__adddf3+0x288>
    7d20:	e194c000 	orrs	r12, r4, r0
    7d24:	01a01003 	moveq	r1, r3
    7d28:	01a00002 	moveq	r0, r2
    7d2c:	e8bd4030 	pop	{r4, r5, lr}
    7d30:	e12fff1e 	bx	lr
    7d34:	e1310003 	teq	r1, r3
    7d38:	13a01000 	movne	r1, #0
    7d3c:	13a00000 	movne	r0, #0
    7d40:	18bd4030 	popne	{r4, r5, lr}
    7d44:	112fff1e 	bxne	lr
    7d48:	e1b0caa4 	lsrs	r12, r4, #21
    7d4c:	1a000004 	bne	7d64 <__adddf3+0x2b8>
    7d50:	e1b00080 	lsls	r0, r0, #1
    7d54:	e0b11001 	adcs	r1, r1, r1
    7d58:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
    7d5c:	e8bd4030 	pop	{r4, r5, lr}
    7d60:	e12fff1e 	bx	lr
    7d64:	e2944501 	adds	r4, r4, #4194304	; 0x400000
    7d68:	32811601 	addcc	r1, r1, #1048576	; 0x100000
    7d6c:	38bd4030 	popcc	{r4, r5, lr}
    7d70:	312fff1e 	bxcc	lr
    7d74:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    7d78:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
    7d7c:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    7d80:	e3a00000 	mov	r0, #0
    7d84:	e8bd4030 	pop	{r4, r5, lr}
    7d88:	e12fff1e 	bx	lr
    7d8c:	e1f0cac4 	mvns	r12, r4, asr #21
    7d90:	11a01003 	movne	r1, r3
    7d94:	11a00002 	movne	r0, r2
    7d98:	01f0cac5 	mvnseq	r12, r5, asr #21
    7d9c:	11a03001 	movne	r3, r1
    7da0:	11a02000 	movne	r2, r0
    7da4:	e1904601 	orrs	r4, r0, r1, lsl #12
    7da8:	01925603 	orrseq	r5, r2, r3, lsl #12
    7dac:	01310003 	teqeq	r1, r3
    7db0:	13811702 	orrne	r1, r1, #524288	; 0x80000
    7db4:	e8bd4030 	pop	{r4, r5, lr}
    7db8:	e12fff1e 	bx	lr

00007dbc <__aeabi_ui2d>:
    7dbc:	e3300000 	teq	r0, #0
    7dc0:	03a01000 	moveq	r1, #0
    7dc4:	012fff1e 	bxeq	lr
    7dc8:	e92d4030 	push	{r4, r5, lr}
    7dcc:	e3a04b01 	mov	r4, #1024	; 0x400
    7dd0:	e2844032 	add	r4, r4, #50	; 0x32
    7dd4:	e3a05000 	mov	r5, #0
    7dd8:	e3a01000 	mov	r1, #0
    7ddc:	eaffff86 	b	7bfc <__adddf3+0x150>

00007de0 <__aeabi_i2d>:
    7de0:	e3300000 	teq	r0, #0
    7de4:	03a01000 	moveq	r1, #0
    7de8:	012fff1e 	bxeq	lr
    7dec:	e92d4030 	push	{r4, r5, lr}
    7df0:	e3a04b01 	mov	r4, #1024	; 0x400
    7df4:	e2844032 	add	r4, r4, #50	; 0x32
    7df8:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
    7dfc:	42600000 	rsbmi	r0, r0, #0
    7e00:	e3a01000 	mov	r1, #0
    7e04:	eaffff7c 	b	7bfc <__adddf3+0x150>

00007e08 <__aeabi_f2d>:
    7e08:	e1b02080 	lsls	r2, r0, #1
    7e0c:	e1a011c2 	asr	r1, r2, #3
    7e10:	e1a01061 	rrx	r1, r1
    7e14:	e1a00e02 	lsl	r0, r2, #28
    7e18:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
    7e1c:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    7e20:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
    7e24:	112fff1e 	bxne	lr
    7e28:	e3320000 	teq	r2, #0
    7e2c:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    7e30:	012fff1e 	bxeq	lr
    7e34:	e92d4030 	push	{r4, r5, lr}
    7e38:	e3a04d0e 	mov	r4, #896	; 0x380
    7e3c:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    7e40:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    7e44:	eaffff6c 	b	7bfc <__adddf3+0x150>

00007e48 <__aeabi_ul2d>:
    7e48:	e1902001 	orrs	r2, r0, r1
    7e4c:	012fff1e 	bxeq	lr
    7e50:	e92d4030 	push	{r4, r5, lr}
    7e54:	e3a05000 	mov	r5, #0
    7e58:	ea000006 	b	7e78 <__aeabi_l2d+0x1c>

00007e5c <__aeabi_l2d>:
    7e5c:	e1902001 	orrs	r2, r0, r1
    7e60:	012fff1e 	bxeq	lr
    7e64:	e92d4030 	push	{r4, r5, lr}
    7e68:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
    7e6c:	5a000001 	bpl	7e78 <__aeabi_l2d+0x1c>
    7e70:	e2700000 	rsbs	r0, r0, #0
    7e74:	e2e11000 	rsc	r1, r1, #0
    7e78:	e3a04b01 	mov	r4, #1024	; 0x400
    7e7c:	e2844032 	add	r4, r4, #50	; 0x32
    7e80:	e1b0cb21 	lsrs	r12, r1, #22
    7e84:	0affff44 	beq	7b9c <__adddf3+0xf0>
    7e88:	e3a02003 	mov	r2, #3
    7e8c:	e1b0c1ac 	lsrs	r12, r12, #3
    7e90:	12822003 	addne	r2, r2, #3
    7e94:	e1b0c1ac 	lsrs	r12, r12, #3
    7e98:	12822003 	addne	r2, r2, #3
    7e9c:	e08221ac 	add	r2, r2, r12, lsr #3
    7ea0:	e2623020 	rsb	r3, r2, #32
    7ea4:	e1a0c310 	lsl	r12, r0, r3
    7ea8:	e1a00230 	lsr	r0, r0, r2
    7eac:	e1800311 	orr	r0, r0, r1, lsl r3
    7eb0:	e1a01231 	lsr	r1, r1, r2
    7eb4:	e0844002 	add	r4, r4, r2
    7eb8:	eaffff37 	b	7b9c <__adddf3+0xf0>

00007ebc <__aeabi_dmul>:
    7ebc:	e92d4070 	push	{r4, r5, r6, lr}
    7ec0:	e3a0c0ff 	mov	r12, #255	; 0xff
    7ec4:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    7ec8:	e01c4a21 	ands	r4, r12, r1, lsr #20
    7ecc:	101c5a23 	andsne	r5, r12, r3, lsr #20
    7ed0:	1134000c 	teqne	r4, r12
    7ed4:	1135000c 	teqne	r5, r12
    7ed8:	0b000075 	bleq	80b4 <__aeabi_dmul+0x1f8>
    7edc:	e0844005 	add	r4, r4, r5
    7ee0:	e0216003 	eor	r6, r1, r3
    7ee4:	e1c11a8c 	bic	r1, r1, r12, lsl #21
    7ee8:	e1c33a8c 	bic	r3, r3, r12, lsl #21
    7eec:	e1905601 	orrs	r5, r0, r1, lsl #12
    7ef0:	11925603 	orrsne	r5, r2, r3, lsl #12
    7ef4:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    7ef8:	e3833601 	orr	r3, r3, #1048576	; 0x100000
    7efc:	0a00001d 	beq	7f78 <__aeabi_dmul+0xbc>
    7f00:	e08ec290 	umull	r12, lr, r0, r2
    7f04:	e3a05000 	mov	r5, #0
    7f08:	e0a5e291 	umlal	lr, r5, r1, r2
    7f0c:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
    7f10:	e0a5e390 	umlal	lr, r5, r0, r3
    7f14:	e3a06000 	mov	r6, #0
    7f18:	e0a65391 	umlal	r5, r6, r1, r3
    7f1c:	e33c0000 	teq	r12, #0
    7f20:	138ee001 	orrne	lr, lr, #1
    7f24:	e24440ff 	sub	r4, r4, #255	; 0xff
    7f28:	e3560c02 	cmp	r6, #512	; 0x200
    7f2c:	e2c44c03 	sbc	r4, r4, #768	; 0x300
    7f30:	2a000002 	bcs	7f40 <__aeabi_dmul+0x84>
    7f34:	e1b0e08e 	lsls	lr, lr, #1
    7f38:	e0b55005 	adcs	r5, r5, r5
    7f3c:	e0a66006 	adc	r6, r6, r6
    7f40:	e1821586 	orr	r1, r2, r6, lsl #11
    7f44:	e1811aa5 	orr	r1, r1, r5, lsr #21
    7f48:	e1a00585 	lsl	r0, r5, #11
    7f4c:	e1800aae 	orr	r0, r0, lr, lsr #21
    7f50:	e1a0e58e 	lsl	lr, lr, #11
    7f54:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    7f58:	835c0c07 	cmphi	r12, #1792	; 0x700
    7f5c:	8a000011 	bhi	7fa8 <__aeabi_dmul+0xec>
    7f60:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
    7f64:	01b0e0a0 	lsrseq	lr, r0, #1
    7f68:	e2b00000 	adcs	r0, r0, #0
    7f6c:	e0a11a04 	adc	r1, r1, r4, lsl #20
    7f70:	e8bd4070 	pop	{r4, r5, r6, lr}
    7f74:	e12fff1e 	bx	lr
    7f78:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
    7f7c:	e1861001 	orr	r1, r6, r1
    7f80:	e1800002 	orr	r0, r0, r2
    7f84:	e0211003 	eor	r1, r1, r3
    7f88:	e05440ac 	subs	r4, r4, r12, lsr #1
    7f8c:	c074500c 	rsbsgt	r5, r4, r12
    7f90:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    7f94:	c8bd4070 	popgt	{r4, r5, r6, lr}
    7f98:	c12fff1e 	bxgt	lr
    7f9c:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    7fa0:	e3a0e000 	mov	lr, #0
    7fa4:	e2544001 	subs	r4, r4, #1
    7fa8:	ca00005d 	bgt	8124 <__aeabi_dmul+0x268>
    7fac:	e3740036 	cmn	r4, #54	; 0x36
    7fb0:	d3a00000 	movle	r0, #0
    7fb4:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
    7fb8:	d8bd4070 	pople	{r4, r5, r6, lr}
    7fbc:	d12fff1e 	bxle	lr
    7fc0:	e2644000 	rsb	r4, r4, #0
    7fc4:	e2544020 	subs	r4, r4, #32
    7fc8:	aa00001a 	bge	8038 <__aeabi_dmul+0x17c>
    7fcc:	e294400c 	adds	r4, r4, #12
    7fd0:	ca00000c 	bgt	8008 <__aeabi_dmul+0x14c>
    7fd4:	e2844014 	add	r4, r4, #20
    7fd8:	e2645020 	rsb	r5, r4, #32
    7fdc:	e1a03510 	lsl	r3, r0, r5
    7fe0:	e1a00430 	lsr	r0, r0, r4
    7fe4:	e1800511 	orr	r0, r0, r1, lsl r5
    7fe8:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
    7fec:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    7ff0:	e0900fa3 	adds	r0, r0, r3, lsr #31
    7ff4:	e0a21431 	adc	r1, r2, r1, lsr r4
    7ff8:	e19ee083 	orrs	lr, lr, r3, lsl #1
    7ffc:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    8000:	e8bd4070 	pop	{r4, r5, r6, lr}
    8004:	e12fff1e 	bx	lr
    8008:	e264400c 	rsb	r4, r4, #12
    800c:	e2645020 	rsb	r5, r4, #32
    8010:	e1a03410 	lsl	r3, r0, r4
    8014:	e1a00530 	lsr	r0, r0, r5
    8018:	e1800411 	orr	r0, r0, r1, lsl r4
    801c:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    8020:	e0900fa3 	adds	r0, r0, r3, lsr #31
    8024:	e2a11000 	adc	r1, r1, #0
    8028:	e19ee083 	orrs	lr, lr, r3, lsl #1
    802c:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    8030:	e8bd4070 	pop	{r4, r5, r6, lr}
    8034:	e12fff1e 	bx	lr
    8038:	e2645020 	rsb	r5, r4, #32
    803c:	e18ee510 	orr	lr, lr, r0, lsl r5
    8040:	e1a03430 	lsr	r3, r0, r4
    8044:	e1833511 	orr	r3, r3, r1, lsl r5
    8048:	e1a00431 	lsr	r0, r1, r4
    804c:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    8050:	e1c00431 	bic	r0, r0, r1, lsr r4
    8054:	e0800fa3 	add	r0, r0, r3, lsr #31
    8058:	e19ee083 	orrs	lr, lr, r3, lsl #1
    805c:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    8060:	e8bd4070 	pop	{r4, r5, r6, lr}
    8064:	e12fff1e 	bx	lr
    8068:	e3340000 	teq	r4, #0
    806c:	1a000008 	bne	8094 <__aeabi_dmul+0x1d8>
    8070:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
    8074:	e1b00080 	lsls	r0, r0, #1
    8078:	e0a11001 	adc	r1, r1, r1
    807c:	e3110601 	tst	r1, #1048576	; 0x100000
    8080:	02444001 	subeq	r4, r4, #1
    8084:	0afffffa 	beq	8074 <__aeabi_dmul+0x1b8>
    8088:	e1811006 	orr	r1, r1, r6
    808c:	e3350000 	teq	r5, #0
    8090:	112fff1e 	bxne	lr
    8094:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
    8098:	e1b02082 	lsls	r2, r2, #1
    809c:	e0a33003 	adc	r3, r3, r3
    80a0:	e3130601 	tst	r3, #1048576	; 0x100000
    80a4:	02455001 	subeq	r5, r5, #1
    80a8:	0afffffa 	beq	8098 <__aeabi_dmul+0x1dc>
    80ac:	e1833006 	orr	r3, r3, r6
    80b0:	e12fff1e 	bx	lr
    80b4:	e134000c 	teq	r4, r12
    80b8:	e00c5a23 	and	r5, r12, r3, lsr #20
    80bc:	1135000c 	teqne	r5, r12
    80c0:	0a000007 	beq	80e4 <__aeabi_dmul+0x228>
    80c4:	e1906081 	orrs	r6, r0, r1, lsl #1
    80c8:	11926083 	orrsne	r6, r2, r3, lsl #1
    80cc:	1affffe5 	bne	8068 <__aeabi_dmul+0x1ac>
    80d0:	e0211003 	eor	r1, r1, r3
    80d4:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    80d8:	e3a00000 	mov	r0, #0
    80dc:	e8bd4070 	pop	{r4, r5, r6, lr}
    80e0:	e12fff1e 	bx	lr
    80e4:	e1906081 	orrs	r6, r0, r1, lsl #1
    80e8:	01a00002 	moveq	r0, r2
    80ec:	01a01003 	moveq	r1, r3
    80f0:	11926083 	orrsne	r6, r2, r3, lsl #1
    80f4:	0a000010 	beq	813c <__aeabi_dmul+0x280>
    80f8:	e134000c 	teq	r4, r12
    80fc:	1a000001 	bne	8108 <__aeabi_dmul+0x24c>
    8100:	e1906601 	orrs	r6, r0, r1, lsl #12
    8104:	1a00000c 	bne	813c <__aeabi_dmul+0x280>
    8108:	e135000c 	teq	r5, r12
    810c:	1a000003 	bne	8120 <__aeabi_dmul+0x264>
    8110:	e1926603 	orrs	r6, r2, r3, lsl #12
    8114:	11a00002 	movne	r0, r2
    8118:	11a01003 	movne	r1, r3
    811c:	1a000006 	bne	813c <__aeabi_dmul+0x280>
    8120:	e0211003 	eor	r1, r1, r3
    8124:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    8128:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    812c:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    8130:	e3a00000 	mov	r0, #0
    8134:	e8bd4070 	pop	{r4, r5, r6, lr}
    8138:	e12fff1e 	bx	lr
    813c:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    8140:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
    8144:	e8bd4070 	pop	{r4, r5, r6, lr}
    8148:	e12fff1e 	bx	lr

0000814c <__aeabi_ddiv>:
    814c:	e92d4070 	push	{r4, r5, r6, lr}
    8150:	e3a0c0ff 	mov	r12, #255	; 0xff
    8154:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    8158:	e01c4a21 	ands	r4, r12, r1, lsr #20
    815c:	101c5a23 	andsne	r5, r12, r3, lsr #20
    8160:	1134000c 	teqne	r4, r12
    8164:	1135000c 	teqne	r5, r12
    8168:	0b00005e 	bleq	82e8 <__aeabi_ddiv+0x19c>
    816c:	e0444005 	sub	r4, r4, r5
    8170:	e021e003 	eor	lr, r1, r3
    8174:	e1925603 	orrs	r5, r2, r3, lsl #12
    8178:	e1a01601 	lsl	r1, r1, #12
    817c:	0a00004c 	beq	82b4 <__aeabi_ddiv+0x168>
    8180:	e1a03603 	lsl	r3, r3, #12
    8184:	e3a05201 	mov	r5, #268435456	; 0x10000000
    8188:	e1853223 	orr	r3, r5, r3, lsr #4
    818c:	e1833c22 	orr	r3, r3, r2, lsr #24
    8190:	e1a02402 	lsl	r2, r2, #8
    8194:	e1855221 	orr	r5, r5, r1, lsr #4
    8198:	e1855c20 	orr	r5, r5, r0, lsr #24
    819c:	e1a06400 	lsl	r6, r0, #8
    81a0:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
    81a4:	e1550003 	cmp	r5, r3
    81a8:	01560002 	cmpeq	r6, r2
    81ac:	e2a440fd 	adc	r4, r4, #253	; 0xfd
    81b0:	e2844c03 	add	r4, r4, #768	; 0x300
    81b4:	2a000001 	bcs	81c0 <__aeabi_ddiv+0x74>
    81b8:	e1b030a3 	lsrs	r3, r3, #1
    81bc:	e1a02062 	rrx	r2, r2
    81c0:	e0566002 	subs	r6, r6, r2
    81c4:	e0c55003 	sbc	r5, r5, r3
    81c8:	e1b030a3 	lsrs	r3, r3, #1
    81cc:	e1a02062 	rrx	r2, r2
    81d0:	e3a00601 	mov	r0, #1048576	; 0x100000
    81d4:	e3a0c702 	mov	r12, #524288	; 0x80000
    81d8:	e056e002 	subs	lr, r6, r2
    81dc:	e0d5e003 	sbcs	lr, r5, r3
    81e0:	20466002 	subcs	r6, r6, r2
    81e4:	21a0500e 	movcs	r5, lr
    81e8:	2180000c 	orrcs	r0, r0, r12
    81ec:	e1b030a3 	lsrs	r3, r3, #1
    81f0:	e1a02062 	rrx	r2, r2
    81f4:	e056e002 	subs	lr, r6, r2
    81f8:	e0d5e003 	sbcs	lr, r5, r3
    81fc:	20466002 	subcs	r6, r6, r2
    8200:	21a0500e 	movcs	r5, lr
    8204:	218000ac 	orrcs	r0, r0, r12, lsr #1
    8208:	e1b030a3 	lsrs	r3, r3, #1
    820c:	e1a02062 	rrx	r2, r2
    8210:	e056e002 	subs	lr, r6, r2
    8214:	e0d5e003 	sbcs	lr, r5, r3
    8218:	20466002 	subcs	r6, r6, r2
    821c:	21a0500e 	movcs	r5, lr
    8220:	2180012c 	orrcs	r0, r0, r12, lsr #2
    8224:	e1b030a3 	lsrs	r3, r3, #1
    8228:	e1a02062 	rrx	r2, r2
    822c:	e056e002 	subs	lr, r6, r2
    8230:	e0d5e003 	sbcs	lr, r5, r3
    8234:	20466002 	subcs	r6, r6, r2
    8238:	21a0500e 	movcs	r5, lr
    823c:	218001ac 	orrcs	r0, r0, r12, lsr #3
    8240:	e195e006 	orrs	lr, r5, r6
    8244:	0a00000d 	beq	8280 <__aeabi_ddiv+0x134>
    8248:	e1a05205 	lsl	r5, r5, #4
    824c:	e1855e26 	orr	r5, r5, r6, lsr #28
    8250:	e1a06206 	lsl	r6, r6, #4
    8254:	e1a03183 	lsl	r3, r3, #3
    8258:	e1833ea2 	orr	r3, r3, r2, lsr #29
    825c:	e1a02182 	lsl	r2, r2, #3
    8260:	e1b0c22c 	lsrs	r12, r12, #4
    8264:	1affffdb 	bne	81d8 <__aeabi_ddiv+0x8c>
    8268:	e3110601 	tst	r1, #1048576	; 0x100000
    826c:	1a000006 	bne	828c <__aeabi_ddiv+0x140>
    8270:	e1811000 	orr	r1, r1, r0
    8274:	e3a00000 	mov	r0, #0
    8278:	e3a0c102 	mov	r12, #-2147483648	; 0x80000000
    827c:	eaffffd5 	b	81d8 <__aeabi_ddiv+0x8c>
    8280:	e3110601 	tst	r1, #1048576	; 0x100000
    8284:	01811000 	orreq	r1, r1, r0
    8288:	03a00000 	moveq	r0, #0
    828c:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    8290:	835c0c07 	cmphi	r12, #1792	; 0x700
    8294:	8affff43 	bhi	7fa8 <__aeabi_dmul+0xec>
    8298:	e055c003 	subs	r12, r5, r3
    829c:	0056c002 	subseq	r12, r6, r2
    82a0:	01b0c0a0 	lsrseq	r12, r0, #1
    82a4:	e2b00000 	adcs	r0, r0, #0
    82a8:	e0a11a04 	adc	r1, r1, r4, lsl #20
    82ac:	e8bd4070 	pop	{r4, r5, r6, lr}
    82b0:	e12fff1e 	bx	lr
    82b4:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
    82b8:	e18e1621 	orr	r1, lr, r1, lsr #12
    82bc:	e09440ac 	adds	r4, r4, r12, lsr #1
    82c0:	c074500c 	rsbsgt	r5, r4, r12
    82c4:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    82c8:	c8bd4070 	popgt	{r4, r5, r6, lr}
    82cc:	c12fff1e 	bxgt	lr
    82d0:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    82d4:	e3a0e000 	mov	lr, #0
    82d8:	e2544001 	subs	r4, r4, #1
    82dc:	eaffff31 	b	7fa8 <__aeabi_dmul+0xec>
    82e0:	e185e006 	orr	lr, r5, r6
    82e4:	eaffff2f 	b	7fa8 <__aeabi_dmul+0xec>
    82e8:	e00c5a23 	and	r5, r12, r3, lsr #20
    82ec:	e134000c 	teq	r4, r12
    82f0:	0135000c 	teqeq	r5, r12
    82f4:	0affff90 	beq	813c <__aeabi_dmul+0x280>
    82f8:	e134000c 	teq	r4, r12
    82fc:	1a000006 	bne	831c <__aeabi_ddiv+0x1d0>
    8300:	e1904601 	orrs	r4, r0, r1, lsl #12
    8304:	1affff8c 	bne	813c <__aeabi_dmul+0x280>
    8308:	e135000c 	teq	r5, r12
    830c:	1affff83 	bne	8120 <__aeabi_dmul+0x264>
    8310:	e1a00002 	mov	r0, r2
    8314:	e1a01003 	mov	r1, r3
    8318:	eaffff87 	b	813c <__aeabi_dmul+0x280>
    831c:	e135000c 	teq	r5, r12
    8320:	1a000004 	bne	8338 <__aeabi_ddiv+0x1ec>
    8324:	e1925603 	orrs	r5, r2, r3, lsl #12
    8328:	0affff68 	beq	80d0 <__aeabi_dmul+0x214>
    832c:	e1a00002 	mov	r0, r2
    8330:	e1a01003 	mov	r1, r3
    8334:	eaffff80 	b	813c <__aeabi_dmul+0x280>
    8338:	e1906081 	orrs	r6, r0, r1, lsl #1
    833c:	11926083 	orrsne	r6, r2, r3, lsl #1
    8340:	1affff48 	bne	8068 <__aeabi_dmul+0x1ac>
    8344:	e1904081 	orrs	r4, r0, r1, lsl #1
    8348:	1affff74 	bne	8120 <__aeabi_dmul+0x264>
    834c:	e1925083 	orrs	r5, r2, r3, lsl #1
    8350:	1affff5e 	bne	80d0 <__aeabi_dmul+0x214>
    8354:	eaffff78 	b	813c <__aeabi_dmul+0x280>

00008358 <__gedf2>:
    8358:	e3e0c000 	mvn	r12, #0
    835c:	ea000002 	b	836c <__cmpdf2+0x4>

00008360 <__ledf2>:
    8360:	e3a0c001 	mov	r12, #1
    8364:	ea000000 	b	836c <__cmpdf2+0x4>

00008368 <__cmpdf2>:
    8368:	e3a0c001 	mov	r12, #1
    836c:	e52dc004 	push	{r12}		; (str r12, [sp, #-4]!)
    8370:	e1a0c081 	lsl	r12, r1, #1
    8374:	e1f0cacc 	mvns	r12, r12, asr #21
    8378:	e1a0c083 	lsl	r12, r3, #1
    837c:	11f0cacc 	mvnsne	r12, r12, asr #21
    8380:	0a00000e 	beq	83c0 <__cmpdf2+0x58>
    8384:	e28dd004 	add	sp, sp, #4
    8388:	e190c081 	orrs	r12, r0, r1, lsl #1
    838c:	0192c083 	orrseq	r12, r2, r3, lsl #1
    8390:	11310003 	teqne	r1, r3
    8394:	01300002 	teqeq	r0, r2
    8398:	03a00000 	moveq	r0, #0
    839c:	012fff1e 	bxeq	lr
    83a0:	e3700000 	cmn	r0, #0
    83a4:	e1310003 	teq	r1, r3
    83a8:	51510003 	cmppl	r1, r3
    83ac:	01500002 	cmpeq	r0, r2
    83b0:	21a00fc3 	asrcs	r0, r3, #31
    83b4:	31e00fc3 	mvncc	r0, r3, asr #31
    83b8:	e3800001 	orr	r0, r0, #1
    83bc:	e12fff1e 	bx	lr
    83c0:	e1a0c081 	lsl	r12, r1, #1
    83c4:	e1f0cacc 	mvns	r12, r12, asr #21
    83c8:	1a000001 	bne	83d4 <__cmpdf2+0x6c>
    83cc:	e190c601 	orrs	r12, r0, r1, lsl #12
    83d0:	1a000004 	bne	83e8 <__cmpdf2+0x80>
    83d4:	e1a0c083 	lsl	r12, r3, #1
    83d8:	e1f0cacc 	mvns	r12, r12, asr #21
    83dc:	1affffe8 	bne	8384 <__cmpdf2+0x1c>
    83e0:	e192c603 	orrs	r12, r2, r3, lsl #12
    83e4:	0affffe6 	beq	8384 <__cmpdf2+0x1c>
    83e8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    83ec:	e12fff1e 	bx	lr

000083f0 <__aeabi_cdrcmple>:
    83f0:	e1a0c000 	mov	r12, r0
    83f4:	e1a00002 	mov	r0, r2
    83f8:	e1a0200c 	mov	r2, r12
    83fc:	e1a0c001 	mov	r12, r1
    8400:	e1a01003 	mov	r1, r3
    8404:	e1a0300c 	mov	r3, r12
    8408:	eaffffff 	b	840c <__aeabi_cdcmpeq>

0000840c <__aeabi_cdcmpeq>:
    840c:	e92d4001 	push	{r0, lr}
    8410:	ebffffd4 	bl	8368 <__cmpdf2>
    8414:	e3500000 	cmp	r0, #0
    8418:	43700000 	cmnmi	r0, #0
    841c:	e8bd4001 	pop	{r0, lr}
    8420:	e12fff1e 	bx	lr

00008424 <__aeabi_dcmpeq>:
    8424:	e52de008 	str	lr, [sp, #-8]!
    8428:	ebfffff7 	bl	840c <__aeabi_cdcmpeq>
    842c:	03a00001 	moveq	r0, #1
    8430:	13a00000 	movne	r0, #0
    8434:	e49de008 	ldr	lr, [sp], #8
    8438:	e12fff1e 	bx	lr

0000843c <__aeabi_dcmplt>:
    843c:	e52de008 	str	lr, [sp, #-8]!
    8440:	ebfffff1 	bl	840c <__aeabi_cdcmpeq>
    8444:	33a00001 	movcc	r0, #1
    8448:	23a00000 	movcs	r0, #0
    844c:	e49de008 	ldr	lr, [sp], #8
    8450:	e12fff1e 	bx	lr

00008454 <__aeabi_dcmple>:
    8454:	e52de008 	str	lr, [sp, #-8]!
    8458:	ebffffeb 	bl	840c <__aeabi_cdcmpeq>
    845c:	93a00001 	movls	r0, #1
    8460:	83a00000 	movhi	r0, #0
    8464:	e49de008 	ldr	lr, [sp], #8
    8468:	e12fff1e 	bx	lr

0000846c <__aeabi_dcmpge>:
    846c:	e52de008 	str	lr, [sp, #-8]!
    8470:	ebffffde 	bl	83f0 <__aeabi_cdrcmple>
    8474:	93a00001 	movls	r0, #1
    8478:	83a00000 	movhi	r0, #0
    847c:	e49de008 	ldr	lr, [sp], #8
    8480:	e12fff1e 	bx	lr

00008484 <__aeabi_dcmpgt>:
    8484:	e52de008 	str	lr, [sp, #-8]!
    8488:	ebffffd8 	bl	83f0 <__aeabi_cdrcmple>
    848c:	33a00001 	movcc	r0, #1
    8490:	23a00000 	movcs	r0, #0
    8494:	e49de008 	ldr	lr, [sp], #8
    8498:	e12fff1e 	bx	lr

0000849c <__aeabi_d2iz>:
    849c:	e1a02081 	lsl	r2, r1, #1
    84a0:	e2922602 	adds	r2, r2, #2097152	; 0x200000
    84a4:	2a00000c 	bcs	84dc <__aeabi_d2iz+0x40>
    84a8:	5a000009 	bpl	84d4 <__aeabi_d2iz+0x38>
    84ac:	e3e03e3e 	mvn	r3, #992	; 0x3e0
    84b0:	e0532ac2 	subs	r2, r3, r2, asr #21
    84b4:	9a00000a 	bls	84e4 <__aeabi_d2iz+0x48>
    84b8:	e1a03581 	lsl	r3, r1, #11
    84bc:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    84c0:	e1833aa0 	orr	r3, r3, r0, lsr #21
    84c4:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    84c8:	e1a00233 	lsr	r0, r3, r2
    84cc:	12600000 	rsbne	r0, r0, #0
    84d0:	e12fff1e 	bx	lr
    84d4:	e3a00000 	mov	r0, #0
    84d8:	e12fff1e 	bx	lr
    84dc:	e1900601 	orrs	r0, r0, r1, lsl #12
    84e0:	1a000002 	bne	84f0 <__aeabi_d2iz+0x54>
    84e4:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
    84e8:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    84ec:	e12fff1e 	bx	lr
    84f0:	e3a00000 	mov	r0, #0
    84f4:	e12fff1e 	bx	lr

000084f8 <__aeabi_d2f>:
    84f8:	e1a02081 	lsl	r2, r1, #1
    84fc:	e2523207 	subs	r3, r2, #1879048192	; 0x70000000
    8500:	2253c602 	subscs	r12, r3, #2097152	; 0x200000
    8504:	227cc57f 	rsbscs	r12, r12, #532676608	; 0x1fc00000
    8508:	9a000006 	bls	8528 <__aeabi_d2f+0x30>
    850c:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
    8510:	e1a02180 	lsl	r2, r0, #3
    8514:	e18c0ea0 	orr	r0, r12, r0, lsr #29
    8518:	e3520102 	cmp	r2, #-2147483648	; 0x80000000
    851c:	e0a00103 	adc	r0, r0, r3, lsl #2
    8520:	03c00001 	biceq	r0, r0, #1
    8524:	e12fff1e 	bx	lr
    8528:	e3110101 	tst	r1, #1073741824	; 0x40000000
    852c:	1a00000f 	bne	8570 <__aeabi_d2f+0x78>
    8530:	e293262e 	adds	r2, r3, #48234496	; 0x2e00000
    8534:	b2010102 	andlt	r0, r1, #-2147483648	; 0x80000000
    8538:	b12fff1e 	bxlt	lr
    853c:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    8540:	e1a02aa2 	lsr	r2, r2, #21
    8544:	e2622018 	rsb	r2, r2, #24
    8548:	e262c020 	rsb	r12, r2, #32
    854c:	e1b03c10 	lsls	r3, r0, r12
    8550:	e1a00230 	lsr	r0, r0, r2
    8554:	13800001 	orrne	r0, r0, #1
    8558:	e1a03581 	lsl	r3, r1, #11
    855c:	e1a035a3 	lsr	r3, r3, #11
    8560:	e1800c13 	orr	r0, r0, r3, lsl r12
    8564:	e1a03233 	lsr	r3, r3, r2
    8568:	e1a03083 	lsl	r3, r3, #1
    856c:	eaffffe6 	b	850c <__aeabi_d2f+0x14>
    8570:	e1f03ac2 	mvns	r3, r2, asr #21
    8574:	1a000003 	bne	8588 <__aeabi_d2f+0x90>
    8578:	e1903601 	orrs	r3, r0, r1, lsl #12
    857c:	13a0047f 	movne	r0, #2130706432	; 0x7f000000
    8580:	13800503 	orrne	r0, r0, #12582912	; 0xc00000
    8584:	112fff1e 	bxne	lr
    8588:	e2010102 	and	r0, r1, #-2147483648	; 0x80000000
    858c:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    8590:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    8594:	e12fff1e 	bx	lr

00008598 <__aeabi_frsub>:
    8598:	e2200102 	eor	r0, r0, #-2147483648	; 0x80000000
    859c:	ea000000 	b	85a4 <__addsf3>

000085a0 <__aeabi_fsub>:
    85a0:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000

000085a4 <__addsf3>:
    85a4:	e1b02080 	lsls	r2, r0, #1
    85a8:	11b03081 	lslsne	r3, r1, #1
    85ac:	11320003 	teqne	r2, r3
    85b0:	11f0cc42 	mvnsne	r12, r2, asr #24
    85b4:	11f0cc43 	mvnsne	r12, r3, asr #24
    85b8:	0a000047 	beq	86dc <__addsf3+0x138>
    85bc:	e1a02c22 	lsr	r2, r2, #24
    85c0:	e0723c23 	rsbs	r3, r2, r3, lsr #24
    85c4:	c0822003 	addgt	r2, r2, r3
    85c8:	c0201001 	eorgt	r1, r0, r1
    85cc:	c0210000 	eorgt	r0, r1, r0
    85d0:	c0201001 	eorgt	r1, r0, r1
    85d4:	b2633000 	rsblt	r3, r3, #0
    85d8:	e3530019 	cmp	r3, #25
    85dc:	812fff1e 	bxhi	lr
    85e0:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    85e4:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    85e8:	e3c004ff 	bic	r0, r0, #-16777216	; 0xff000000
    85ec:	12600000 	rsbne	r0, r0, #0
    85f0:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    85f4:	e3811502 	orr	r1, r1, #8388608	; 0x800000
    85f8:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
    85fc:	12611000 	rsbne	r1, r1, #0
    8600:	e1320003 	teq	r2, r3
    8604:	0a00002e 	beq	86c4 <__addsf3+0x120>
    8608:	e2422001 	sub	r2, r2, #1
    860c:	e0900351 	adds	r0, r0, r1, asr r3
    8610:	e2633020 	rsb	r3, r3, #32
    8614:	e1a01311 	lsl	r1, r1, r3
    8618:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    861c:	5a000001 	bpl	8628 <__addsf3+0x84>
    8620:	e2711000 	rsbs	r1, r1, #0
    8624:	e2e00000 	rsc	r0, r0, #0
    8628:	e3500502 	cmp	r0, #8388608	; 0x800000
    862c:	3a00000b 	bcc	8660 <__addsf3+0xbc>
    8630:	e3500401 	cmp	r0, #16777216	; 0x1000000
    8634:	3a000004 	bcc	864c <__addsf3+0xa8>
    8638:	e1b000a0 	lsrs	r0, r0, #1
    863c:	e1a01061 	rrx	r1, r1
    8640:	e2822001 	add	r2, r2, #1
    8644:	e35200fe 	cmp	r2, #254	; 0xfe
    8648:	2a000038 	bcs	8730 <__addsf3+0x18c>
    864c:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    8650:	e0a00b82 	adc	r0, r0, r2, lsl #23
    8654:	03c00001 	biceq	r0, r0, #1
    8658:	e1800003 	orr	r0, r0, r3
    865c:	e12fff1e 	bx	lr
    8660:	e1b01081 	lsls	r1, r1, #1
    8664:	e0a00000 	adc	r0, r0, r0
    8668:	e3100502 	tst	r0, #8388608	; 0x800000
    866c:	e2422001 	sub	r2, r2, #1
    8670:	1afffff5 	bne	864c <__addsf3+0xa8>
    8674:	e1b0c620 	lsrs	r12, r0, #12
    8678:	01a00600 	lsleq	r0, r0, #12
    867c:	0242200c 	subeq	r2, r2, #12
    8680:	e31008ff 	tst	r0, #16711680	; 0xff0000
    8684:	01a00400 	lsleq	r0, r0, #8
    8688:	02422008 	subeq	r2, r2, #8
    868c:	e310060f 	tst	r0, #15728640	; 0xf00000
    8690:	01a00200 	lsleq	r0, r0, #4
    8694:	02422004 	subeq	r2, r2, #4
    8698:	e3100503 	tst	r0, #12582912	; 0xc00000
    869c:	01a00100 	lsleq	r0, r0, #2
    86a0:	02422002 	subeq	r2, r2, #2
    86a4:	e3500502 	cmp	r0, #8388608	; 0x800000
    86a8:	31a00080 	lslcc	r0, r0, #1
    86ac:	e2d22000 	sbcs	r2, r2, #0
    86b0:	a0800b82 	addge	r0, r0, r2, lsl #23
    86b4:	b2622000 	rsblt	r2, r2, #0
    86b8:	a1800003 	orrge	r0, r0, r3
    86bc:	b1830230 	orrlt	r0, r3, r0, lsr r2
    86c0:	e12fff1e 	bx	lr
    86c4:	e3320000 	teq	r2, #0
    86c8:	e2211502 	eor	r1, r1, #8388608	; 0x800000
    86cc:	02200502 	eoreq	r0, r0, #8388608	; 0x800000
    86d0:	02822001 	addeq	r2, r2, #1
    86d4:	12433001 	subne	r3, r3, #1
    86d8:	eaffffca 	b	8608 <__addsf3+0x64>
    86dc:	e1a03081 	lsl	r3, r1, #1
    86e0:	e1f0cc42 	mvns	r12, r2, asr #24
    86e4:	11f0cc43 	mvnsne	r12, r3, asr #24
    86e8:	0a000013 	beq	873c <__addsf3+0x198>
    86ec:	e1320003 	teq	r2, r3
    86f0:	0a000002 	beq	8700 <__addsf3+0x15c>
    86f4:	e3320000 	teq	r2, #0
    86f8:	01a00001 	moveq	r0, r1
    86fc:	e12fff1e 	bx	lr
    8700:	e1300001 	teq	r0, r1
    8704:	13a00000 	movne	r0, #0
    8708:	112fff1e 	bxne	lr
    870c:	e31204ff 	tst	r2, #-16777216	; 0xff000000
    8710:	1a000002 	bne	8720 <__addsf3+0x17c>
    8714:	e1b00080 	lsls	r0, r0, #1
    8718:	23800102 	orrcs	r0, r0, #-2147483648	; 0x80000000
    871c:	e12fff1e 	bx	lr
    8720:	e2922402 	adds	r2, r2, #33554432	; 0x2000000
    8724:	32800502 	addcc	r0, r0, #8388608	; 0x800000
    8728:	312fff1e 	bxcc	lr
    872c:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    8730:	e383047f 	orr	r0, r3, #2130706432	; 0x7f000000
    8734:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    8738:	e12fff1e 	bx	lr
    873c:	e1f02c42 	mvns	r2, r2, asr #24
    8740:	11a00001 	movne	r0, r1
    8744:	01f03c43 	mvnseq	r3, r3, asr #24
    8748:	11a01000 	movne	r1, r0
    874c:	e1b02480 	lsls	r2, r0, #9
    8750:	01b03481 	lslseq	r3, r1, #9
    8754:	01300001 	teqeq	r0, r1
    8758:	13800501 	orrne	r0, r0, #4194304	; 0x400000
    875c:	e12fff1e 	bx	lr

00008760 <__aeabi_ui2f>:
    8760:	e3a03000 	mov	r3, #0
    8764:	ea000001 	b	8770 <__aeabi_i2f+0x8>

00008768 <__aeabi_i2f>:
    8768:	e2103102 	ands	r3, r0, #-2147483648	; 0x80000000
    876c:	42600000 	rsbmi	r0, r0, #0
    8770:	e1b0c000 	movs	r12, r0
    8774:	012fff1e 	bxeq	lr
    8778:	e383344b 	orr	r3, r3, #1258291200	; 0x4b000000
    877c:	e1a01000 	mov	r1, r0
    8780:	e3a00000 	mov	r0, #0
    8784:	ea00000f 	b	87c8 <__aeabi_l2f+0x30>

00008788 <__aeabi_ul2f>:
    8788:	e1902001 	orrs	r2, r0, r1
    878c:	012fff1e 	bxeq	lr
    8790:	e3a03000 	mov	r3, #0
    8794:	ea000005 	b	87b0 <__aeabi_l2f+0x18>

00008798 <__aeabi_l2f>:
    8798:	e1902001 	orrs	r2, r0, r1
    879c:	012fff1e 	bxeq	lr
    87a0:	e2113102 	ands	r3, r1, #-2147483648	; 0x80000000
    87a4:	5a000001 	bpl	87b0 <__aeabi_l2f+0x18>
    87a8:	e2700000 	rsbs	r0, r0, #0
    87ac:	e2e11000 	rsc	r1, r1, #0
    87b0:	e1b0c001 	movs	r12, r1
    87b4:	01a0c000 	moveq	r12, r0
    87b8:	01a01000 	moveq	r1, r0
    87bc:	03a00000 	moveq	r0, #0
    87c0:	e383345b 	orr	r3, r3, #1526726656	; 0x5b000000
    87c4:	02433201 	subeq	r3, r3, #268435456	; 0x10000000
    87c8:	e2433502 	sub	r3, r3, #8388608	; 0x800000
    87cc:	e3a02017 	mov	r2, #23
    87d0:	e35c0801 	cmp	r12, #65536	; 0x10000
    87d4:	21a0c82c 	lsrcs	r12, r12, #16
    87d8:	22422010 	subcs	r2, r2, #16
    87dc:	e35c0c01 	cmp	r12, #256	; 0x100
    87e0:	21a0c42c 	lsrcs	r12, r12, #8
    87e4:	22422008 	subcs	r2, r2, #8
    87e8:	e35c0010 	cmp	r12, #16
    87ec:	21a0c22c 	lsrcs	r12, r12, #4
    87f0:	22422004 	subcs	r2, r2, #4
    87f4:	e35c0004 	cmp	r12, #4
    87f8:	22422002 	subcs	r2, r2, #2
    87fc:	304220ac 	subcc	r2, r2, r12, lsr #1
    8800:	e05221ac 	subs	r2, r2, r12, lsr #3
    8804:	e0433b82 	sub	r3, r3, r2, lsl #23
    8808:	ba000006 	blt	8828 <__aeabi_l2f+0x90>
    880c:	e0833211 	add	r3, r3, r1, lsl r2
    8810:	e1a0c210 	lsl	r12, r0, r2
    8814:	e2622020 	rsb	r2, r2, #32
    8818:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    881c:	e0a30230 	adc	r0, r3, r0, lsr r2
    8820:	03c00001 	biceq	r0, r0, #1
    8824:	e12fff1e 	bx	lr
    8828:	e2822020 	add	r2, r2, #32
    882c:	e1a0c211 	lsl	r12, r1, r2
    8830:	e2622020 	rsb	r2, r2, #32
    8834:	e190008c 	orrs	r0, r0, r12, lsl #1
    8838:	e0a30231 	adc	r0, r3, r1, lsr r2
    883c:	01c00fac 	biceq	r0, r0, r12, lsr #31
    8840:	e12fff1e 	bx	lr

00008844 <__aeabi_fmul>:
    8844:	e3a0c0ff 	mov	r12, #255	; 0xff
    8848:	e01c2ba0 	ands	r2, r12, r0, lsr #23
    884c:	101c3ba1 	andsne	r3, r12, r1, lsr #23
    8850:	1132000c 	teqne	r2, r12
    8854:	1133000c 	teqne	r3, r12
    8858:	0a00003e 	beq	8958 <__aeabi_fmul+0x114>
    885c:	e0822003 	add	r2, r2, r3
    8860:	e020c001 	eor	r12, r0, r1
    8864:	e1b00480 	lsls	r0, r0, #9
    8868:	11b01481 	lslsne	r1, r1, #9
    886c:	0a000010 	beq	88b4 <__aeabi_fmul+0x70>
    8870:	e3a03302 	mov	r3, #134217728	; 0x8000000
    8874:	e18302a0 	orr	r0, r3, r0, lsr #5
    8878:	e18312a1 	orr	r1, r3, r1, lsr #5
    887c:	e0813190 	umull	r3, r1, r0, r1
    8880:	e20c0102 	and	r0, r12, #-2147483648	; 0x80000000
    8884:	e3510502 	cmp	r1, #8388608	; 0x800000
    8888:	31a01081 	lslcc	r1, r1, #1
    888c:	31811fa3 	orrcc	r1, r1, r3, lsr #31
    8890:	31a03083 	lslcc	r3, r3, #1
    8894:	e1800001 	orr	r0, r0, r1
    8898:	e2c2207f 	sbc	r2, r2, #127	; 0x7f
    889c:	e35200fd 	cmp	r2, #253	; 0xfd
    88a0:	8a00000f 	bhi	88e4 <__aeabi_fmul+0xa0>
    88a4:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    88a8:	e0a00b82 	adc	r0, r0, r2, lsl #23
    88ac:	03c00001 	biceq	r0, r0, #1
    88b0:	e12fff1e 	bx	lr
    88b4:	e3300000 	teq	r0, #0
    88b8:	e20cc102 	and	r12, r12, #-2147483648	; 0x80000000
    88bc:	01a01481 	lsleq	r1, r1, #9
    88c0:	e18c04a0 	orr	r0, r12, r0, lsr #9
    88c4:	e18004a1 	orr	r0, r0, r1, lsr #9
    88c8:	e252207f 	subs	r2, r2, #127	; 0x7f
    88cc:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    88d0:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    88d4:	c12fff1e 	bxgt	lr
    88d8:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    88dc:	e3a03000 	mov	r3, #0
    88e0:	e2522001 	subs	r2, r2, #1
    88e4:	ca000035 	bgt	89c0 <__aeabi_fmul+0x17c>
    88e8:	e3720019 	cmn	r2, #25
    88ec:	d2000102 	andle	r0, r0, #-2147483648	; 0x80000000
    88f0:	d12fff1e 	bxle	lr
    88f4:	e2622000 	rsb	r2, r2, #0
    88f8:	e1b01080 	lsls	r1, r0, #1
    88fc:	e1a01231 	lsr	r1, r1, r2
    8900:	e2622020 	rsb	r2, r2, #32
    8904:	e1a0c210 	lsl	r12, r0, r2
    8908:	e1b00061 	rrxs	r0, r1
    890c:	e2a00000 	adc	r0, r0, #0
    8910:	e193308c 	orrs	r3, r3, r12, lsl #1
    8914:	01c00fac 	biceq	r0, r0, r12, lsr #31
    8918:	e12fff1e 	bx	lr
    891c:	e3320000 	teq	r2, #0
    8920:	e200c102 	and	r12, r0, #-2147483648	; 0x80000000
    8924:	01a00080 	lsleq	r0, r0, #1
    8928:	03100502 	tsteq	r0, #8388608	; 0x800000
    892c:	02422001 	subeq	r2, r2, #1
    8930:	0afffffb 	beq	8924 <__aeabi_fmul+0xe0>
    8934:	e180000c 	orr	r0, r0, r12
    8938:	e3330000 	teq	r3, #0
    893c:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
    8940:	01a01081 	lsleq	r1, r1, #1
    8944:	03110502 	tsteq	r1, #8388608	; 0x800000
    8948:	02433001 	subeq	r3, r3, #1
    894c:	0afffffb 	beq	8940 <__aeabi_fmul+0xfc>
    8950:	e181100c 	orr	r1, r1, r12
    8954:	eaffffc0 	b	885c <__aeabi_fmul+0x18>
    8958:	e00c3ba1 	and	r3, r12, r1, lsr #23
    895c:	e132000c 	teq	r2, r12
    8960:	1133000c 	teqne	r3, r12
    8964:	0a000005 	beq	8980 <__aeabi_fmul+0x13c>
    8968:	e3d0c102 	bics	r12, r0, #-2147483648	; 0x80000000
    896c:	13d1c102 	bicsne	r12, r1, #-2147483648	; 0x80000000
    8970:	1affffe9 	bne	891c <__aeabi_fmul+0xd8>
    8974:	e0200001 	eor	r0, r0, r1
    8978:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    897c:	e12fff1e 	bx	lr
    8980:	e3300000 	teq	r0, #0
    8984:	13300102 	teqne	r0, #-2147483648	; 0x80000000
    8988:	01a00001 	moveq	r0, r1
    898c:	13310000 	teqne	r1, #0
    8990:	13310102 	teqne	r1, #-2147483648	; 0x80000000
    8994:	0a00000d 	beq	89d0 <__aeabi_fmul+0x18c>
    8998:	e132000c 	teq	r2, r12
    899c:	1a000001 	bne	89a8 <__aeabi_fmul+0x164>
    89a0:	e1b02480 	lsls	r2, r0, #9
    89a4:	1a000009 	bne	89d0 <__aeabi_fmul+0x18c>
    89a8:	e133000c 	teq	r3, r12
    89ac:	1a000002 	bne	89bc <__aeabi_fmul+0x178>
    89b0:	e1b03481 	lsls	r3, r1, #9
    89b4:	11a00001 	movne	r0, r1
    89b8:	1a000004 	bne	89d0 <__aeabi_fmul+0x18c>
    89bc:	e0200001 	eor	r0, r0, r1
    89c0:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    89c4:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    89c8:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    89cc:	e12fff1e 	bx	lr
    89d0:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    89d4:	e3800503 	orr	r0, r0, #12582912	; 0xc00000
    89d8:	e12fff1e 	bx	lr

000089dc <__aeabi_fdiv>:
    89dc:	e3a0c0ff 	mov	r12, #255	; 0xff
    89e0:	e01c2ba0 	ands	r2, r12, r0, lsr #23
    89e4:	101c3ba1 	andsne	r3, r12, r1, lsr #23
    89e8:	1132000c 	teqne	r2, r12
    89ec:	1133000c 	teqne	r3, r12
    89f0:	0a00003a 	beq	8ae0 <__aeabi_fdiv+0x104>
    89f4:	e0422003 	sub	r2, r2, r3
    89f8:	e020c001 	eor	r12, r0, r1
    89fc:	e1b01481 	lsls	r1, r1, #9
    8a00:	e1a00480 	lsl	r0, r0, #9
    8a04:	0a00001c 	beq	8a7c <__aeabi_fdiv+0xa0>
    8a08:	e3a03201 	mov	r3, #268435456	; 0x10000000
    8a0c:	e1831221 	orr	r1, r3, r1, lsr #4
    8a10:	e1833220 	orr	r3, r3, r0, lsr #4
    8a14:	e20c0102 	and	r0, r12, #-2147483648	; 0x80000000
    8a18:	e1530001 	cmp	r3, r1
    8a1c:	31a03083 	lslcc	r3, r3, #1
    8a20:	e2a2207d 	adc	r2, r2, #125	; 0x7d
    8a24:	e3a0c502 	mov	r12, #8388608	; 0x800000
    8a28:	e1530001 	cmp	r3, r1
    8a2c:	20433001 	subcs	r3, r3, r1
    8a30:	2180000c 	orrcs	r0, r0, r12
    8a34:	e15300a1 	cmp	r3, r1, lsr #1
    8a38:	204330a1 	subcs	r3, r3, r1, lsr #1
    8a3c:	218000ac 	orrcs	r0, r0, r12, lsr #1
    8a40:	e1530121 	cmp	r3, r1, lsr #2
    8a44:	20433121 	subcs	r3, r3, r1, lsr #2
    8a48:	2180012c 	orrcs	r0, r0, r12, lsr #2
    8a4c:	e15301a1 	cmp	r3, r1, lsr #3
    8a50:	204331a1 	subcs	r3, r3, r1, lsr #3
    8a54:	218001ac 	orrcs	r0, r0, r12, lsr #3
    8a58:	e1b03203 	lsls	r3, r3, #4
    8a5c:	11b0c22c 	lsrsne	r12, r12, #4
    8a60:	1afffff0 	bne	8a28 <__aeabi_fdiv+0x4c>
    8a64:	e35200fd 	cmp	r2, #253	; 0xfd
    8a68:	8affff9d 	bhi	88e4 <__aeabi_fmul+0xa0>
    8a6c:	e1530001 	cmp	r3, r1
    8a70:	e0a00b82 	adc	r0, r0, r2, lsl #23
    8a74:	03c00001 	biceq	r0, r0, #1
    8a78:	e12fff1e 	bx	lr
    8a7c:	e20cc102 	and	r12, r12, #-2147483648	; 0x80000000
    8a80:	e18c04a0 	orr	r0, r12, r0, lsr #9
    8a84:	e292207f 	adds	r2, r2, #127	; 0x7f
    8a88:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    8a8c:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    8a90:	c12fff1e 	bxgt	lr
    8a94:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    8a98:	e3a03000 	mov	r3, #0
    8a9c:	e2522001 	subs	r2, r2, #1
    8aa0:	eaffff8f 	b	88e4 <__aeabi_fmul+0xa0>
    8aa4:	e3320000 	teq	r2, #0
    8aa8:	e200c102 	and	r12, r0, #-2147483648	; 0x80000000
    8aac:	01a00080 	lsleq	r0, r0, #1
    8ab0:	03100502 	tsteq	r0, #8388608	; 0x800000
    8ab4:	02422001 	subeq	r2, r2, #1
    8ab8:	0afffffb 	beq	8aac <__aeabi_fdiv+0xd0>
    8abc:	e180000c 	orr	r0, r0, r12
    8ac0:	e3330000 	teq	r3, #0
    8ac4:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
    8ac8:	01a01081 	lsleq	r1, r1, #1
    8acc:	03110502 	tsteq	r1, #8388608	; 0x800000
    8ad0:	02433001 	subeq	r3, r3, #1
    8ad4:	0afffffb 	beq	8ac8 <__aeabi_fdiv+0xec>
    8ad8:	e181100c 	orr	r1, r1, r12
    8adc:	eaffffc4 	b	89f4 <__aeabi_fdiv+0x18>
    8ae0:	e00c3ba1 	and	r3, r12, r1, lsr #23
    8ae4:	e132000c 	teq	r2, r12
    8ae8:	1a000005 	bne	8b04 <__aeabi_fdiv+0x128>
    8aec:	e1b02480 	lsls	r2, r0, #9
    8af0:	1affffb6 	bne	89d0 <__aeabi_fmul+0x18c>
    8af4:	e133000c 	teq	r3, r12
    8af8:	1affffaf 	bne	89bc <__aeabi_fmul+0x178>
    8afc:	e1a00001 	mov	r0, r1
    8b00:	eaffffb2 	b	89d0 <__aeabi_fmul+0x18c>
    8b04:	e133000c 	teq	r3, r12
    8b08:	1a000003 	bne	8b1c <__aeabi_fdiv+0x140>
    8b0c:	e1b03481 	lsls	r3, r1, #9
    8b10:	0affff97 	beq	8974 <__aeabi_fmul+0x130>
    8b14:	e1a00001 	mov	r0, r1
    8b18:	eaffffac 	b	89d0 <__aeabi_fmul+0x18c>
    8b1c:	e3d0c102 	bics	r12, r0, #-2147483648	; 0x80000000
    8b20:	13d1c102 	bicsne	r12, r1, #-2147483648	; 0x80000000
    8b24:	1affffde 	bne	8aa4 <__aeabi_fdiv+0xc8>
    8b28:	e3d02102 	bics	r2, r0, #-2147483648	; 0x80000000
    8b2c:	1affffa2 	bne	89bc <__aeabi_fmul+0x178>
    8b30:	e3d13102 	bics	r3, r1, #-2147483648	; 0x80000000
    8b34:	1affff8e 	bne	8974 <__aeabi_fmul+0x130>
    8b38:	eaffffa4 	b	89d0 <__aeabi_fmul+0x18c>

00008b3c <__gesf2>:
    8b3c:	e3e0c000 	mvn	r12, #0
    8b40:	ea000002 	b	8b50 <__cmpsf2+0x4>

00008b44 <__lesf2>:
    8b44:	e3a0c001 	mov	r12, #1
    8b48:	ea000000 	b	8b50 <__cmpsf2+0x4>

00008b4c <__cmpsf2>:
    8b4c:	e3a0c001 	mov	r12, #1
    8b50:	e52dc004 	push	{r12}		; (str r12, [sp, #-4]!)
    8b54:	e1a02080 	lsl	r2, r0, #1
    8b58:	e1a03081 	lsl	r3, r1, #1
    8b5c:	e1f0cc42 	mvns	r12, r2, asr #24
    8b60:	11f0cc43 	mvnsne	r12, r3, asr #24
    8b64:	0a000007 	beq	8b88 <__cmpsf2+0x3c>
    8b68:	e28dd004 	add	sp, sp, #4
    8b6c:	e192c0a3 	orrs	r12, r2, r3, lsr #1
    8b70:	11300001 	teqne	r0, r1
    8b74:	50520003 	subspl	r0, r2, r3
    8b78:	81a00fc1 	asrhi	r0, r1, #31
    8b7c:	31e00fc1 	mvncc	r0, r1, asr #31
    8b80:	13800001 	orrne	r0, r0, #1
    8b84:	e12fff1e 	bx	lr
    8b88:	e1f0cc42 	mvns	r12, r2, asr #24
    8b8c:	1a000001 	bne	8b98 <__cmpsf2+0x4c>
    8b90:	e1b0c480 	lsls	r12, r0, #9
    8b94:	1a000003 	bne	8ba8 <__cmpsf2+0x5c>
    8b98:	e1f0cc43 	mvns	r12, r3, asr #24
    8b9c:	1afffff1 	bne	8b68 <__cmpsf2+0x1c>
    8ba0:	e1b0c481 	lsls	r12, r1, #9
    8ba4:	0affffef 	beq	8b68 <__cmpsf2+0x1c>
    8ba8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    8bac:	e12fff1e 	bx	lr

00008bb0 <__aeabi_cfrcmple>:
    8bb0:	e1a0c000 	mov	r12, r0
    8bb4:	e1a00001 	mov	r0, r1
    8bb8:	e1a0100c 	mov	r1, r12
    8bbc:	eaffffff 	b	8bc0 <__aeabi_cfcmpeq>

00008bc0 <__aeabi_cfcmpeq>:
    8bc0:	e92d400f 	push	{r0, r1, r2, r3, lr}
    8bc4:	ebffffe0 	bl	8b4c <__cmpsf2>
    8bc8:	e3500000 	cmp	r0, #0
    8bcc:	43700000 	cmnmi	r0, #0
    8bd0:	e8bd400f 	pop	{r0, r1, r2, r3, lr}
    8bd4:	e12fff1e 	bx	lr

00008bd8 <__aeabi_fcmpeq>:
    8bd8:	e52de008 	str	lr, [sp, #-8]!
    8bdc:	ebfffff7 	bl	8bc0 <__aeabi_cfcmpeq>
    8be0:	03a00001 	moveq	r0, #1
    8be4:	13a00000 	movne	r0, #0
    8be8:	e49de008 	ldr	lr, [sp], #8
    8bec:	e12fff1e 	bx	lr

00008bf0 <__aeabi_fcmplt>:
    8bf0:	e52de008 	str	lr, [sp, #-8]!
    8bf4:	ebfffff1 	bl	8bc0 <__aeabi_cfcmpeq>
    8bf8:	33a00001 	movcc	r0, #1
    8bfc:	23a00000 	movcs	r0, #0
    8c00:	e49de008 	ldr	lr, [sp], #8
    8c04:	e12fff1e 	bx	lr

00008c08 <__aeabi_fcmple>:
    8c08:	e52de008 	str	lr, [sp, #-8]!
    8c0c:	ebffffeb 	bl	8bc0 <__aeabi_cfcmpeq>
    8c10:	93a00001 	movls	r0, #1
    8c14:	83a00000 	movhi	r0, #0
    8c18:	e49de008 	ldr	lr, [sp], #8
    8c1c:	e12fff1e 	bx	lr

00008c20 <__aeabi_fcmpge>:
    8c20:	e52de008 	str	lr, [sp, #-8]!
    8c24:	ebffffe1 	bl	8bb0 <__aeabi_cfrcmple>
    8c28:	93a00001 	movls	r0, #1
    8c2c:	83a00000 	movhi	r0, #0
    8c30:	e49de008 	ldr	lr, [sp], #8
    8c34:	e12fff1e 	bx	lr

00008c38 <__aeabi_fcmpgt>:
    8c38:	e52de008 	str	lr, [sp, #-8]!
    8c3c:	ebffffdb 	bl	8bb0 <__aeabi_cfrcmple>
    8c40:	33a00001 	movcc	r0, #1
    8c44:	23a00000 	movcs	r0, #0
    8c48:	e49de008 	ldr	lr, [sp], #8
    8c4c:	e12fff1e 	bx	lr

00008c50 <__aeabi_f2iz>:
    8c50:	e1a02080 	lsl	r2, r0, #1
    8c54:	e352047f 	cmp	r2, #2130706432	; 0x7f000000
    8c58:	3a000008 	bcc	8c80 <__aeabi_f2iz+0x30>
    8c5c:	e3a0309e 	mov	r3, #158	; 0x9e
    8c60:	e0532c22 	subs	r2, r3, r2, lsr #24
    8c64:	9a000007 	bls	8c88 <__aeabi_f2iz+0x38>
    8c68:	e1a03400 	lsl	r3, r0, #8
    8c6c:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    8c70:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    8c74:	e1a00233 	lsr	r0, r3, r2
    8c78:	12600000 	rsbne	r0, r0, #0
    8c7c:	e12fff1e 	bx	lr
    8c80:	e3a00000 	mov	r0, #0
    8c84:	e12fff1e 	bx	lr
    8c88:	e3720061 	cmn	r2, #97	; 0x61
    8c8c:	1a000001 	bne	8c98 <__aeabi_f2iz+0x48>
    8c90:	e1b02480 	lsls	r2, r0, #9
    8c94:	1a000002 	bne	8ca4 <__aeabi_f2iz+0x54>
    8c98:	e2100102 	ands	r0, r0, #-2147483648	; 0x80000000
    8c9c:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    8ca0:	e12fff1e 	bx	lr
    8ca4:	e3a00000 	mov	r0, #0
    8ca8:	e12fff1e 	bx	lr

00008cac <atexit>:
    8cac:	e1a01000 	mov	r1, r0
    8cb0:	e3a00000 	mov	r0, #0
    8cb4:	e92d4008 	push	{r3, lr}
    8cb8:	e1a02000 	mov	r2, r0
    8cbc:	e1a03000 	mov	r3, r0
    8cc0:	eb000030 	bl	8d88 <__register_exitproc>
    8cc4:	e8bd4008 	pop	{r3, lr}
    8cc8:	e12fff1e 	bx	lr

00008ccc <__errno>:
    8ccc:	e59f3004 	ldr	r3, [pc, #4]	; 8cd8 <__errno+0xc>
    8cd0:	e5930000 	ldr	r0, [r3]
    8cd4:	e12fff1e 	bx	lr
    8cd8:	00009590 	.word	0x00009590

00008cdc <exit>:
    8cdc:	e92d4008 	push	{r3, lr}
    8ce0:	e3a01000 	mov	r1, #0
    8ce4:	e1a04000 	mov	r4, r0
    8ce8:	eb000063 	bl	8e7c <__call_exitprocs>
    8cec:	e59f3018 	ldr	r3, [pc, #24]	; 8d0c <exit+0x30>
    8cf0:	e5930000 	ldr	r0, [r3]
    8cf4:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    8cf8:	e3530000 	cmp	r3, #0
    8cfc:	11a0e00f 	movne	lr, pc
    8d00:	112fff13 	bxne	r3
    8d04:	e1a00004 	mov	r0, r4
    8d08:	eb0000e7 	bl	90ac <_exit>
    8d0c:	000093c0 	.word	0x000093c0

00008d10 <srand>:
    8d10:	e59f3010 	ldr	r3, [pc, #16]	; 8d28 <srand+0x18>
    8d14:	e5933000 	ldr	r3, [r3]
    8d18:	e3a02000 	mov	r2, #0
    8d1c:	e58300a8 	str	r0, [r3, #168]	; 0xa8
    8d20:	e58320ac 	str	r2, [r3, #172]	; 0xac
    8d24:	e12fff1e 	bx	lr
    8d28:	00009590 	.word	0x00009590

00008d2c <rand>:
    8d2c:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    8d30:	e59f3044 	ldr	r3, [pc, #68]	; 8d7c <rand+0x50>
    8d34:	e593c000 	ldr	r12, [r3]
    8d38:	e59f4040 	ldr	r4, [pc, #64]	; 8d80 <rand+0x54>
    8d3c:	e59c20a8 	ldr	r2, [r12, #168]	; 0xa8
    8d40:	e0040492 	mul	r4, r2, r4
    8d44:	e59c10ac 	ldr	r1, [r12, #172]	; 0xac
    8d48:	e59f3034 	ldr	r3, [pc, #52]	; 8d84 <rand+0x58>
    8d4c:	e0244193 	mla	r4, r3, r1, r4
    8d50:	e0810392 	umull	r0, r1, r2, r3
    8d54:	e3a02001 	mov	r2, #1
    8d58:	e0922000 	adds	r2, r2, r0
    8d5c:	e0841001 	add	r1, r4, r1
    8d60:	e3a03000 	mov	r3, #0
    8d64:	e0a33001 	adc	r3, r3, r1
    8d68:	e58c20a8 	str	r2, [r12, #168]	; 0xa8
    8d6c:	e58c30ac 	str	r3, [r12, #172]	; 0xac
    8d70:	e3c30102 	bic	r0, r3, #-2147483648	; 0x80000000
    8d74:	e8bd0010 	ldmfd	sp!, {r4}
    8d78:	e12fff1e 	bx	lr
    8d7c:	00009590 	.word	0x00009590
    8d80:	5851f42d 	.word	0x5851f42d
    8d84:	4c957f2d 	.word	0x4c957f2d

00008d88 <__register_exitproc>:
    8d88:	e59fc0e4 	ldr	r12, [pc, #228]	; 8e74 <__register_exitproc+0xec>
    8d8c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8d90:	e59c4000 	ldr	r4, [r12]
    8d94:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    8d98:	e35c0000 	cmp	r12, #0
    8d9c:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    8da0:	e59c5004 	ldr	r5, [r12, #4]
    8da4:	0584c148 	streq	r12, [r4, #328]	; 0x148
    8da8:	e355001f 	cmp	r5, #31
    8dac:	e24dd010 	sub	sp, sp, #16
    8db0:	e1a06000 	mov	r6, r0
    8db4:	da000015 	ble	8e10 <__register_exitproc+0x88>
    8db8:	e59f00b8 	ldr	r0, [pc, #184]	; 8e78 <__register_exitproc+0xf0>
    8dbc:	e3500000 	cmp	r0, #0
    8dc0:	1a000001 	bne	8dcc <__register_exitproc+0x44>
    8dc4:	e3e00000 	mvn	r0, #0
    8dc8:	ea000018 	b	8e30 <__register_exitproc+0xa8>
    8dcc:	e3a00e19 	mov	r0, #400	; 0x190
    8dd0:	e58d100c 	str	r1, [sp, #12]
    8dd4:	e58d2008 	str	r2, [sp, #8]
    8dd8:	e58d3004 	str	r3, [sp, #4]
    8ddc:	e320f000 	nop	{0}
    8de0:	e250c000 	subs	r12, r0, #0
    8de4:	e59d100c 	ldr	r1, [sp, #12]
    8de8:	e59d2008 	ldr	r2, [sp, #8]
    8dec:	e59d3004 	ldr	r3, [sp, #4]
    8df0:	0afffff3 	beq	8dc4 <__register_exitproc+0x3c>
    8df4:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    8df8:	e3a00000 	mov	r0, #0
    8dfc:	e58c0004 	str	r0, [r12, #4]
    8e00:	e58c5000 	str	r5, [r12]
    8e04:	e584c148 	str	r12, [r4, #328]	; 0x148
    8e08:	e58c0188 	str	r0, [r12, #392]	; 0x188
    8e0c:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    8e10:	e3560000 	cmp	r6, #0
    8e14:	e59c4004 	ldr	r4, [r12, #4]
    8e18:	1a000007 	bne	8e3c <__register_exitproc+0xb4>
    8e1c:	e2843002 	add	r3, r4, #2
    8e20:	e2844001 	add	r4, r4, #1
    8e24:	e78c1103 	str	r1, [r12, r3, lsl #2]
    8e28:	e58c4004 	str	r4, [r12, #4]
    8e2c:	e3a00000 	mov	r0, #0
    8e30:	e28dd010 	add	sp, sp, #16
    8e34:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8e38:	e12fff1e 	bx	lr
    8e3c:	e3a00001 	mov	r0, #1
    8e40:	e1a00410 	lsl	r0, r0, r4
    8e44:	e08c8104 	add	r8, r12, r4, lsl #2
    8e48:	e3560002 	cmp	r6, #2
    8e4c:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    8e50:	e5883108 	str	r3, [r8, #264]	; 0x108
    8e54:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    8e58:	e1877000 	orr	r7, r7, r0
    8e5c:	01830000 	orreq	r0, r3, r0
    8e60:	e1a05008 	mov	r5, r8
    8e64:	e5882088 	str	r2, [r8, #136]	; 0x88
    8e68:	e58c7188 	str	r7, [r12, #392]	; 0x188
    8e6c:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    8e70:	eaffffe9 	b	8e1c <__register_exitproc+0x94>
    8e74:	000093c0 	.word	0x000093c0
    8e78:	00000000 	.word	0x00000000

00008e7c <__call_exitprocs>:
    8e7c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    8e80:	e59f3168 	ldr	r3, [pc, #360]	; 8ff0 <__call_exitprocs+0x174>
    8e84:	e5933000 	ldr	r3, [r3]
    8e88:	e24dd014 	sub	sp, sp, #20
    8e8c:	e58d3004 	str	r3, [sp, #4]
    8e90:	e2833f52 	add	r3, r3, #328	; 0x148
    8e94:	e58d0008 	str	r0, [sp, #8]
    8e98:	e58d300c 	str	r3, [sp, #12]
    8e9c:	e1a07001 	mov	r7, r1
    8ea0:	e3a08001 	mov	r8, #1
    8ea4:	e59d3004 	ldr	r3, [sp, #4]
    8ea8:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    8eac:	e3560000 	cmp	r6, #0
    8eb0:	e59db00c 	ldr	r11, [sp, #12]
    8eb4:	0a000033 	beq	8f88 <__call_exitprocs+0x10c>
    8eb8:	e5965004 	ldr	r5, [r6, #4]
    8ebc:	e2554001 	subs	r4, r5, #1
    8ec0:	5286a088 	addpl	r10, r6, #136	; 0x88
    8ec4:	5285501f 	addpl	r5, r5, #31
    8ec8:	508a5105 	addpl	r5, r10, r5, lsl #2
    8ecc:	5a000007 	bpl	8ef0 <__call_exitprocs+0x74>
    8ed0:	ea000029 	b	8f7c <__call_exitprocs+0x100>
    8ed4:	e5953000 	ldr	r3, [r5]
    8ed8:	e1530007 	cmp	r3, r7
    8edc:	0a000005 	beq	8ef8 <__call_exitprocs+0x7c>
    8ee0:	e2444001 	sub	r4, r4, #1
    8ee4:	e3740001 	cmn	r4, #1
    8ee8:	e2455004 	sub	r5, r5, #4
    8eec:	0a000022 	beq	8f7c <__call_exitprocs+0x100>
    8ef0:	e3570000 	cmp	r7, #0
    8ef4:	1afffff6 	bne	8ed4 <__call_exitprocs+0x58>
    8ef8:	e5963004 	ldr	r3, [r6, #4]
    8efc:	e06a2005 	rsb	r2, r10, r5
    8f00:	e2433001 	sub	r3, r3, #1
    8f04:	e0862002 	add	r2, r6, r2
    8f08:	e1530004 	cmp	r3, r4
    8f0c:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    8f10:	13a01000 	movne	r1, #0
    8f14:	05864004 	streq	r4, [r6, #4]
    8f18:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    8f1c:	e3530000 	cmp	r3, #0
    8f20:	0affffee 	beq	8ee0 <__call_exitprocs+0x64>
    8f24:	e1a02418 	lsl	r2, r8, r4
    8f28:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    8f2c:	e1120001 	tst	r2, r1
    8f30:	e5969004 	ldr	r9, [r6, #4]
    8f34:	0a000016 	beq	8f94 <__call_exitprocs+0x118>
    8f38:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    8f3c:	e1120001 	tst	r2, r1
    8f40:	1a000016 	bne	8fa0 <__call_exitprocs+0x124>
    8f44:	e59d0008 	ldr	r0, [sp, #8]
    8f48:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    8f4c:	e1a0e00f 	mov	lr, pc
    8f50:	e12fff13 	bx	r3
    8f54:	e5963004 	ldr	r3, [r6, #4]
    8f58:	e1530009 	cmp	r3, r9
    8f5c:	1affffd0 	bne	8ea4 <__call_exitprocs+0x28>
    8f60:	e59b3000 	ldr	r3, [r11]
    8f64:	e1530006 	cmp	r3, r6
    8f68:	1affffcd 	bne	8ea4 <__call_exitprocs+0x28>
    8f6c:	e2444001 	sub	r4, r4, #1
    8f70:	e3740001 	cmn	r4, #1
    8f74:	e2455004 	sub	r5, r5, #4
    8f78:	1affffdc 	bne	8ef0 <__call_exitprocs+0x74>
    8f7c:	e59f1070 	ldr	r1, [pc, #112]	; 8ff4 <__call_exitprocs+0x178>
    8f80:	e3510000 	cmp	r1, #0
    8f84:	1a000009 	bne	8fb0 <__call_exitprocs+0x134>
    8f88:	e28dd014 	add	sp, sp, #20
    8f8c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    8f90:	e12fff1e 	bx	lr
    8f94:	e1a0e00f 	mov	lr, pc
    8f98:	e12fff13 	bx	r3
    8f9c:	eaffffec 	b	8f54 <__call_exitprocs+0xd8>
    8fa0:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    8fa4:	e1a0e00f 	mov	lr, pc
    8fa8:	e12fff13 	bx	r3
    8fac:	eaffffe8 	b	8f54 <__call_exitprocs+0xd8>
    8fb0:	e5963004 	ldr	r3, [r6, #4]
    8fb4:	e3530000 	cmp	r3, #0
    8fb8:	e5963000 	ldr	r3, [r6]
    8fbc:	1a000008 	bne	8fe4 <__call_exitprocs+0x168>
    8fc0:	e3530000 	cmp	r3, #0
    8fc4:	0a000006 	beq	8fe4 <__call_exitprocs+0x168>
    8fc8:	e1a00006 	mov	r0, r6
    8fcc:	e58b3000 	str	r3, [r11]
    8fd0:	e320f000 	nop	{0}
    8fd4:	e59b6000 	ldr	r6, [r11]
    8fd8:	e3560000 	cmp	r6, #0
    8fdc:	1affffb5 	bne	8eb8 <__call_exitprocs+0x3c>
    8fe0:	eaffffe8 	b	8f88 <__call_exitprocs+0x10c>
    8fe4:	e1a0b006 	mov	r11, r6
    8fe8:	e1a06003 	mov	r6, r3
    8fec:	eafffff9 	b	8fd8 <__call_exitprocs+0x15c>
    8ff0:	000093c0 	.word	0x000093c0
    8ff4:	00000000 	.word	0x00000000

00008ff8 <register_fini>:
    8ff8:	e92d4008 	push	{r3, lr}
    8ffc:	e59f3010 	ldr	r3, [pc, #16]	; 9014 <register_fini+0x1c>
    9000:	e3530000 	cmp	r3, #0
    9004:	159f000c 	ldrne	r0, [pc, #12]	; 9018 <register_fini+0x20>
    9008:	1bffff27 	blne	8cac <atexit>
    900c:	e8bd4008 	pop	{r3, lr}
    9010:	e12fff1e 	bx	lr
    9014:	000093e8 	.word	0x000093e8
    9018:	0000901c 	.word	0x0000901c

0000901c <__libc_fini_array>:
    901c:	e92d4038 	push	{r3, r4, r5, lr}
    9020:	e59f5030 	ldr	r5, [pc, #48]	; 9058 <__libc_fini_array+0x3c>
    9024:	e59f4030 	ldr	r4, [pc, #48]	; 905c <__libc_fini_array+0x40>
    9028:	e0654004 	rsb	r4, r5, r4
    902c:	e1b04144 	asrs	r4, r4, #2
    9030:	10855104 	addne	r5, r5, r4, lsl #2
    9034:	0a000004 	beq	904c <__libc_fini_array+0x30>
    9038:	e5353004 	ldr	r3, [r5, #-4]!
    903c:	e1a0e00f 	mov	lr, pc
    9040:	e12fff13 	bx	r3
    9044:	e2544001 	subs	r4, r4, #1
    9048:	1afffffa 	bne	9038 <__libc_fini_array+0x1c>
    904c:	eb0000e5 	bl	93e8 <__libc_fini>
    9050:	e8bd4038 	pop	{r3, r4, r5, lr}
    9054:	e12fff1e 	bx	lr
    9058:	00009400 	.word	0x00009400
    905c:	00009404 	.word	0x00009404

00009060 <__cs3_premain>:
    9060:	e92d4008 	push	{r3, lr}
    9064:	eb000017 	bl	90c8 <__libc_init_array>
    9068:	e59f3030 	ldr	r3, [pc, #48]	; 90a0 <__cs3_premain+0x40>
    906c:	e3530000 	cmp	r3, #0
    9070:	15930000 	ldrne	r0, [r3]
    9074:	01a00003 	moveq	r0, r3
    9078:	e59f3024 	ldr	r3, [pc, #36]	; 90a4 <__cs3_premain+0x44>
    907c:	e3530000 	cmp	r3, #0
    9080:	15931000 	ldrne	r1, [r3]
    9084:	01a01003 	moveq	r1, r3
    9088:	e3a02000 	mov	r2, #0
    908c:	ebffea96 	bl	3aec <main>
    9090:	e59f3010 	ldr	r3, [pc, #16]	; 90a8 <__cs3_premain+0x48>
    9094:	e3530000 	cmp	r3, #0
    9098:	1bffff0f 	blne	8cdc <exit>
    909c:	eafffffe 	b	909c <__cs3_premain+0x3c>
	...
    90a8:	00008cdc 	.word	0x00008cdc

000090ac <_exit>:
    90ac:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    90b0:	e3a00018 	mov	r0, #24
    90b4:	e59f1004 	ldr	r1, [pc, #4]	; 90c0 <_exit+0x14>
    90b8:	ef123456 	svc	0x00123456
    90bc:	eafffffe 	b	90bc <_exit+0x10>
    90c0:	00020026 	.word	0x00020026

000090c4 <__cs3_isr_interrupt>:
    90c4:	eafffffe 	b	90c4 <__cs3_isr_interrupt>

000090c8 <__libc_init_array>:
    90c8:	e92d4070 	push	{r4, r5, r6, lr}
    90cc:	e59f506c 	ldr	r5, [pc, #108]	; 9140 <__libc_init_array+0x78>
    90d0:	e59f606c 	ldr	r6, [pc, #108]	; 9144 <__libc_init_array+0x7c>
    90d4:	e0656006 	rsb	r6, r5, r6
    90d8:	e1b06146 	asrs	r6, r6, #2
    90dc:	12455004 	subne	r5, r5, #4
    90e0:	13a04000 	movne	r4, #0
    90e4:	0a000005 	beq	9100 <__libc_init_array+0x38>
    90e8:	e5b53004 	ldr	r3, [r5, #4]!
    90ec:	e2844001 	add	r4, r4, #1
    90f0:	e1a0e00f 	mov	lr, pc
    90f4:	e12fff13 	bx	r3
    90f8:	e1560004 	cmp	r6, r4
    90fc:	1afffff9 	bne	90e8 <__libc_init_array+0x20>
    9100:	e59f5040 	ldr	r5, [pc, #64]	; 9148 <__libc_init_array+0x80>
    9104:	e59f6040 	ldr	r6, [pc, #64]	; 914c <__libc_init_array+0x84>
    9108:	e0656006 	rsb	r6, r5, r6
    910c:	eb0000ad 	bl	93c8 <_init>
    9110:	e1b06146 	asrs	r6, r6, #2
    9114:	12455004 	subne	r5, r5, #4
    9118:	13a04000 	movne	r4, #0
    911c:	0a000005 	beq	9138 <__libc_init_array+0x70>
    9120:	e5b53004 	ldr	r3, [r5, #4]!
    9124:	e2844001 	add	r4, r4, #1
    9128:	e1a0e00f 	mov	lr, pc
    912c:	e12fff13 	bx	r3
    9130:	e1560004 	cmp	r6, r4
    9134:	1afffff9 	bne	9120 <__libc_init_array+0x58>
    9138:	e8bd4070 	pop	{r4, r5, r6, lr}
    913c:	e12fff1e 	bx	lr
    9140:	000093e0 	.word	0x000093e0
    9144:	000093e0 	.word	0x000093e0
    9148:	000093e0 	.word	0x000093e0
    914c:	000093e8 	.word	0x000093e8

Disassembly of section .rodata:

00009158 <bp-0x10>:
    9158:	00776f70 	.word	0x00776f70
    915c:	74727173 	.word	0x74727173
	...

00009168 <bp>:
    9168:	00000000 3ff00000 00000000 3ff80000     .......?.......?

00009178 <dp_l>:
	...
    9180:	43cfd006 3e4cfdeb                       ...C..L>

00009188 <dp_h>:
	...
    9190:	40000000 3fe2b803                       ...@...?

00009198 <npio2_hw>:
    9198:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
    91a8:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
    91b8:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
    91c8:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
    91d8:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
    91e8:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
    91f8:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
    9208:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

00009218 <two_over_pi>:
    9218:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
    9228:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
    9238:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
    9248:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
    9258:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
    9268:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
    9278:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
    9288:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
    9298:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
    92a8:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
    92b8:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
    92c8:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
    92d8:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
    92e8:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
    92f8:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
    9308:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
    9318:	0060e27b 00c08c6b                       {.`.k...

00009320 <init_jk>:
    9320:	00000002 00000003 00000004 00000006     ................

00009330 <PIo2>:
    9330:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
    9340:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
    9350:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
    9360:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

00009370 <atanhi>:
    9370:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
    9380:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?

00009390 <atanlo>:
    9390:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
    93a0:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

000093b0 <TWO52>:
    93b0:	00000000 43300000 00000000 c3300000     ......0C......0.

000093c0 <_global_impure_ptr>:
    93c0:	00009598 00000043                       ....C...

000093c8 <_init>:
    93c8:	e1a0c00d 	mov	r12, sp
    93cc:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    93d0:	e24cb004 	sub	r11, r12, #4
    93d4:	e24bd028 	sub	sp, r11, #40	; 0x28
    93d8:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    93dc:	e12fff1e 	bx	lr

000093e0 <__init_array_start>:
    93e0:	00008ff8 	.word	0x00008ff8

000093e4 <__frame_dummy_init_array_entry>:
    93e4:	00000208                                ....

000093e8 <__libc_fini>:
    93e8:	e1a0c00d 	mov	r12, sp
    93ec:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    93f0:	e24cb004 	sub	r11, r12, #4
    93f4:	e24bd028 	sub	sp, r11, #40	; 0x28
    93f8:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    93fc:	e12fff1e 	bx	lr

00009400 <__fini_array_start>:
    9400:	000001c4 	.word	0x000001c4

00009404 <__cs3_regions>:
    9404:	00000000 	.word	0x00000000
    9408:	00000040 	.word	0x00000040
    940c:	00000040 	.word	0x00000040
    9410:	00009988 	.word	0x00009988
    9414:	000bb4b8 	.word	0x000bb4b8
